ARM GAS  /tmp/ccLX8v6S.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_inverse_f64.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_inverse_f64,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_inverse_f64
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_inverse_f64:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Title:        arm_mat_inverse_f64.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Description:  Floating-point matrix inverse
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
ARM GAS  /tmp/ccLX8v6S.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @addtogroup MatrixInv
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @{
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @brief         Floating-point (64 bit) matrix inverse.
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @param[in]     pSrc      points to input matrix structure
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @param[out]    pDst      points to output matrix structure
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   @return        execution status
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                    - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invert
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** arm_status arm_mat_inverse_f64(
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   const arm_matrix_instance_f64 * pSrc,
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         arm_matrix_instance_f64 * pDst)
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** {
  28              		.loc 1 54 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 128
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 A1B0     		sub	sp, sp, #132
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 136
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  45              		.loc 1 55 14
  46 000a 7B68     		ldr	r3, [r7, #4]
  47 000c 5B68     		ldr	r3, [r3, #4]
  48 000e FB67     		str	r3, [r7, #124]
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  49              		.loc 1 56 14
  50 0010 3B68     		ldr	r3, [r7]
  51 0012 5B68     		ldr	r3, [r3, #4]
  52 0014 FB62     		str	r3, [r7, #44]
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
  53              		.loc 1 60 26
  54 0016 7B68     		ldr	r3, [r7, #4]
  55 0018 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/ccLX8v6S.s 			page 3


  56              		.loc 1 60 12
  57 001a BB62     		str	r3, [r7, #40]
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
  58              		.loc 1 61 26
  59 001c 7B68     		ldr	r3, [r7, #4]
  60 001e 5B88     		ldrh	r3, [r3, #2]
  61              		.loc 1 61 12
  62 0020 7B62     		str	r3, [r7, #36]
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #if defined (ARM_MATH_DSP)
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t maxC;                                /* maximum value in the column */
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0, in1;                /* Temporary input values  */
  63              		.loc 1 66 19
  64 0022 4FF00002 		mov	r2, #0
  65 0026 4FF00003 		mov	r3, #0
  66 002a C7E91423 		strd	r2, [r7, #80]
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
  67              		.loc 1 67 23
  68 002e 0023     		movs	r3, #0
  69 0030 7B64     		str	r3, [r7, #68]
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) ||
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pDst->numRows != pDst->numCols) ||
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pSrc->numRows != pDst->numRows)   )
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   else
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      * Matrix Inverse can be solved using elementary row operations.
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *  Gauss-Jordan Method:
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *        augmented matrix as follows:
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                      _                  _         _         _
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  a11  a12 | 1   0  |       |  X11 X12  |
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |           |        |   =   |           |
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |_ a21  a22 | 0   1 _|       |_ X21 X21 _|
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      3. Begin with the first row. Let i = 1.
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      4. Check to see if the pivot for column i is the greatest of the column.
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The pivot is the element of the main diagonal that is on the current row.
ARM GAS  /tmp/ccLX8v6S.s 			page 4


 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         For instance, if working with row i, then the pivot element is aii.
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         If the pivot is not the most significant of the columns, exchange that row with a ro
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         below it that does contain the most significant value in column i. If the most
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         significant value of the column is zero, then an inverse to that matrix does not exi
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The most significant value of the column is the absolute maximum.
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      5. Divide every element of row i by the pivot.
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         for every element below and above the main diagonal.
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *---------------------------------------------------------------------------------------------
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
  70              		.loc 1 123 12
  71 0032 FB6A     		ldr	r3, [r7, #44]
  72 0034 3B67     		str	r3, [r7, #112]
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
  73              		.loc 1 126 12
  74 0036 BB6A     		ldr	r3, [r7, #40]
  75 0038 BB64     		str	r3, [r7, #72]
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0U)
  76              		.loc 1 129 11
  77 003a 34E0     		b	.L2
  78              	.L7:
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
  79              		.loc 1 132 9
  80 003c BA6A     		ldr	r2, [r7, #40]
  81 003e BB6C     		ldr	r3, [r7, #72]
  82 0040 D31A     		subs	r3, r2, r3
  83 0042 3B64     		str	r3, [r7, #64]
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
  84              		.loc 1 133 13
  85 0044 0CE0     		b	.L3
  86              	.L4:
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
  87              		.loc 1 135 16
  88 0046 3B6F     		ldr	r3, [r7, #112]
  89 0048 03F10802 		add	r2, r3, #8
  90 004c 3A67     		str	r2, [r7, #112]
  91              		.loc 1 135 19
  92 004e 4FF00000 		mov	r0, #0
  93 0052 4FF00001 		mov	r1, #0
  94 0056 C3E90001 		strd	r0, [r3]
ARM GAS  /tmp/ccLX8v6S.s 			page 5


 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
  95              		.loc 1 136 10
  96 005a 3B6C     		ldr	r3, [r7, #64]
  97 005c 013B     		subs	r3, r3, #1
  98 005e 3B64     		str	r3, [r7, #64]
  99              	.L3:
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 100              		.loc 1 133 13
 101 0060 3B6C     		ldr	r3, [r7, #64]
 102 0062 002B     		cmp	r3, #0
 103 0064 EFD1     		bne	.L4
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0;
 104              		.loc 1 140 14
 105 0066 3B6F     		ldr	r3, [r7, #112]
 106 0068 03F10802 		add	r2, r3, #8
 107 006c 3A67     		str	r2, [r7, #112]
 108              		.loc 1 140 17
 109 006e 4FF00000 		mov	r0, #0
 110 0072 A149     		ldr	r1, .L66
 111 0074 C3E90001 		strd	r0, [r3]
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1U;
 112              		.loc 1 143 9
 113 0078 BB6C     		ldr	r3, [r7, #72]
 114 007a 013B     		subs	r3, r3, #1
 115 007c 3B64     		str	r3, [r7, #64]
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 116              		.loc 1 144 13
 117 007e 0CE0     		b	.L5
 118              	.L6:
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 119              		.loc 1 146 16
 120 0080 3B6F     		ldr	r3, [r7, #112]
 121 0082 03F10802 		add	r2, r3, #8
 122 0086 3A67     		str	r2, [r7, #112]
 123              		.loc 1 146 19
 124 0088 4FF00000 		mov	r0, #0
 125 008c 4FF00001 		mov	r1, #0
 126 0090 C3E90001 		strd	r0, [r3]
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 127              		.loc 1 147 10
 128 0094 3B6C     		ldr	r3, [r7, #64]
 129 0096 013B     		subs	r3, r3, #1
 130 0098 3B64     		str	r3, [r7, #64]
 131              	.L5:
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 132              		.loc 1 144 13
 133 009a 3B6C     		ldr	r3, [r7, #64]
 134 009c 002B     		cmp	r3, #0
 135 009e EFD1     		bne	.L6
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccLX8v6S.s 			page 6


 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement loop counter */
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 136              		.loc 1 151 13
 137 00a0 BB6C     		ldr	r3, [r7, #72]
 138 00a2 013B     		subs	r3, r3, #1
 139 00a4 BB64     		str	r3, [r7, #72]
 140              	.L2:
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 141              		.loc 1 129 11
 142 00a6 BB6C     		ldr	r3, [r7, #72]
 143 00a8 002B     		cmp	r3, #0
 144 00aa C7D1     		bne	.L7
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 145              		.loc 1 156 13
 146 00ac 7B6A     		ldr	r3, [r7, #36]
 147 00ae FB63     		str	r3, [r7, #60]
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0U;
 148              		.loc 1 159 7
 149 00b0 0023     		movs	r3, #0
 150 00b2 7B63     		str	r3, [r7, #52]
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0U)
 151              		.loc 1 161 11
 152 00b4 D3E1     		b	.L8
 153              	.L49:
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
 154              		.loc 1 170 24
 155 00b6 7B6B     		ldr	r3, [r7, #52]
 156 00b8 7A6A     		ldr	r2, [r7, #36]
 157 00ba 02FB03F3 		mul	r3, r2, r3
 158              		.loc 1 170 19
 159 00be DB00     		lsls	r3, r3, #3
 160              		.loc 1 170 13
 161 00c0 FA6F     		ldr	r2, [r7, #124]
 162 00c2 1344     		add	r3, r3, r2
 163 00c4 BB67     		str	r3, [r7, #120]
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 164              		.loc 1 174 26
 165 00c6 7B6B     		ldr	r3, [r7, #52]
 166 00c8 7A6A     		ldr	r2, [r7, #36]
ARM GAS  /tmp/ccLX8v6S.s 			page 7


 167 00ca 02FB03F3 		mul	r3, r2, r3
 168              		.loc 1 174 21
 169 00ce DB00     		lsls	r3, r3, #3
 170              		.loc 1 174 14
 171 00d0 FA6A     		ldr	r2, [r7, #44]
 172 00d2 1344     		add	r3, r3, r2
 173 00d4 3B67     		str	r3, [r7, #112]
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 174              		.loc 1 177 10
 175 00d6 BB6F     		ldr	r3, [r7, #120]
 176 00d8 D3E90023 		ldrd	r2, [r3]
 177 00dc C7E91423 		strd	r2, [r7, #80]
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Grab the most significant value from column l */
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       maxC = 0;
 178              		.loc 1 180 12
 179 00e0 4FF00002 		mov	r2, #0
 180 00e4 4FF00003 		mov	r3, #0
 181 00e8 C7E91623 		strd	r2, [r7, #88]
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 182              		.loc 1 181 14
 183 00ec 7B6B     		ldr	r3, [r7, #52]
 184 00ee FB64     		str	r3, [r7, #76]
 185              		.loc 1 181 7
 186 00f0 36E0     		b	.L9
 187              	.L19:
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 188              		.loc 1 183 16
 189 00f2 BB6F     		ldr	r3, [r7, #120]
 190 00f4 93ED007B 		vldr.64	d7, [r3]
 191              		.loc 1 183 61
 192 00f8 B5EEC07B 		vcmpe.f64	d7, #0
 193 00fc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 194 0100 10DD     		ble	.L60
 195              		.loc 1 183 30 discriminator 1
 196 0102 BB6F     		ldr	r3, [r7, #120]
 197 0104 93ED007B 		vldr.64	d7, [r3]
 198              		.loc 1 183 53 discriminator 1
 199 0108 97ED166B 		vldr.64	d6, [r7, #88]
 200 010c B4EEC76B 		vcmpe.f64	d6, d7
 201 0110 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 202 0114 03D5     		bpl	.L61
 203              		.loc 1 183 53 is_stmt 0 discriminator 3
 204 0116 BB6F     		ldr	r3, [r7, #120]
 205 0118 93ED007B 		vldr.64	d7, [r3]
 206 011c 16E0     		b	.L15
 207              	.L61:
 208              		.loc 1 183 53 discriminator 4
 209 011e 97ED167B 		vldr.64	d7, [r7, #88]
 210 0122 13E0     		b	.L15
 211              	.L60:
 212              		.loc 1 183 65 is_stmt 1 discriminator 2
 213 0124 BB6F     		ldr	r3, [r7, #120]
 214 0126 93ED007B 		vldr.64	d7, [r3]
ARM GAS  /tmp/ccLX8v6S.s 			page 8


 215              		.loc 1 183 64 discriminator 2
 216 012a B1EE477B 		vneg.f64	d7, d7
 217              		.loc 1 183 89 discriminator 2
 218 012e 97ED166B 		vldr.64	d6, [r7, #88]
 219 0132 B4EEC76B 		vcmpe.f64	d6, d7
 220 0136 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 221 013a 05D5     		bpl	.L62
 222              		.loc 1 183 82 discriminator 8
 223 013c BB6F     		ldr	r3, [r7, #120]
 224 013e 93ED007B 		vldr.64	d7, [r3]
 225              		.loc 1 183 89 discriminator 8
 226 0142 B1EE477B 		vneg.f64	d7, d7
 227 0146 01E0     		b	.L15
 228              	.L62:
 229              		.loc 1 183 89 is_stmt 0 discriminator 9
 230 0148 97ED167B 		vldr.64	d7, [r7, #88]
 231              	.L15:
 232              		.loc 1 183 14 is_stmt 1 discriminator 12
 233 014c 87ED167B 		vstr.64	d7, [r7, #88]
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 234              		.loc 1 184 15 discriminator 12
 235 0150 7B6A     		ldr	r3, [r7, #36]
 236 0152 DB00     		lsls	r3, r3, #3
 237 0154 BA6F     		ldr	r2, [r7, #120]
 238 0156 1344     		add	r3, r3, r2
 239 0158 BB67     		str	r3, [r7, #120]
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 240              		.loc 1 181 33 discriminator 12
 241 015a FB6C     		ldr	r3, [r7, #76]
 242 015c 0133     		adds	r3, r3, #1
 243 015e FB64     		str	r3, [r7, #76]
 244              	.L9:
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 245              		.loc 1 181 7 discriminator 2
 246 0160 FA6C     		ldr	r2, [r7, #76]
 247 0162 BB6A     		ldr	r3, [r7, #40]
 248 0164 9A42     		cmp	r2, r3
 249 0166 C4D3     		bcc	.L19
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (maxC == 0.0)
 250              		.loc 1 188 10
 251 0168 97ED167B 		vldr.64	d7, [r7, #88]
 252 016c B5EE407B 		vcmp.f64	d7, #0
 253 0170 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 254 0174 02D1     		bne	.L20
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 255              		.loc 1 190 16
 256 0176 6FF00403 		mvn	r3, #4
 257 017a AAE1     		b	.L21
 258              	.L20:
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Restore pInT1  */
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
ARM GAS  /tmp/ccLX8v6S.s 			page 9


 259              		.loc 1 194 13
 260 017c FB6F     		ldr	r3, [r7, #124]
 261 017e BB67     		str	r3, [r7, #120]
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1U;
 262              		.loc 1 197 9
 263 0180 0123     		movs	r3, #1
 264 0182 BB63     		str	r3, [r7, #56]
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is the most significant of the column */
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ( (in > 0.0 ? in : -in) != maxC)
 265              		.loc 1 200 27
 266 0184 97ED147B 		vldr.64	d7, [r7, #80]
 267 0188 B5EEC07B 		vcmpe.f64	d7, #0
 268 018c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 269 0190 02DD     		ble	.L63
 270              		.loc 1 200 27 is_stmt 0 discriminator 1
 271 0192 97ED147B 		vldr.64	d7, [r7, #80]
 272 0196 03E0     		b	.L24
 273              	.L63:
 274              		.loc 1 200 27 discriminator 2
 275 0198 97ED147B 		vldr.64	d7, [r7, #80]
 276 019c B1EE477B 		vneg.f64	d7, d7
 277              	.L24:
 278              		.loc 1 200 10 is_stmt 1 discriminator 4
 279 01a0 97ED166B 		vldr.64	d6, [r7, #88]
 280 01a4 B4EE467B 		vcmp.f64	d7, d6
 281 01a8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 282 01ac 79D0     		beq	.L25
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         i = numRows - (l + 1U);
 283              		.loc 1 203 21
 284 01ae BA6A     		ldr	r2, [r7, #40]
 285 01b0 7B6B     		ldr	r3, [r7, #52]
 286 01b2 D31A     		subs	r3, r2, r3
 287              		.loc 1 203 11
 288 01b4 013B     		subs	r3, r3, #1
 289 01b6 FB64     		str	r3, [r7, #76]
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         while (i > 0U)
 290              		.loc 1 205 15
 291 01b8 70E0     		b	.L26
 292              	.L35:
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 293              		.loc 1 208 36
 294 01ba 7B6A     		ldr	r3, [r7, #36]
 295 01bc 7A6B     		ldr	r2, [r7, #52]
 296 01be 02FB03F3 		mul	r3, r2, r3
 297              		.loc 1 208 25
 298 01c2 DB00     		lsls	r3, r3, #3
 299              		.loc 1 208 17
 300 01c4 BA6F     		ldr	r2, [r7, #120]
 301 01c6 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccLX8v6S.s 			page 10


 302 01c8 7B67     		str	r3, [r7, #116]
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 303              		.loc 1 209 38
 304 01ca 7B6A     		ldr	r3, [r7, #36]
 305 01cc BA6B     		ldr	r2, [r7, #56]
 306 01ce 02FB03F3 		mul	r3, r2, r3
 307              		.loc 1 209 27
 308 01d2 DB00     		lsls	r3, r3, #3
 309              		.loc 1 209 18
 310 01d4 3A6F     		ldr	r2, [r7, #112]
 311 01d6 1344     		add	r3, r3, r2
 312 01d8 FB66     		str	r3, [r7, #108]
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Look for the most significant element to
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           if ((*pInT2 > 0.0 ? *pInT2: -*pInT2) == maxC)
 313              		.loc 1 213 16
 314 01da 7B6F     		ldr	r3, [r7, #116]
 315 01dc 93ED007B 		vldr.64	d7, [r3]
 316              		.loc 1 213 37
 317 01e0 B5EEC07B 		vcmpe.f64	d7, #0
 318 01e4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 319 01e8 03DD     		ble	.L64
 320              		.loc 1 213 37 is_stmt 0 discriminator 1
 321 01ea 7B6F     		ldr	r3, [r7, #116]
 322 01ec 93ED007B 		vldr.64	d7, [r3]
 323 01f0 04E0     		b	.L29
 324              	.L64:
 325              		.loc 1 213 40 is_stmt 1 discriminator 2
 326 01f2 7B6F     		ldr	r3, [r7, #116]
 327 01f4 93ED007B 		vldr.64	d7, [r3]
 328              		.loc 1 213 37 discriminator 2
 329 01f8 B1EE477B 		vneg.f64	d7, d7
 330              	.L29:
 331              		.loc 1 213 14 discriminator 4
 332 01fc 97ED166B 		vldr.64	d6, [r7, #88]
 333 0200 B4EE467B 		vcmp.f64	d7, d6
 334 0204 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 335 0208 42D1     		bne	.L30
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols - l;
 336              		.loc 1 217 15
 337 020a 7A6A     		ldr	r2, [r7, #36]
 338 020c 7B6B     		ldr	r3, [r7, #52]
 339 020e D31A     		subs	r3, r2, r3
 340 0210 3B64     		str	r3, [r7, #64]
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0U)
 341              		.loc 1 219 19
 342 0212 18E0     		b	.L31
 343              	.L32:
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 344              		.loc 1 222 20
ARM GAS  /tmp/ccLX8v6S.s 			page 11


 345 0214 7B6F     		ldr	r3, [r7, #116]
 346 0216 D3E90023 		ldrd	r2, [r3]
 347 021a C7E90623 		strd	r2, [r7, #24]
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 348              		.loc 1 223 21
 349 021e 796F     		ldr	r1, [r7, #116]
 350 0220 01F10803 		add	r3, r1, #8
 351 0224 7B67     		str	r3, [r7, #116]
 352              		.loc 1 223 26
 353 0226 BB6F     		ldr	r3, [r7, #120]
 354 0228 D3E90023 		ldrd	r2, [r3]
 355              		.loc 1 223 24
 356 022c C1E90023 		strd	r2, [r1]
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 357              		.loc 1 224 21
 358 0230 B96F     		ldr	r1, [r7, #120]
 359 0232 01F10803 		add	r3, r1, #8
 360 0236 BB67     		str	r3, [r7, #120]
 361              		.loc 1 224 24
 362 0238 D7E90623 		ldrd	r2, [r7, #24]
 363 023c C1E90023 		strd	r2, [r1]
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement the loop counter */
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 364              		.loc 1 227 16
 365 0240 3B6C     		ldr	r3, [r7, #64]
 366 0242 013B     		subs	r3, r3, #1
 367 0244 3B64     		str	r3, [r7, #64]
 368              	.L31:
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 369              		.loc 1 219 19
 370 0246 3B6C     		ldr	r3, [r7, #64]
 371 0248 002B     		cmp	r3, #0
 372 024a E3D1     		bne	.L32
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns of the destination matrix */
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols;
 373              		.loc 1 231 15
 374 024c 7B6A     		ldr	r3, [r7, #36]
 375 024e 3B64     		str	r3, [r7, #64]
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0U)
 376              		.loc 1 233 19
 377 0250 18E0     		b	.L33
 378              	.L34:
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the destination matrix */
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 379              		.loc 1 236 20
 380 0252 FB6E     		ldr	r3, [r7, #108]
 381 0254 D3E90023 		ldrd	r2, [r3]
 382 0258 C7E90623 		strd	r2, [r7, #24]
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 383              		.loc 1 237 22
 384 025c F96E     		ldr	r1, [r7, #108]
 385 025e 01F10803 		add	r3, r1, #8
ARM GAS  /tmp/ccLX8v6S.s 			page 12


 386 0262 FB66     		str	r3, [r7, #108]
 387              		.loc 1 237 27
 388 0264 3B6F     		ldr	r3, [r7, #112]
 389 0266 D3E90023 		ldrd	r2, [r3]
 390              		.loc 1 237 25
 391 026a C1E90023 		strd	r2, [r1]
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 392              		.loc 1 238 22
 393 026e 396F     		ldr	r1, [r7, #112]
 394 0270 01F10803 		add	r3, r1, #8
 395 0274 3B67     		str	r3, [r7, #112]
 396              		.loc 1 238 25
 397 0276 D7E90623 		ldrd	r2, [r7, #24]
 398 027a C1E90023 		strd	r2, [r1]
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement loop counter */
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 399              		.loc 1 241 16
 400 027e 3B6C     		ldr	r3, [r7, #64]
 401 0280 013B     		subs	r3, r3, #1
 402 0282 3B64     		str	r3, [r7, #64]
 403              	.L33:
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 404              		.loc 1 233 19
 405 0284 3B6C     		ldr	r3, [r7, #64]
 406 0286 002B     		cmp	r3, #0
 407 0288 E3D1     		bne	.L34
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1U;
 408              		.loc 1 245 18
 409 028a 0123     		movs	r3, #1
 410 028c 7B64     		str	r3, [r7, #68]
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 411              		.loc 1 248 13
 412 028e 08E0     		b	.L25
 413              	.L30:
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 414              		.loc 1 252 12
 415 0290 BB6B     		ldr	r3, [r7, #56]
 416 0292 0133     		adds	r3, r3, #1
 417 0294 BB63     		str	r3, [r7, #56]
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Decrement loop counter */
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           i--;
 418              		.loc 1 255 12
 419 0296 FB6C     		ldr	r3, [r7, #76]
 420 0298 013B     		subs	r3, r3, #1
 421 029a FB64     		str	r3, [r7, #76]
 422              	.L26:
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
ARM GAS  /tmp/ccLX8v6S.s 			page 13


 423              		.loc 1 205 15
 424 029c FB6C     		ldr	r3, [r7, #76]
 425 029e 002B     		cmp	r3, #0
 426 02a0 8BD1     		bne	.L35
 427              	.L25:
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1U) && (in == 0.0))
 428              		.loc 1 260 10
 429 02a2 7B6C     		ldr	r3, [r7, #68]
 430 02a4 012B     		cmp	r3, #1
 431 02a6 09D0     		beq	.L36
 432              		.loc 1 260 24 discriminator 1
 433 02a8 97ED147B 		vldr.64	d7, [r7, #80]
 434 02ac B5EE407B 		vcmp.f64	d7, #0
 435 02b0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 436 02b4 02D1     		bne	.L36
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 437              		.loc 1 262 16
 438 02b6 6FF00403 		mvn	r3, #4
 439 02ba 0AE1     		b	.L21
 440              	.L36:
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 441              		.loc 1 266 30
 442 02bc 7B6B     		ldr	r3, [r7, #52]
 443 02be 7A6A     		ldr	r2, [r7, #36]
 444 02c0 02FB03F3 		mul	r3, r2, r3
 445              		.loc 1 266 25
 446 02c4 DB00     		lsls	r3, r3, #3
 447              		.loc 1 266 19
 448 02c6 FA6F     		ldr	r2, [r7, #124]
 449 02c8 1344     		add	r3, r3, r2
 450 02ca 7B61     		str	r3, [r7, #20]
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 451              		.loc 1 267 32
 452 02cc 7B6B     		ldr	r3, [r7, #52]
 453 02ce 7A6A     		ldr	r2, [r7, #36]
 454 02d0 02FB03F3 		mul	r3, r2, r3
 455              		.loc 1 267 27
 456 02d4 DB00     		lsls	r3, r3, #3
 457              		.loc 1 267 20
 458 02d6 FA6A     		ldr	r2, [r7, #44]
 459 02d8 1344     		add	r3, r3, r2
 460 02da 3B61     		str	r3, [r7, #16]
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 461              		.loc 1 270 13
 462 02dc 7B69     		ldr	r3, [r7, #20]
 463 02de BB67     		str	r3, [r7, #120]
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pPivotRowDst;
ARM GAS  /tmp/ccLX8v6S.s 			page 14


 464              		.loc 1 271 13
 465 02e0 3B69     		ldr	r3, [r7, #16]
 466 02e2 7B67     		str	r3, [r7, #116]
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pPivotRowIn;
 467              		.loc 1 274 10
 468 02e4 7B69     		ldr	r3, [r7, #20]
 469 02e6 D3E90023 		ldrd	r2, [r3]
 470 02ea C7E91423 		strd	r2, [r7, #80]
 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = (numCols - l);
 471              		.loc 1 278 9
 472 02ee 7A6A     		ldr	r2, [r7, #36]
 473 02f0 7B6B     		ldr	r3, [r7, #52]
 474 02f2 D31A     		subs	r3, r2, r3
 475 02f4 3B64     		str	r3, [r7, #64]
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 476              		.loc 1 280 13
 477 02f6 15E0     		b	.L37
 478              	.L67:
 479              		.align	2
 480              	.L66:
 481 02f8 0000F03F 		.word	1072693248
 482              	.L38:
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT1;
 483              		.loc 1 284 13
 484 02fc BB6F     		ldr	r3, [r7, #120]
 485 02fe D3E90023 		ldrd	r2, [r3]
 486 0302 C7E90223 		strd	r2, [r7, #8]
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1++ = in1 / in;
 487              		.loc 1 285 15
 488 0306 BB6F     		ldr	r3, [r7, #120]
 489 0308 03F10802 		add	r2, r3, #8
 490 030c BA67     		str	r2, [r7, #120]
 491              		.loc 1 285 24
 492 030e 97ED025B 		vldr.64	d5, [r7, #8]
 493 0312 97ED146B 		vldr.64	d6, [r7, #80]
 494 0316 85EE067B 		vdiv.f64	d7, d5, d6
 495              		.loc 1 285 18
 496 031a 83ED007B 		vstr.64	d7, [r3]
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 497              		.loc 1 288 10
 498 031e 3B6C     		ldr	r3, [r7, #64]
 499 0320 013B     		subs	r3, r3, #1
 500 0322 3B64     		str	r3, [r7, #64]
 501              	.L37:
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 502              		.loc 1 280 13
ARM GAS  /tmp/ccLX8v6S.s 			page 15


 503 0324 3B6C     		ldr	r3, [r7, #64]
 504 0326 002B     		cmp	r3, #0
 505 0328 E8D1     		bne	.L38
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns of the destination matrix */
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numCols;
 506              		.loc 1 292 9
 507 032a 7B6A     		ldr	r3, [r7, #36]
 508 032c 3B64     		str	r3, [r7, #64]
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 509              		.loc 1 294 13
 510 032e 13E0     		b	.L39
 511              	.L40:
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT2;
 512              		.loc 1 298 13
 513 0330 7B6F     		ldr	r3, [r7, #116]
 514 0332 D3E90023 		ldrd	r2, [r3]
 515 0336 C7E90223 		strd	r2, [r7, #8]
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT2++ = in1 / in;
 516              		.loc 1 299 15
 517 033a 7B6F     		ldr	r3, [r7, #116]
 518 033c 03F10802 		add	r2, r3, #8
 519 0340 7A67     		str	r2, [r7, #116]
 520              		.loc 1 299 24
 521 0342 97ED025B 		vldr.64	d5, [r7, #8]
 522 0346 97ED146B 		vldr.64	d6, [r7, #80]
 523 034a 85EE067B 		vdiv.f64	d7, d5, d6
 524              		.loc 1 299 18
 525 034e 83ED007B 		vstr.64	d7, [r3]
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 526              		.loc 1 302 10
 527 0352 3B6C     		ldr	r3, [r7, #64]
 528 0354 013B     		subs	r3, r3, #1
 529 0356 3B64     		str	r3, [r7, #64]
 530              	.L39:
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 531              		.loc 1 294 13
 532 0358 3B6C     		ldr	r3, [r7, #64]
 533 035a 002B     		cmp	r3, #0
 534 035c E8D1     		bne	.L40
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 535              		.loc 1 309 13
 536 035e FB6F     		ldr	r3, [r7, #124]
 537 0360 BB67     		str	r3, [r7, #120]
ARM GAS  /tmp/ccLX8v6S.s 			page 16


 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pOut;
 538              		.loc 1 310 13
 539 0362 FB6A     		ldr	r3, [r7, #44]
 540 0364 7B67     		str	r3, [r7, #116]
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* index used to check for pivot element */
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       i = 0U;
 541              		.loc 1 313 9
 542 0366 0023     		movs	r3, #0
 543 0368 FB64     		str	r3, [r7, #76]
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of rows */
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /*  to be replaced by the sum of that row and a multiple of row i */
 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = numRows;
 544              		.loc 1 317 9
 545 036a BB6A     		ldr	r3, [r7, #40]
 546 036c BB63     		str	r3, [r7, #56]
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (k > 0U)
 547              		.loc 1 319 13
 548 036e 6AE0     		b	.L41
 549              	.L48:
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 550              		.loc 1 322 12
 551 0370 FA6C     		ldr	r2, [r7, #76]
 552 0372 7B6B     		ldr	r3, [r7, #52]
 553 0374 9A42     		cmp	r2, r3
 554 0376 0CD1     		bne	.L42
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 555              		.loc 1 326 28
 556 0378 7A6A     		ldr	r2, [r7, #36]
 557 037a 7B6B     		ldr	r3, [r7, #52]
 558 037c D31A     		subs	r3, r2, r3
 559              		.loc 1 326 17
 560 037e DB00     		lsls	r3, r3, #3
 561 0380 BA6F     		ldr	r2, [r7, #120]
 562 0382 1344     		add	r3, r3, r2
 563 0384 BB67     		str	r3, [r7, #120]
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 += numCols;
 564              		.loc 1 328 17
 565 0386 7B6A     		ldr	r3, [r7, #36]
 566 0388 DB00     		lsls	r3, r3, #3
 567 038a 7A6F     		ldr	r2, [r7, #116]
 568 038c 1344     		add	r3, r3, r2
 569 038e 7B67     		str	r3, [r7, #116]
 570 0390 4EE0     		b	.L43
 571              	.L42:
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         else
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
ARM GAS  /tmp/ccLX8v6S.s 			page 17


 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 572              		.loc 1 333 14
 573 0392 BB6F     		ldr	r3, [r7, #120]
 574 0394 D3E90023 		ldrd	r2, [r3]
 575 0398 C7E91423 		strd	r2, [r7, #80]
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 576              		.loc 1 336 19
 577 039c 7B69     		ldr	r3, [r7, #20]
 578 039e BB66     		str	r3, [r7, #104]
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 579              		.loc 1 337 21
 580 03a0 3B69     		ldr	r3, [r7, #16]
 581 03a2 7B66     		str	r3, [r7, #100]
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           j = (numCols - l);
 582              		.loc 1 341 13
 583 03a4 7A6A     		ldr	r2, [r7, #36]
 584 03a6 7B6B     		ldr	r3, [r7, #52]
 585 03a8 D31A     		subs	r3, r2, r3
 586 03aa 3B64     		str	r3, [r7, #64]
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0U)
 587              		.loc 1 343 17
 588 03ac 1BE0     		b	.L44
 589              	.L45:
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT1;
 590              		.loc 1 347 17
 591 03ae BB6F     		ldr	r3, [r7, #120]
 592 03b0 D3E90023 		ldrd	r2, [r3]
 593 03b4 C7E90223 		strd	r2, [r7, #8]
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 594              		.loc 1 348 44
 595 03b8 BB6E     		ldr	r3, [r7, #104]
 596 03ba 03F10802 		add	r2, r3, #8
 597 03be BA66     		str	r2, [r7, #104]
 598              		.loc 1 348 36
 599 03c0 93ED006B 		vldr.64	d6, [r3]
 600              		.loc 1 348 34
 601 03c4 97ED147B 		vldr.64	d7, [r7, #80]
 602 03c8 26EE077B 		vmul.f64	d7, d6, d7
 603              		.loc 1 348 19
 604 03cc BB6F     		ldr	r3, [r7, #120]
 605 03ce 03F10802 		add	r2, r3, #8
 606 03d2 BA67     		str	r2, [r7, #120]
 607              		.loc 1 348 28
 608 03d4 97ED026B 		vldr.64	d6, [r7, #8]
 609 03d8 36EE477B 		vsub.f64	d7, d6, d7
 610              		.loc 1 348 22
 611 03dc 83ED007B 		vstr.64	d7, [r3]
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccLX8v6S.s 			page 18


 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement the loop counter */
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 612              		.loc 1 351 14
 613 03e0 3B6C     		ldr	r3, [r7, #64]
 614 03e2 013B     		subs	r3, r3, #1
 615 03e4 3B64     		str	r3, [r7, #64]
 616              	.L44:
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 617              		.loc 1 343 17
 618 03e6 3B6C     		ldr	r3, [r7, #64]
 619 03e8 002B     		cmp	r3, #0
 620 03ea E0D1     		bne	.L45
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           j = numCols;
 621              		.loc 1 356 13
 622 03ec 7B6A     		ldr	r3, [r7, #36]
 623 03ee 3B64     		str	r3, [r7, #64]
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0U)
 624              		.loc 1 358 17
 625 03f0 1BE0     		b	.L46
 626              	.L47:
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT2;
 627              		.loc 1 362 17
 628 03f2 7B6F     		ldr	r3, [r7, #116]
 629 03f4 D3E90023 		ldrd	r2, [r3]
 630 03f8 C7E90223 		strd	r2, [r7, #8]
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 631              		.loc 1 363 46
 632 03fc 7B6E     		ldr	r3, [r7, #100]
 633 03fe 03F10802 		add	r2, r3, #8
 634 0402 7A66     		str	r2, [r7, #100]
 635              		.loc 1 363 36
 636 0404 93ED006B 		vldr.64	d6, [r3]
 637              		.loc 1 363 34
 638 0408 97ED147B 		vldr.64	d7, [r7, #80]
 639 040c 26EE077B 		vmul.f64	d7, d6, d7
 640              		.loc 1 363 19
 641 0410 7B6F     		ldr	r3, [r7, #116]
 642 0412 03F10802 		add	r2, r3, #8
 643 0416 7A67     		str	r2, [r7, #116]
 644              		.loc 1 363 28
 645 0418 97ED026B 		vldr.64	d6, [r7, #8]
 646 041c 36EE477B 		vsub.f64	d7, d6, d7
 647              		.loc 1 363 22
 648 0420 83ED007B 		vstr.64	d7, [r3]
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement loop counter */
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 649              		.loc 1 366 14
 650 0424 3B6C     		ldr	r3, [r7, #64]
ARM GAS  /tmp/ccLX8v6S.s 			page 19


 651 0426 013B     		subs	r3, r3, #1
 652 0428 3B64     		str	r3, [r7, #64]
 653              	.L46:
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 654              		.loc 1 358 17
 655 042a 3B6C     		ldr	r3, [r7, #64]
 656 042c 002B     		cmp	r3, #0
 657 042e E0D1     		bne	.L47
 658              	.L43:
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment temporary input pointer */
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 659              		.loc 1 372 23
 660 0430 7B6B     		ldr	r3, [r7, #52]
 661 0432 DB00     		lsls	r3, r3, #3
 662              		.loc 1 372 15
 663 0434 BA6F     		ldr	r2, [r7, #120]
 664 0436 1344     		add	r3, r3, r2
 665 0438 BB67     		str	r3, [r7, #120]
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement loop counter */
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         k--;
 666              		.loc 1 375 10
 667 043a BB6B     		ldr	r3, [r7, #56]
 668 043c 013B     		subs	r3, r3, #1
 669 043e BB63     		str	r3, [r7, #56]
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment pivot index */
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         i++;
 670              		.loc 1 378 10
 671 0440 FB6C     		ldr	r3, [r7, #76]
 672 0442 0133     		adds	r3, r3, #1
 673 0444 FB64     		str	r3, [r7, #76]
 674              	.L41:
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 675              		.loc 1 319 13
 676 0446 BB6B     		ldr	r3, [r7, #56]
 677 0448 002B     		cmp	r3, #0
 678 044a 91D1     		bne	.L48
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 679              		.loc 1 382 10
 680 044c FB6F     		ldr	r3, [r7, #124]
 681 044e 0833     		adds	r3, r3, #8
 682 0450 FB67     		str	r3, [r7, #124]
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 683              		.loc 1 385 14
 684 0452 FB6B     		ldr	r3, [r7, #60]
 685 0454 013B     		subs	r3, r3, #1
 686 0456 FB63     		str	r3, [r7, #60]
ARM GAS  /tmp/ccLX8v6S.s 			page 20


 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 687              		.loc 1 388 8
 688 0458 7B6B     		ldr	r3, [r7, #52]
 689 045a 0133     		adds	r3, r3, #1
 690 045c 7B63     		str	r3, [r7, #52]
 691              	.L8:
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 692              		.loc 1 161 11
 693 045e FB6B     		ldr	r3, [r7, #60]
 694 0460 002B     		cmp	r3, #0
 695 0462 7FF428AE 		bne	.L49
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #else
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0;                     /* Temporary input values  */
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) ||
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pDst->numRows != pDst->numCols) ||
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       (pSrc->numRows != pDst->numRows)   )
 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   else
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      * Matrix Inverse can be solved using elementary row operations.
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *  Gauss-Jordan Method:
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *        augmented matrix as follows:
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                      _  _          _     _      _   _         _         _
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  |  a11  a12  | | | 1   0  |   |       |  X11 X12  |
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |  |            | | |        |   |   =   |           |
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *                     |_ |_ a21  a22 _| | |_0   1 _|  _|       |_ X21 X21 _|
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      3. Begin with the first row. Let i = 1.
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      4. Check to see if the pivot for row i is zero.
 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         The pivot is the element of the main diagonal that is on the current row.
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         For instance, if working with row i, then the pivot element is aii.
ARM GAS  /tmp/ccLX8v6S.s 			page 21


 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         If the pivot is zero, exchange that row with a row below it that does not
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         contain a zero in column i. If this is not possible, then an inverse
 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         to that matrix does not exist.
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      5. Divide every element of row i by the pivot.
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         for every element below and above the main diagonal.
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, src).
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *         Therefore, the matrix to the right of the bar is our solution(dst matrix, dst).
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****      *---------------------------------------------------------------------------------------------
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0U)
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0;
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1U;
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0U)
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0;
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement loop counter */
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 480:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 481:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 482:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 483:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 484:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 485:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 486:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0U;
 487:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 488:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0U)
 489:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
ARM GAS  /tmp/ccLX8v6S.s 			page 22


 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 491:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 492:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 493:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 494:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 495:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 496:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 497:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
 498:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 499:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 500:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 501:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 502:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 503:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 504:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 505:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 506:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 507:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1U;
 508:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 509:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero */
 510:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (*pInT1 == 0.0)
 511:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 512:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 513:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         for (i = (l + 1U); i < numRows; i++)
 514:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 515:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 516:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 517:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 518:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 519:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Check if there is a non zero pivot element to
 520:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 521:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           if (*pInT2 != 0.0)
 522:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 523:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 524:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 525:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0U; j < (numCols - l); j++)
 526:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 527:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 528:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 529:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 530:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 531:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 532:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 533:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0U; j < numCols; j++)
 534:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 535:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 536:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 537:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 538:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 539:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 540:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 541:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1U;
 542:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 543:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 544:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 545:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 546:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
ARM GAS  /tmp/ccLX8v6S.s 			page 23


 547:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 548:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 549:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 550:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 551:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 552:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 553:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1U) && (in == 0.0))
 554:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 555:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 556:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 557:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 558:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 559:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 560:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 561:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 562:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 563:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 564:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pPivotRowDst;
 565:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 566:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 567:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *(pIn + (l * numCols));
 568:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 569:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 570:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
 571:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0U; j < (numCols - l); j++)
 572:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 573:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 574:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 575:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1 = *pInT1 / in;
 576:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1++;
 577:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 578:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0U; j < numCols; j++)
 579:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 580:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 581:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 582:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1 = *pOutT1 / in;
 583:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pOutT1++;
 584:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 585:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 586:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 587:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 588:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 589:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 590:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 591:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut;
 592:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 593:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0U; i < numRows; i++)
 594:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 595:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 596:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 597:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 598:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 599:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 600:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 601:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT1 += numCols;
 602:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 603:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         else
ARM GAS  /tmp/ccLX8v6S.s 			page 24


 604:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 605:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
 606:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 607:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 608:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 609:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 610:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 611:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 612:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 613:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 614:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0U; j < (numCols - l); j++)
 615:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 616:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 617:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 618:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1 = *pInT1 - (in * *pPRT_in++);
 619:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             pInT1++;
 620:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 621:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 622:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 623:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 624:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0U; j < numCols; j++)
 625:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 626:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 627:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 628:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
 629:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             pOutT1++;
 630:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 631:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 632:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 633:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 634:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment temporary input pointer */
 635:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 636:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 637:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 638:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 639:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 640:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 641:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 642:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 643:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 644:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 645:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 646:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 647:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 648:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #if defined (ARM_MATH_DSP) */
 649:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 650:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SUCCESS */
 651:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SUCCESS;
 696              		.loc 1 651 12
 697 0466 0023     		movs	r3, #0
 698 0468 87F83330 		strb	r3, [r7, #51]
 652:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 653:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     if ((flag != 1U) && (in == 0.0))
 699              		.loc 1 653 8
 700 046c 7B6C     		ldr	r3, [r7, #68]
 701 046e 012B     		cmp	r3, #1
 702 0470 2DD0     		beq	.L50
ARM GAS  /tmp/ccLX8v6S.s 			page 25


 703              		.loc 1 653 22 discriminator 1
 704 0472 97ED147B 		vldr.64	d7, [r7, #80]
 705 0476 B5EE407B 		vcmp.f64	d7, #0
 706 047a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 707 047e 26D1     		bne	.L50
 654:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 655:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn = pSrc->pData;
 708              		.loc 1 655 11
 709 0480 7B68     		ldr	r3, [r7, #4]
 710 0482 5B68     		ldr	r3, [r3, #4]
 711 0484 FB67     		str	r3, [r7, #124]
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 712              		.loc 1 656 14
 713 0486 0023     		movs	r3, #0
 714 0488 FB64     		str	r3, [r7, #76]
 715              		.loc 1 656 7
 716 048a 0DE0     		b	.L51
 717              	.L54:
 657:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         if (pIn[i] != 0.0)
 718              		.loc 1 658 16
 719 048c FB6C     		ldr	r3, [r7, #76]
 720 048e DB00     		lsls	r3, r3, #3
 721 0490 FA6F     		ldr	r2, [r7, #124]
 722 0492 1344     		add	r3, r3, r2
 723 0494 93ED007B 		vldr.64	d7, [r3]
 724              		.loc 1 658 12
 725 0498 B5EE407B 		vcmp.f64	d7, #0
 726 049c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 727 04a0 0AD1     		bne	.L65
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 728              		.loc 1 656 43 discriminator 2
 729 04a2 FB6C     		ldr	r3, [r7, #76]
 730 04a4 0133     		adds	r3, r3, #1
 731 04a6 FB64     		str	r3, [r7, #76]
 732              	.L51:
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 733              		.loc 1 656 31 discriminator 1
 734 04a8 BB6A     		ldr	r3, [r7, #40]
 735 04aa 7A6A     		ldr	r2, [r7, #36]
 736 04ac 02FB03F3 		mul	r3, r2, r3
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 737              		.loc 1 656 7 discriminator 1
 738 04b0 FA6C     		ldr	r2, [r7, #76]
 739 04b2 9A42     		cmp	r2, r3
 740 04b4 EAD3     		bcc	.L54
 741 04b6 00E0     		b	.L53
 742              	.L65:
 659:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 743              		.loc 1 659 13
 744 04b8 00BF     		nop
 745              	.L53:
 660:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 661:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 662:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****       if (i == numRows * numCols)
 746              		.loc 1 662 24
 747 04ba BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/ccLX8v6S.s 			page 26


 748 04bc 7A6A     		ldr	r2, [r7, #36]
 749 04be 02FB03F3 		mul	r3, r2, r3
 750              		.loc 1 662 10
 751 04c2 FA6C     		ldr	r2, [r7, #76]
 752 04c4 9A42     		cmp	r2, r3
 753 04c6 02D1     		bne	.L50
 663:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****         status = ARM_MATH_SINGULAR;
 754              		.loc 1 663 16
 755 04c8 FB23     		movs	r3, #251
 756 04ca 87F83330 		strb	r3, [r7, #51]
 757              	.L50:
 664:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 665:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 666:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** 
 667:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Return to application */
 668:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c ****   return (status);
 758              		.loc 1 668 10
 759 04ce 97F93330 		ldrsb	r3, [r7, #51]
 760              	.L21:
 669:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f64.c **** }
 761              		.loc 1 669 1
 762 04d2 1846     		mov	r0, r3
 763 04d4 8437     		adds	r7, r7, #132
 764              	.LCFI3:
 765              		.cfi_def_cfa_offset 4
 766 04d6 BD46     		mov	sp, r7
 767              	.LCFI4:
 768              		.cfi_def_cfa_register 13
 769              		@ sp needed
 770 04d8 5DF8047B 		ldr	r7, [sp], #4
 771              	.LCFI5:
 772              		.cfi_restore 7
 773              		.cfi_def_cfa_offset 0
 774 04dc 7047     		bx	lr
 775              		.cfi_endproc
 776              	.LFE145:
 778 04de 00BF     		.text
 779              	.Letext0:
 780              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 781              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 782              		.file 4 "/usr/include/newlib/sys/_types.h"
 783              		.file 5 "/usr/include/newlib/sys/reent.h"
 784              		.file 6 "/usr/include/newlib/sys/lock.h"
 785              		.file 7 "/usr/include/newlib/math.h"
 786              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccLX8v6S.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_inverse_f64.c
     /tmp/ccLX8v6S.s:17     .text.arm_mat_inverse_f64:0000000000000000 $t
     /tmp/ccLX8v6S.s:25     .text.arm_mat_inverse_f64:0000000000000000 arm_mat_inverse_f64
     /tmp/ccLX8v6S.s:481    .text.arm_mat_inverse_f64:00000000000002f8 $d
     /tmp/ccLX8v6S.s:484    .text.arm_mat_inverse_f64:00000000000002fc $t

NO UNDEFINED SYMBOLS
