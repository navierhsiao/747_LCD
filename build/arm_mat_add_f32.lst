ARM GAS  /tmp/ccvFX7IR.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_add_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_add_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_add_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_add_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Title:        arm_mat_add_f32.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Description:  Floating-point matrix addition
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /**
ARM GAS  /tmp/ccvFX7IR.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @defgroup MatrixAdd Matrix Addition
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   Adds two matrices.
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   \image html MatrixAddition.gif "Addition of two 3 x 3 matrices"
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   The functions check to make sure that
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   <code>pSrcA</code>, <code>pSrcB</code>, and <code>pDst</code> have the same
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   number of rows and columns.
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  */
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /**
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @addtogroup MatrixAdd
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @{
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  */
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /**
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @brief         Floating-point matrix addition.
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @param[in]     pSrcA      points to first input matrix structure
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @param[in]     pSrcB      points to second input matrix structure
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @param[out]    pDst       points to output matrix structure
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   @return        execution status
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****  */
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #if defined(ARM_MATH_NEON)
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** /*
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** Neon version is assuming the matrix is small enough.
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** So no blocking is used for taking into account cache effects.
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** For big matrix, there exist better libraries for Neon.
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** */
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** arm_status arm_mat_add_f32(
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   arm_matrix_instance_f32 * pDst)
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** {
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t inA1, inA2, inB1, inB2, out1, out2;  /* temporary variables */
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t numSamples;                           /* total number of elements in the matrix  */
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   arm_status status;                             /* status of matrix addition */
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   /* Check for matrix mismatch condition */
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   if ((pSrcA->numRows != pSrcB->numRows) ||
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
ARM GAS  /tmp/ccvFX7IR.s 			page 3


  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   {
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   }
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   else
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #endif
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   {
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     float32x4_t vec1;
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     float32x4_t vec2;
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     float32x4_t res;
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Total number of samples in the input matrix */
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples >> 2U;
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Compute 4 outputs at a time.
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     while (blkCnt > 0U)
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     {
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and then store the results in the destination buffer. */
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       vec1 = vld1q_f32(pIn1);
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       vec2 = vld1q_f32(pIn2);
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       res = vaddq_f32(vec1, vec2);
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       vst1q_f32(pOut, res);
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* update pointers to process next samples */
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       pIn1 += 4U;
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       pIn2 += 4U;
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       pOut += 4U;
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement the loop counter */
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     }
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****      ** No loop unrolling is used. */
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples % 0x4U;
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     while (blkCnt > 0U)
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     {
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and then store the results in the destination buffer. */
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = (*pIn1++) + (*pIn2++);
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement the loop counter */
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     }
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* set status as ARM_MATH_SUCCESS */
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SUCCESS;
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   }
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   /* Return to application */
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   return (status);
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** }
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #else
ARM GAS  /tmp/ccvFX7IR.s 			page 4


 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** arm_status arm_mat_add_f32(
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****         arm_matrix_instance_f32 * pDst)
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** {
  28              		.loc 1 150 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
  46              		.loc 1 151 14
  47 000c FB68     		ldr	r3, [r7, #12]
  48 000e 5B68     		ldr	r3, [r3, #4]
  49 0010 7B62     		str	r3, [r7, #36]
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
  50              		.loc 1 152 14
  51 0012 BB68     		ldr	r3, [r7, #8]
  52 0014 5B68     		ldr	r3, [r3, #4]
  53 0016 3B62     		str	r3, [r7, #32]
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  54              		.loc 1 153 14
  55 0018 7B68     		ldr	r3, [r7, #4]
  56 001a 5B68     		ldr	r3, [r3, #4]
  57 001c FB61     		str	r3, [r7, #28]
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t blkCnt;                               /* loop counters */
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   arm_status status;                             /* status of matrix addition */
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   /* Check for matrix mismatch condition */
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   if ((pSrcA->numRows != pSrcB->numRows) ||
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       (pSrcA->numCols != pSrcB->numCols) ||
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       (pSrcA->numRows != pDst->numRows)  ||
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       (pSrcA->numCols != pDst->numCols)    )
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   {
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   }
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   else
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
ARM GAS  /tmp/ccvFX7IR.s 			page 5


 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   {
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Total number of samples in input matrix */
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
  58              		.loc 1 176 34
  59 001e FB68     		ldr	r3, [r7, #12]
  60 0020 1B88     		ldrh	r3, [r3]
  61              		.loc 1 176 18
  62 0022 1A46     		mov	r2, r3
  63              		.loc 1 176 51
  64 0024 FB68     		ldr	r3, [r7, #12]
  65 0026 5B88     		ldrh	r3, [r3, #2]
  66              		.loc 1 176 16
  67 0028 03FB02F3 		mul	r3, r3, r2
  68 002c 7B61     		str	r3, [r7, #20]
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Loop unrolling: Compute 4 outputs at a time */
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples >> 2U;
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     while (blkCnt > 0U)
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     {
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and store result in destination buffer. */
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = *pInA++ + *pInB++;
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = *pInA++ + *pInB++;
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = *pInA++ + *pInB++;
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = *pInA++ + *pInB++;
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement loop counter */
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     }
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Loop unrolling: Compute remaining outputs */
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples % 0x4U;
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #else
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Initialize blkCnt with number of samples */
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples;
  69              		.loc 1 206 12
  70 002e 7B69     		ldr	r3, [r7, #20]
  71 0030 BB61     		str	r3, [r7, #24]
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     while (blkCnt > 0U)
  72              		.loc 1 210 11
  73 0032 13E0     		b	.L2
  74              	.L3:
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     {
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
ARM GAS  /tmp/ccvFX7IR.s 			page 6


 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and store result in destination buffer. */
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = *pInA++ + *pInB++;
  75              		.loc 1 215 22
  76 0034 7B6A     		ldr	r3, [r7, #36]
  77 0036 1A1D     		adds	r2, r3, #4
  78 0038 7A62     		str	r2, [r7, #36]
  79              		.loc 1 215 17
  80 003a 93ED007A 		vldr.32	s14, [r3]
  81              		.loc 1 215 32
  82 003e 3B6A     		ldr	r3, [r7, #32]
  83 0040 1A1D     		adds	r2, r3, #4
  84 0042 3A62     		str	r2, [r7, #32]
  85              		.loc 1 215 27
  86 0044 D3ED007A 		vldr.32	s15, [r3]
  87              		.loc 1 215 12
  88 0048 FB69     		ldr	r3, [r7, #28]
  89 004a 1A1D     		adds	r2, r3, #4
  90 004c FA61     		str	r2, [r7, #28]
  91              		.loc 1 215 25
  92 004e 77EE277A 		vadd.f32	s15, s14, s15
  93              		.loc 1 215 15
  94 0052 C3ED007A 		vstr.32	s15, [r3]
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement loop counter */
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
  95              		.loc 1 218 13
  96 0056 BB69     		ldr	r3, [r7, #24]
  97 0058 013B     		subs	r3, r3, #1
  98 005a BB61     		str	r3, [r7, #24]
  99              	.L2:
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     {
 100              		.loc 1 210 11
 101 005c BB69     		ldr	r3, [r7, #24]
 102 005e 002B     		cmp	r3, #0
 103 0060 E8D1     		bne	.L3
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     }
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SUCCESS;
 104              		.loc 1 222 12
 105 0062 0023     		movs	r3, #0
 106 0064 FB74     		strb	r3, [r7, #19]
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   }
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** 
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   /* Return to application */
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c ****   return (status);
 107              		.loc 1 226 10
 108 0066 97F91330 		ldrsb	r3, [r7, #19]
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_add_f32.c **** }
 109              		.loc 1 227 1
 110 006a 1846     		mov	r0, r3
 111 006c 2C37     		adds	r7, r7, #44
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 4
 114 006e BD46     		mov	sp, r7
 115              	.LCFI4:
ARM GAS  /tmp/ccvFX7IR.s 			page 7


 116              		.cfi_def_cfa_register 13
 117              		@ sp needed
 118 0070 5DF8047B 		ldr	r7, [sp], #4
 119              	.LCFI5:
 120              		.cfi_restore 7
 121              		.cfi_def_cfa_offset 0
 122 0074 7047     		bx	lr
 123              		.cfi_endproc
 124              	.LFE145:
 126              		.text
 127              	.Letext0:
 128              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 129              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 130              		.file 4 "/usr/include/newlib/sys/_types.h"
 131              		.file 5 "/usr/include/newlib/sys/reent.h"
 132              		.file 6 "/usr/include/newlib/sys/lock.h"
 133              		.file 7 "/usr/include/newlib/math.h"
 134              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccvFX7IR.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_add_f32.c
     /tmp/ccvFX7IR.s:17     .text.arm_mat_add_f32:0000000000000000 $t
     /tmp/ccvFX7IR.s:25     .text.arm_mat_add_f32:0000000000000000 arm_mat_add_f32

NO UNDEFINED SYMBOLS
