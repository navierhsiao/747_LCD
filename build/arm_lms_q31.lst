ARM GAS  /tmp/ccLDvLVF.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_lms_q31.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_lms_q31,"ax",%progbits
  17              		.align	1
  18              		.global	arm_lms_q31
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_lms_q31:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c"
   1:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Title:        arm_lms_q31.c
   4:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Description:  Processing function for the Q31 LMS filter
   5:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
   6:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
   9:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** /*
  12:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
  14:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
  16:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
  20:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  *
  22:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  */
  28:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  29:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  31:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** /**
ARM GAS  /tmp/ccLDvLVF.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @ingroup groupFilters
  33:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  */
  34:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  35:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** /**
  36:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @addtogroup LMS
  37:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @{
  38:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  */
  39:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  40:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** /**
  41:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @brief         Processing function for Q31 LMS filter.
  42:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[in]     S         points to an instance of the Q31 LMS filter structure.
  43:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[in]     pSrc      points to the block of input data.
  44:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[in]     pRef      points to the block of reference data.
  45:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[out]    pOut      points to the block of output data.
  46:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[out]    pErr      points to the block of error data.
  47:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @param[in]     blockSize number of samples to process.
  48:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @return        none
  49:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  50:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   @par           Scaling and Overflow Behavior
  51:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    The function is implemented using an internal 64-bit accumulator.
  52:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    The accumulator has a 2.62 format and maintains full precision of the intermedia
  53:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    multiplication results but provides only a single guard bit.
  54:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    Thus, if the accumulator result overflows it wraps around rather than clips.
  55:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    In order to avoid overflows completely the input signal must be scaled down by
  56:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    log2(numTaps) bits.
  57:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    The reference signal should not be scaled down.
  58:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    After all multiply-accumulates are performed, the 2.62 accumulator is shifted
  59:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    and saturated to 1.31 format to yield the final result.
  60:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    The output signal and error signal are in 1.31 format.
  61:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  @par
  62:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    In this filter, filter coefficients are updated for each sample and
  63:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****                    the updation of filter cofficients are saturted.
  64:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****  */
  65:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  66:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** void arm_lms_q31(
  67:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   const arm_lms_instance_q31 * S,
  68:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   const q31_t * pSrc,
  69:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t * pRef,
  70:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t * pOut,
  71:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t * pErr,
  72:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         uint32_t blockSize)
  73:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** {       
  28              		.loc 1 73 1
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 96
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 2DE9F003 		push	{r4, r5, r6, r7, r8, r9}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 9, -4
  42 0004 98B0     		sub	sp, sp, #96
ARM GAS  /tmp/ccLDvLVF.s 			page 3


  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 120
  45 0006 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0008 F860     		str	r0, [r7, #12]
  49 000a B960     		str	r1, [r7, #8]
  50 000c 7A60     		str	r2, [r7, #4]
  51 000e 3B60     		str	r3, [r7]
  74:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t *pState = S->pState;                     /* State pointer */
  52              		.loc 1 74 16
  53 0010 FB68     		ldr	r3, [r7, #12]
  54 0012 5B68     		ldr	r3, [r3, #4]
  55 0014 FB65     		str	r3, [r7, #92]
  75:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
  56              		.loc 1 75 16
  57 0016 FB68     		ldr	r3, [r7, #12]
  58 0018 9B68     		ldr	r3, [r3, #8]
  59 001a FB63     		str	r3, [r7, #60]
  76:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t *pStateCurnt;                            /* Points to the current sample of the state
  77:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t *px, *pb;                                /* Temporary pointers for state and coeffici
  78:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t mu = S->mu;                              /* Adaptive factor */
  60              		.loc 1 78 15
  61 001c FB68     		ldr	r3, [r7, #12]
  62 001e DB68     		ldr	r3, [r3, #12]
  63 0020 BB63     		str	r3, [r7, #56]
  79:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filt
  64              		.loc 1 79 29
  65 0022 FB68     		ldr	r3, [r7, #12]
  66 0024 1B88     		ldrh	r3, [r3]
  67              		.loc 1 79 18
  68 0026 7B63     		str	r3, [r7, #52]
  80:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         uint32_t tapCnt, blkCnt;                       /* Loop counters */
  81:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q63_t acc;                                     /* Accumulator */
  82:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t e = 0;                                   /* Error of data sample */
  69              		.loc 1 82 15
  70 0028 0023     		movs	r3, #0
  71 002a 3B63     		str	r3, [r7, #48]
  83:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t alpha;                                   /* Intermediate constant for taps update */
  84:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t coef;                                    /* Temporary variable for coef */
  85:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         q31_t acc_l, acc_h;                            /* Temporary input */
  86:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         uint32_t uShift = ((uint32_t) S->postShift + 1U);
  72              		.loc 1 86 40
  73 002c FB68     		ldr	r3, [r7, #12]
  74 002e 1B69     		ldr	r3, [r3, #16]
  75              		.loc 1 86 18
  76 0030 0133     		adds	r3, r3, #1
  77 0032 FB62     		str	r3, [r7, #44]
  87:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****         uint32_t lShift = 32U - uShift;                /*  Shift to be applied to the output */
  78              		.loc 1 87 18
  79 0034 FB6A     		ldr	r3, [r7, #44]
  80 0036 C3F12003 		rsb	r3, r3, #32
  81 003a BB62     		str	r3, [r7, #40]
  88:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  89:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
  90:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* pStateCurnt points to the location where the new input data should be written */
  91:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
ARM GAS  /tmp/ccLDvLVF.s 			page 4


  82              		.loc 1 91 20
  83 003c FB68     		ldr	r3, [r7, #12]
  84 003e 5A68     		ldr	r2, [r3, #4]
  85              		.loc 1 91 28
  86 0040 796B     		ldr	r1, [r7, #52]
  87 0042 6FF04043 		mvn	r3, #-1073741824
  88 0046 0B44     		add	r3, r3, r1
  89 0048 9B00     		lsls	r3, r3, #2
  90              		.loc 1 91 15
  91 004a 1344     		add	r3, r3, r2
  92 004c BB65     		str	r3, [r7, #88]
  92:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  93:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* initialise loop count */
  94:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   blkCnt = blockSize;
  93              		.loc 1 94 10
  94 004e FB6F     		ldr	r3, [r7, #124]
  95 0050 BB64     		str	r3, [r7, #72]
  95:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
  96:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   while (blkCnt > 0U)
  96              		.loc 1 96 9
  97 0052 DAE0     		b	.L2
  98              	.L10:
  97:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   {
  98:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Copy the new input sample into the state buffer */
  99:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pSrc++;
  99              		.loc 1 99 27
 100 0054 BA68     		ldr	r2, [r7, #8]
 101 0056 131D     		adds	r3, r2, #4
 102 0058 BB60     		str	r3, [r7, #8]
 103              		.loc 1 99 17
 104 005a BB6D     		ldr	r3, [r7, #88]
 105 005c 191D     		adds	r1, r3, #4
 106 005e B965     		str	r1, [r7, #88]
 107              		.loc 1 99 22
 108 0060 1268     		ldr	r2, [r2]
 109              		.loc 1 99 20
 110 0062 1A60     		str	r2, [r3]
 100:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 101:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 102:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     px = pState;
 111              		.loc 1 102 8
 112 0064 FB6D     		ldr	r3, [r7, #92]
 113 0066 7B65     		str	r3, [r7, #84]
 103:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 104:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 105:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 114              		.loc 1 105 8
 115 0068 FB6B     		ldr	r3, [r7, #60]
 116 006a 3B65     		str	r3, [r7, #80]
 106:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 107:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Set the accumulator to zero */
 108:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     acc = 0;
 117              		.loc 1 108 9
 118 006c 4FF00002 		mov	r2, #0
 119 0070 4FF00003 		mov	r3, #0
 120 0074 C7E91023 		strd	r2, [r7, #64]
 109:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
ARM GAS  /tmp/ccLDvLVF.s 			page 5


 110:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 111:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 112:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 113:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2U;
 114:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 115:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0U)
 116:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 117:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 118:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N] * x[n-N] */
 119:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 120:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 121:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-1] * x[n-N-1] */
 122:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 123:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 124:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-2] * x[n-N-2] */
 125:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 126:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 127:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-3] * x[n-N-3] */
 128:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 129:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 130:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Decrement loop counter */
 131:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 132:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     }
 133:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 134:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling: Compute remaining taps */
 135:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4U;
 136:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 137:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #else
 138:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 139:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize tapCnt with number of samples */
 140:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 121              		.loc 1 140 12
 122 0078 7B6B     		ldr	r3, [r7, #52]
 123 007a FB64     		str	r3, [r7, #76]
 141:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 142:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 143:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 144:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0U)
 124              		.loc 1 144 11
 125 007c 21E0     		b	.L3
 126              	.L4:
 145:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 146:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 147:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 127              		.loc 1 147 27
 128 007e 7B6D     		ldr	r3, [r7, #84]
 129 0080 1A1D     		adds	r2, r3, #4
 130 0082 7A65     		str	r2, [r7, #84]
 131              		.loc 1 147 24
 132 0084 1B68     		ldr	r3, [r3]
 133              		.loc 1 147 15
 134 0086 1846     		mov	r0, r3
 135 0088 4FEAE071 		asr	r1, r0, #31
 136              		.loc 1 147 38
 137 008c 3B6D     		ldr	r3, [r7, #80]
 138 008e 1A1D     		adds	r2, r3, #4
 139 0090 3A65     		str	r2, [r7, #80]
ARM GAS  /tmp/ccLDvLVF.s 			page 6


 140              		.loc 1 147 35
 141 0092 1B68     		ldr	r3, [r3]
 142 0094 1A46     		mov	r2, r3
 143 0096 4FEAE273 		asr	r3, r2, #31
 144              		.loc 1 147 32
 145 009a 02FB01FC 		mul	ip, r2, r1
 146 009e 00FB03F6 		mul	r6, r0, r3
 147 00a2 6644     		add	r6, r6, ip
 148 00a4 A0FB0223 		umull	r2, r3, r0, r2
 149 00a8 F118     		adds	r1, r6, r3
 150 00aa 0B46     		mov	r3, r1
 151              		.loc 1 147 11
 152 00ac D7E91001 		ldrd	r0, [r7, #64]
 153 00b0 10EB0208 		adds	r8, r0, r2
 154 00b4 41EB0309 		adc	r9, r1, r3
 155 00b8 C7E91089 		strd	r8, [r7, #64]
 148:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 149:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 150:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 156              		.loc 1 150 13
 157 00bc FB6C     		ldr	r3, [r7, #76]
 158 00be 013B     		subs	r3, r3, #1
 159 00c0 FB64     		str	r3, [r7, #76]
 160              	.L3:
 144:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 161              		.loc 1 144 11
 162 00c2 FB6C     		ldr	r3, [r7, #76]
 163 00c4 002B     		cmp	r3, #0
 164 00c6 DAD1     		bne	.L4
 151:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     }
 152:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 153:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Converting the result to 1.31 format */
 154:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Calc lower part of acc */
 155:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     acc_l = acc & 0xffffffff;
 165              		.loc 1 155 11
 166 00c8 3B6C     		ldr	r3, [r7, #64]
 167 00ca 7B62     		str	r3, [r7, #36]
 156:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 157:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Calc upper part of acc */
 158:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     acc_h = (acc >> 32) & 0xffffffff;
 168              		.loc 1 158 25
 169 00cc D7E91001 		ldrd	r0, [r7, #64]
 170 00d0 4FF00002 		mov	r2, #0
 171 00d4 4FF00003 		mov	r3, #0
 172 00d8 0A00     		movs	r2, r1
 173 00da 0023     		movs	r3, #0
 174              		.loc 1 158 11
 175 00dc 1346     		mov	r3, r2
 176 00de 3B62     		str	r3, [r7, #32]
 159:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 160:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
 177              		.loc 1 160 11
 178 00e0 7A6A     		ldr	r2, [r7, #36]
 179              		.loc 1 160 28
 180 00e2 BB6A     		ldr	r3, [r7, #40]
 181 00e4 22FA03F3 		lsr	r3, r2, r3
 182              		.loc 1 160 46
ARM GAS  /tmp/ccLDvLVF.s 			page 7


 183 00e8 396A     		ldr	r1, [r7, #32]
 184 00ea FA6A     		ldr	r2, [r7, #44]
 185 00ec 01FA02F2 		lsl	r2, r1, r2
 186              		.loc 1 160 38
 187 00f0 1343     		orrs	r3, r3, r2
 188              		.loc 1 160 9
 189 00f2 1A46     		mov	r2, r3
 190 00f4 4FF00003 		mov	r3, #0
 191 00f8 C7E91023 		strd	r2, [r7, #64]
 161:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 162:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Store the result from accumulator into the destination buffer. */
 163:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pOut++ = (q31_t) acc;
 192              		.loc 1 163 10
 193 00fc 3B68     		ldr	r3, [r7]
 194 00fe 1A1D     		adds	r2, r3, #4
 195 0100 3A60     		str	r2, [r7]
 196              		.loc 1 163 15
 197 0102 3A6C     		ldr	r2, [r7, #64]
 198              		.loc 1 163 13
 199 0104 1A60     		str	r2, [r3]
 164:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 165:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Compute and store error */
 166:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     e = *pRef++ - (q31_t) acc;
 200              		.loc 1 166 14
 201 0106 7B68     		ldr	r3, [r7, #4]
 202 0108 1A1D     		adds	r2, r3, #4
 203 010a 7A60     		str	r2, [r7, #4]
 204              		.loc 1 166 9
 205 010c 1A68     		ldr	r2, [r3]
 206              		.loc 1 166 19
 207 010e 3B6C     		ldr	r3, [r7, #64]
 208              		.loc 1 166 7
 209 0110 D31A     		subs	r3, r2, r3
 210 0112 3B63     		str	r3, [r7, #48]
 167:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pErr++ = e;
 211              		.loc 1 167 10
 212 0114 BB6F     		ldr	r3, [r7, #120]
 213 0116 1A1D     		adds	r2, r3, #4
 214 0118 BA67     		str	r2, [r7, #120]
 215              		.loc 1 167 13
 216 011a 3A6B     		ldr	r2, [r7, #48]
 217 011c 1A60     		str	r2, [r3]
 168:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 169:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Compute alpha i.e. intermediate constant for taps update */
 170:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     alpha = (q31_t) (((q63_t) e * mu) >> 31);
 218              		.loc 1 170 23
 219 011e 3B6B     		ldr	r3, [r7, #48]
 220 0120 1846     		mov	r0, r3
 221 0122 4FEAE071 		asr	r1, r0, #31
 222              		.loc 1 170 33
 223 0126 BB6B     		ldr	r3, [r7, #56]
 224 0128 1A46     		mov	r2, r3
 225 012a 4FEAE273 		asr	r3, r2, #31
 226 012e 02FB01FC 		mul	ip, r2, r1
 227 0132 00FB03F6 		mul	r6, r0, r3
 228 0136 6644     		add	r6, r6, ip
 229 0138 A0FB0223 		umull	r2, r3, r0, r2
ARM GAS  /tmp/ccLDvLVF.s 			page 8


 230 013c F118     		adds	r1, r6, r3
 231 013e 0B46     		mov	r3, r1
 232              		.loc 1 170 39
 233 0140 4FF00000 		mov	r0, #0
 234 0144 4FF00001 		mov	r1, #0
 235 0148 D00F     		lsrs	r0, r2, #31
 236 014a 40EA4300 		orr	r0, r0, r3, lsl #1
 237 014e D917     		asrs	r1, r3, #31
 238              		.loc 1 170 11
 239 0150 0346     		mov	r3, r0
 240 0152 FB61     		str	r3, [r7, #28]
 171:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 172:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 173:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Advance state pointer by 1 for the next sample */
 174:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     px = pState++;
 241              		.loc 1 174 16
 242 0154 FB6D     		ldr	r3, [r7, #92]
 243 0156 1A1D     		adds	r2, r3, #4
 244 0158 FA65     		str	r2, [r7, #92]
 245              		.loc 1 174 8
 246 015a 7B65     		str	r3, [r7, #84]
 175:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 176:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 177:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 247              		.loc 1 177 8
 248 015c FB6B     		ldr	r3, [r7, #60]
 249 015e 3B65     		str	r3, [r7, #80]
 178:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 179:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 180:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 181:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 182:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2U;
 183:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 184:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Update filter coefficients */
 185:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0U)
 186:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 187:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 188:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 189:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* coef is in 2.30 format */
 190:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 191:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* get coef in 1.31 format by left shifting */
 192:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1U));
 193:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* update coefficient buffer to next coefficient */
 194:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       pb++;
 195:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 196:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 197:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1U));
 198:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       pb++;
 199:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 200:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 201:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1U));
 202:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       pb++;
 203:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 204:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 205:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1U));
 206:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       pb++;
 207:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
ARM GAS  /tmp/ccLDvLVF.s 			page 9


 208:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Decrement loop counter */
 209:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 210:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     }
 211:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 212:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling: Compute remaining taps */
 213:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4U;
 214:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 215:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #else
 216:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 217:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Initialize tapCnt with number of samples */
 218:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 250              		.loc 1 218 12
 251 0160 7B6B     		ldr	r3, [r7, #52]
 252 0162 FB64     		str	r3, [r7, #76]
 219:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 220:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 221:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 222:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0U)
 253              		.loc 1 222 11
 254 0164 4BE0     		b	.L5
 255              	.L9:
 223:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 224:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 225:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 256              		.loc 1 225 24
 257 0166 FB69     		ldr	r3, [r7, #28]
 258 0168 1846     		mov	r0, r3
 259 016a 4FEAE071 		asr	r1, r0, #31
 260              		.loc 1 225 44
 261 016e 7B6D     		ldr	r3, [r7, #84]
 262 0170 1A1D     		adds	r2, r3, #4
 263 0172 7A65     		str	r2, [r7, #84]
 264              		.loc 1 225 41
 265 0174 1B68     		ldr	r3, [r3]
 266 0176 1A46     		mov	r2, r3
 267 0178 4FEAE273 		asr	r3, r2, #31
 268              		.loc 1 225 38
 269 017c 02FB01FC 		mul	ip, r2, r1
 270 0180 00FB03F6 		mul	r6, r0, r3
 271 0184 6644     		add	r6, r6, ip
 272 0186 A0FB0223 		umull	r2, r3, r0, r2
 273 018a F118     		adds	r1, r6, r3
 274 018c 0B46     		mov	r3, r1
 275              		.loc 1 225 49
 276 018e 4FF00000 		mov	r0, #0
 277 0192 4FF00001 		mov	r1, #0
 278 0196 1800     		movs	r0, r3
 279 0198 D917     		asrs	r1, r3, #31
 280              		.loc 1 225 12
 281 019a 0346     		mov	r3, r0
 282 019c BB61     		str	r3, [r7, #24]
 226:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1U));
 283              		.loc 1 226 37
 284 019e 3B6D     		ldr	r3, [r7, #80]
 285 01a0 1B68     		ldr	r3, [r3]
 286              		.loc 1 226 29
 287 01a2 1846     		mov	r0, r3
ARM GAS  /tmp/ccLDvLVF.s 			page 10


 288 01a4 4FEAE071 		asr	r1, r0, #31
 289              		.loc 1 226 50
 290 01a8 BB69     		ldr	r3, [r7, #24]
 291 01aa 5B00     		lsls	r3, r3, #1
 292 01ac 1A46     		mov	r2, r3
 293 01ae 4FEAE273 		asr	r3, r2, #31
 294              		.loc 1 226 13
 295 01b2 8418     		adds	r4, r0, r2
 296 01b4 41EB0305 		adc	r5, r1, r3
 297 01b8 C7E90445 		strd	r4, [r7, #16]
 298              	.LBB4:
 299              	.LBB5:
 300              		.file 2 "./Libraries/CMSIS/DSP/Include/arm_math.h"
   1:./Libraries/CMSIS/DSP/Include/arm_math.h **** /******************************************************************************
   2:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @file     arm_math.h
   3:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @brief    Public header file for CMSIS DSP Library
   4:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @version  V1.6.0
   5:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @date     18. March 2019
   6:./Libraries/CMSIS/DSP/Include/arm_math.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/DSP/Include/arm_math.h **** /*
   8:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved.
   9:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  10:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  12:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  16:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  18:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * limitations under the License.
  23:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
  24:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
  25:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
  26:./Libraries/CMSIS/DSP/Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  27:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  28:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Introduction
  29:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  30:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  31:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  32:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  33:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  34:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  35:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Basic math functions
  36:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Fast math functions
  37:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Complex math functions
  38:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Filters
  39:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Matrix functions
  40:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Transform functions
  41:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Motor control functions
  42:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Statistical functions
  43:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Support functions
  44:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Interpolation functions
ARM GAS  /tmp/ccLDvLVF.s 			page 11


  45:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  46:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  47:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  48:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  49:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Using the Library
  50:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  51:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  52:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  53:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  54:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  55:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  56:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  57:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  58:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  59:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  60:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  61:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  62:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  63:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  64:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  65:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  66:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  67:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (Armv8-M Baseline, Little endian)
  68:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (Armv8-M Mainline, Little endian)
  69:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (Armv8-M Mainline, Little endian, Single Precision Floating Point 
  70:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (Armv8-M Mainline, Little endian, DSP instructions)
  71:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (Armv8-M Mainline, Little endian, DSP instructions, Single Precis
  72:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  73:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  74:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  75:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  76:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  77:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  78:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Examples
  79:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * --------
  80:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  81:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  82:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  83:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Toolchain Support
  84:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  85:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  86:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has been developed and tested with MDK version 5.14.0.0
  87:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  88:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  89:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Building the Library
  90:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  91:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  92:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains a project file to rebuild libraries on MDK toolchain in the <co
  93:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
  94:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  95:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  96:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
  97:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  98:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Preprocessor Macros
  99:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 100:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 101:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Each library project have different preprocessor macros.
ARM GAS  /tmp/ccLDvLVF.s 			page 12


 102:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 103:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 104:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 105:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 106:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 107:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 108:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 109:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 110:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 111:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 112:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 113:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 114:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 115:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_LOOPUNROLL:
 116:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 117:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_LOOPUNROLL to enable manual loop unrolling in DSP functions
 118:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 119:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON:
 120:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 121:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON to enable Neon versions of the DSP functions.
 122:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * It is not enabled by default when Neon is available because performances are 
 123:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * dependent on the compiler and target architecture.
 124:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 125:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON_EXPERIMENTAL:
 126:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 127:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON_EXPERIMENTAL to enable experimental Neon versions of 
 128:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * of some DSP functions. Experimental Neon versions currently do not have better
 129:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * performances than the scalar versions.
 130:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 131:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 132:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 133:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * -----------------------------
 134:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 135:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 136:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |File/Folder                      |Content                                                    
 137:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |---------------------------------|-----------------------------------------------------------
 138:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP     | This documentation                                        
 139:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\DSP_Lib_TestSuite | DSP_Lib test suite                                        
 140:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Examples          | Example projects demonstrating the usage of the library fu
 141:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Include           | DSP_Lib include files                                     
 142:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Lib               | DSP_Lib binaries                                          
 143:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Projects          | Projects to rebuild DSP_Lib binaries                      
 144:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Source            | DSP_Lib source files                                      
 145:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 146:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 147:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Revision History of CMSIS-DSP
 148:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 149:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 150:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 151:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 152:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 153:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 154:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 155:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 156:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 157:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 158:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
ARM GAS  /tmp/ccLDvLVF.s 			page 13


 159:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 160:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 161:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * operate on individual values and not arrays.
 162:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 163:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 164:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 165:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 166:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 167:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 168:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 169:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 170:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * (real, imag, real, imag, ...).
 171:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 172:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 173:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * real values.
 174:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 175:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 176:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 177:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 178:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 179:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 180:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 181:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 182:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 183:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 184:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 185:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * the type
 186:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 187:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * below:
 188:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 189:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     typedef struct
 190:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     {
 191:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 192:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 193:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 194:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 195:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 196:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 197:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 198:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 199:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 200:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 201:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * matrix element (i, j) is stored at:
 202:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 203:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     pData[i*numCols + j]
 204:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 205:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 206:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Init Functions
 207:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 208:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data structure.
 209:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 210:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Refer to \ref arm_mat_init_f32(), \ref arm_mat_init_q31() and \ref arm_mat_init_q15()
 211:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * for floating-point, Q31 and Q15 types,  respectively.
 212:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 213:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par
 214:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 215:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
ARM GAS  /tmp/ccLDvLVF.s 			page 14


 216:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * To place the instance structure in a const data
 217:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 218:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 219:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 220:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 221:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 222:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 223:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 224:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 225:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data array.
 226:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 227:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Size Checking
 228:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 229:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * output matrices. For example, the matrix addition function verifies that the
 230:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 231:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * columns. If the size check fails the functions return:
 232:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 233:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 234:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 235:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Otherwise the functions return
 236:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 237:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 238:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 239:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 240:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 241:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 242:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 243:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 244:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 245:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and size checking is enabled. By changing the project settings and
 246:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 247:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * run a bit faster. With size checking disabled the functions always
 248:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 249:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 250:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 251:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 252:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 253:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 254:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 255:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 256:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupController Controller Functions
 257:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 258:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 259:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 260:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 261:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 262:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 263:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 264:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 265:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 266:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 267:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 268:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 269:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 270:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 271:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 272:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
ARM GAS  /tmp/ccLDvLVF.s 			page 15


 273:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 274:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 275:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupExamples Examples
 276:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 277:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 278:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 279:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef _ARM_MATH_H
 280:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _ARM_MATH_H
 281:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 282:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Compiler specific diagnostic adjustment */
 283:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 284:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 285:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 286:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 287:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 288:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic push
 289:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wsign-conversion"
 290:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wconversion"
 291:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wunused-parameter"
 292:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 293:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 294:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 295:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 296:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 297:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 298:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 299:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 300:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 301:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( _MSC_VER )
 302:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 303:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 304:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 305:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 306:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 307:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 308:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Included for instrinsics definitions */
 309:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if !defined ( _MSC_VER )
 310:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "cmsis_compiler.h"
 311:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 312:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <stdint.h>
 313:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __STATIC_FORCEINLINE static __forceinline
 314:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __ALIGNED(x) __declspec(align(x))
 315:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_ENTER
 316:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_EXIT
 317:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_ENTER 
 318:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
 319:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 320:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 321:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "string.h"
 322:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "math.h"
 323:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "float.h"
 324:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 325:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* evaluate ARM DSP feature */
 326:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
 327:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define ARM_MATH_DSP                   1
 328:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 329:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
ARM GAS  /tmp/ccLDvLVF.s 			page 16


 330:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if defined(__ARM_NEON)
 331:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <arm_neon.h>
 332:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 333:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 334:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 335:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifdef   __cplusplus
 336:./Libraries/CMSIS/DSP/Include/arm_math.h **** extern "C"
 337:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 338:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 339:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 340:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 341:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 342:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 344:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 345:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q15          0x5
 347:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef PI
 349:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define PI               3.14159265358979f
 350:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 351:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 352:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 353:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 355:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 356:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 363:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 364:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 366:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 370:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 371:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 372:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 373:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 374:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 375:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef enum
 376:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 377:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SUCCESS        =  0,        /**< No error */
 378:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 379:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR   = -2,        /**< Length of data buffer is incorrect */
 380:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH  = -3,        /**< Size of matrices is not compatible with the operation
 381:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_NANINF         = -4,        /**< Not-a-number (NaN) or infinity is generated */
 382:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SINGULAR       = -5,        /**< Input matrix is singular and cannot be inverted */
 383:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_TEST_FAILURE   = -6         /**< Test Failed */
 384:./Libraries/CMSIS/DSP/Include/arm_math.h ****   } arm_status;
 385:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 386:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
ARM GAS  /tmp/ccLDvLVF.s 			page 17


 387:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 388:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 389:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int8_t q7_t;
 390:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 391:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 392:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 393:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 394:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int16_t q15_t;
 395:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 396:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 397:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 398:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 399:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int32_t q31_t;
 400:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 401:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 402:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 403:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 404:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int64_t q63_t;
 405:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 406:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 407:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 408:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 409:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef float float32_t;
 410:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 411:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 412:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 413:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 414:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef double float64_t;
 415:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 416:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 417:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 418:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief definition to read/write two 16 bit values.
 419:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @deprecated
 420:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 421:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 422:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 423:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 424:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 425:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 426:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 427:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 428:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 429:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 430:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 431:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 432:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 433:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 434:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE __un(aligned) int32_t
 435:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined(_MSC_VER )
 436:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 437:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 438:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 439:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 440:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 441:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 442:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32_CONST(addr)  ( (__SIMD32_TYPE * )   (addr))
 443:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE * )   (addr))
ARM GAS  /tmp/ccLDvLVF.s 			page 18


 444:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD64(addr)        (*(      int64_t **) & (addr))
 445:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 446:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* SIMD replacement */
 447:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 448:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 449:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 450:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer.
 451:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 452:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 453:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 454:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2 (
 455:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t * pQ15)
 456:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 457:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 458:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 459:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, pQ15, 4);
 460:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 461:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 462:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 463:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 464:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 465:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and increment pointer afterwards.
 466:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 467:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 468:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 469:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_ia (
 470:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15)
 471:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 472:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 473:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ15, 4);
 475:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 476:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 477:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 478:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 479:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 480:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 481:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and decrement pointer afterwards.
 482:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 483:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 484:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 485:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_da (
 486:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15)
 487:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 488:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 489:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 490:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ15, 4);
 491:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 -= 2;
 492:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 493:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 494:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 495:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 496:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 497:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer and increment pointer afterwards.
 498:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 499:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 500:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
ARM GAS  /tmp/ccLDvLVF.s 			page 19


 501:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 502:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q15x2_ia (
 503:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15,
 504:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t    value)
 505:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 506:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 507:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 508:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (*pQ15, &val, 4);
 509:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 510:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 511:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 512:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 513:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer.
 514:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 515:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 516:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
 517:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 518:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q15x2 (
 519:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t * pQ15,
 520:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t   value)
 521:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 522:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 523:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 524:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (pQ15, &val, 4);
 525:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 526:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 527:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 528:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 529:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and increment pointer afterwards.
 530:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 531:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 532:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 533:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_ia (
 534:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7)
 535:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 536:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 537:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 538:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ7, 4);
 539:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 += 4;
 540:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 541:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 542:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 543:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 544:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 545:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and decrement pointer afterwards.
 546:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 547:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 548:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 549:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_da (
 550:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7)
 551:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 552:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 553:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 554:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ7, 4);
 555:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 -= 4;
 556:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 557:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
ARM GAS  /tmp/ccLDvLVF.s 			page 20


 558:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 559:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 560:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 561:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 4 Q7 to Q7 pointer and increment pointer afterwards.
 562:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 563:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 564:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
 565:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 566:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q7x4_ia (
 567:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7,
 568:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t   value)
 569:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 570:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 571:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 572:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (*pQ7, &val, 4);
 573:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 += 4;
 574:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 575:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 576:./Libraries/CMSIS/DSP/Include/arm_math.h **** /*
 577:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 578:./Libraries/CMSIS/DSP/Include/arm_math.h **** Normally those kind of definitions are in a compiler file
 579:./Libraries/CMSIS/DSP/Include/arm_math.h **** in Core or Core_A.
 580:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 581:./Libraries/CMSIS/DSP/Include/arm_math.h **** But for MSVC compiler it is a bit special. The goal is very specific
 582:./Libraries/CMSIS/DSP/Include/arm_math.h **** to CMSIS-DSP and only to allow the use of this library from other
 583:./Libraries/CMSIS/DSP/Include/arm_math.h **** systems like Python or Matlab.
 584:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 585:./Libraries/CMSIS/DSP/Include/arm_math.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
 586:./Libraries/CMSIS/DSP/Include/arm_math.h **** compiler file in Core or Core_A would not make sense.
 587:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 588:./Libraries/CMSIS/DSP/Include/arm_math.h **** */
 589:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if defined ( _MSC_VER )
 590:./Libraries/CMSIS/DSP/Include/arm_math.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
 591:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 592:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (data == 0U) { return 32U; }
 593:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 594:./Libraries/CMSIS/DSP/Include/arm_math.h ****       uint32_t count = 0U;
 595:./Libraries/CMSIS/DSP/Include/arm_math.h ****       uint32_t mask = 0x80000000U;
 596:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 597:./Libraries/CMSIS/DSP/Include/arm_math.h ****       while ((data & mask) == 0U)
 598:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 599:./Libraries/CMSIS/DSP/Include/arm_math.h ****         count += 1U;
 600:./Libraries/CMSIS/DSP/Include/arm_math.h ****         mask = mask >> 1U;
 601:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 602:./Libraries/CMSIS/DSP/Include/arm_math.h ****       return count;
 603:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 604:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 605:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 606:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 607:./Libraries/CMSIS/DSP/Include/arm_math.h ****     if ((sat >= 1U) && (sat <= 32U))
 608:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 609:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 610:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const int32_t min = -1 - max ;
 611:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (val > max)
 612:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 613:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return max;
 614:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
ARM GAS  /tmp/ccLDvLVF.s 			page 21


 615:./Libraries/CMSIS/DSP/Include/arm_math.h ****       else if (val < min)
 616:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 617:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return min;
 618:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 619:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 620:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return val;
 621:./Libraries/CMSIS/DSP/Include/arm_math.h ****   }
 622:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 623:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 624:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 625:./Libraries/CMSIS/DSP/Include/arm_math.h ****     if (sat <= 31U)
 626:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 627:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const uint32_t max = ((1U << sat) - 1U);
 628:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (val > (int32_t)max)
 629:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 630:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return max;
 631:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 632:./Libraries/CMSIS/DSP/Include/arm_math.h ****       else if (val < 0)
 633:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 634:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return 0U;
 635:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 636:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 637:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return (uint32_t)val;
 638:./Libraries/CMSIS/DSP/Include/arm_math.h ****   }
 639:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 640:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 641:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef ARM_MATH_DSP
 642:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 643:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 644:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 645:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 646:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                       (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 647:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 648:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                       (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 649:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 650:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 651:./Libraries/CMSIS/DSP/Include/arm_math.h ****    /**
 652:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 653:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 654:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 655:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 656:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 657:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 658:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 659:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 660:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 661:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 662:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 663:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 664:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 665:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 666:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 667:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 668:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 669:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 670:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
 671:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q63_t x)
ARM GAS  /tmp/ccLDvLVF.s 			page 22


 672:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 673:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 301              		.loc 2 673 24
 302 01bc D7E90401 		ldrd	r0, [r7, #16]
 303 01c0 4FF00002 		mov	r2, #0
 304 01c4 4FF00003 		mov	r3, #0
 305 01c8 0A00     		movs	r2, r1
 306 01ca CB17     		asrs	r3, r1, #31
 307              		.loc 2 673 35
 308 01cc 3B69     		ldr	r3, [r7, #16]
 309              		.loc 2 673 45
 310 01ce DB17     		asrs	r3, r3, #31
 674:./Libraries/CMSIS/DSP/Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 311              		.loc 2 674 44
 312 01d0 9A42     		cmp	r2, r3
 313 01d2 0BD0     		beq	.L6
 314              		.loc 2 674 34
 315 01d4 D7E90401 		ldrd	r0, [r7, #16]
 316 01d8 4FF00002 		mov	r2, #0
 317 01dc 4FF00003 		mov	r3, #0
 318 01e0 CA17     		asrs	r2, r1, #31
 319 01e2 CB17     		asrs	r3, r1, #31
 320              		.loc 2 674 44
 321 01e4 6FF00043 		mvn	r3, #-2147483648
 322 01e8 5340     		eors	r3, r3, r2
 323 01ea 00E0     		b	.L13
 324              	.L6:
 325 01ec 3B69     		ldr	r3, [r7, #16]
 326              	.L13:
 327              	.LBE5:
 328              	.LBE4:
 329              		.loc 1 226 11
 330 01ee 3A6D     		ldr	r2, [r7, #80]
 331 01f0 1360     		str	r3, [r2]
 227:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       pb++;
 332              		.loc 1 227 9
 333 01f2 3B6D     		ldr	r3, [r7, #80]
 334 01f4 0433     		adds	r3, r3, #4
 335 01f6 3B65     		str	r3, [r7, #80]
 228:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 229:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       /* Decrement loop counter */
 230:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 336              		.loc 1 230 13
 337 01f8 FB6C     		ldr	r3, [r7, #76]
 338 01fa 013B     		subs	r3, r3, #1
 339 01fc FB64     		str	r3, [r7, #76]
 340              	.L5:
 222:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     {
 341              		.loc 1 222 11
 342 01fe FB6C     		ldr	r3, [r7, #76]
 343 0200 002B     		cmp	r3, #0
 344 0202 B0D1     		bne	.L9
 231:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     }
 232:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 233:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Decrement loop counter */
 234:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     blkCnt--;
 345              		.loc 1 234 11
ARM GAS  /tmp/ccLDvLVF.s 			page 23


 346 0204 BB6C     		ldr	r3, [r7, #72]
 347 0206 013B     		subs	r3, r3, #1
 348 0208 BB64     		str	r3, [r7, #72]
 349              	.L2:
  96:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   {
 350              		.loc 1 96 9
 351 020a BB6C     		ldr	r3, [r7, #72]
 352 020c 002B     		cmp	r3, #0
 353 020e 7FF421AF 		bne	.L10
 235:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   }
 236:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 237:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* Processing is complete.
 238:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****      Now copy the last numTaps - 1 samples to the start of the state buffer.
 239:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****      This prepares the state buffer for the next function call. */
 240:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 241:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* Points to the start of the pState buffer */
 242:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = S->pState;
 354              		.loc 1 242 15
 355 0212 FB68     		ldr	r3, [r7, #12]
 356 0214 5B68     		ldr	r3, [r3, #4]
 357 0216 BB65     		str	r3, [r7, #88]
 243:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 244:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* copy data */
 245:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
 246:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 247:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* Loop unrolling: Compute 4 taps at a time. */
 248:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1U) >> 2U;
 249:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 250:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0U)
 251:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   {
 252:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 253:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 254:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 255:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 256:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 257:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Decrement loop counter */
 258:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 259:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   }
 260:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 261:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* Loop unrolling: Compute remaining taps */
 262:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 263:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 264:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #else
 265:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 266:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   /* Initialize tapCnt with number of samples */
 267:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1U);
 358              		.loc 1 267 10
 359 0218 7B6B     		ldr	r3, [r7, #52]
 360 021a 013B     		subs	r3, r3, #1
 361 021c FB64     		str	r3, [r7, #76]
 268:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 269:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 270:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 271:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0U)
 362              		.loc 1 271 9
 363 021e 0AE0     		b	.L11
 364              	.L12:
ARM GAS  /tmp/ccLDvLVF.s 			page 24


 272:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   {
 273:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 365              		.loc 1 273 29
 366 0220 FA6D     		ldr	r2, [r7, #92]
 367 0222 131D     		adds	r3, r2, #4
 368 0224 FB65     		str	r3, [r7, #92]
 369              		.loc 1 273 17
 370 0226 BB6D     		ldr	r3, [r7, #88]
 371 0228 191D     		adds	r1, r3, #4
 372 022a B965     		str	r1, [r7, #88]
 373              		.loc 1 273 22
 374 022c 1268     		ldr	r2, [r2]
 375              		.loc 1 273 20
 376 022e 1A60     		str	r2, [r3]
 274:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 275:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     /* Decrement loop counter */
 276:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 377              		.loc 1 276 11
 378 0230 FB6C     		ldr	r3, [r7, #76]
 379 0232 013B     		subs	r3, r3, #1
 380 0234 FB64     		str	r3, [r7, #76]
 381              	.L11:
 271:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   {
 382              		.loc 1 271 9
 383 0236 FB6C     		ldr	r3, [r7, #76]
 384 0238 002B     		cmp	r3, #0
 385 023a F1D1     		bne	.L12
 277:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c ****   }
 278:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** 
 279:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_q31.c **** }
 386              		.loc 1 279 1
 387 023c 00BF     		nop
 388 023e 00BF     		nop
 389 0240 6037     		adds	r7, r7, #96
 390              	.LCFI3:
 391              		.cfi_def_cfa_offset 24
 392 0242 BD46     		mov	sp, r7
 393              	.LCFI4:
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed
 396 0244 BDE8F003 		pop	{r4, r5, r6, r7, r8, r9}
 397              	.LCFI5:
 398              		.cfi_restore 9
 399              		.cfi_restore 8
 400              		.cfi_restore 7
 401              		.cfi_restore 6
 402              		.cfi_restore 5
 403              		.cfi_restore 4
 404              		.cfi_def_cfa_offset 0
 405 0248 7047     		bx	lr
 406              		.cfi_endproc
 407              	.LFE145:
 409              		.text
 410              	.Letext0:
 411              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 412              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 413              		.file 5 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccLDvLVF.s 			page 25


 414              		.file 6 "/usr/include/newlib/sys/reent.h"
 415              		.file 7 "/usr/include/newlib/sys/lock.h"
 416              		.file 8 "/usr/include/newlib/math.h"
ARM GAS  /tmp/ccLDvLVF.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_lms_q31.c
     /tmp/ccLDvLVF.s:17     .text.arm_lms_q31:0000000000000000 $t
     /tmp/ccLDvLVF.s:25     .text.arm_lms_q31:0000000000000000 arm_lms_q31

NO UNDEFINED SYMBOLS
