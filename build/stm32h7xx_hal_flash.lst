ARM GAS  /tmp/ccIfiV56.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_flash.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	pFlash,28,4
  17              		.section	.text.HAL_FLASH_Program,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_FLASH_Program
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	HAL_FLASH_Program:
  27              	.LFB331:
  28              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @file    stm32h7xx_hal_flash.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *           + Program operations functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *           + Memory Control functions
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  @verbatim
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   ==============================================================================
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   ==============================================================================
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AXI I-Code and D-Code accesses
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   [..] The FLASH main features are:
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (+) Flash memory read operations
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (+) Flash memory program/erase operations
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (+) Read / write protections
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (+) Option bytes programming
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 266-bits word
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****           (10 bits added per flash word)
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                         ##### How to use this driver #####
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ==============================================================================
ARM GAS  /tmp/ccIfiV56.s 			page 2


  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     [..]
  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       memory of all STM32H7xx devices.
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (#) FLASH Memory IO Programming functions:
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Program functions: 256-bit word only
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) There Two modes of programming :
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (#) Interrupts and flags management functions :
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Get error flag status by calling HAL_FLASH_GetError()
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       (#) Option bytes management functions :
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_OB_Launch() function.
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 In this case, a reset is generated
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     [..]
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       to handle the following operations:
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****        (+) Set the latency
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****        (+) Enable/Disable the FLASH interrupts
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****        (+) Monitor the FLASH flags status
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****      [..]
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     (@) For any Flash memory program operation (erase or program), the CPU clock frequency
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         (HCLK) must be at least 1MHz.
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     (@) The contents of the Flash memory are not guaranteed if a device reset occurs during
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         a Flash memory operation.
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     (@) The application can simultaneously request a read and a write operation through each AXI
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         interface.
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         As the Flash memory is divided into two independent banks, the embedded Flash
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         memory interface can drive different operations at the same time on each bank. For
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         example a read, write or erase operation can be executed on bank 1 while another read,
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         write or erase operation is executed on bank 2.
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  @endverbatim
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   ******************************************************************************
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @attention
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics.
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * All rights reserved.</center></h2>
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                       opensource.org/licenses/BSD-3-Clause
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   ******************************************************************************
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
ARM GAS  /tmp/ccIfiV56.s 			page 3


  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #include "stm32h7xx_hal.h"
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @addtogroup STM32H7xx_HAL_Driver
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @defgroup FLASH FLASH
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief FLASH HAL module driver
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private define ------------------------------------------------------------*/
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #define FLASH_TIMEOUT_VALUE              50000U /* 50 s */
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @}
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private macro -------------------------------------------------------------*/
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash;
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Exported functions ---------------------------------------------------------*/
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported functions
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *  @brief   Programming operation functions
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @verbatim
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                   ##### Programming operation functions #####
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     [..]
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     program operations.
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @endverbatim
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Program a flash word at a specified address
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *         This parameter can be a value of @ref FLASH_Type_Program
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  FlashAddress specifies the address to be programmed.
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *         This parameter shall be aligned to the Flash word:
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 256 bits for STM32H74x/5X devices (8x 32bits words)
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 128 bits for STM32H7Ax/BX devices (4x 32bits words)
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 256 bits for STM32H72x/3X devices (8x 32bits words)
ARM GAS  /tmp/ccIfiV56.s 			page 4


 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  DataAddress specifies the address of data to be programmed.
 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *         This parameter shall be 32-bit aligned
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddre
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
  29              		.loc 1 151 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   HAL_StatusTypeDef status;
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
  47              		.loc 1 153 18
  48 000c BB68     		ldr	r3, [r7, #8]
  49 000e 3B62     		str	r3, [r7, #32]
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
  50              		.loc 1 154 18
  51 0010 7B68     		ldr	r3, [r7, #4]
  52 0012 FB61     		str	r3, [r7, #28]
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t bank;
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
  53              		.loc 1 156 11
  54 0014 0823     		movs	r3, #8
  55 0016 FB75     		strb	r3, [r7, #23]
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check the parameters */
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Process Locked */
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
  56              		.loc 1 163 3
  57 0018 404B     		ldr	r3, .L12
  58 001a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
  59 001c 012B     		cmp	r3, #1
  60 001e 01D1     		bne	.L2
  61              		.loc 1 163 3 is_stmt 0 discriminator 1
  62 0020 0223     		movs	r3, #2
  63 0022 76E0     		b	.L3
  64              	.L2:
  65              		.loc 1 163 3 discriminator 2
  66 0024 3D4B     		ldr	r3, .L12
ARM GAS  /tmp/ccIfiV56.s 			page 5


  67 0026 0122     		movs	r2, #1
  68 0028 1A75     		strb	r2, [r3, #20]
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress))
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
  69              		.loc 1 168 5 is_stmt 1 discriminator 2
  70 002a BB68     		ldr	r3, [r7, #8]
  71 002c B3F1006F 		cmp	r3, #134217728
  72 0030 06D3     		bcc	.L4
  73              		.loc 1 168 6 discriminator 1
  74 0032 BB68     		ldr	r3, [r7, #8]
  75 0034 B3F1016F 		cmp	r3, #135266304
  76 0038 02D2     		bcs	.L4
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bank = FLASH_BANK_1;
  77              		.loc 1 171 10
  78 003a 0123     		movs	r3, #1
  79 003c BB61     		str	r3, [r7, #24]
  80 003e 0CE0     		b	.L5
  81              	.L4:
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
  82              		.loc 1 174 10
  83 0040 BB68     		ldr	r3, [r7, #8]
  84 0042 B3F1016F 		cmp	r3, #135266304
  85 0046 06D3     		bcc	.L6
  86              		.loc 1 174 11 discriminator 1
  87 0048 BB68     		ldr	r3, [r7, #8]
  88 004a B3F1026F 		cmp	r3, #136314880
  89 004e 02D2     		bcs	.L6
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bank = FLASH_BANK_2;
  90              		.loc 1 176 10
  91 0050 0223     		movs	r3, #2
  92 0052 BB61     		str	r3, [r7, #24]
  93 0054 01E0     		b	.L5
  94              	.L6:
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
  95              		.loc 1 181 12
  96 0056 0123     		movs	r3, #1
  97 0058 5BE0     		b	.L3
  98              	.L5:
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Reset error code */
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
  99              		.loc 1 185 20
 100 005a 304B     		ldr	r3, .L12
 101 005c 0022     		movs	r2, #0
ARM GAS  /tmp/ccIfiV56.s 			page 6


 102 005e 9A61     		str	r2, [r3, #24]
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for last operation to be completed */
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 103              		.loc 1 188 12
 104 0060 B969     		ldr	r1, [r7, #24]
 105 0062 4CF25030 		movw	r0, #50000
 106 0066 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 107 006a 0346     		mov	r3, r0
 108 006c 87F82730 		strb	r3, [r7, #39]
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(status == HAL_OK)
 109              		.loc 1 190 5
 110 0070 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 111 0074 002B     		cmp	r3, #0
 112 0076 47D1     		bne	.L7
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(bank == FLASH_BANK_1)
 113              		.loc 1 193 7
 114 0078 BB69     		ldr	r3, [r7, #24]
 115 007a 012B     		cmp	r3, #1
 116 007c 06D1     		bne	.L8
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set OTP_PG bit */
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set PG bit */
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->CR1, FLASH_CR_PG);
 117              		.loc 1 205 9
 118 007e 284B     		ldr	r3, .L12+4
 119 0080 DB68     		ldr	r3, [r3, #12]
 120 0082 274A     		ldr	r2, .L12+4
 121 0084 43F00203 		orr	r3, r3, #2
 122 0088 D360     		str	r3, [r2, #12]
 123 008a 07E0     		b	.L9
 124              	.L8:
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set PG bit */
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       SET_BIT(FLASH->CR2, FLASH_CR_PG);
 125              		.loc 1 211 7
 126 008c 244B     		ldr	r3, .L12+4
 127 008e D3F80C31 		ldr	r3, [r3, #268]
 128 0092 234A     		ldr	r2, .L12+4
 129 0094 43F00203 		orr	r3, r3, #2
 130 0098 C2F80C31 		str	r3, [r2, #268]
 131              	.L9:
 132              	.LBB18:
ARM GAS  /tmp/ccIfiV56.s 			page 7


 133              	.LBB19:
 134              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
ARM GAS  /tmp/ccIfiV56.s 			page 8


  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccIfiV56.s 			page 9


 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
ARM GAS  /tmp/ccIfiV56.s 			page 10


 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIfiV56.s 			page 11


 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
ARM GAS  /tmp/ccIfiV56.s 			page 12


 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
ARM GAS  /tmp/ccIfiV56.s 			page 13


 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccIfiV56.s 			page 14


 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccIfiV56.s 			page 15


 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIfiV56.s 			page 16


 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/ccIfiV56.s 			page 17


 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIfiV56.s 			page 18


 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIfiV56.s 			page 19


 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/ccIfiV56.s 			page 20


 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  /tmp/ccIfiV56.s 			page 21


 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIfiV56.s 			page 22


 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIfiV56.s 			page 23


 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 135              		.loc 2 935 3
 136              		.syntax unified
 137              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 138 009c BFF36F8F 		isb 0xF
 139              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 140              		.loc 2 936 1
 141              		.thumb
 142              		.syntax unified
 143 00a0 00BF     		nop
 144              	.LBE19:
 145              	.LBE18:
 146              	.LBB20:
 147              	.LBB21:
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 148              		.loc 2 946 3
 149              		.syntax unified
 150              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 151 00a2 BFF34F8F 		dsb 0xF
 152              	@ 0 "" 2
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 153              		.loc 2 947 1
 154              		.thumb
ARM GAS  /tmp/ccIfiV56.s 			page 24


 155              		.syntax unified
 156 00a6 00BF     		nop
 157              	.L10:
 158              	.LBE21:
 159              	.LBE20:
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else /* Single Bank */
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set OTP_PG bit */
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set PG bit */
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->CR1, FLASH_CR_PG);
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __ISB();
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __DSB();
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Program an OTP word (16 bits) */
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       *(__IO uint16_t *)FlashAddress = *(__IO uint16_t*)DataAddress;
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Program the flash word */
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       do
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         *dest_addr = *src_addr;
 160              		.loc 1 243 22 discriminator 1
 161 00a8 FB69     		ldr	r3, [r7, #28]
 162 00aa 1A68     		ldr	r2, [r3]
 163              		.loc 1 243 20 discriminator 1
 164 00ac 3B6A     		ldr	r3, [r7, #32]
 165 00ae 1A60     		str	r2, [r3]
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         dest_addr++;
 166              		.loc 1 244 18 discriminator 1
 167 00b0 3B6A     		ldr	r3, [r7, #32]
 168 00b2 0433     		adds	r3, r3, #4
 169 00b4 3B62     		str	r3, [r7, #32]
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         src_addr++;
 170              		.loc 1 245 17 discriminator 1
 171 00b6 FB69     		ldr	r3, [r7, #28]
 172 00b8 0433     		adds	r3, r3, #4
 173 00ba FB61     		str	r3, [r7, #28]
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         row_index--;
 174              		.loc 1 246 18 discriminator 1
 175 00bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 176 00be 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccIfiV56.s 			page 25


 177 00c0 FB75     		strb	r3, [r7, #23]
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****      } while (row_index != 0U);
 178              		.loc 1 247 6 discriminator 1
 179 00c2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 180 00c4 002B     		cmp	r3, #0
 181 00c6 EFD1     		bne	.L10
 182              	.LBB22:
 183              	.LBB23:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 184              		.loc 2 935 3
 185              		.syntax unified
 186              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 187 00c8 BFF36F8F 		isb 0xF
 188              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 189              		.loc 2 936 1
 190              		.thumb
 191              		.syntax unified
 192 00cc 00BF     		nop
 193              	.LBE23:
 194              	.LBE22:
 195              	.LBB24:
 196              	.LBB25:
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 197              		.loc 2 946 3
 198              		.syntax unified
 199              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 200 00ce BFF34F8F 		dsb 0xF
 201              	@ 0 "" 2
 202              		.loc 2 947 1
 203              		.thumb
 204              		.syntax unified
 205 00d2 00BF     		nop
 206              	.LBE25:
 207              	.LBE24:
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __ISB();
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __DSB();
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Wait for last operation to be completed */
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 208              		.loc 1 254 14
 209 00d4 B969     		ldr	r1, [r7, #24]
 210 00d6 4CF25030 		movw	r0, #50000
 211 00da FFF7FEFF 		bl	FLASH_WaitForLastOperation
 212 00de 0346     		mov	r3, r0
 213 00e0 87F82730 		strb	r3, [r7, #39]
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* If the program operation is completed, disable the OTP_PG */
 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
ARM GAS  /tmp/ccIfiV56.s 			page 26


 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(bank == FLASH_BANK_1)
 214              		.loc 1 266 9
 215 00e4 BB69     		ldr	r3, [r7, #24]
 216 00e6 012B     		cmp	r3, #1
 217 00e8 06D1     		bne	.L11
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* If the program operation is completed, disable the PG */
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 218              		.loc 1 269 9
 219 00ea 0D4B     		ldr	r3, .L12+4
 220 00ec DB68     		ldr	r3, [r3, #12]
 221 00ee 0C4A     		ldr	r2, .L12+4
 222 00f0 23F00203 		bic	r3, r3, #2
 223 00f4 D360     		str	r3, [r2, #12]
 224 00f6 07E0     		b	.L7
 225              	.L11:
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* If the program operation is completed, disable the PG */
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 226              		.loc 1 274 9
 227 00f8 094B     		ldr	r3, .L12+4
 228 00fa D3F80C31 		ldr	r3, [r3, #268]
 229 00fe 084A     		ldr	r2, .L12+4
 230 0100 23F00203 		bic	r3, r3, #2
 231 0104 C2F80C31 		str	r3, [r2, #268]
 232              	.L7:
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else /* Single Bank */
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* If the program operation is completed, disable the OTP_PG */
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* If the program operation is completed, disable the PG */
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Process Unlocked */
 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 233              		.loc 1 294 3
 234 0108 044B     		ldr	r3, .L12
 235 010a 0022     		movs	r2, #0
 236 010c 1A75     		strb	r2, [r3, #20]
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return status;
 237              		.loc 1 296 10
ARM GAS  /tmp/ccIfiV56.s 			page 27


 238 010e 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 239              	.L3:
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 240              		.loc 1 297 1
 241 0112 1846     		mov	r0, r3
 242 0114 2837     		adds	r7, r7, #40
 243              	.LCFI3:
 244              		.cfi_def_cfa_offset 8
 245 0116 BD46     		mov	sp, r7
 246              	.LCFI4:
 247              		.cfi_def_cfa_register 13
 248              		@ sp needed
 249 0118 80BD     		pop	{r7, pc}
 250              	.L13:
 251 011a 00BF     		.align	2
 252              	.L12:
 253 011c 00000000 		.word	pFlash
 254 0120 00200052 		.word	1375739904
 255              		.cfi_endproc
 256              	.LFE331:
 258              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 259              		.align	1
 260              		.global	HAL_FLASH_Program_IT
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 264              		.fpu fpv5-d16
 266              	HAL_FLASH_Program_IT:
 267              	.LFB332:
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Program a flash word at a specified address with interrupt enabled.
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                      This parameter can be a value of @ref FLASH_Type_Program
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  FlashAddress specifies the address to be programmed.
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *         This parameter shall be aligned to the Flash word:
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 256 bits for STM32H74x/5X devices (8x 32bits words)
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 128 bits for STM32H7Ax/BX devices (4x 32bits words)
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *          - 256 bits for STM32H72x/3X devices (8x 32bits words)
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  DataAddress specifies the address of data to be programmed.
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *         This parameter shall be 32-bit aligned
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAd
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 268              		.loc 1 314 1
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 32
 271              		@ frame_needed = 1, uses_anonymous_args = 0
 272 0000 80B5     		push	{r7, lr}
 273              	.LCFI5:
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 7, -8
 276              		.cfi_offset 14, -4
 277 0002 88B0     		sub	sp, sp, #32
 278              	.LCFI6:
ARM GAS  /tmp/ccIfiV56.s 			page 28


 279              		.cfi_def_cfa_offset 40
 280 0004 00AF     		add	r7, sp, #0
 281              	.LCFI7:
 282              		.cfi_def_cfa_register 7
 283 0006 F860     		str	r0, [r7, #12]
 284 0008 B960     		str	r1, [r7, #8]
 285 000a 7A60     		str	r2, [r7, #4]
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   HAL_StatusTypeDef status;
 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
 286              		.loc 1 316 18
 287 000c BB68     		ldr	r3, [r7, #8]
 288 000e FB61     		str	r3, [r7, #28]
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 289              		.loc 1 317 18
 290 0010 7B68     		ldr	r3, [r7, #4]
 291 0012 BB61     		str	r3, [r7, #24]
 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t bank;
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 292              		.loc 1 319 11
 293 0014 0823     		movs	r3, #8
 294 0016 FB74     		strb	r3, [r7, #19]
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check the parameters */
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Process Locked */
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 295              		.loc 1 326 3
 296 0018 3D4B     		ldr	r3, .L25
 297 001a 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 298 001c 012B     		cmp	r3, #1
 299 001e 01D1     		bne	.L15
 300              		.loc 1 326 3 is_stmt 0 discriminator 1
 301 0020 0223     		movs	r3, #2
 302 0022 71E0     		b	.L16
 303              	.L15:
 304              		.loc 1 326 3 discriminator 2
 305 0024 3A4B     		ldr	r3, .L25
 306 0026 0122     		movs	r2, #1
 307 0028 1A75     		strb	r2, [r3, #20]
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Reset error code */
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 308              		.loc 1 329 20 is_stmt 1 discriminator 2
 309 002a 394B     		ldr	r3, .L25
 310 002c 0022     		movs	r2, #0
 311 002e 9A61     		str	r2, [r3, #24]
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress))
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 312              		.loc 1 334 5 discriminator 2
 313 0030 BB68     		ldr	r3, [r7, #8]
 314 0032 B3F1006F 		cmp	r3, #134217728
 315 0036 06D3     		bcc	.L17
ARM GAS  /tmp/ccIfiV56.s 			page 29


 316              		.loc 1 334 6 discriminator 1
 317 0038 BB68     		ldr	r3, [r7, #8]
 318 003a B3F1016F 		cmp	r3, #135266304
 319 003e 02D2     		bcs	.L17
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bank = FLASH_BANK_1;
 320              		.loc 1 337 10
 321 0040 0123     		movs	r3, #1
 322 0042 7B61     		str	r3, [r7, #20]
 323 0044 0CE0     		b	.L18
 324              	.L17:
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 325              		.loc 1 340 10
 326 0046 BB68     		ldr	r3, [r7, #8]
 327 0048 B3F1016F 		cmp	r3, #135266304
 328 004c 06D3     		bcc	.L19
 329              		.loc 1 340 11 discriminator 1
 330 004e BB68     		ldr	r3, [r7, #8]
 331 0050 B3F1026F 		cmp	r3, #136314880
 332 0054 02D2     		bcs	.L19
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bank = FLASH_BANK_2;
 333              		.loc 1 342 10
 334 0056 0223     		movs	r3, #2
 335 0058 7B61     		str	r3, [r7, #20]
 336 005a 01E0     		b	.L18
 337              	.L19:
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 338              		.loc 1 347 12
 339 005c 0123     		movs	r3, #1
 340 005e 53E0     		b	.L16
 341              	.L18:
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for last operation to be completed */
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 342              		.loc 1 351 12
 343 0060 7969     		ldr	r1, [r7, #20]
 344 0062 4CF25030 		movw	r0, #50000
 345 0066 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 346 006a 0346     		mov	r3, r0
 347 006c BB74     		strb	r3, [r7, #18]
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (status != HAL_OK)
 348              		.loc 1 353 6
 349 006e BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 350 0070 002B     		cmp	r3, #0
 351 0072 03D0     		beq	.L20
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Process Unlocked */
ARM GAS  /tmp/ccIfiV56.s 			page 30


 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 352              		.loc 1 356 5
 353 0074 264B     		ldr	r3, .L25
 354 0076 0022     		movs	r2, #0
 355 0078 1A75     		strb	r2, [r3, #20]
 356 007a 44E0     		b	.L21
 357              	.L20:
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.Address = FlashAddress;
 358              		.loc 1 360 20
 359 007c 244A     		ldr	r2, .L25
 360 007e BB68     		ldr	r3, [r7, #8]
 361 0080 1361     		str	r3, [r2, #16]
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(bank == FLASH_BANK_1)
 362              		.loc 1 363 7
 363 0082 7B69     		ldr	r3, [r7, #20]
 364 0084 012B     		cmp	r3, #1
 365 0086 0FD1     		bne	.L22
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set internal variables used by the IRQ handler */
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
 366              		.loc 1 366 31
 367 0088 214B     		ldr	r3, .L25
 368 008a 0322     		movs	r2, #3
 369 008c 1A70     		strb	r2, [r3]
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set OTP_PG bit */
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Set PG bit */
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         SET_BIT(FLASH->CR1, FLASH_CR_PG);
 370              		.loc 1 378 9
 371 008e 214B     		ldr	r3, .L25+4
 372 0090 DB68     		ldr	r3, [r3, #12]
 373 0092 204A     		ldr	r2, .L25+4
 374 0094 43F00203 		orr	r3, r3, #2
 375 0098 D360     		str	r3, [r2, #12]
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Enable End of Operation and Error interrupts for Bank 1 */
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_CR_OPERRIE)
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_
 376              		.loc 1 383 7
 377 009a 1E4B     		ldr	r3, .L25+4
 378 009c DB68     		ldr	r3, [r3, #12]
 379 009e 1D4A     		ldr	r2, .L25+4
 380 00a0 43F4DE03 		orr	r3, r3, #7274496
ARM GAS  /tmp/ccIfiV56.s 			page 31


 381 00a4 D360     		str	r3, [r2, #12]
 382 00a6 12E0     		b	.L23
 383              	.L22:
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_B
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1);
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_CR_OPERRIE */
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set internal variables used by the IRQ handler */
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK2;
 384              		.loc 1 393 31
 385 00a8 194B     		ldr	r3, .L25
 386 00aa 0622     		movs	r2, #6
 387 00ac 1A70     		strb	r2, [r3]
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set PG bit */
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       SET_BIT(FLASH->CR2, FLASH_CR_PG);
 388              		.loc 1 396 7
 389 00ae 194B     		ldr	r3, .L25+4
 390 00b0 D3F80C31 		ldr	r3, [r3, #268]
 391 00b4 174A     		ldr	r2, .L25+4
 392 00b6 43F00203 		orr	r3, r3, #2
 393 00ba C2F80C31 		str	r3, [r2, #268]
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Enable End of Operation and Error interrupts for Bank2 */
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_CR_OPERRIE)
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_
 394              		.loc 1 400 7
 395 00be 154B     		ldr	r3, .L25+4
 396 00c0 D3F80C31 		ldr	r3, [r3, #268]
 397 00c4 134A     		ldr	r2, .L25+4
 398 00c6 43F4DE03 		orr	r3, r3, #7274496
 399 00ca C2F80C31 		str	r3, [r2, #268]
 400              	.L23:
 401              	.LBB26:
 402              	.LBB27:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 403              		.loc 2 935 3
 404              		.syntax unified
 405              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 406 00ce BFF36F8F 		isb 0xF
 407              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 408              		.loc 2 936 1
 409              		.thumb
 410              		.syntax unified
 411 00d2 00BF     		nop
 412              	.LBE27:
 413              	.LBE26:
 414              	.LBB28:
 415              	.LBB29:
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 416              		.loc 2 946 3
 417              		.syntax unified
ARM GAS  /tmp/ccIfiV56.s 			page 32


 418              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 419 00d4 BFF34F8F 		dsb 0xF
 420              	@ 0 "" 2
 421              		.loc 2 947 1
 422              		.thumb
 423              		.syntax unified
 424 00d8 00BF     		nop
 425              	.L24:
 426              	.LBE29:
 427              	.LBE28:
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2 | FLASH_IT_OPERR_B
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_CR_OPERRIE */
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else /* Single Bank */
 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Set internal variables used by the IRQ handler */
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set OTP_PG bit */
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Set PG bit */
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       SET_BIT(FLASH->CR1, FLASH_CR_PG);
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Enable End of Operation and Error interrupts for Bank 1 */
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_CR_OPERRIE)
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_B
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                   FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1);
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_CR_OPERRIE */
 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __ISB();
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __DSB();
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_OPTCR_PG_OTP)
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Program an OTP word (16 bits) */
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       *(__IO uint16_t *)FlashAddress = *(__IO uint16_t*)DataAddress;
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_OPTCR_PG_OTP */
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Program the flash word */
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       do
ARM GAS  /tmp/ccIfiV56.s 			page 33


 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         *dest_addr = *src_addr;
 428              		.loc 1 449 22 discriminator 1
 429 00da BB69     		ldr	r3, [r7, #24]
 430 00dc 1A68     		ldr	r2, [r3]
 431              		.loc 1 449 20 discriminator 1
 432 00de FB69     		ldr	r3, [r7, #28]
 433 00e0 1A60     		str	r2, [r3]
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         dest_addr++;
 434              		.loc 1 450 18 discriminator 1
 435 00e2 FB69     		ldr	r3, [r7, #28]
 436 00e4 0433     		adds	r3, r3, #4
 437 00e6 FB61     		str	r3, [r7, #28]
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         src_addr++;
 438              		.loc 1 451 17 discriminator 1
 439 00e8 BB69     		ldr	r3, [r7, #24]
 440 00ea 0433     		adds	r3, r3, #4
 441 00ec BB61     		str	r3, [r7, #24]
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         row_index--;
 442              		.loc 1 452 18 discriminator 1
 443 00ee FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 444 00f0 013B     		subs	r3, r3, #1
 445 00f2 FB74     		strb	r3, [r7, #19]
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       } while (row_index != 0U);
 446              		.loc 1 453 7 discriminator 1
 447 00f4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 448 00f6 002B     		cmp	r3, #0
 449 00f8 EFD1     		bne	.L24
 450              	.LBB30:
 451              	.LBB31:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 452              		.loc 2 935 3
 453              		.syntax unified
 454              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 455 00fa BFF36F8F 		isb 0xF
 456              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457              		.loc 2 936 1
 458              		.thumb
 459              		.syntax unified
 460 00fe 00BF     		nop
 461              	.LBE31:
 462              	.LBE30:
 463              	.LBB32:
 464              	.LBB33:
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 465              		.loc 2 946 3
 466              		.syntax unified
 467              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 468 0100 BFF34F8F 		dsb 0xF
 469              	@ 0 "" 2
 470              		.loc 2 947 1
 471              		.thumb
 472              		.syntax unified
 473 0104 00BF     		nop
 474              	.L21:
 475              	.LBE33:
ARM GAS  /tmp/ccIfiV56.s 			page 34


 476              	.LBE32:
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __ISB();
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __DSB();
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return status;
 477              		.loc 1 460 10
 478 0106 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 479              	.L16:
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 480              		.loc 1 461 1
 481 0108 1846     		mov	r0, r3
 482 010a 2037     		adds	r7, r7, #32
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485 010c BD46     		mov	sp, r7
 486              	.LCFI9:
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 010e 80BD     		pop	{r7, pc}
 490              	.L26:
 491              		.align	2
 492              	.L25:
 493 0110 00000000 		.word	pFlash
 494 0114 00200052 		.word	1375739904
 495              		.cfi_endproc
 496              	.LFE332:
 498              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 499              		.align	1
 500              		.global	HAL_FLASH_IRQHandler
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu fpv5-d16
 506              	HAL_FLASH_IRQHandler:
 507              	.LFB333:
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief This function handles FLASH interrupt request.
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval None
 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 508              		.loc 1 468 1
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 16
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0000 80B5     		push	{r7, lr}
 513              	.LCFI10:
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 7, -8
 516              		.cfi_offset 14, -4
 517 0002 84B0     		sub	sp, sp, #16
 518              	.LCFI11:
 519              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccIfiV56.s 			page 35


 520 0004 00AF     		add	r7, sp, #0
 521              	.LCFI12:
 522              		.cfi_def_cfa_register 7
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t temp;
 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t errorflag;
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   FLASH_ProcedureTypeDef procedure;
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check FLASH Bank1 End of Operation flag  */
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 523              		.loc 1 474 6
 524 0006 954B     		ldr	r3, .L52
 525 0008 1B69     		ldr	r3, [r3, #16]
 526 000a 03F48033 		and	r3, r3, #65536
 527              		.loc 1 474 5
 528 000e B3F5803F 		cmp	r3, #65536
 529 0012 5CD1     		bne	.L28
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 530              		.loc 1 476 14
 531 0014 924B     		ldr	r3, .L52+4
 532 0016 1B78     		ldrb	r3, [r3]
 533 0018 DBB2     		uxtb	r3, r3
 534              		.loc 1 476 7
 535 001a 012B     		cmp	r3, #1
 536 001c 32D1     		bne	.L29
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Nb of sector to erased can be decreased */
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.NbSectorsToErase--;
 537              		.loc 1 479 13
 538 001e 904B     		ldr	r3, .L52+4
 539 0020 5B68     		ldr	r3, [r3, #4]
 540              		.loc 1 479 30
 541 0022 013B     		subs	r3, r3, #1
 542 0024 8E4A     		ldr	r2, .L52+4
 543 0026 5360     		str	r3, [r2, #4]
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Check if there are still sectors to erase */
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(pFlash.NbSectorsToErase != 0U)
 544              		.loc 1 482 16
 545 0028 8D4B     		ldr	r3, .L52+4
 546 002a 5B68     		ldr	r3, [r3, #4]
 547              		.loc 1 482 9
 548 002c 002B     		cmp	r3, #0
 549 002e 18D0     		beq	.L30
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Indicate user which sector has been erased */
 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 550              		.loc 1 485 9
 551 0030 8B4B     		ldr	r3, .L52+4
 552 0032 DB68     		ldr	r3, [r3, #12]
 553 0034 1846     		mov	r0, r3
 554 0036 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear bank 1 End of Operation pending bit */
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 555              		.loc 1 488 9
 556 003a 884B     		ldr	r3, .L52
ARM GAS  /tmp/ccIfiV56.s 			page 36


 557 003c 4FF48032 		mov	r2, #65536
 558 0040 5A61     		str	r2, [r3, #20]
 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Increment sector number */
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.Sector++;
 559              		.loc 1 491 15
 560 0042 874B     		ldr	r3, .L52+4
 561 0044 DB68     		ldr	r3, [r3, #12]
 562              		.loc 1 491 22
 563 0046 0133     		adds	r3, r3, #1
 564 0048 854A     		ldr	r2, .L52+4
 565 004a D360     		str	r3, [r2, #12]
 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         temp = pFlash.Sector;
 566              		.loc 1 492 14
 567 004c 844B     		ldr	r3, .L52+4
 568 004e DB68     		ldr	r3, [r3, #12]
 569 0050 FB60     		str	r3, [r7, #12]
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 570              		.loc 1 493 9
 571 0052 834B     		ldr	r3, .L52+4
 572 0054 9B68     		ldr	r3, [r3, #8]
 573 0056 1A46     		mov	r2, r3
 574 0058 0121     		movs	r1, #1
 575 005a F868     		ldr	r0, [r7, #12]
 576 005c FFF7FEFF 		bl	FLASH_Erase_Sector
 577 0060 35E0     		b	.L28
 578              	.L30:
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* No more sectors to Erase, user callback can be called */
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Reset Sector and stop Erase sectors procedure */
 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.Sector = 0xFFFFFFFFU;
 579              		.loc 1 499 23
 580 0062 7F4B     		ldr	r3, .L52+4
 581 0064 4FF0FF32 		mov	r2, #-1
 582 0068 DA60     		str	r2, [r3, #12]
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 583              		.loc 1 500 33
 584 006a 7D4B     		ldr	r3, .L52+4
 585 006c 0022     		movs	r2, #0
 586 006e 1A70     		strb	r2, [r3]
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 587              		.loc 1 503 9
 588 0070 7B4B     		ldr	r3, .L52+4
 589 0072 DB68     		ldr	r3, [r3, #12]
 590 0074 1846     		mov	r0, r3
 591 0076 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear FLASH End of Operation pending bit */
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 592              		.loc 1 506 9
 593 007a 784B     		ldr	r3, .L52
 594 007c 4FF48032 		mov	r2, #65536
 595 0080 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccIfiV56.s 			page 37


 596 0082 24E0     		b	.L28
 597              	.L29:
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       procedure = pFlash.ProcedureOnGoing;
 598              		.loc 1 511 17
 599 0084 764B     		ldr	r3, .L52+4
 600 0086 1B78     		ldrb	r3, [r3]
 601 0088 FB72     		strb	r3, [r7, #11]
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 602              		.loc 1 513 9
 603 008a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 604 008c 022B     		cmp	r3, #2
 605 008e 02D0     		beq	.L31
 606              		.loc 1 513 52 discriminator 1
 607 0090 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 608 0092 072B     		cmp	r3, #7
 609 0094 03D1     		bne	.L32
 610              	.L31:
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* MassErase ended. Return the selected bank */
 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 611              		.loc 1 517 9
 612 0096 0120     		movs	r0, #1
 613 0098 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 614 009c 07E0     		b	.L33
 615              	.L32:
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 616              		.loc 1 519 14
 617 009e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 618 00a0 032B     		cmp	r3, #3
 619 00a2 04D1     		bne	.L33
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Program ended. Return the selected address */
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 620              		.loc 1 523 9
 621 00a4 6E4B     		ldr	r3, .L52+4
 622 00a6 1B69     		ldr	r3, [r3, #16]
 623 00a8 1846     		mov	r0, r3
 624 00aa FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 625              	.L33:
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Nothing to do */
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 626              		.loc 1 530 9
 627 00ae FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 628 00b0 042B     		cmp	r3, #4
ARM GAS  /tmp/ccIfiV56.s 			page 38


 629 00b2 0CD0     		beq	.L28
 630              		.loc 1 530 52 discriminator 1
 631 00b4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 632 00b6 052B     		cmp	r3, #5
 633 00b8 09D0     		beq	.L28
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****          (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 634              		.loc 1 531 52
 635 00ba FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 636 00bc 062B     		cmp	r3, #6
 637 00be 06D0     		beq	.L28
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****          (procedure != FLASH_PROC_PROGRAM_BANK2))
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 638              		.loc 1 534 33
 639 00c0 674B     		ldr	r3, .L52+4
 640 00c2 0022     		movs	r2, #0
 641 00c4 1A70     		strb	r2, [r3]
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear FLASH End of Operation pending bit */
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 642              		.loc 1 536 9
 643 00c6 654B     		ldr	r3, .L52
 644 00c8 4FF48032 		mov	r2, #65536
 645 00cc 5A61     		str	r2, [r3, #20]
 646              	.L28:
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  /* Check FLASH Bank2 End of Operation flag  */
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 647              		.loc 1 543 6
 648 00ce 634B     		ldr	r3, .L52
 649 00d0 D3F81031 		ldr	r3, [r3, #272]
 650 00d4 03F48033 		and	r3, r3, #65536
 651              		.loc 1 543 5
 652 00d8 B3F5803F 		cmp	r3, #65536
 653 00dc 5FD1     		bne	.L34
 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 654              		.loc 1 545 14
 655 00de 604B     		ldr	r3, .L52+4
 656 00e0 1B78     		ldrb	r3, [r3]
 657 00e2 DBB2     		uxtb	r3, r3
 658              		.loc 1 545 7
 659 00e4 042B     		cmp	r3, #4
 660 00e6 34D1     		bne	.L35
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /*Nb of sector to erased can be decreased*/
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.NbSectorsToErase--;
 661              		.loc 1 548 13
 662 00e8 5D4B     		ldr	r3, .L52+4
 663 00ea 5B68     		ldr	r3, [r3, #4]
 664              		.loc 1 548 30
 665 00ec 013B     		subs	r3, r3, #1
 666 00ee 5C4A     		ldr	r2, .L52+4
 667 00f0 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccIfiV56.s 			page 39


 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Check if there are still sectors to erase*/
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(pFlash.NbSectorsToErase != 0U)
 668              		.loc 1 551 16
 669 00f2 5B4B     		ldr	r3, .L52+4
 670 00f4 5B68     		ldr	r3, [r3, #4]
 671              		.loc 1 551 9
 672 00f6 002B     		cmp	r3, #0
 673 00f8 19D0     		beq	.L36
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 674              		.loc 1 554 9
 675 00fa 594B     		ldr	r3, .L52+4
 676 00fc DB68     		ldr	r3, [r3, #12]
 677 00fe 1846     		mov	r0, r3
 678 0100 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear bank 2 End of Operation pending bit */
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 679              		.loc 1 557 9
 680 0104 554B     		ldr	r3, .L52
 681 0106 4FF48032 		mov	r2, #65536
 682 010a C3F81421 		str	r2, [r3, #276]
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /*Increment sector number*/
 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.Sector++;
 683              		.loc 1 560 15
 684 010e 544B     		ldr	r3, .L52+4
 685 0110 DB68     		ldr	r3, [r3, #12]
 686              		.loc 1 560 22
 687 0112 0133     		adds	r3, r3, #1
 688 0114 524A     		ldr	r2, .L52+4
 689 0116 D360     		str	r3, [r2, #12]
 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         temp = pFlash.Sector;
 690              		.loc 1 561 14
 691 0118 514B     		ldr	r3, .L52+4
 692 011a DB68     		ldr	r3, [r3, #12]
 693 011c FB60     		str	r3, [r7, #12]
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 694              		.loc 1 562 9
 695 011e 504B     		ldr	r3, .L52+4
 696 0120 9B68     		ldr	r3, [r3, #8]
 697 0122 1A46     		mov	r2, r3
 698 0124 0221     		movs	r1, #2
 699 0126 F868     		ldr	r0, [r7, #12]
 700 0128 FFF7FEFF 		bl	FLASH_Erase_Sector
 701 012c 37E0     		b	.L34
 702              	.L36:
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* No more sectors to Erase, user callback can be called */
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Reset Sector and stop Erase sectors procedure */
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.Sector = 0xFFFFFFFFU;
 703              		.loc 1 568 23
 704 012e 4C4B     		ldr	r3, .L52+4
ARM GAS  /tmp/ccIfiV56.s 			page 40


 705 0130 4FF0FF32 		mov	r2, #-1
 706 0134 DA60     		str	r2, [r3, #12]
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 707              		.loc 1 569 33
 708 0136 4A4B     		ldr	r3, .L52+4
 709 0138 0022     		movs	r2, #0
 710 013a 1A70     		strb	r2, [r3]
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 711              		.loc 1 572 9
 712 013c 484B     		ldr	r3, .L52+4
 713 013e DB68     		ldr	r3, [r3, #12]
 714 0140 1846     		mov	r0, r3
 715 0142 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear FLASH End of Operation pending bit */
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 716              		.loc 1 575 9
 717 0146 454B     		ldr	r3, .L52
 718 0148 4FF48032 		mov	r2, #65536
 719 014c C3F81421 		str	r2, [r3, #276]
 720 0150 25E0     		b	.L34
 721              	.L35:
 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       procedure = pFlash.ProcedureOnGoing;
 722              		.loc 1 580 17
 723 0152 434B     		ldr	r3, .L52+4
 724 0154 1B78     		ldrb	r3, [r3]
 725 0156 FB72     		strb	r3, [r7, #11]
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 726              		.loc 1 582 9
 727 0158 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 728 015a 052B     		cmp	r3, #5
 729 015c 02D0     		beq	.L37
 730              		.loc 1 582 52 discriminator 1
 731 015e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 732 0160 072B     		cmp	r3, #7
 733 0162 03D1     		bne	.L38
 734              	.L37:
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /*MassErase ended. Return the selected bank*/
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 735              		.loc 1 586 9
 736 0164 0220     		movs	r0, #2
 737 0166 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 738 016a 07E0     		b	.L39
 739              	.L38:
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 740              		.loc 1 588 14
 741 016c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
ARM GAS  /tmp/ccIfiV56.s 			page 41


 742 016e 062B     		cmp	r3, #6
 743 0170 04D1     		bne	.L39
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Program ended. Return the selected address */
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 744              		.loc 1 592 9
 745 0172 3B4B     		ldr	r3, .L52+4
 746 0174 1B69     		ldr	r3, [r3, #16]
 747 0176 1846     		mov	r0, r3
 748 0178 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 749              	.L39:
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       else
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Nothing to do */
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 750              		.loc 1 599 9
 751 017c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 752 017e 012B     		cmp	r3, #1
 753 0180 0DD0     		beq	.L34
 754              		.loc 1 599 52 discriminator 1
 755 0182 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 756 0184 022B     		cmp	r3, #2
 757 0186 0AD0     		beq	.L34
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****          (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 758              		.loc 1 600 52
 759 0188 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 760 018a 032B     		cmp	r3, #3
 761 018c 07D0     		beq	.L34
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****          (procedure != FLASH_PROC_PROGRAM_BANK1))
 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 762              		.loc 1 603 33
 763 018e 344B     		ldr	r3, .L52+4
 764 0190 0022     		movs	r2, #0
 765 0192 1A70     		strb	r2, [r3]
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         /* Clear FLASH End of Operation pending bit */
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 766              		.loc 1 605 9
 767 0194 314B     		ldr	r3, .L52
 768 0196 4FF48032 		mov	r2, #65536
 769 019a C3F81421 		str	r2, [r3, #276]
 770              	.L34:
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check FLASH Bank1 operation error flags */
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_SR_OPERR)
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_
 771              		.loc 1 613 20
 772 019e 2F4B     		ldr	r3, .L52
 773 01a0 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccIfiV56.s 			page 42


 774              		.loc 1 613 13
 775 01a2 03F4DC03 		and	r3, r3, #7208960
 776 01a6 7B60     		str	r3, [r7, #4]
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                             FLASH_FLAG_INCERR_BANK1 | FLASH_FLAG_OPERR_BANK1);
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                             FLASH_FLAG_INCERR_BANK1);
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_SR_OPERR */
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(errorflag != 0U)
 777              		.loc 1 620 5
 778 01a8 7B68     		ldr	r3, [r7, #4]
 779 01aa 002B     		cmp	r3, #0
 780 01ac 28D0     		beq	.L40
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Save the error code */
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ErrorCode |= errorflag;
 781              		.loc 1 623 22
 782 01ae 2C4B     		ldr	r3, .L52+4
 783 01b0 9A69     		ldr	r2, [r3, #24]
 784 01b2 7B68     		ldr	r3, [r7, #4]
 785 01b4 1343     		orrs	r3, r3, r2
 786 01b6 2A4A     		ldr	r2, .L52+4
 787 01b8 9361     		str	r3, [r2, #24]
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Clear error programming flags */
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 788              		.loc 1 626 5
 789 01ba 284A     		ldr	r2, .L52
 790 01bc 7B68     		ldr	r3, [r7, #4]
 791 01be 5361     		str	r3, [r2, #20]
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     procedure = pFlash.ProcedureOnGoing;
 792              		.loc 1 628 15
 793 01c0 274B     		ldr	r3, .L52+4
 794 01c2 1B78     		ldrb	r3, [r3]
 795 01c4 FB72     		strb	r3, [r7, #11]
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(procedure == FLASH_PROC_SECTERASE_BANK1)
 796              		.loc 1 630 7
 797 01c6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 798 01c8 012B     		cmp	r3, #1
 799 01ca 07D1     		bne	.L41
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Return the faulty sector */
 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = pFlash.Sector;
 800              		.loc 1 633 12
 801 01cc 244B     		ldr	r3, .L52+4
 802 01ce DB68     		ldr	r3, [r3, #12]
 803 01d0 FB60     		str	r3, [r7, #12]
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 804              		.loc 1 634 21
 805 01d2 234B     		ldr	r3, .L52+4
 806 01d4 4FF0FF32 		mov	r2, #-1
 807 01d8 DA60     		str	r2, [r3, #12]
 808 01da 0BE0     		b	.L42
 809              	.L41:
ARM GAS  /tmp/ccIfiV56.s 			page 43


 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE
 810              		.loc 1 636 12
 811 01dc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 812 01de 022B     		cmp	r3, #2
 813 01e0 02D0     		beq	.L43
 814              		.loc 1 636 55 discriminator 1
 815 01e2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 816 01e4 072B     		cmp	r3, #7
 817 01e6 02D1     		bne	.L44
 818              	.L43:
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Return the faulty bank */
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = FLASH_BANK_1;
 819              		.loc 1 639 12
 820 01e8 0123     		movs	r3, #1
 821 01ea FB60     		str	r3, [r7, #12]
 822 01ec 02E0     		b	.L42
 823              	.L44:
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Return the faulty address */
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = pFlash.Address;
 824              		.loc 1 644 12
 825 01ee 1C4B     		ldr	r3, .L52+4
 826 01f0 1B69     		ldr	r3, [r3, #16]
 827 01f2 FB60     		str	r3, [r7, #12]
 828              	.L42:
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Stop the procedure ongoing*/
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 829              		.loc 1 648 29
 830 01f4 1A4B     		ldr	r3, .L52+4
 831 01f6 0022     		movs	r2, #0
 832 01f8 1A70     		strb	r2, [r3]
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(temp);
 833              		.loc 1 651 5
 834 01fa F868     		ldr	r0, [r7, #12]
 835 01fc FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 836              	.L40:
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check FLASH Bank2 operation error flags */
 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_SR_OPERR)
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR
 837              		.loc 1 657 20
 838 0200 164B     		ldr	r3, .L52
 839 0202 D3F81031 		ldr	r3, [r3, #272]
 840              		.loc 1 657 13
 841 0206 03F4DC03 		and	r3, r3, #7208960
 842 020a 7B60     		str	r3, [r7, #4]
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                              FLASH_FLAG_INCERR_BANK2 | FLASH_FLAG_OPERR_BANK2) & 0x7FFFFFFFU);
ARM GAS  /tmp/ccIfiV56.s 			page 44


 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                              FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_SR_OPERR */
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(errorflag != 0U)
 843              		.loc 1 664 5
 844 020c 7B68     		ldr	r3, [r7, #4]
 845 020e 002B     		cmp	r3, #0
 846 0210 31D0     		beq	.L45
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Save the error code */
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ErrorCode |= (errorflag | 0x80000000U);
 847              		.loc 1 667 22
 848 0212 134B     		ldr	r3, .L52+4
 849 0214 9A69     		ldr	r2, [r3, #24]
 850 0216 7B68     		ldr	r3, [r7, #4]
 851 0218 1343     		orrs	r3, r3, r2
 852 021a 43F00043 		orr	r3, r3, #-2147483648
 853 021e 104A     		ldr	r2, .L52+4
 854 0220 9361     		str	r3, [r2, #24]
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Clear error programming flags */
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 855              		.loc 1 670 5
 856 0222 0E4A     		ldr	r2, .L52
 857 0224 7B68     		ldr	r3, [r7, #4]
 858 0226 23F00043 		bic	r3, r3, #-2147483648
 859 022a C2F81431 		str	r3, [r2, #276]
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     procedure = pFlash.ProcedureOnGoing;
 860              		.loc 1 672 15
 861 022e 0C4B     		ldr	r3, .L52+4
 862 0230 1B78     		ldrb	r3, [r3]
 863 0232 FB72     		strb	r3, [r7, #11]
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(procedure== FLASH_PROC_SECTERASE_BANK2)
 864              		.loc 1 674 7
 865 0234 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 866 0236 042B     		cmp	r3, #4
 867 0238 07D1     		bne	.L46
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /*return the faulty sector*/
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = pFlash.Sector;
 868              		.loc 1 677 12
 869 023a 094B     		ldr	r3, .L52+4
 870 023c DB68     		ldr	r3, [r3, #12]
 871 023e FB60     		str	r3, [r7, #12]
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 872              		.loc 1 678 21
 873 0240 074B     		ldr	r3, .L52+4
 874 0242 4FF0FF32 		mov	r2, #-1
 875 0246 DA60     		str	r2, [r3, #12]
 876 0248 0FE0     		b	.L47
 877              	.L46:
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE
ARM GAS  /tmp/ccIfiV56.s 			page 45


 878              		.loc 1 680 12
 879 024a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 880 024c 052B     		cmp	r3, #5
 881 024e 02D0     		beq	.L48
 882              		.loc 1 680 55 discriminator 1
 883 0250 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 884 0252 072B     		cmp	r3, #7
 885 0254 06D1     		bne	.L49
 886              	.L48:
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /*return the faulty bank*/
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = FLASH_BANK_2;
 887              		.loc 1 683 12
 888 0256 0223     		movs	r3, #2
 889 0258 FB60     		str	r3, [r7, #12]
 890 025a 06E0     		b	.L47
 891              	.L53:
 892              		.align	2
 893              	.L52:
 894 025c 00200052 		.word	1375739904
 895 0260 00000000 		.word	pFlash
 896              	.L49:
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     else
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /*return the faulty address*/
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       temp = pFlash.Address;
 897              		.loc 1 688 12
 898 0264 114B     		ldr	r3, .L54
 899 0266 1B69     		ldr	r3, [r3, #16]
 900 0268 FB60     		str	r3, [r7, #12]
 901              	.L47:
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /*Stop the procedure ongoing*/
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 902              		.loc 1 692 29
 903 026a 104B     		ldr	r3, .L54
 904 026c 0022     		movs	r2, #0
 905 026e 1A70     		strb	r2, [r3]
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(temp);
 906              		.loc 1 695 5
 907 0270 F868     		ldr	r0, [r7, #12]
 908 0272 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 909              	.L45:
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 910              		.loc 1 699 12
 911 0276 0D4B     		ldr	r3, .L54
 912 0278 1B78     		ldrb	r3, [r3]
 913 027a DBB2     		uxtb	r3, r3
 914              		.loc 1 699 5
 915 027c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccIfiV56.s 			page 46


 916 027e 10D1     		bne	.L51
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (FLASH_CR_OPERRIE)
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Disable Bank1 Operation and Error source interrupt */
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BA
 917              		.loc 1 703 5
 918 0280 0B4B     		ldr	r3, .L54+4
 919 0282 DB68     		ldr	r3, [r3, #12]
 920 0284 0A4A     		ldr	r2, .L54+4
 921 0286 23F4DE03 		bic	r3, r3, #7274496
 922 028a D360     		str	r3, [r2, #12]
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                  FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BA
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Disable Bank2 Operation and Error source interrupt */
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BA
 923              		.loc 1 708 5
 924 028c 084B     		ldr	r3, .L54+4
 925 028e D3F80C31 		ldr	r3, [r3, #268]
 926 0292 074A     		ldr	r2, .L54+4
 927 0294 23F4DE03 		bic	r3, r3, #7274496
 928 0298 C2F80C31 		str	r3, [r2, #268]
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2 | FLASH_IT_OPERR_BA
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #else
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Disable Bank1 Operation and Error source interrupt */
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BA
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                  FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1);
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Disable Bank2 Operation and Error source interrupt */
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BA
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* FLASH_CR_OPERRIE */
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Process Unlocked */
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 929              		.loc 1 724 5
 930 029c 034B     		ldr	r3, .L54
 931 029e 0022     		movs	r2, #0
 932 02a0 1A75     		strb	r2, [r3, #20]
 933              	.L51:
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 934              		.loc 1 726 1
 935 02a2 00BF     		nop
 936 02a4 1037     		adds	r7, r7, #16
 937              	.LCFI13:
 938              		.cfi_def_cfa_offset 8
 939 02a6 BD46     		mov	sp, r7
 940              	.LCFI14:
 941              		.cfi_def_cfa_register 13
 942              		@ sp needed
 943 02a8 80BD     		pop	{r7, pc}
 944              	.L55:
 945 02aa 00BF     		.align	2
ARM GAS  /tmp/ccIfiV56.s 			page 47


 946              	.L54:
 947 02ac 00000000 		.word	pFlash
 948 02b0 00200052 		.word	1375739904
 949              		.cfi_endproc
 950              	.LFE333:
 952              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 953              		.align	1
 954              		.weak	HAL_FLASH_EndOfOperationCallback
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 958              		.fpu fpv5-d16
 960              	HAL_FLASH_EndOfOperationCallback:
 961              	.LFB334:
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                  Mass Erase: Bank number which has been requested to erase
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                  Sectors Erase: Sector which has been erased
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                  Program: Address which was selected for data program
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval None
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 962              		.loc 1 738 1
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 8
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966              		@ link register save eliminated.
 967 0000 80B4     		push	{r7}
 968              	.LCFI15:
 969              		.cfi_def_cfa_offset 4
 970              		.cfi_offset 7, -4
 971 0002 83B0     		sub	sp, sp, #12
 972              	.LCFI16:
 973              		.cfi_def_cfa_offset 16
 974 0004 00AF     		add	r7, sp, #0
 975              	.LCFI17:
 976              		.cfi_def_cfa_register 7
 977 0006 7860     		str	r0, [r7, #4]
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   UNUSED(ReturnValue);
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****    */
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 978              		.loc 1 745 1
 979 0008 00BF     		nop
 980 000a 0C37     		adds	r7, r7, #12
 981              	.LCFI18:
 982              		.cfi_def_cfa_offset 4
 983 000c BD46     		mov	sp, r7
 984              	.LCFI19:
 985              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIfiV56.s 			page 48


 986              		@ sp needed
 987 000e 5DF8047B 		ldr	r7, [sp], #4
 988              	.LCFI20:
 989              		.cfi_restore 7
 990              		.cfi_def_cfa_offset 0
 991 0012 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE334:
 995              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 996              		.align	1
 997              		.weak	HAL_FLASH_OperationErrorCallback
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
 1001              		.fpu fpv5-d16
 1003              	HAL_FLASH_OperationErrorCallback:
 1004              	.LFB335:
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                 Mass Erase: Bank number which has been requested to erase
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                 Sectors Erase: Sector number which returned an error
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *                 Program: Address which was selected for data program
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval None
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1005              		.loc 1 756 1
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 8
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 1010 0000 80B4     		push	{r7}
 1011              	.LCFI21:
 1012              		.cfi_def_cfa_offset 4
 1013              		.cfi_offset 7, -4
 1014 0002 83B0     		sub	sp, sp, #12
 1015              	.LCFI22:
 1016              		.cfi_def_cfa_offset 16
 1017 0004 00AF     		add	r7, sp, #0
 1018              	.LCFI23:
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   UNUSED(ReturnValue);
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****    */
 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1021              		.loc 1 763 1
 1022 0008 00BF     		nop
 1023 000a 0C37     		adds	r7, r7, #12
 1024              	.LCFI24:
 1025              		.cfi_def_cfa_offset 4
 1026 000c BD46     		mov	sp, r7
ARM GAS  /tmp/ccIfiV56.s 			page 49


 1027              	.LCFI25:
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 000e 5DF8047B 		ldr	r7, [sp], #4
 1031              	.LCFI26:
 1032              		.cfi_restore 7
 1033              		.cfi_def_cfa_offset 0
 1034 0012 7047     		bx	lr
 1035              		.cfi_endproc
 1036              	.LFE335:
 1038              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 1039              		.align	1
 1040              		.global	HAL_FLASH_Unlock
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv5-d16
 1046              	HAL_FLASH_Unlock:
 1047              	.LFB336:
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @}
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *  @brief   Management functions
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @verbatim
 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     [..]
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     memory operations.
 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @endverbatim
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Unlock the FLASH control registers access
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1048              		.loc 1 789 1
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 1, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
 1053 0000 80B4     		push	{r7}
 1054              	.LCFI27:
 1055              		.cfi_def_cfa_offset 4
 1056              		.cfi_offset 7, -4
 1057 0002 00AF     		add	r7, sp, #0
 1058              	.LCFI28:
 1059              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccIfiV56.s 			page 50


 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 1060              		.loc 1 790 6
 1061 0004 184B     		ldr	r3, .L62
 1062 0006 DB68     		ldr	r3, [r3, #12]
 1063 0008 03F00103 		and	r3, r3, #1
 1064              		.loc 1 790 5
 1065 000c 002B     		cmp	r3, #0
 1066 000e 0DD0     		beq	.L59
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Authorize the FLASH Bank1 Registers access */
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 1067              		.loc 1 793 5
 1068 0010 154B     		ldr	r3, .L62
 1069 0012 164A     		ldr	r2, .L62+4
 1070 0014 5A60     		str	r2, [r3, #4]
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 1071              		.loc 1 794 5
 1072 0016 144B     		ldr	r3, .L62
 1073 0018 154A     		ldr	r2, .L62+8
 1074 001a 5A60     		str	r2, [r3, #4]
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Verify Flash Bank1 is unlocked */
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 1075              		.loc 1 797 9
 1076 001c 124B     		ldr	r3, .L62
 1077 001e DB68     		ldr	r3, [r3, #12]
 1078 0020 03F00103 		and	r3, r3, #1
 1079              		.loc 1 797 8
 1080 0024 002B     		cmp	r3, #0
 1081 0026 01D0     		beq	.L59
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       return HAL_ERROR;
 1082              		.loc 1 799 14
 1083 0028 0123     		movs	r3, #1
 1084 002a 18E0     		b	.L60
 1085              	.L59:
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 1086              		.loc 1 804 6
 1087 002c 0E4B     		ldr	r3, .L62
 1088 002e D3F80C31 		ldr	r3, [r3, #268]
 1089 0032 03F00103 		and	r3, r3, #1
 1090              		.loc 1 804 5
 1091 0036 002B     		cmp	r3, #0
 1092 0038 10D0     		beq	.L61
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Authorize the FLASH Bank2 Registers access */
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 1093              		.loc 1 807 5
 1094 003a 0B4B     		ldr	r3, .L62
 1095 003c 0B4A     		ldr	r2, .L62+4
 1096 003e C3F80421 		str	r2, [r3, #260]
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 1097              		.loc 1 808 5
ARM GAS  /tmp/ccIfiV56.s 			page 51


 1098 0042 094B     		ldr	r3, .L62
 1099 0044 0A4A     		ldr	r2, .L62+8
 1100 0046 C3F80421 		str	r2, [r3, #260]
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Verify Flash Bank2 is unlocked */
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 1101              		.loc 1 811 9
 1102 004a 074B     		ldr	r3, .L62
 1103 004c D3F80C31 		ldr	r3, [r3, #268]
 1104 0050 03F00103 		and	r3, r3, #1
 1105              		.loc 1 811 8
 1106 0054 002B     		cmp	r3, #0
 1107 0056 01D0     		beq	.L61
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       return HAL_ERROR;
 1108              		.loc 1 813 14
 1109 0058 0123     		movs	r3, #1
 1110 005a 00E0     		b	.L60
 1111              	.L61:
 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1112              		.loc 1 818 10
 1113 005c 0023     		movs	r3, #0
 1114              	.L60:
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1115              		.loc 1 819 1
 1116 005e 1846     		mov	r0, r3
 1117 0060 BD46     		mov	sp, r7
 1118              	.LCFI29:
 1119              		.cfi_def_cfa_register 13
 1120              		@ sp needed
 1121 0062 5DF8047B 		ldr	r7, [sp], #4
 1122              	.LCFI30:
 1123              		.cfi_restore 7
 1124              		.cfi_def_cfa_offset 0
 1125 0066 7047     		bx	lr
 1126              	.L63:
 1127              		.align	2
 1128              	.L62:
 1129 0068 00200052 		.word	1375739904
 1130 006c 23016745 		.word	1164378403
 1131 0070 AB89EFCD 		.word	-839939669
 1132              		.cfi_endproc
 1133              	.LFE336:
 1135              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 1136              		.align	1
 1137              		.global	HAL_FLASH_Lock
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv5-d16
 1143              	HAL_FLASH_Lock:
 1144              	.LFB337:
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
ARM GAS  /tmp/ccIfiV56.s 			page 52


 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Locks the FLASH control registers access
 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1145              		.loc 1 826 1
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 1, uses_anonymous_args = 0
 1149              		@ link register save eliminated.
 1150 0000 80B4     		push	{r7}
 1151              	.LCFI31:
 1152              		.cfi_def_cfa_offset 4
 1153              		.cfi_offset 7, -4
 1154 0002 00AF     		add	r7, sp, #0
 1155              	.LCFI32:
 1156              		.cfi_def_cfa_register 7
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 1157              		.loc 1 828 3
 1158 0004 124B     		ldr	r3, .L68
 1159 0006 DB68     		ldr	r3, [r3, #12]
 1160 0008 114A     		ldr	r2, .L68
 1161 000a 43F00103 		orr	r3, r3, #1
 1162 000e D360     		str	r3, [r2, #12]
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Verify Flash Bank1 is locked */
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 1163              		.loc 1 831 7
 1164 0010 0F4B     		ldr	r3, .L68
 1165 0012 DB68     		ldr	r3, [r3, #12]
 1166 0014 03F00103 		and	r3, r3, #1
 1167              		.loc 1 831 6
 1168 0018 002B     		cmp	r3, #0
 1169 001a 01D1     		bne	.L65
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 1170              		.loc 1 833 12
 1171 001c 0123     		movs	r3, #1
 1172 001e 11E0     		b	.L66
 1173              	.L65:
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 1174              		.loc 1 838 3
 1175 0020 0B4B     		ldr	r3, .L68
 1176 0022 D3F80C31 		ldr	r3, [r3, #268]
 1177 0026 0A4A     		ldr	r2, .L68
 1178 0028 43F00103 		orr	r3, r3, #1
 1179 002c C2F80C31 		str	r3, [r2, #268]
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Verify Flash Bank2 is locked */
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 1180              		.loc 1 841 7
ARM GAS  /tmp/ccIfiV56.s 			page 53


 1181 0030 074B     		ldr	r3, .L68
 1182 0032 D3F80C31 		ldr	r3, [r3, #268]
 1183 0036 03F00103 		and	r3, r3, #1
 1184              		.loc 1 841 6
 1185 003a 002B     		cmp	r3, #0
 1186 003c 01D1     		bne	.L67
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 1187              		.loc 1 843 12
 1188 003e 0123     		movs	r3, #1
 1189 0040 00E0     		b	.L66
 1190              	.L67:
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1191              		.loc 1 847 10
 1192 0042 0023     		movs	r3, #0
 1193              	.L66:
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1194              		.loc 1 848 1
 1195 0044 1846     		mov	r0, r3
 1196 0046 BD46     		mov	sp, r7
 1197              	.LCFI33:
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 0048 5DF8047B 		ldr	r7, [sp], #4
 1201              	.LCFI34:
 1202              		.cfi_restore 7
 1203              		.cfi_def_cfa_offset 0
 1204 004c 7047     		bx	lr
 1205              	.L69:
 1206 004e 00BF     		.align	2
 1207              	.L68:
 1208 0050 00200052 		.word	1375739904
 1209              		.cfi_endproc
 1210              	.LFE337:
 1212              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 1213              		.align	1
 1214              		.global	HAL_FLASH_OB_Unlock
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv5-d16
 1220              	HAL_FLASH_OB_Unlock:
 1221              	.LFB338:
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Control Registers access.
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1222              		.loc 1 855 1
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccIfiV56.s 			page 54


 1226              		@ link register save eliminated.
 1227 0000 80B4     		push	{r7}
 1228              	.LCFI35:
 1229              		.cfi_def_cfa_offset 4
 1230              		.cfi_offset 7, -4
 1231 0002 00AF     		add	r7, sp, #0
 1232              	.LCFI36:
 1233              		.cfi_def_cfa_register 7
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 1234              		.loc 1 856 6
 1235 0004 0C4B     		ldr	r3, .L73
 1236 0006 9B69     		ldr	r3, [r3, #24]
 1237 0008 03F00103 		and	r3, r3, #1
 1238              		.loc 1 856 5
 1239 000c 002B     		cmp	r3, #0
 1240 000e 0DD0     		beq	.L71
 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Authorizes the Option Byte registers programming */
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 1241              		.loc 1 859 5
 1242 0010 094B     		ldr	r3, .L73
 1243 0012 0A4A     		ldr	r2, .L73+4
 1244 0014 9A60     		str	r2, [r3, #8]
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 1245              		.loc 1 860 5
 1246 0016 084B     		ldr	r3, .L73
 1247 0018 094A     		ldr	r2, .L73+8
 1248 001a 9A60     		str	r2, [r3, #8]
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Verify that the Option Bytes are unlocked */
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 1249              		.loc 1 863 9
 1250 001c 064B     		ldr	r3, .L73
 1251 001e 9B69     		ldr	r3, [r3, #24]
 1252 0020 03F00103 		and	r3, r3, #1
 1253              		.loc 1 863 8
 1254 0024 002B     		cmp	r3, #0
 1255 0026 01D0     		beq	.L71
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       return HAL_ERROR;
 1256              		.loc 1 865 14
 1257 0028 0123     		movs	r3, #1
 1258 002a 00E0     		b	.L72
 1259              	.L71:
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1260              		.loc 1 869 10
 1261 002c 0023     		movs	r3, #0
 1262              	.L72:
 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1263              		.loc 1 870 1
 1264 002e 1846     		mov	r0, r3
 1265 0030 BD46     		mov	sp, r7
 1266              	.LCFI37:
 1267              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIfiV56.s 			page 55


 1268              		@ sp needed
 1269 0032 5DF8047B 		ldr	r7, [sp], #4
 1270              	.LCFI38:
 1271              		.cfi_restore 7
 1272              		.cfi_def_cfa_offset 0
 1273 0036 7047     		bx	lr
 1274              	.L74:
 1275              		.align	2
 1276              	.L73:
 1277 0038 00200052 		.word	1375739904
 1278 003c 3B2A1908 		.word	135866939
 1279 0040 7F6E5D4C 		.word	1281191551
 1280              		.cfi_endproc
 1281              	.LFE338:
 1283              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 1284              		.align	1
 1285              		.global	HAL_FLASH_OB_Lock
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1289              		.fpu fpv5-d16
 1291              	HAL_FLASH_OB_Lock:
 1292              	.LFB339:
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Lock the FLASH Option Control Registers access.
 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1293              		.loc 1 877 1
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298 0000 80B4     		push	{r7}
 1299              	.LCFI39:
 1300              		.cfi_def_cfa_offset 4
 1301              		.cfi_offset 7, -4
 1302 0002 00AF     		add	r7, sp, #0
 1303              	.LCFI40:
 1304              		.cfi_def_cfa_register 7
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
 1305              		.loc 1 879 3
 1306 0004 094B     		ldr	r3, .L78
 1307 0006 9B69     		ldr	r3, [r3, #24]
 1308 0008 084A     		ldr	r2, .L78
 1309 000a 43F00103 		orr	r3, r3, #1
 1310 000e 9361     		str	r3, [r2, #24]
 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Verify that the Option Bytes are locked */
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
 1311              		.loc 1 882 7
 1312 0010 064B     		ldr	r3, .L78
 1313 0012 9B69     		ldr	r3, [r3, #24]
 1314 0014 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccIfiV56.s 			page 56


 1315              		.loc 1 882 6
 1316 0018 002B     		cmp	r3, #0
 1317 001a 01D1     		bne	.L76
 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 1318              		.loc 1 884 12
 1319 001c 0123     		movs	r3, #1
 1320 001e 00E0     		b	.L77
 1321              	.L76:
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1322              		.loc 1 887 10
 1323 0020 0023     		movs	r3, #0
 1324              	.L77:
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1325              		.loc 1 888 1
 1326 0022 1846     		mov	r0, r3
 1327 0024 BD46     		mov	sp, r7
 1328              	.LCFI41:
 1329              		.cfi_def_cfa_register 13
 1330              		@ sp needed
 1331 0026 5DF8047B 		ldr	r7, [sp], #4
 1332              	.LCFI42:
 1333              		.cfi_restore 7
 1334              		.cfi_def_cfa_offset 0
 1335 002a 7047     		bx	lr
 1336              	.L79:
 1337              		.align	2
 1338              	.L78:
 1339 002c 00200052 		.word	1375739904
 1340              		.cfi_endproc
 1341              	.LFE339:
 1343              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 1344              		.align	1
 1345              		.global	HAL_FLASH_OB_Launch
 1346              		.syntax unified
 1347              		.thumb
 1348              		.thumb_func
 1349              		.fpu fpv5-d16
 1351              	HAL_FLASH_OB_Launch:
 1352              	.LFB340:
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Launch the option bytes loading.
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL Status
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1353              		.loc 1 895 1
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357 0000 80B5     		push	{r7, lr}
 1358              	.LCFI43:
 1359              		.cfi_def_cfa_offset 8
 1360              		.cfi_offset 7, -8
ARM GAS  /tmp/ccIfiV56.s 			page 57


 1361              		.cfi_offset 14, -4
 1362 0002 82B0     		sub	sp, sp, #8
 1363              	.LCFI44:
 1364              		.cfi_def_cfa_offset 16
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI45:
 1367              		.cfi_def_cfa_register 7
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   HAL_StatusTypeDef status;
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for CRC computation to be completed */
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 1368              		.loc 1 899 7
 1369 0006 0121     		movs	r1, #1
 1370 0008 4CF25030 		movw	r0, #50000
 1371 000c FFF7FEFF 		bl	FLASH_CRC_WaitForLastOperation
 1372 0010 0346     		mov	r3, r0
 1373              		.loc 1 899 6
 1374 0012 002B     		cmp	r3, #0
 1375 0014 02D0     		beq	.L81
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     status = HAL_ERROR;
 1376              		.loc 1 901 12
 1377 0016 0123     		movs	r3, #1
 1378 0018 FB71     		strb	r3, [r7, #7]
 1379 001a 0CE0     		b	.L82
 1380              	.L81:
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 1381              		.loc 1 904 12
 1382 001c 0221     		movs	r1, #2
 1383 001e 4CF25030 		movw	r0, #50000
 1384 0022 FFF7FEFF 		bl	FLASH_CRC_WaitForLastOperation
 1385 0026 0346     		mov	r3, r0
 1386              		.loc 1 904 11
 1387 0028 002B     		cmp	r3, #0
 1388 002a 02D0     		beq	.L83
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     status = HAL_ERROR;
 1389              		.loc 1 906 12
 1390 002c 0123     		movs	r3, #1
 1391 002e FB71     		strb	r3, [r7, #7]
 1392 0030 01E0     		b	.L82
 1393              	.L83:
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     status = HAL_OK;
 1394              		.loc 1 911 12
 1395 0032 0023     		movs	r3, #0
 1396 0034 FB71     		strb	r3, [r7, #7]
 1397              	.L82:
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (status == HAL_OK)
 1398              		.loc 1 914 6
ARM GAS  /tmp/ccIfiV56.s 			page 58


 1399 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1400 0038 002B     		cmp	r3, #0
 1401 003a 0BD1     		bne	.L84
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Set OPTSTRT Bit */
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 1402              		.loc 1 917 5
 1403 003c 084B     		ldr	r3, .L86
 1404 003e 9B69     		ldr	r3, [r3, #24]
 1405 0040 074A     		ldr	r2, .L86
 1406 0042 43F00203 		orr	r3, r3, #2
 1407 0046 9361     		str	r3, [r2, #24]
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Wait for OB change operation to be completed */
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1408              		.loc 1 920 14
 1409 0048 4CF25030 		movw	r0, #50000
 1410 004c FFF7FEFF 		bl	FLASH_OB_WaitForLastOperation
 1411 0050 0346     		mov	r3, r0
 1412 0052 FB71     		strb	r3, [r7, #7]
 1413              	.L84:
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return status;
 1414              		.loc 1 923 10
 1415 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1416              		.loc 1 924 1
 1417 0056 1846     		mov	r0, r3
 1418 0058 0837     		adds	r7, r7, #8
 1419              	.LCFI46:
 1420              		.cfi_def_cfa_offset 8
 1421 005a BD46     		mov	sp, r7
 1422              	.LCFI47:
 1423              		.cfi_def_cfa_register 13
 1424              		@ sp needed
 1425 005c 80BD     		pop	{r7, pc}
 1426              	.L87:
 1427 005e 00BF     		.align	2
 1428              	.L86:
 1429 0060 00200052 		.word	1375739904
 1430              		.cfi_endproc
 1431              	.LFE340:
 1433              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 1434              		.align	1
 1435              		.global	HAL_FLASH_GetError
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv5-d16
 1441              	HAL_FLASH_GetError:
 1442              	.LFB341:
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @}
 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
ARM GAS  /tmp/ccIfiV56.s 			page 59


 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  *
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @verbatim
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****  ===============================================================================
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     [..]
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** @endverbatim
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL_FLASH_ERRORCode The returned value can be:
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_NONE       : No error set
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP_BANK1  : Write Protection Error on Bank 1
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS_BANK1  : Program Sequence Error on Bank 1
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_STRB_BANK1 : Strobe Error on Bank 1
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_INC_BANK1  : Inconsistency Error on Bank 1
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPE_BANK1  : Operation Error on Bank 1
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RDP_BANK1  : Read Protection Error on Bank 1
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RDS_BANK1  : Read Secured Error on Bank 1
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_SNECC_BANK1: ECC Single Correction Error on Bank 1
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_DBECC_BANK1: ECC Double Detection Error on Bank 1
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_CRCRD_BANK1: CRC Read Error on Bank 1
 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP_BANK2  : Write Protection Error on Bank 2
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS_BANK2  : Program Sequence Error on Bank 2
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_STRB_BANK2 : Strobe Error on Bank 2
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_INC_BANK2  : Inconsistency Error on Bank 2
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPE_BANK2  : Operation Error on Bank 2
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RDP_BANK2  : Read Protection Error on Bank 2
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RDS_BANK2  : Read Secured Error on Bank 2
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_SNECC_BANK2: SNECC Error on Bank 2
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** */
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1443              		.loc 1 973 1
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 1, uses_anonymous_args = 0
 1447              		@ link register save eliminated.
 1448 0000 80B4     		push	{r7}
 1449              	.LCFI48:
 1450              		.cfi_def_cfa_offset 4
 1451              		.cfi_offset 7, -4
 1452 0002 00AF     		add	r7, sp, #0
 1453              	.LCFI49:
 1454              		.cfi_def_cfa_register 7
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****    return pFlash.ErrorCode;
ARM GAS  /tmp/ccIfiV56.s 			page 60


 1455              		.loc 1 974 17
 1456 0004 034B     		ldr	r3, .L90
 1457 0006 9B69     		ldr	r3, [r3, #24]
 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1458              		.loc 1 975 1
 1459 0008 1846     		mov	r0, r3
 1460 000a BD46     		mov	sp, r7
 1461              	.LCFI50:
 1462              		.cfi_def_cfa_register 13
 1463              		@ sp needed
 1464 000c 5DF8047B 		ldr	r7, [sp], #4
 1465              	.LCFI51:
 1466              		.cfi_restore 7
 1467              		.cfi_def_cfa_offset 0
 1468 0010 7047     		bx	lr
 1469              	.L91:
 1470 0012 00BF     		.align	2
 1471              	.L90:
 1472 0014 00000000 		.word	pFlash
 1473              		.cfi_endproc
 1474              	.LFE341:
 1476              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 1477              		.align	1
 1478              		.global	FLASH_WaitForLastOperation
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv5-d16
 1484              	FLASH_WaitForLastOperation:
 1485              	.LFB342:
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @}
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @}
 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @{
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1486              		.loc 1 998 1
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 24
 1489              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccIfiV56.s 			page 61


 1490 0000 80B5     		push	{r7, lr}
 1491              	.LCFI52:
 1492              		.cfi_def_cfa_offset 8
 1493              		.cfi_offset 7, -8
 1494              		.cfi_offset 14, -4
 1495 0002 86B0     		sub	sp, sp, #24
 1496              	.LCFI53:
 1497              		.cfi_def_cfa_offset 32
 1498 0004 00AF     		add	r7, sp, #0
 1499              	.LCFI54:
 1500              		.cfi_def_cfa_register 7
 1501 0006 7860     		str	r0, [r7, #4]
 1502 0008 3960     		str	r1, [r7]
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****      Even if the FLASH operation fails, the QW flag will be reset and an error
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****      flag will be set */
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 1503              		.loc 1 1003 12
 1504 000a 0423     		movs	r3, #4
 1505 000c 7B61     		str	r3, [r7, #20]
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 1506              		.loc 1 1004 29
 1507 000e 424B     		ldr	r3, .L105
 1508 0010 1A69     		ldr	r2, [r3, #16]
 1509              		.loc 1 1004 12
 1510 0012 424B     		ldr	r3, .L105+4
 1511 0014 1340     		ands	r3, r3, r2
 1512 0016 3B61     		str	r3, [r7, #16]
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 1513              		.loc 1 1005 24
 1514 0018 FFF7FEFF 		bl	HAL_GetTick
 1515 001c F860     		str	r0, [r7, #12]
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if (Bank == FLASH_BANK_2)
 1516              		.loc 1 1011 6
 1517 001e 3B68     		ldr	r3, [r7]
 1518 0020 022B     		cmp	r3, #2
 1519 0022 1BD1     		bne	.L94
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Get Error Flags */
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 1520              		.loc 1 1014 23
 1521 0024 3C4B     		ldr	r3, .L105
 1522 0026 D3F81021 		ldr	r2, [r3, #272]
 1523              		.loc 1 1014 60
 1524 002a 3C4B     		ldr	r3, .L105+4
 1525 002c 1340     		ands	r3, r3, r2
 1526              		.loc 1 1014 15
 1527 002e 43F00043 		orr	r3, r3, #-2147483648
 1528 0032 3B61     		str	r3, [r7, #16]
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Select bsyflag depending on Bank */
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bsyflag = FLASH_FLAG_QW_BANK2;
ARM GAS  /tmp/ccIfiV56.s 			page 62


 1529              		.loc 1 1016 13
 1530 0034 3A4B     		ldr	r3, .L105+8
 1531 0036 7B61     		str	r3, [r7, #20]
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(bsyflag))
 1532              		.loc 1 1020 8
 1533 0038 10E0     		b	.L94
 1534              	.L99:
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 1535              		.loc 1 1022 7
 1536 003a 7B68     		ldr	r3, [r7, #4]
 1537 003c B3F1FF3F 		cmp	r3, #-1
 1538 0040 0CD0     		beq	.L94
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 1539              		.loc 1 1024 12
 1540 0042 FFF7FEFF 		bl	HAL_GetTick
 1541 0046 0246     		mov	r2, r0
 1542              		.loc 1 1024 26
 1543 0048 FB68     		ldr	r3, [r7, #12]
 1544 004a D31A     		subs	r3, r2, r3
 1545              		.loc 1 1024 9
 1546 004c 7A68     		ldr	r2, [r7, #4]
 1547 004e 9A42     		cmp	r2, r3
 1548 0050 02D3     		bcc	.L95
 1549              		.loc 1 1024 50 discriminator 1
 1550 0052 7B68     		ldr	r3, [r7, #4]
 1551 0054 002B     		cmp	r3, #0
 1552 0056 01D1     		bne	.L94
 1553              	.L95:
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         return HAL_TIMEOUT;
 1554              		.loc 1 1026 16
 1555 0058 0323     		movs	r3, #3
 1556 005a 59E0     		b	.L96
 1557              	.L94:
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1558              		.loc 1 1020 9
 1559 005c 7A69     		ldr	r2, [r7, #20]
 1560 005e 314B     		ldr	r3, .L105+12
 1561 0060 1340     		ands	r3, r3, r2
 1562 0062 7A69     		ldr	r2, [r7, #20]
 1563 0064 9A42     		cmp	r2, r3
 1564 0066 0AD1     		bne	.L97
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1565              		.loc 1 1020 9 is_stmt 0 discriminator 1
 1566 0068 2B4B     		ldr	r3, .L105
 1567 006a 1A69     		ldr	r2, [r3, #16]
 1568 006c 7B69     		ldr	r3, [r7, #20]
 1569 006e 1340     		ands	r3, r3, r2
 1570 0070 7A69     		ldr	r2, [r7, #20]
 1571 0072 9A42     		cmp	r2, r3
 1572 0074 0CBF     		ite	eq
 1573 0076 0123     		moveq	r3, #1
ARM GAS  /tmp/ccIfiV56.s 			page 63


 1574 0078 0023     		movne	r3, #0
 1575 007a DBB2     		uxtb	r3, r3
 1576 007c 0CE0     		b	.L98
 1577              	.L97:
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1578              		.loc 1 1020 9 discriminator 2
 1579 007e 264B     		ldr	r3, .L105
 1580 0080 D3F81031 		ldr	r3, [r3, #272]
 1581 0084 DA43     		mvns	r2, r3
 1582 0086 7B69     		ldr	r3, [r7, #20]
 1583 0088 1340     		ands	r3, r3, r2
 1584 008a 23F00043 		bic	r3, r3, #-2147483648
 1585 008e 002B     		cmp	r3, #0
 1586 0090 0CBF     		ite	eq
 1587 0092 0123     		moveq	r3, #1
 1588 0094 0023     		movne	r3, #0
 1589 0096 DBB2     		uxtb	r3, r3
 1590              	.L98:
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1591              		.loc 1 1020 8 is_stmt 1 discriminator 4
 1592 0098 002B     		cmp	r3, #0
 1593 009a CED1     		bne	.L99
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* In case of error reported in Flash SR1 or SR2 register */
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if((errorflag & 0x7FFFFFFFU) != 0U)
 1594              		.loc 1 1032 17
 1595 009c 3B69     		ldr	r3, [r7, #16]
 1596 009e 23F00043 		bic	r3, r3, #-2147483648
 1597              		.loc 1 1032 5
 1598 00a2 002B     		cmp	r3, #0
 1599 00a4 17D0     		beq	.L100
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /*Save the error code*/
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ErrorCode |= errorflag;
 1600              		.loc 1 1035 22
 1601 00a6 204B     		ldr	r3, .L105+16
 1602 00a8 9A69     		ldr	r2, [r3, #24]
 1603 00aa 3B69     		ldr	r3, [r7, #16]
 1604 00ac 1343     		orrs	r3, r3, r2
 1605 00ae 1E4A     		ldr	r2, .L105+16
 1606 00b0 9361     		str	r3, [r2, #24]
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Clear error programming flags */
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(errorflag);
 1607              		.loc 1 1038 5
 1608 00b2 3A69     		ldr	r2, [r7, #16]
 1609 00b4 1B4B     		ldr	r3, .L105+12
 1610 00b6 1340     		ands	r3, r3, r2
 1611 00b8 3A69     		ldr	r2, [r7, #16]
 1612 00ba 9A42     		cmp	r2, r3
 1613 00bc 03D1     		bne	.L101
 1614              		.loc 1 1038 5 is_stmt 0 discriminator 1
 1615 00be 164A     		ldr	r2, .L105
 1616 00c0 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccIfiV56.s 			page 64


 1617 00c2 5361     		str	r3, [r2, #20]
 1618 00c4 05E0     		b	.L102
 1619              	.L101:
 1620              		.loc 1 1038 5 discriminator 2
 1621 00c6 144A     		ldr	r2, .L105
 1622 00c8 3B69     		ldr	r3, [r7, #16]
 1623 00ca 23F00043 		bic	r3, r3, #-2147483648
 1624 00ce C2F81431 		str	r3, [r2, #276]
 1625              	.L102:
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 1626              		.loc 1 1040 12 is_stmt 1
 1627 00d2 0123     		movs	r3, #1
 1628 00d4 1CE0     		b	.L96
 1629              	.L100:
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(Bank == FLASH_BANK_1)
 1630              		.loc 1 1044 5
 1631 00d6 3B68     		ldr	r3, [r7]
 1632 00d8 012B     		cmp	r3, #1
 1633 00da 0BD1     		bne	.L103
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 1634              		.loc 1 1046 9
 1635 00dc 0E4B     		ldr	r3, .L105
 1636 00de 1B69     		ldr	r3, [r3, #16]
 1637 00e0 03F48033 		and	r3, r3, #65536
 1638              		.loc 1 1046 8
 1639 00e4 B3F5803F 		cmp	r3, #65536
 1640 00e8 11D1     		bne	.L104
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Clear FLASH End of Operation pending bit */
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 1641              		.loc 1 1049 7
 1642 00ea 0B4B     		ldr	r3, .L105
 1643 00ec 4FF48032 		mov	r2, #65536
 1644 00f0 5A61     		str	r2, [r3, #20]
 1645 00f2 0CE0     		b	.L104
 1646              	.L103:
1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 1647              		.loc 1 1055 9
 1648 00f4 084B     		ldr	r3, .L105
 1649 00f6 D3F81031 		ldr	r3, [r3, #272]
 1650 00fa 03F48033 		and	r3, r3, #65536
 1651              		.loc 1 1055 8
 1652 00fe B3F5803F 		cmp	r3, #65536
 1653 0102 04D1     		bne	.L104
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Clear FLASH End of Operation pending bit */
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
ARM GAS  /tmp/ccIfiV56.s 			page 65


 1654              		.loc 1 1058 7
 1655 0104 044B     		ldr	r3, .L105
 1656 0106 4FF48032 		mov	r2, #65536
 1657 010a C3F81421 		str	r2, [r3, #276]
 1658              	.L104:
1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1659              		.loc 1 1063 10
 1660 010e 0023     		movs	r3, #0
 1661              	.L96:
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1662              		.loc 1 1064 1
 1663 0110 1846     		mov	r0, r3
 1664 0112 1837     		adds	r7, r7, #24
 1665              	.LCFI55:
 1666              		.cfi_def_cfa_offset 8
 1667 0114 BD46     		mov	sp, r7
 1668              	.LCFI56:
 1669              		.cfi_def_cfa_register 13
 1670              		@ sp needed
 1671 0116 80BD     		pop	{r7, pc}
 1672              	.L106:
 1673              		.align	2
 1674              	.L105:
 1675 0118 00200052 		.word	1375739904
 1676 011c 0000EE17 		.word	401473536
 1677 0120 04000080 		.word	-2147483644
 1678 0124 0F00EF1F 		.word	535756815
 1679 0128 00000000 		.word	pFlash
 1680              		.cfi_endproc
 1681              	.LFE342:
 1683              		.section	.text.FLASH_OB_WaitForLastOperation,"ax",%progbits
 1684              		.align	1
 1685              		.global	FLASH_OB_WaitForLastOperation
 1686              		.syntax unified
 1687              		.thumb
 1688              		.thumb_func
 1689              		.fpu fpv5-d16
 1691              	FLASH_OB_WaitForLastOperation:
 1692              	.LFB343:
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Wait for a FLASH Option Bytes change operation to complete.
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1693              		.loc 1 1072 1
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 16
 1696              		@ frame_needed = 1, uses_anonymous_args = 0
 1697 0000 80B5     		push	{r7, lr}
 1698              	.LCFI57:
ARM GAS  /tmp/ccIfiV56.s 			page 66


 1699              		.cfi_def_cfa_offset 8
 1700              		.cfi_offset 7, -8
 1701              		.cfi_offset 14, -4
 1702 0002 84B0     		sub	sp, sp, #16
 1703              	.LCFI58:
 1704              		.cfi_def_cfa_offset 24
 1705 0004 00AF     		add	r7, sp, #0
 1706              	.LCFI59:
 1707              		.cfi_def_cfa_register 7
 1708 0006 7860     		str	r0, [r7, #4]
1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Get timeout */
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 1709              		.loc 1 1074 24
 1710 0008 FFF7FEFF 		bl	HAL_GetTick
 1711 000c F860     		str	r0, [r7, #12]
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 1712              		.loc 1 1077 8
 1713 000e 10E0     		b	.L108
 1714              	.L111:
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 1715              		.loc 1 1079 7
 1716 0010 7B68     		ldr	r3, [r7, #4]
 1717 0012 B3F1FF3F 		cmp	r3, #-1
 1718 0016 0CD0     		beq	.L108
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 1719              		.loc 1 1081 12
 1720 0018 FFF7FEFF 		bl	HAL_GetTick
 1721 001c 0246     		mov	r2, r0
 1722              		.loc 1 1081 26
 1723 001e FB68     		ldr	r3, [r7, #12]
 1724 0020 D31A     		subs	r3, r2, r3
 1725              		.loc 1 1081 9
 1726 0022 7A68     		ldr	r2, [r7, #4]
 1727 0024 9A42     		cmp	r2, r3
 1728 0026 02D3     		bcc	.L109
 1729              		.loc 1 1081 50 discriminator 1
 1730 0028 7B68     		ldr	r3, [r7, #4]
 1731 002a 002B     		cmp	r3, #0
 1732 002c 01D1     		bne	.L108
 1733              	.L109:
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         return HAL_TIMEOUT;
 1734              		.loc 1 1083 16
 1735 002e 0323     		movs	r3, #3
 1736 0030 1AE0     		b	.L110
 1737              	.L108:
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1738              		.loc 1 1077 9
 1739 0032 0F4B     		ldr	r3, .L113
 1740 0034 DB69     		ldr	r3, [r3, #28]
 1741 0036 03F00103 		and	r3, r3, #1
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1742              		.loc 1 1077 8
ARM GAS  /tmp/ccIfiV56.s 			page 67


 1743 003a 002B     		cmp	r3, #0
 1744 003c E8D1     		bne	.L111
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check option byte change error */
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 1745              		.loc 1 1089 6
 1746 003e 0C4B     		ldr	r3, .L113
 1747 0040 DB69     		ldr	r3, [r3, #28]
 1748 0042 03F08043 		and	r3, r3, #1073741824
 1749              		.loc 1 1089 5
 1750 0046 002B     		cmp	r3, #0
 1751 0048 0DD0     		beq	.L112
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Save the error code */
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 1752              		.loc 1 1092 22
 1753 004a 0A4B     		ldr	r3, .L113+4
 1754 004c 9B69     		ldr	r3, [r3, #24]
 1755 004e 43F08043 		orr	r3, r3, #1073741824
 1756 0052 084A     		ldr	r2, .L113+4
 1757 0054 9361     		str	r3, [r2, #24]
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     /* Clear the OB error flag */
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 1758              		.loc 1 1095 19
 1759 0056 064B     		ldr	r3, .L113
 1760 0058 5B6A     		ldr	r3, [r3, #36]
 1761 005a 054A     		ldr	r2, .L113
 1762 005c 43F08043 		orr	r3, r3, #1073741824
 1763 0060 5362     		str	r3, [r2, #36]
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     return HAL_ERROR;
 1764              		.loc 1 1097 12
 1765 0062 0123     		movs	r3, #1
 1766 0064 00E0     		b	.L110
 1767              	.L112:
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* If there is no error flag set */
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
 1768              		.loc 1 1101 10
 1769 0066 0023     		movs	r3, #0
 1770              	.L110:
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1771              		.loc 1 1102 1
 1772 0068 1846     		mov	r0, r3
 1773 006a 1037     		adds	r7, r7, #16
 1774              	.LCFI60:
 1775              		.cfi_def_cfa_offset 8
 1776 006c BD46     		mov	sp, r7
 1777              	.LCFI61:
 1778              		.cfi_def_cfa_register 13
 1779              		@ sp needed
 1780 006e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccIfiV56.s 			page 68


 1781              	.L114:
 1782              		.align	2
 1783              	.L113:
 1784 0070 00200052 		.word	1375739904
 1785 0074 00000000 		.word	pFlash
 1786              		.cfi_endproc
 1787              	.LFE343:
 1789              		.section	.text.FLASH_CRC_WaitForLastOperation,"ax",%progbits
 1790              		.align	1
 1791              		.global	FLASH_CRC_WaitForLastOperation
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv5-d16
 1797              	FLASH_CRC_WaitForLastOperation:
 1798              	.LFB344:
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** /**
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @brief  Wait for a FLASH CRC computation to complete.
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  Timeout maximum flash operation timeout
1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   */
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** {
 1799              		.loc 1 1111 1
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 16
 1802              		@ frame_needed = 1, uses_anonymous_args = 0
 1803 0000 80B5     		push	{r7, lr}
 1804              	.LCFI62:
 1805              		.cfi_def_cfa_offset 8
 1806              		.cfi_offset 7, -8
 1807              		.cfi_offset 14, -4
 1808 0002 84B0     		sub	sp, sp, #16
 1809              	.LCFI63:
 1810              		.cfi_def_cfa_offset 24
 1811 0004 00AF     		add	r7, sp, #0
 1812              	.LCFI64:
 1813              		.cfi_def_cfa_register 7
 1814 0006 7860     		str	r0, [r7, #4]
 1815 0008 3960     		str	r1, [r7]
1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t bsyflag;
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 1816              		.loc 1 1113 24
 1817 000a FFF7FEFF 		bl	HAL_GetTick
 1818 000e B860     		str	r0, [r7, #8]
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Select bsyflag depending on Bank */
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(Bank == FLASH_BANK_1)
 1819              		.loc 1 1118 5
 1820 0010 3B68     		ldr	r3, [r7]
 1821 0012 012B     		cmp	r3, #1
 1822 0014 02D1     		bne	.L116
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
ARM GAS  /tmp/ccIfiV56.s 			page 69


1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 1823              		.loc 1 1120 13
 1824 0016 0823     		movs	r3, #8
 1825 0018 FB60     		str	r3, [r7, #12]
 1826 001a 13E0     		b	.L118
 1827              	.L116:
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 1828              		.loc 1 1124 13
 1829 001c 314B     		ldr	r3, .L126
 1830 001e FB60     		str	r3, [r7, #12]
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(bsyflag))
 1831              		.loc 1 1128 8
 1832 0020 10E0     		b	.L118
 1833              	.L123:
1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 1834              		.loc 1 1130 7
 1835 0022 7B68     		ldr	r3, [r7, #4]
 1836 0024 B3F1FF3F 		cmp	r3, #-1
 1837 0028 0CD0     		beq	.L118
1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 1838              		.loc 1 1132 12
 1839 002a FFF7FEFF 		bl	HAL_GetTick
 1840 002e 0246     		mov	r2, r0
 1841              		.loc 1 1132 26
 1842 0030 BB68     		ldr	r3, [r7, #8]
 1843 0032 D31A     		subs	r3, r2, r3
 1844              		.loc 1 1132 9
 1845 0034 7A68     		ldr	r2, [r7, #4]
 1846 0036 9A42     		cmp	r2, r3
 1847 0038 02D3     		bcc	.L119
 1848              		.loc 1 1132 50 discriminator 1
 1849 003a 7B68     		ldr	r3, [r7, #4]
 1850 003c 002B     		cmp	r3, #0
 1851 003e 01D1     		bne	.L118
 1852              	.L119:
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       {
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****         return HAL_TIMEOUT;
 1853              		.loc 1 1134 16
 1854 0040 0323     		movs	r3, #3
 1855 0042 4BE0     		b	.L120
 1856              	.L118:
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1857              		.loc 1 1128 9
 1858 0044 FA68     		ldr	r2, [r7, #12]
 1859 0046 284B     		ldr	r3, .L126+4
 1860 0048 1340     		ands	r3, r3, r2
 1861 004a FA68     		ldr	r2, [r7, #12]
 1862 004c 9A42     		cmp	r2, r3
 1863 004e 0AD1     		bne	.L121
ARM GAS  /tmp/ccIfiV56.s 			page 70


1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1864              		.loc 1 1128 9 is_stmt 0 discriminator 1
 1865 0050 264B     		ldr	r3, .L126+8
 1866 0052 1A69     		ldr	r2, [r3, #16]
 1867 0054 FB68     		ldr	r3, [r7, #12]
 1868 0056 1340     		ands	r3, r3, r2
 1869 0058 FA68     		ldr	r2, [r7, #12]
 1870 005a 9A42     		cmp	r2, r3
 1871 005c 0CBF     		ite	eq
 1872 005e 0123     		moveq	r3, #1
 1873 0060 0023     		movne	r3, #0
 1874 0062 DBB2     		uxtb	r3, r3
 1875 0064 0CE0     		b	.L122
 1876              	.L121:
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1877              		.loc 1 1128 9 discriminator 2
 1878 0066 214B     		ldr	r3, .L126+8
 1879 0068 D3F81031 		ldr	r3, [r3, #272]
 1880 006c DA43     		mvns	r2, r3
 1881 006e FB68     		ldr	r3, [r7, #12]
 1882 0070 1340     		ands	r3, r3, r2
 1883 0072 23F00043 		bic	r3, r3, #-2147483648
 1884 0076 002B     		cmp	r3, #0
 1885 0078 0CBF     		ite	eq
 1886 007a 0123     		moveq	r3, #1
 1887 007c 0023     		movne	r3, #0
 1888 007e DBB2     		uxtb	r3, r3
 1889              	.L122:
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
 1890              		.loc 1 1128 8 is_stmt 1 discriminator 4
 1891 0080 002B     		cmp	r3, #0
 1892 0082 CED1     		bne	.L123
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       }
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* Check FLASH CRC read error flag  */
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   if(Bank == FLASH_BANK_1)
 1893              		.loc 1 1140 5
 1894 0084 3B68     		ldr	r3, [r7]
 1895 0086 012B     		cmp	r3, #1
 1896 0088 12D1     		bne	.L124
1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 1897              		.loc 1 1142 9
 1898 008a 184B     		ldr	r3, .L126+8
 1899 008c 1B69     		ldr	r3, [r3, #16]
 1900 008e 03F08053 		and	r3, r3, #268435456
 1901              		.loc 1 1142 8
 1902 0092 B3F1805F 		cmp	r3, #268435456
 1903 0096 20D1     		bne	.L125
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Save the error code */
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 1904              		.loc 1 1145 24
 1905 0098 154B     		ldr	r3, .L126+12
 1906 009a 9B69     		ldr	r3, [r3, #24]
ARM GAS  /tmp/ccIfiV56.s 			page 71


 1907 009c 43F08053 		orr	r3, r3, #268435456
 1908 00a0 134A     		ldr	r2, .L126+12
 1909 00a2 9361     		str	r3, [r2, #24]
1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Clear FLASH CRC read error pending bit */
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 1910              		.loc 1 1148 7
 1911 00a4 114B     		ldr	r3, .L126+8
 1912 00a6 4FF08052 		mov	r2, #268435456
 1913 00aa 5A61     		str	r2, [r3, #20]
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       return HAL_ERROR;
 1914              		.loc 1 1150 14
 1915 00ac 0123     		movs	r3, #1
 1916 00ae 15E0     		b	.L120
 1917              	.L124:
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #if defined (DUAL_BANK)
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   else
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   {
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
 1918              		.loc 1 1156 9
 1919 00b0 0E4B     		ldr	r3, .L126+8
 1920 00b2 D3F81031 		ldr	r3, [r3, #272]
 1921 00b6 03F08053 		and	r3, r3, #268435456
 1922              		.loc 1 1156 8
 1923 00ba B3F1805F 		cmp	r3, #268435456
 1924 00be 0CD1     		bne	.L125
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     {
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Save the error code */
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
 1925              		.loc 1 1159 24
 1926 00c0 0B4B     		ldr	r3, .L126+12
 1927 00c2 9B69     		ldr	r3, [r3, #24]
 1928 00c4 43F01043 		orr	r3, r3, #-1879048192
 1929 00c8 094A     		ldr	r2, .L126+12
 1930 00ca 9361     		str	r3, [r2, #24]
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       /* Clear FLASH CRC read error pending bit */
1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
 1931              		.loc 1 1162 7
 1932 00cc 074B     		ldr	r3, .L126+8
 1933 00ce 4FF08052 		mov	r2, #268435456
 1934 00d2 C3F81421 		str	r2, [r3, #276]
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****       return HAL_ERROR;
 1935              		.loc 1 1164 14
 1936 00d6 0123     		movs	r3, #1
 1937 00d8 00E0     		b	.L120
 1938              	.L125:
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****     }
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   }
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** #endif /* DUAL_BANK */
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** 
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   /* If there is no error flag set */
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c ****   return HAL_OK;
ARM GAS  /tmp/ccIfiV56.s 			page 72


 1939              		.loc 1 1170 10
 1940 00da 0023     		movs	r3, #0
 1941              	.L120:
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c **** }
 1942              		.loc 1 1171 1
 1943 00dc 1846     		mov	r0, r3
 1944 00de 1037     		adds	r7, r7, #16
 1945              	.LCFI65:
 1946              		.cfi_def_cfa_offset 8
 1947 00e0 BD46     		mov	sp, r7
 1948              	.LCFI66:
 1949              		.cfi_def_cfa_register 13
 1950              		@ sp needed
 1951 00e2 80BD     		pop	{r7, pc}
 1952              	.L127:
 1953              		.align	2
 1954              	.L126:
 1955 00e4 08000080 		.word	-2147483640
 1956 00e8 0F00EF1F 		.word	535756815
 1957 00ec 00200052 		.word	1375739904
 1958 00f0 00000000 		.word	pFlash
 1959              		.cfi_endproc
 1960              	.LFE344:
 1962              		.text
 1963              	.Letext0:
 1964              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1965              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 1966              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 1967              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 1968              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1969              		.file 8 "/usr/include/newlib/sys/_types.h"
 1970              		.file 9 "/usr/include/newlib/sys/reent.h"
 1971              		.file 10 "/usr/include/newlib/sys/lock.h"
 1972              		.file 11 "/usr/include/newlib/math.h"
 1973              		.file 12 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 1974              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1975              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 1976              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 1977              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/ccIfiV56.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_flash.c
                            *COM*:000000000000001c pFlash
     /tmp/ccIfiV56.s:18     .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/ccIfiV56.s:26     .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/ccIfiV56.s:1484   .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccIfiV56.s:253    .text.HAL_FLASH_Program:000000000000011c $d
     /tmp/ccIfiV56.s:259    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/ccIfiV56.s:266    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/ccIfiV56.s:493    .text.HAL_FLASH_Program_IT:0000000000000110 $d
     /tmp/ccIfiV56.s:499    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccIfiV56.s:506    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/ccIfiV56.s:960    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccIfiV56.s:1003   .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccIfiV56.s:894    .text.HAL_FLASH_IRQHandler:000000000000025c $d
     /tmp/ccIfiV56.s:898    .text.HAL_FLASH_IRQHandler:0000000000000264 $t
     /tmp/ccIfiV56.s:947    .text.HAL_FLASH_IRQHandler:00000000000002ac $d
     /tmp/ccIfiV56.s:953    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/ccIfiV56.s:996    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/ccIfiV56.s:1039   .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/ccIfiV56.s:1046   .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/ccIfiV56.s:1129   .text.HAL_FLASH_Unlock:0000000000000068 $d
     /tmp/ccIfiV56.s:1136   .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/ccIfiV56.s:1143   .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/ccIfiV56.s:1208   .text.HAL_FLASH_Lock:0000000000000050 $d
     /tmp/ccIfiV56.s:1213   .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccIfiV56.s:1220   .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/ccIfiV56.s:1277   .text.HAL_FLASH_OB_Unlock:0000000000000038 $d
     /tmp/ccIfiV56.s:1284   .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccIfiV56.s:1291   .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/ccIfiV56.s:1339   .text.HAL_FLASH_OB_Lock:000000000000002c $d
     /tmp/ccIfiV56.s:1344   .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccIfiV56.s:1351   .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/ccIfiV56.s:1797   .text.FLASH_CRC_WaitForLastOperation:0000000000000000 FLASH_CRC_WaitForLastOperation
     /tmp/ccIfiV56.s:1691   .text.FLASH_OB_WaitForLastOperation:0000000000000000 FLASH_OB_WaitForLastOperation
     /tmp/ccIfiV56.s:1429   .text.HAL_FLASH_OB_Launch:0000000000000060 $d
     /tmp/ccIfiV56.s:1434   .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/ccIfiV56.s:1441   .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/ccIfiV56.s:1472   .text.HAL_FLASH_GetError:0000000000000014 $d
     /tmp/ccIfiV56.s:1477   .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccIfiV56.s:1675   .text.FLASH_WaitForLastOperation:0000000000000118 $d
     /tmp/ccIfiV56.s:1684   .text.FLASH_OB_WaitForLastOperation:0000000000000000 $t
     /tmp/ccIfiV56.s:1784   .text.FLASH_OB_WaitForLastOperation:0000000000000070 $d
     /tmp/ccIfiV56.s:1790   .text.FLASH_CRC_WaitForLastOperation:0000000000000000 $t
     /tmp/ccIfiV56.s:1955   .text.FLASH_CRC_WaitForLastOperation:00000000000000e4 $d

UNDEFINED SYMBOLS
FLASH_Erase_Sector
HAL_GetTick
