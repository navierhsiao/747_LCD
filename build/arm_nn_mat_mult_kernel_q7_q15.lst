ARM GAS  /tmp/ccUAYEuC.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_nn_mat_mult_kernel_q7_q15.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_nn_mat_mult_kernel_q7_q15,"ax",%progbits
  17              		.align	1
  18              		.global	arm_nn_mat_mult_kernel_q7_q15
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_nn_mat_mult_kernel_q7_q15:
  26              	.LFB149:
  27              		.file 1 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c"
   1:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** /*
   2:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Copyright (C) 2010-2018 Arm Limited or its affiliates. All rights reserved.
   3:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
   4:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * SPDX-License-Identifier: Apache-2.0
   5:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
   6:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * not use this file except in compliance with the License.
   8:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * You may obtain a copy of the License at
   9:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
  10:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
  12:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  13:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * See the License for the specific language governing permissions and
  16:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * limitations under the License.
  17:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  */
  18:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  19:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** /* ----------------------------------------------------------------------
  20:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Project:      CMSIS NN Library
  21:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Title:        arm_nn_mat_mult_kernel_q7_q15.c
  22:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Description:  Matrix-multiplication function for convolution
  23:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
  24:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * $Date:        17. January 2018
  25:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * $Revision:    V.1.0.0
  26:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  *
  27:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * Target Processor:  Cortex-M cores
  28:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****  * -------------------------------------------------------------------- */
  29:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  30:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** #include "arm_math.h"
  31:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** #include "arm_nnfunctions.h"
ARM GAS  /tmp/ccUAYEuC.s 			page 2


  32:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  33:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****   /**
  34:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @brief Matrix-multiplication function for convolution
  35:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       pA          pointer to operand A
  36:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       pInBuffer   pointer to operand B, always conssists of 2 vectors
  37:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       ch_im_out   numRow of A
  38:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       numCol_A    numCol of A
  39:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       bias_shift  amount of left-shift for bias
  40:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       out_shift   amount of right-shift for output
  41:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in]       bias        the bias
  42:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @param[in,out]   pOut        pointer to output
  43:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @return     The function returns the incremented output pointer
  44:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    *
  45:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * @details
  46:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    *
  47:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * This function does the matrix multiplication with weight matrix
  48:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    * and 2 columns from im2col. 
  49:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****    */
  50:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  51:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** q7_t     *arm_nn_mat_mult_kernel_q7_q15(const q7_t * pA,
  52:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const q15_t * pInBuffer,
  53:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const uint16_t ch_im_out,
  54:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const uint16_t numCol_A,
  55:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const uint16_t bias_shift,
  56:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const uint16_t out_shift, 
  57:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         const q7_t * bias, 
  58:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****                                         q7_t * pOut)
  59:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** {
  28              		.loc 1 59 1
  29              		.cfi_startproc
  30              		@ args = 16, pretend = 0, frame = 520
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 90B4     		push	{r4, r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 7, -4
  38 0002 ADF5027D 		sub	sp, sp, #520
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 528
  41 0006 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0008 07F10C04 		add	r4, r7, #12
  45 000c 2060     		str	r0, [r4]
  46 000e 07F10800 		add	r0, r7, #8
  47 0012 0160     		str	r1, [r0]
  48 0014 1946     		mov	r1, r3
  49 0016 BB1D     		adds	r3, r7, #6
  50 0018 1A80     		strh	r2, [r3]	@ movhi
  51 001a 3B1D     		adds	r3, r7, #4
  52 001c 0A46     		mov	r2, r1	@ movhi
  53 001e 1A80     		strh	r2, [r3]	@ movhi
  60:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** #if defined (ARM_MATH_DSP)
  61:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     /* set up the second output pointers */
  62:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     q7_t     *pOut2 = pOut + ch_im_out;
ARM GAS  /tmp/ccUAYEuC.s 			page 3


  54              		.loc 1 62 28
  55 0020 BB1D     		adds	r3, r7, #6
  56 0022 1B88     		ldrh	r3, [r3]
  57              		.loc 1 62 15
  58 0024 D7F81C22 		ldr	r2, [r7, #540]
  59 0028 1344     		add	r3, r3, r2
  60 002a C7F80432 		str	r3, [r7, #516]
  63:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     const q7_t *pBias = bias;
  61              		.loc 1 63 17
  62 002e D7F81832 		ldr	r3, [r7, #536]
  63 0032 C7F80032 		str	r3, [r7, #512]
  64:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  65:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     uint16_t  rowCnt = ch_im_out >> 1;
  64              		.loc 1 65 15
  65 0036 BB1D     		adds	r3, r7, #6
  66 0038 1B88     		ldrh	r3, [r3]
  67 003a 5B08     		lsrs	r3, r3, #1
  68 003c A7F8FE31 		strh	r3, [r7, #510]	@ movhi
  66:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     /* this loop over rows in A */
  67:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     while (rowCnt)
  69              		.loc 1 67 11
  70 0040 4FE3     		b	.L2
  71              	.L25:
  72              	.LBB68:
  68:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     {
  69:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* setup pointers for B */
  70:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         const q15_t *pB = pInBuffer;
  73              		.loc 1 70 22
  74 0042 07F14003 		add	r3, r7, #64
  75 0046 07F10802 		add	r2, r7, #8
  76 004a 1268     		ldr	r2, [r2]
  77 004c 1A60     		str	r2, [r3]
  71:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         const q15_t *pB2 = pB + numCol_A;
  78              		.loc 1 71 31
  79 004e 07F14003 		add	r3, r7, #64
  80 0052 1A68     		ldr	r2, [r3]
  81 0054 3B1D     		adds	r3, r7, #4
  82 0056 1B88     		ldrh	r3, [r3]
  83 0058 5B00     		lsls	r3, r3, #1
  84 005a 1A44     		add	r2, r2, r3
  85              		.loc 1 71 22
  86 005c 07F13C03 		add	r3, r7, #60
  87 0060 1A60     		str	r2, [r3]
  72:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  73:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* align the second pointer for A */
  74:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         const q7_t *pA2 = pA + numCol_A;
  88              		.loc 1 74 30
  89 0062 3B1D     		adds	r3, r7, #4
  90 0064 1B88     		ldrh	r3, [r3]
  91              		.loc 1 74 21
  92 0066 07F10C02 		add	r2, r7, #12
  93 006a 1268     		ldr	r2, [r2]
  94 006c 1344     		add	r3, r3, r2
  95 006e C7F8F831 		str	r3, [r7, #504]
  75:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  76:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* init the sum with bias */
  77:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
ARM GAS  /tmp/ccUAYEuC.s 			page 4


  96              		.loc 1 77 35
  97 0072 D7F80032 		ldr	r3, [r7, #512]
  98 0076 93F90030 		ldrsb	r3, [r3]
  99              		.loc 1 77 27
 100 007a 1A46     		mov	r2, r3
 101              		.loc 1 77 43
 102 007c B7F81032 		ldrh	r3, [r7, #528]
 103 0080 02FA03F3 		lsl	r3, r2, r3
 104 0084 1946     		mov	r1, r3
 105              		.loc 1 77 60
 106 0086 B7F81432 		ldrh	r3, [r7, #532]
 107 008a 0122     		movs	r2, #1
 108 008c 02FA03F3 		lsl	r3, r2, r3
 109 0090 5B08     		lsrs	r3, r3, #1
 110              		.loc 1 77 58
 111 0092 0B44     		add	r3, r3, r1
 112              		.loc 1 77 19
 113 0094 C7F8F431 		str	r3, [r7, #500]
  78:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 114              		.loc 1 78 41
 115 0098 D7F80032 		ldr	r3, [r7, #512]
 116 009c 5A1C     		adds	r2, r3, #1
 117 009e C7F80022 		str	r2, [r7, #512]
 118              		.loc 1 78 35
 119 00a2 93F90030 		ldrsb	r3, [r3]
 120              		.loc 1 78 27
 121 00a6 1A46     		mov	r2, r3
 122              		.loc 1 78 45
 123 00a8 B7F81032 		ldrh	r3, [r7, #528]
 124 00ac 02FA03F3 		lsl	r3, r2, r3
 125 00b0 1946     		mov	r1, r3
 126              		.loc 1 78 62
 127 00b2 B7F81432 		ldrh	r3, [r7, #532]
 128 00b6 0122     		movs	r2, #1
 129 00b8 02FA03F3 		lsl	r3, r2, r3
 130 00bc 5B08     		lsrs	r3, r3, #1
 131              		.loc 1 78 60
 132 00be 0B44     		add	r3, r3, r1
 133              		.loc 1 78 19
 134 00c0 C7F8F031 		str	r3, [r7, #496]
  79:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 135              		.loc 1 79 35
 136 00c4 D7F80032 		ldr	r3, [r7, #512]
 137 00c8 93F90030 		ldrsb	r3, [r3]
 138              		.loc 1 79 27
 139 00cc 1A46     		mov	r2, r3
 140              		.loc 1 79 43
 141 00ce B7F81032 		ldrh	r3, [r7, #528]
 142 00d2 02FA03F3 		lsl	r3, r2, r3
 143 00d6 1946     		mov	r1, r3
 144              		.loc 1 79 60
 145 00d8 B7F81432 		ldrh	r3, [r7, #532]
 146 00dc 0122     		movs	r2, #1
 147 00de 02FA03F3 		lsl	r3, r2, r3
 148 00e2 5B08     		lsrs	r3, r3, #1
 149              		.loc 1 79 58
 150 00e4 0B44     		add	r3, r3, r1
ARM GAS  /tmp/ccUAYEuC.s 			page 5


 151              		.loc 1 79 19
 152 00e6 C7F8EC31 		str	r3, [r7, #492]
  80:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 153              		.loc 1 80 41
 154 00ea D7F80032 		ldr	r3, [r7, #512]
 155 00ee 5A1C     		adds	r2, r3, #1
 156 00f0 C7F80022 		str	r2, [r7, #512]
 157              		.loc 1 80 35
 158 00f4 93F90030 		ldrsb	r3, [r3]
 159              		.loc 1 80 27
 160 00f8 1A46     		mov	r2, r3
 161              		.loc 1 80 45
 162 00fa B7F81032 		ldrh	r3, [r7, #528]
 163 00fe 02FA03F3 		lsl	r3, r2, r3
 164 0102 1946     		mov	r1, r3
 165              		.loc 1 80 62
 166 0104 B7F81432 		ldrh	r3, [r7, #532]
 167 0108 0122     		movs	r2, #1
 168 010a 02FA03F3 		lsl	r3, r2, r3
 169 010e 5B08     		lsrs	r3, r3, #1
 170              		.loc 1 80 60
 171 0110 0B44     		add	r3, r3, r1
 172              		.loc 1 80 19
 173 0112 C7F8E831 		str	r3, [r7, #488]
  81:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  82:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         uint16_t  colCnt = numCol_A >> 2;
 174              		.loc 1 82 19
 175 0116 3B1D     		adds	r3, r7, #4
 176 0118 1B88     		ldrh	r3, [r3]
 177 011a 9B08     		lsrs	r3, r3, #2
 178 011c A7F8E631 		strh	r3, [r7, #486]	@ movhi
  83:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* accumulate over the vector */
  84:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         while (colCnt)
 179              		.loc 1 84 15
 180 0120 0CE2     		b	.L3
 181              	.L22:
 182              	.LBB69:
  85:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
  86:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inA11, inA12, inA21, inA22;
  87:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inB1 = *__SIMD32(pB)++;
 183              		.loc 1 87 31
 184 0122 07F14002 		add	r2, r7, #64
 185 0126 1368     		ldr	r3, [r2]
 186              		.loc 1 87 43
 187 0128 191D     		adds	r1, r3, #4
 188 012a 1160     		str	r1, [r2]
 189              		.loc 1 87 23
 190 012c 1B68     		ldr	r3, [r3]
 191 012e C7F88C31 		str	r3, [r7, #396]
  88:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inB2 = *__SIMD32(pB2)++;
 192              		.loc 1 88 31
 193 0132 07F13C02 		add	r2, r7, #60
 194 0136 1368     		ldr	r3, [r2]
 195              		.loc 1 88 44
 196 0138 191D     		adds	r1, r3, #4
 197 013a 1160     		str	r1, [r2]
 198              		.loc 1 88 23
ARM GAS  /tmp/ccUAYEuC.s 			page 6


 199 013c 1B68     		ldr	r3, [r3]
 200 013e C7F88831 		str	r3, [r7, #392]
 201 0142 07F12803 		add	r3, r7, #40
 202 0146 07F10C02 		add	r2, r7, #12
 203 014a 1268     		ldr	r2, [r2]
 204 014c 1A60     		str	r2, [r3]
 205 014e 07F1D803 		add	r3, r7, #216
 206 0152 07F13802 		add	r2, r7, #56
 207 0156 1A60     		str	r2, [r3]
 208 0158 07F1D403 		add	r3, r7, #212
 209 015c 07F13402 		add	r2, r7, #52
 210 0160 1A60     		str	r2, [r3]
 211              	.LBB70:
 212              	.LBB71:
 213              		.file 2 "./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h"
   1:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /*
   2:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2018 Arm Limited or its affiliates. All rights reserved.
   3:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
   4:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
   6:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  10:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  12:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * limitations under the License.
  17:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  18:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  19:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  20:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  21:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  22:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  23:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  24:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * $Date:        13. July 2018
  25:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * $Revision:    V.1.0.0
  26:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  27:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M cores
  28:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  29:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  30:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  31:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  32:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  33:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #include "arm_math.h"
  34:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  35:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  36:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #ifdef __cplusplus
  37:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** extern    "C"
  38:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** {
  39:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #endif
  40:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  41:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift)  (_shift > 0 ? _shift : 0)
  42:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
ARM GAS  /tmp/ccUAYEuC.s 			page 7


  43:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #define Q31_MIN (0x80000000L)
  44:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #define Q31_MAX (0x7FFFFFFFL)
  45:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  46:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
  47:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of Q31/Q15/Q7 types
  48:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  49:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** union arm_nnword
  50:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** {
  51:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****     q31_t     word;
  52:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****                /**< Q31 type */
  53:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****     q15_t     half_words[2];
  54:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****                /**< Q15 type */
  55:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****     q7_t      bytes[4];
  56:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****                /**< Q7 type */
  57:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** };
  58:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  59:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
  60:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @brief Struct for specifying activation function types
  61:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  62:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  63:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** typedef enum
  64:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** {
  65:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****     ARM_SIGMOID = 0,
  66:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****                 /**< Sigmoid activation function */
  67:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****     ARM_TANH = 1,
  68:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****              /**< Tanh activation function */
  69:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** } arm_nn_activation_type;
  70:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  71:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
  72:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  73:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  74:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
  75:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  76:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  77:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  78:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
  79:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @brief Converts the elements of the Q7 vector to Q15 vector without left-shift
  80:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the Q7 input vector
  81:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the Q15 output vector
  82:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
  83:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @return none.
  84:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  85:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  86:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  87:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** void      arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize);
  88:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  89:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
  90:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the Q7 vector to reordered Q15 vector without left-shift
  91:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the Q7 input vector
  92:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the Q15 output vector
  93:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
  94:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @return none.
  95:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  *
  96:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
  97:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
  98:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** void      arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize);
  99:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
ARM GAS  /tmp/ccUAYEuC.s 			page 8


 100:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #if defined (ARM_MATH_DSP)
 101:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 102:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** /**
 103:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  * @brief read and expand one Q7 word into two Q15 words
 104:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****  */
 105:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 106:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void *read_and_pad(void *source, q31_t * out1, q31_t * out2)
 107:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** {
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inA = *__SIMD32(source)++;
 214              		.loc 2 108 26
 215 0162 07F12802 		add	r2, r7, #40
 216 0166 1368     		ldr	r3, [r2]
 217              		.loc 2 108 42
 218 0168 191D     		adds	r1, r3, #4
 219 016a 1160     		str	r1, [r2]
 220              		.loc 2 108 19
 221 016c 07F1D002 		add	r2, r7, #208
 222 0170 1B68     		ldr	r3, [r3]
 223 0172 1360     		str	r3, [r2]
 109:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 224              		.loc 2 109 29
 225 0174 07F1D003 		add	r3, r7, #208
 226 0178 1A68     		ldr	r2, [r3]
 227 017a 07F1CC03 		add	r3, r7, #204
 228 017e 1A60     		str	r2, [r3]
 229 0180 07F1C803 		add	r3, r7, #200
 230 0184 0822     		movs	r2, #8
 231 0186 1A60     		str	r2, [r3]
 232              	.LBB72:
 233              	.LBB73:
 234              		.file 3 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  /tmp/ccUAYEuC.s 			page 9


  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccUAYEuC.s 			page 10


  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccUAYEuC.s 			page 11


 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccUAYEuC.s 			page 12


 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccUAYEuC.s 			page 13


 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
ARM GAS  /tmp/ccUAYEuC.s 			page 14


 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
ARM GAS  /tmp/ccUAYEuC.s 			page 15


 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccUAYEuC.s 			page 16


 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccUAYEuC.s 			page 17


 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
ARM GAS  /tmp/ccUAYEuC.s 			page 18


 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccUAYEuC.s 			page 19


 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
ARM GAS  /tmp/ccUAYEuC.s 			page 20


 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccUAYEuC.s 			page 21


 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
ARM GAS  /tmp/ccUAYEuC.s 			page 22


 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /tmp/ccUAYEuC.s 			page 23


 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
ARM GAS  /tmp/ccUAYEuC.s 			page 24


 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccUAYEuC.s 			page 25


 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccUAYEuC.s 			page 26


 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
 235              		.loc 3 1023 7
 236 0188 07F1C803 		add	r3, r7, #200
 237 018c 07F1C802 		add	r2, r7, #200
 238 0190 1268     		ldr	r2, [r2]
 239 0192 02F01F02 		and	r2, r2, #31
 240 0196 1A60     		str	r2, [r3]
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
 241              		.loc 3 1024 6
 242 0198 07F1C803 		add	r3, r7, #200
 243 019c 1B68     		ldr	r3, [r3]
 244 019e 002B     		cmp	r3, #0
 245 01a0 03D1     		bne	.L4
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
 246              		.loc 3 1026 12
 247 01a2 07F1CC03 		add	r3, r7, #204
 248 01a6 1B68     		ldr	r3, [r3]
 249 01a8 07E0     		b	.L5
 250              	.L4:
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 251              		.loc 3 1028 23
 252 01aa 07F1CC02 		add	r2, r7, #204
 253 01ae 07F1C803 		add	r3, r7, #200
 254 01b2 1268     		ldr	r2, [r2]
 255 01b4 1B68     		ldr	r3, [r3]
 256 01b6 62FA03F3 		ror	r3, r2, r3
 257              	.L5:
 258 01ba 07F1C402 		add	r2, r7, #196
ARM GAS  /tmp/ccUAYEuC.s 			page 27


 259 01be 1360     		str	r3, [r2]
 260              	.LBE73:
 261              	.LBE72:
 262              	.LBB74:
 263              	.LBB75:
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
ARM GAS  /tmp/ccUAYEuC.s 			page 28


1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1095:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1096:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1097:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  /tmp/ccUAYEuC.s 			page 29


1138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
1156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccUAYEuC.s 			page 30


1195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
1207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
1213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
1214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
1216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
1218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
1224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Signed Saturate
1231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates a signed value.
1232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
1233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
1234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SSAT(ARG1,ARG2) \
1237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __extension__ \
1238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
1240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
1247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
1248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
1249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
1250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccUAYEuC.s 			page 31


1252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __USAT(ARG1,ARG2) \
1253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  __extension__ \
1254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
1256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
1263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
1264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
1265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
1266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
1269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
1279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
1280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
1284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
1289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
1294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
1301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
1302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
1306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccUAYEuC.s 			page 32


1309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
1311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
1316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
1323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
1324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
1328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
1332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
1338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
1339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
1343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
1350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
1351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
1355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
1362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
1363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccUAYEuC.s 			page 33


1366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
1367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
1369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
1374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Signed Saturate
1377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates a signed value.
1378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
1379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
1380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
1383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
1385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
1387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
1388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     if (val > max)
1389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return max;
1391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     else if (val < min)
1393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return min;
1395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return val;
1398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
1402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
1403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
1404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
1405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
1408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (sat <= 31U)
1410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
1412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
1413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return max;
1415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     else if (val < 0)
1417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return 0U;
1419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (uint32_t)val;
1422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccUAYEuC.s 			page 34


1423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
1427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
1433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
1434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
1438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) );
1442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);
1443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
1448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
1449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
1453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) );
1457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);
1458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
1463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
1464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
1468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) );
1472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
1478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
1479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccUAYEuC.s 			page 35


1480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
1483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
1490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
1491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
1495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
1502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
1503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
1507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
1514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
1515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
1519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) );
1523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);
1524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
1529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
1530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
1534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccUAYEuC.s 			page 36


1537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) );
1538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);
1539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
1544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
1545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
1549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) );
1553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
1559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
1560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
1566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
1576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
1577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
1583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
1593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
ARM GAS  /tmp/ccUAYEuC.s 			page 37


1594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
1600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
1609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
1611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###################  Compiler specific Intrinsics  ########################### */
1614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
1615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated SIMD instructions
1616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
1617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
1618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
1620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)
1622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)
1630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)
1638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)
1646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccUAYEuC.s 			page 38


1651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)
1654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)
1662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)
1671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
1679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
1687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)
1695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
1703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccUAYEuC.s 			page 39


1708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
1711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
1720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
1728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
1736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)
1744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)
1752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)
1760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccUAYEuC.s 			page 40


1765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)
1768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
1776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
1784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)
1792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
1800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
1808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SASX(uint32_t op1, uint32_t op2)
1816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccUAYEuC.s 			page 41


1822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QASX(uint32_t op1, uint32_t op2)
1824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)
1832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UASX(uint32_t op1, uint32_t op2)
1840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)
1848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)
1856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)
1864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)
1872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccUAYEuC.s 			page 42


1879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)
1880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAX(uint32_t op1, uint32_t op2)
1888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)
1896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)
1904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)
1912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
1920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
1924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SSAT16(ARG1,ARG2) \
1928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
1930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __USAT16(ARG1,ARG2) \
1935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
ARM GAS  /tmp/ccUAYEuC.s 			page 43


1936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
1937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)
1942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
1946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
1950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
1958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 264              		.loc 3 1961 3
 265 01c0 07F1C403 		add	r3, r7, #196
 266 01c4 1B68     		ldr	r3, [r3]
 267              		.syntax unified
 268              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 269 01c6 2FFA83F2 		sxtb16 r2, r3
 270              	@ 0 "" 2
 271              		.thumb
 272              		.syntax unified
 273 01ca 07F1C003 		add	r3, r7, #192
 274 01ce 1A60     		str	r2, [r3]
1962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 275              		.loc 3 1962 9
 276 01d0 07F1C003 		add	r3, r7, #192
 277 01d4 1A68     		ldr	r2, [r3]
 278              	.LBE75:
 279              	.LBE74:
 280              		.loc 2 109 19
 281 01d6 07F1BC03 		add	r3, r7, #188
 282 01da 1A60     		str	r2, [r3]
 110:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf2 = __SXTB16(inA);
 283              		.loc 2 110 29
 284 01dc 07F1D003 		add	r3, r7, #208
 285 01e0 1A68     		ldr	r2, [r3]
 286 01e2 07F1B803 		add	r3, r7, #184
 287 01e6 1A60     		str	r2, [r3]
 288              	.LBB76:
 289              	.LBB77:
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 290              		.loc 3 1961 3
 291 01e8 07F1B803 		add	r3, r7, #184
ARM GAS  /tmp/ccUAYEuC.s 			page 44


 292 01ec 1B68     		ldr	r3, [r3]
 293              		.syntax unified
 294              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 295 01ee 2FFA83F2 		sxtb16 r2, r3
 296              	@ 0 "" 2
 297              		.thumb
 298              		.syntax unified
 299 01f2 07F1B403 		add	r3, r7, #180
 300 01f6 1A60     		str	r2, [r3]
 301              		.loc 3 1962 9
 302 01f8 07F1B403 		add	r3, r7, #180
 303 01fc 1A68     		ldr	r2, [r3]
 304              	.LBE77:
 305              	.LBE76:
 306              		.loc 2 110 19
 307 01fe 07F1B003 		add	r3, r7, #176
 308 0202 1A60     		str	r2, [r3]
 111:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 112:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 113:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 309              		.loc 2 113 17
 310 0204 07F1BC03 		add	r3, r7, #188
 311 0208 1A68     		ldr	r2, [r3]
 312 020a D24B     		ldr	r3, .L41
 313 020c 1340     		ands	r3, r3, r2
 314 020e 07F1B002 		add	r2, r7, #176
 315 0212 1268     		ldr	r2, [r2]
 316 0214 120C     		lsrs	r2, r2, #16
 317 0216 1343     		orrs	r3, r3, r2
 318 0218 1A46     		mov	r2, r3
 319              		.loc 2 113 15
 320 021a 07F1D403 		add	r3, r7, #212
 321 021e 1B68     		ldr	r3, [r3]
 322 0220 1A60     		str	r2, [r3]
 114:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 323              		.loc 2 114 17
 324 0222 07F1B003 		add	r3, r7, #176
 325 0226 1B68     		ldr	r3, [r3]
 326 0228 9AB2     		uxth	r2, r3
 327 022a 07F1BC03 		add	r3, r7, #188
 328 022e 1B68     		ldr	r3, [r3]
 329 0230 1B04     		lsls	r3, r3, #16
 330 0232 1343     		orrs	r3, r3, r2
 331 0234 1A46     		mov	r2, r3
 332              		.loc 2 114 15
 333 0236 07F1D803 		add	r3, r7, #216
 334 023a 1B68     		ldr	r3, [r3]
 335 023c 1A60     		str	r2, [r3]
 115:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #else
 116:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHTB(inAbuf1, inAbuf2, 16);
 117:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out2 = __PKHBT(inAbuf2, inAbuf1, 16);
 118:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #endif
 119:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 120:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         return source;
 336              		.loc 2 120 16
 337 023e 07F12803 		add	r3, r7, #40
 338 0242 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccUAYEuC.s 			page 45


 339              	.LBE71:
 340              	.LBE70:
  89:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  90:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 341              		.loc 1 90 27
 342 0244 07F10C03 		add	r3, r7, #12
 343 0248 1A60     		str	r2, [r3]
 344 024a 07F12403 		add	r3, r7, #36
 345 024e D7F8F821 		ldr	r2, [r7, #504]
 346 0252 1A60     		str	r2, [r3]
 347 0254 07F58273 		add	r3, r7, #260
 348 0258 07F13002 		add	r2, r7, #48
 349 025c 1A60     		str	r2, [r3]
 350 025e 07F58073 		add	r3, r7, #256
 351 0262 07F12C02 		add	r2, r7, #44
 352 0266 1A60     		str	r2, [r3]
 353              	.LBB78:
 354              	.LBB79:
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 355              		.loc 2 108 26
 356 0268 07F12402 		add	r2, r7, #36
 357 026c 1368     		ldr	r3, [r2]
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 358              		.loc 2 108 42
 359 026e 191D     		adds	r1, r3, #4
 360 0270 1160     		str	r1, [r2]
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 361              		.loc 2 108 19
 362 0272 07F1FC02 		add	r2, r7, #252
 363 0276 1B68     		ldr	r3, [r3]
 364 0278 1360     		str	r3, [r2]
 109:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf2 = __SXTB16(inA);
 365              		.loc 2 109 29
 366 027a 07F1FC03 		add	r3, r7, #252
 367 027e 1A68     		ldr	r2, [r3]
 368 0280 07F1F803 		add	r3, r7, #248
 369 0284 1A60     		str	r2, [r3]
 370 0286 07F1F403 		add	r3, r7, #244
 371 028a 0822     		movs	r2, #8
 372 028c 1A60     		str	r2, [r3]
 373              	.LBB80:
 374              	.LBB81:
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
 375              		.loc 3 1023 7
 376 028e 07F1F403 		add	r3, r7, #244
 377 0292 07F1F402 		add	r2, r7, #244
 378 0296 1268     		ldr	r2, [r2]
 379 0298 02F01F02 		and	r2, r2, #31
 380 029c 1A60     		str	r2, [r3]
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 381              		.loc 3 1024 6
 382 029e 07F1F403 		add	r3, r7, #244
 383 02a2 1B68     		ldr	r3, [r3]
 384 02a4 002B     		cmp	r3, #0
 385 02a6 03D1     		bne	.L9
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 386              		.loc 3 1026 12
ARM GAS  /tmp/ccUAYEuC.s 			page 46


 387 02a8 07F1F803 		add	r3, r7, #248
 388 02ac 1B68     		ldr	r3, [r3]
 389 02ae 07E0     		b	.L10
 390              	.L9:
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 391              		.loc 3 1028 23
 392 02b0 07F1F802 		add	r2, r7, #248
 393 02b4 07F1F403 		add	r3, r7, #244
 394 02b8 1268     		ldr	r2, [r2]
 395 02ba 1B68     		ldr	r3, [r3]
 396 02bc 62FA03F3 		ror	r3, r2, r3
 397              	.L10:
 398 02c0 07F1F002 		add	r2, r7, #240
 399 02c4 1360     		str	r3, [r2]
 400              	.LBE81:
 401              	.LBE80:
 402              	.LBB82:
 403              	.LBB83:
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 404              		.loc 3 1961 3
 405 02c6 07F1F003 		add	r3, r7, #240
 406 02ca 1B68     		ldr	r3, [r3]
 407              		.syntax unified
 408              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 409 02cc 2FFA83F2 		sxtb16 r2, r3
 410              	@ 0 "" 2
 411              		.thumb
 412              		.syntax unified
 413 02d0 07F1EC03 		add	r3, r7, #236
 414 02d4 1A60     		str	r2, [r3]
 415              		.loc 3 1962 9
 416 02d6 07F1EC03 		add	r3, r7, #236
 417 02da 1A68     		ldr	r2, [r3]
 418              	.LBE83:
 419              	.LBE82:
 109:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf2 = __SXTB16(inA);
 420              		.loc 2 109 19
 421 02dc 07F1E803 		add	r3, r7, #232
 422 02e0 1A60     		str	r2, [r3]
 110:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 423              		.loc 2 110 29
 424 02e2 07F1FC03 		add	r3, r7, #252
 425 02e6 1A68     		ldr	r2, [r3]
 426 02e8 07F1E403 		add	r3, r7, #228
 427 02ec 1A60     		str	r2, [r3]
 428              	.LBB84:
 429              	.LBB85:
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 430              		.loc 3 1961 3
 431 02ee 07F1E403 		add	r3, r7, #228
 432 02f2 1B68     		ldr	r3, [r3]
 433              		.syntax unified
 434              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 435 02f4 2FFA83F2 		sxtb16 r2, r3
 436              	@ 0 "" 2
 437              		.thumb
 438              		.syntax unified
ARM GAS  /tmp/ccUAYEuC.s 			page 47


 439 02f8 07F1E003 		add	r3, r7, #224
 440 02fc 1A60     		str	r2, [r3]
 441              		.loc 3 1962 9
 442 02fe 07F1E003 		add	r3, r7, #224
 443 0302 1A68     		ldr	r2, [r3]
 444              	.LBE85:
 445              	.LBE84:
 110:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 446              		.loc 2 110 19
 447 0304 07F1DC03 		add	r3, r7, #220
 448 0308 1A60     		str	r2, [r3]
 113:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 449              		.loc 2 113 17
 450 030a 07F1E803 		add	r3, r7, #232
 451 030e 1A68     		ldr	r2, [r3]
 452 0310 904B     		ldr	r3, .L41
 453 0312 1340     		ands	r3, r3, r2
 454 0314 07F1DC02 		add	r2, r7, #220
 455 0318 1268     		ldr	r2, [r2]
 456 031a 120C     		lsrs	r2, r2, #16
 457 031c 1343     		orrs	r3, r3, r2
 458 031e 1A46     		mov	r2, r3
 113:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 459              		.loc 2 113 15
 460 0320 07F58073 		add	r3, r7, #256
 461 0324 1B68     		ldr	r3, [r3]
 462 0326 1A60     		str	r2, [r3]
 114:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #else
 463              		.loc 2 114 17
 464 0328 07F1DC03 		add	r3, r7, #220
 465 032c 1B68     		ldr	r3, [r3]
 466 032e 9AB2     		uxth	r2, r3
 467 0330 07F1E803 		add	r3, r7, #232
 468 0334 1B68     		ldr	r3, [r3]
 469 0336 1B04     		lsls	r3, r3, #16
 470 0338 1343     		orrs	r3, r3, r2
 471 033a 1A46     		mov	r2, r3
 114:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #else
 472              		.loc 2 114 15
 473 033c 07F58273 		add	r3, r7, #260
 474 0340 1B68     		ldr	r3, [r3]
 475 0342 1A60     		str	r2, [r3]
 476              		.loc 2 120 16
 477 0344 07F12403 		add	r3, r7, #36
 478 0348 1B68     		ldr	r3, [r3]
 479              	.LBE79:
 480              	.LBE78:
  91:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 481              		.loc 1 91 28
 482 034a C7F8F831 		str	r3, [r7, #504]
  92:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  93:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum = __SMLAD(inA11, inB1, sum);
 483              		.loc 1 93 19
 484 034e 07F13803 		add	r3, r7, #56
 485 0352 1B68     		ldr	r3, [r3]
 486 0354 1946     		mov	r1, r3
 487 0356 D7F88C21 		ldr	r2, [r7, #396]
ARM GAS  /tmp/ccUAYEuC.s 			page 48


 488 035a D7F8F431 		ldr	r3, [r7, #500]
 489 035e C7F81411 		str	r1, [r7, #276]
 490 0362 C7F81021 		str	r2, [r7, #272]
 491 0366 C7F80C31 		str	r3, [r7, #268]
 492              	.LBB86:
 493              	.LBB87:
1963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
1966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
1974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)
1982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
1990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 494              		.loc 3 1993 3
 495 036a D7F81431 		ldr	r3, [r7, #276]
 496 036e D7F81021 		ldr	r2, [r7, #272]
 497 0372 D7F80C11 		ldr	r1, [r7, #268]
 498              		.syntax unified
 499              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 500 0376 23FB0212 		smlad r2, r3, r2, r1
 501              	@ 0 "" 2
 502              		.thumb
 503              		.syntax unified
 504 037a 07F58473 		add	r3, r7, #264
 505 037e 1A60     		str	r2, [r3]
1994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 506              		.loc 3 1994 9
 507 0380 07F58473 		add	r3, r7, #264
 508 0384 1B68     		ldr	r3, [r3]
 509              	.LBE87:
 510              	.LBE86:
 511              		.loc 1 93 17
 512 0386 C7F8F431 		str	r3, [r7, #500]
ARM GAS  /tmp/ccUAYEuC.s 			page 49


  94:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 = __SMLAD(inA11, inB2, sum2);
 513              		.loc 1 94 20
 514 038a 07F13803 		add	r3, r7, #56
 515 038e 1B68     		ldr	r3, [r3]
 516 0390 1946     		mov	r1, r3
 517 0392 D7F88821 		ldr	r2, [r7, #392]
 518 0396 D7F8F031 		ldr	r3, [r7, #496]
 519 039a C7F82411 		str	r1, [r7, #292]
 520 039e C7F82021 		str	r2, [r7, #288]
 521 03a2 C7F81C31 		str	r3, [r7, #284]
 522              	.LBB88:
 523              	.LBB89:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 524              		.loc 3 1993 3
 525 03a6 D7F82431 		ldr	r3, [r7, #292]
 526 03aa D7F82021 		ldr	r2, [r7, #288]
 527 03ae D7F81C11 		ldr	r1, [r7, #284]
 528              		.syntax unified
 529              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 530 03b2 23FB0213 		smlad r3, r3, r2, r1
 531              	@ 0 "" 2
 532              		.thumb
 533              		.syntax unified
 534 03b6 C7F81831 		str	r3, [r7, #280]
 535              		.loc 3 1994 9
 536 03ba D7F81831 		ldr	r3, [r7, #280]
 537              	.LBE89:
 538              	.LBE88:
 539              		.loc 1 94 18
 540 03be C7F8F031 		str	r3, [r7, #496]
  95:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum3 = __SMLAD(inA21, inB1, sum3);
 541              		.loc 1 95 20
 542 03c2 07F13003 		add	r3, r7, #48
 543 03c6 1B68     		ldr	r3, [r3]
 544 03c8 1946     		mov	r1, r3
 545 03ca D7F88C21 		ldr	r2, [r7, #396]
 546 03ce D7F8EC31 		ldr	r3, [r7, #492]
 547 03d2 C7F83411 		str	r1, [r7, #308]
 548 03d6 C7F83021 		str	r2, [r7, #304]
 549 03da C7F82C31 		str	r3, [r7, #300]
 550              	.LBB90:
 551              	.LBB91:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 552              		.loc 3 1993 3
 553 03de D7F83431 		ldr	r3, [r7, #308]
 554 03e2 D7F83021 		ldr	r2, [r7, #304]
 555 03e6 D7F82C11 		ldr	r1, [r7, #300]
 556              		.syntax unified
 557              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 558 03ea 23FB0213 		smlad r3, r3, r2, r1
 559              	@ 0 "" 2
 560              		.thumb
 561              		.syntax unified
 562 03ee C7F82831 		str	r3, [r7, #296]
 563              		.loc 3 1994 9
 564 03f2 D7F82831 		ldr	r3, [r7, #296]
 565              	.LBE91:
ARM GAS  /tmp/ccUAYEuC.s 			page 50


 566              	.LBE90:
 567              		.loc 1 95 18
 568 03f6 C7F8EC31 		str	r3, [r7, #492]
  96:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum4 = __SMLAD(inA21, inB2, sum4);
 569              		.loc 1 96 20
 570 03fa 07F13003 		add	r3, r7, #48
 571 03fe 1B68     		ldr	r3, [r3]
 572 0400 1946     		mov	r1, r3
 573 0402 D7F88821 		ldr	r2, [r7, #392]
 574 0406 D7F8E831 		ldr	r3, [r7, #488]
 575 040a C7F84411 		str	r1, [r7, #324]
 576 040e C7F84021 		str	r2, [r7, #320]
 577 0412 C7F83C31 		str	r3, [r7, #316]
 578              	.LBB92:
 579              	.LBB93:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 580              		.loc 3 1993 3
 581 0416 D7F84431 		ldr	r3, [r7, #324]
 582 041a D7F84021 		ldr	r2, [r7, #320]
 583 041e D7F83C11 		ldr	r1, [r7, #316]
 584              		.syntax unified
 585              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 586 0422 23FB0213 		smlad r3, r3, r2, r1
 587              	@ 0 "" 2
 588              		.thumb
 589              		.syntax unified
 590 0426 C7F83831 		str	r3, [r7, #312]
 591              		.loc 3 1994 9
 592 042a D7F83831 		ldr	r3, [r7, #312]
 593              	.LBE93:
 594              	.LBE92:
 595              		.loc 1 96 18
 596 042e C7F8E831 		str	r3, [r7, #488]
  97:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
  98:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             inB1 = *__SIMD32(pB)++;
 597              		.loc 1 98 21
 598 0432 07F14002 		add	r2, r7, #64
 599 0436 1368     		ldr	r3, [r2]
 600              		.loc 1 98 33
 601 0438 191D     		adds	r1, r3, #4
 602 043a 1160     		str	r1, [r2]
 603              		.loc 1 98 18
 604 043c 1B68     		ldr	r3, [r3]
 605 043e C7F88C31 		str	r3, [r7, #396]
  99:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             inB2 = *__SIMD32(pB2)++;
 606              		.loc 1 99 21
 607 0442 07F13C02 		add	r2, r7, #60
 608 0446 1368     		ldr	r3, [r2]
 609              		.loc 1 99 34
 610 0448 191D     		adds	r1, r3, #4
 611 044a 1160     		str	r1, [r2]
 612              		.loc 1 99 18
 613 044c 1B68     		ldr	r3, [r3]
 614 044e C7F88831 		str	r3, [r7, #392]
 100:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 101:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum = __SMLAD(inA12, inB1, sum);
 615              		.loc 1 101 19
ARM GAS  /tmp/ccUAYEuC.s 			page 51


 616 0452 07F13403 		add	r3, r7, #52
 617 0456 1B68     		ldr	r3, [r3]
 618 0458 1946     		mov	r1, r3
 619 045a D7F88C21 		ldr	r2, [r7, #396]
 620 045e D7F8F431 		ldr	r3, [r7, #500]
 621 0462 C7F85411 		str	r1, [r7, #340]
 622 0466 C7F85021 		str	r2, [r7, #336]
 623 046a C7F84C31 		str	r3, [r7, #332]
 624              	.LBB94:
 625              	.LBB95:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 626              		.loc 3 1993 3
 627 046e D7F85431 		ldr	r3, [r7, #340]
 628 0472 D7F85021 		ldr	r2, [r7, #336]
 629 0476 D7F84C11 		ldr	r1, [r7, #332]
 630              		.syntax unified
 631              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 632 047a 23FB0213 		smlad r3, r3, r2, r1
 633              	@ 0 "" 2
 634              		.thumb
 635              		.syntax unified
 636 047e C7F84831 		str	r3, [r7, #328]
 637              		.loc 3 1994 9
 638 0482 D7F84831 		ldr	r3, [r7, #328]
 639              	.LBE95:
 640              	.LBE94:
 641              		.loc 1 101 17
 642 0486 C7F8F431 		str	r3, [r7, #500]
 102:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 = __SMLAD(inA12, inB2, sum2);
 643              		.loc 1 102 20
 644 048a 07F13403 		add	r3, r7, #52
 645 048e 1B68     		ldr	r3, [r3]
 646 0490 1946     		mov	r1, r3
 647 0492 D7F88821 		ldr	r2, [r7, #392]
 648 0496 D7F8F031 		ldr	r3, [r7, #496]
 649 049a C7F86411 		str	r1, [r7, #356]
 650 049e C7F86021 		str	r2, [r7, #352]
 651 04a2 C7F85C31 		str	r3, [r7, #348]
 652              	.LBB96:
 653              	.LBB97:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 654              		.loc 3 1993 3
 655 04a6 D7F86431 		ldr	r3, [r7, #356]
 656 04aa D7F86021 		ldr	r2, [r7, #352]
 657 04ae D7F85C11 		ldr	r1, [r7, #348]
 658              		.syntax unified
 659              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 660 04b2 23FB0213 		smlad r3, r3, r2, r1
 661              	@ 0 "" 2
 662              		.thumb
 663              		.syntax unified
 664 04b6 C7F85831 		str	r3, [r7, #344]
 665              		.loc 3 1994 9
 666 04ba D7F85831 		ldr	r3, [r7, #344]
 667              	.LBE97:
 668              	.LBE96:
 669              		.loc 1 102 18
ARM GAS  /tmp/ccUAYEuC.s 			page 52


 670 04be C7F8F031 		str	r3, [r7, #496]
 103:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum3 = __SMLAD(inA22, inB1, sum3);
 671              		.loc 1 103 20
 672 04c2 07F12C03 		add	r3, r7, #44
 673 04c6 1B68     		ldr	r3, [r3]
 674 04c8 1946     		mov	r1, r3
 675 04ca D7F88C21 		ldr	r2, [r7, #396]
 676 04ce D7F8EC31 		ldr	r3, [r7, #492]
 677 04d2 C7F87411 		str	r1, [r7, #372]
 678 04d6 C7F87021 		str	r2, [r7, #368]
 679 04da C7F86C31 		str	r3, [r7, #364]
 680              	.LBB98:
 681              	.LBB99:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 682              		.loc 3 1993 3
 683 04de D7F87431 		ldr	r3, [r7, #372]
 684 04e2 D7F87021 		ldr	r2, [r7, #368]
 685 04e6 D7F86C11 		ldr	r1, [r7, #364]
 686              		.syntax unified
 687              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 688 04ea 23FB0213 		smlad r3, r3, r2, r1
 689              	@ 0 "" 2
 690              		.thumb
 691              		.syntax unified
 692 04ee C7F86831 		str	r3, [r7, #360]
 693              		.loc 3 1994 9
 694 04f2 D7F86831 		ldr	r3, [r7, #360]
 695              	.LBE99:
 696              	.LBE98:
 697              		.loc 1 103 18
 698 04f6 C7F8EC31 		str	r3, [r7, #492]
 104:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum4 = __SMLAD(inA22, inB2, sum4);
 699              		.loc 1 104 20
 700 04fa 07F12C03 		add	r3, r7, #44
 701 04fe 1B68     		ldr	r3, [r3]
 702 0500 1946     		mov	r1, r3
 703 0502 D7F88821 		ldr	r2, [r7, #392]
 704 0506 D7F8E831 		ldr	r3, [r7, #488]
 705 050a C7F88411 		str	r1, [r7, #388]
 706 050e C7F88021 		str	r2, [r7, #384]
 707 0512 C7F87C31 		str	r3, [r7, #380]
 708              	.LBB100:
 709              	.LBB101:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 710              		.loc 3 1993 3
 711 0516 D7F88431 		ldr	r3, [r7, #388]
 712 051a D7F88021 		ldr	r2, [r7, #384]
 713 051e D7F87C11 		ldr	r1, [r7, #380]
 714              		.syntax unified
 715              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 716 0522 23FB0213 		smlad r3, r3, r2, r1
 717              	@ 0 "" 2
 718              		.thumb
 719              		.syntax unified
 720 0526 C7F87831 		str	r3, [r7, #376]
 721              		.loc 3 1994 9
 722 052a D7F87831 		ldr	r3, [r7, #376]
ARM GAS  /tmp/ccUAYEuC.s 			page 53


 723              	.LBE101:
 724              	.LBE100:
 725              		.loc 1 104 18
 726 052e C7F8E831 		str	r3, [r7, #488]
 105:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 106:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             colCnt--;
 727              		.loc 1 106 19
 728 0532 B7F8E631 		ldrh	r3, [r7, #486]
 729 0536 013B     		subs	r3, r3, #1
 730 0538 A7F8E631 		strh	r3, [r7, #486]	@ movhi
 731              	.L3:
 732              	.LBE69:
  84:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 733              		.loc 1 84 15
 734 053c B7F8E631 		ldrh	r3, [r7, #486]
 735 0540 002B     		cmp	r3, #0
 736 0542 7FF4EEAD 		bne	.L22
 107:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         }                       /* while over colCnt */
 108:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         colCnt = numCol_A & 0x3;
 737              		.loc 1 108 16
 738 0546 3B1D     		adds	r3, r7, #4
 739 0548 1B88     		ldrh	r3, [r3]	@ movhi
 740 054a 03F00303 		and	r3, r3, #3
 741 054e A7F8E631 		strh	r3, [r7, #486]	@ movhi
 109:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         while (colCnt)
 742              		.loc 1 109 15
 743 0552 58E0     		b	.L23
 744              	.L42:
 745              		.align	2
 746              	.L41:
 747 0554 0000FFFF 		.word	-65536
 748              	.L24:
 749              	.LBB102:
 110:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 111:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q7_t      inA1 = *pA++;
 750              		.loc 1 111 33
 751 0558 07F10C03 		add	r3, r7, #12
 752 055c 1B68     		ldr	r3, [r3]
 753 055e 07F10C02 		add	r2, r7, #12
 754 0562 591C     		adds	r1, r3, #1
 755 0564 1160     		str	r1, [r2]
 756              		.loc 1 111 23
 757 0566 1B78     		ldrb	r3, [r3]
 758 0568 87F89731 		strb	r3, [r7, #407]
 112:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q15_t     inB1 = *pB++;
 759              		.loc 1 112 33
 760 056c 07F14003 		add	r3, r7, #64
 761 0570 1B68     		ldr	r3, [r3]
 762 0572 991C     		adds	r1, r3, #2
 763 0574 07F14002 		add	r2, r7, #64
 764 0578 1160     		str	r1, [r2]
 765              		.loc 1 112 23
 766 057a 1B88     		ldrh	r3, [r3]	@ movhi
 767 057c A7F89431 		strh	r3, [r7, #404]	@ movhi
 113:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q7_t      inA2 = *pA2++;
 768              		.loc 1 113 34
 769 0580 D7F8F831 		ldr	r3, [r7, #504]
ARM GAS  /tmp/ccUAYEuC.s 			page 54


 770 0584 5A1C     		adds	r2, r3, #1
 771 0586 C7F8F821 		str	r2, [r7, #504]
 772              		.loc 1 113 23
 773 058a 1B78     		ldrb	r3, [r3]
 774 058c 87F89331 		strb	r3, [r7, #403]
 114:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q15_t     inB2 = *pB2++;
 775              		.loc 1 114 34
 776 0590 07F13C03 		add	r3, r7, #60
 777 0594 1B68     		ldr	r3, [r3]
 778 0596 991C     		adds	r1, r3, #2
 779 0598 07F13C02 		add	r2, r7, #60
 780 059c 1160     		str	r1, [r2]
 781              		.loc 1 114 23
 782 059e 1B88     		ldrh	r3, [r3]	@ movhi
 783 05a0 A7F89031 		strh	r3, [r7, #400]	@ movhi
 115:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 116:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum += inA1 * inB1;
 784              		.loc 1 116 25
 785 05a4 97F99731 		ldrsb	r3, [r7, #407]
 786 05a8 B7F99421 		ldrsh	r2, [r7, #404]
 787 05ac 02FB03F3 		mul	r3, r2, r3
 788              		.loc 1 116 17
 789 05b0 D7F8F421 		ldr	r2, [r7, #500]
 790 05b4 1344     		add	r3, r3, r2
 791 05b6 C7F8F431 		str	r3, [r7, #500]
 117:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 += inA1 * inB2;
 792              		.loc 1 117 26
 793 05ba 97F99731 		ldrsb	r3, [r7, #407]
 794 05be B7F99021 		ldrsh	r2, [r7, #400]
 795 05c2 02FB03F3 		mul	r3, r2, r3
 796              		.loc 1 117 18
 797 05c6 D7F8F021 		ldr	r2, [r7, #496]
 798 05ca 1344     		add	r3, r3, r2
 799 05cc C7F8F031 		str	r3, [r7, #496]
 118:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum3 += inA2 * inB1;
 800              		.loc 1 118 26
 801 05d0 97F99331 		ldrsb	r3, [r7, #403]
 802 05d4 B7F99421 		ldrsh	r2, [r7, #404]
 803 05d8 02FB03F3 		mul	r3, r2, r3
 804              		.loc 1 118 18
 805 05dc D7F8EC21 		ldr	r2, [r7, #492]
 806 05e0 1344     		add	r3, r3, r2
 807 05e2 C7F8EC31 		str	r3, [r7, #492]
 119:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum4 += inA2 * inB2;
 808              		.loc 1 119 26
 809 05e6 97F99331 		ldrsb	r3, [r7, #403]
 810 05ea B7F99021 		ldrsh	r2, [r7, #400]
 811 05ee 02FB03F3 		mul	r3, r2, r3
 812              		.loc 1 119 18
 813 05f2 D7F8E821 		ldr	r2, [r7, #488]
 814 05f6 1344     		add	r3, r3, r2
 815 05f8 C7F8E831 		str	r3, [r7, #488]
 120:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             colCnt--;
 816              		.loc 1 120 19
 817 05fc B7F8E631 		ldrh	r3, [r7, #486]
 818 0600 013B     		subs	r3, r3, #1
 819 0602 A7F8E631 		strh	r3, [r7, #486]	@ movhi
ARM GAS  /tmp/ccUAYEuC.s 			page 55


 820              	.L23:
 821              	.LBE102:
 109:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 822              		.loc 1 109 15
 823 0606 B7F8E631 		ldrh	r3, [r7, #486]
 824 060a 002B     		cmp	r3, #0
 825 060c A4D1     		bne	.L24
 826              	.LBB103:
 121:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         }                       /* while over colCnt */
 122:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 827              		.loc 1 122 26
 828 060e B7F81432 		ldrh	r3, [r7, #532]
 829 0612 D7F8F421 		ldr	r2, [r7, #500]
 830 0616 42FA03F3 		asr	r3, r2, r3
 831 061a C7F8B431 		str	r3, [r7, #436]
 832 061e D7F8B431 		ldr	r3, [r7, #436]
 833              		.syntax unified
 834              	@ 122 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 835 0622 03F30703 		ssat r3, #8, r3
 836              	@ 0 "" 2
 837              		.thumb
 838              		.syntax unified
 839 0626 C7F8B031 		str	r3, [r7, #432]
 840 062a D7F8B011 		ldr	r1, [r7, #432]
 841              	.LBE103:
 842              		.loc 1 122 14
 843 062e D7F81C32 		ldr	r3, [r7, #540]
 844 0632 5A1C     		adds	r2, r3, #1
 845 0634 C7F81C22 		str	r2, [r7, #540]
 846              		.loc 1 122 19
 847 0638 4AB2     		sxtb	r2, r1
 848              		.loc 1 122 17
 849 063a 1A70     		strb	r2, [r3]
 850              	.LBB104:
 123:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 851              		.loc 1 123 26
 852 063c B7F81432 		ldrh	r3, [r7, #532]
 853 0640 D7F8EC21 		ldr	r2, [r7, #492]
 854 0644 42FA03F3 		asr	r3, r2, r3
 855 0648 C7F8AC31 		str	r3, [r7, #428]
 856 064c D7F8AC31 		ldr	r3, [r7, #428]
 857              		.syntax unified
 858              	@ 123 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 859 0650 03F30703 		ssat r3, #8, r3
 860              	@ 0 "" 2
 861              		.thumb
 862              		.syntax unified
 863 0654 C7F8A831 		str	r3, [r7, #424]
 864 0658 D7F8A811 		ldr	r1, [r7, #424]
 865              	.LBE104:
 866              		.loc 1 123 14
 867 065c D7F81C32 		ldr	r3, [r7, #540]
 868 0660 5A1C     		adds	r2, r3, #1
 869 0662 C7F81C22 		str	r2, [r7, #540]
 870              		.loc 1 123 19
 871 0666 4AB2     		sxtb	r2, r1
 872              		.loc 1 123 17
ARM GAS  /tmp/ccUAYEuC.s 			page 56


 873 0668 1A70     		strb	r2, [r3]
 874              	.LBB105:
 124:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 875              		.loc 1 124 27
 876 066a B7F81432 		ldrh	r3, [r7, #532]
 877 066e D7F8F021 		ldr	r2, [r7, #496]
 878 0672 42FA03F3 		asr	r3, r2, r3
 879 0676 C7F8A431 		str	r3, [r7, #420]
 880 067a D7F8A431 		ldr	r3, [r7, #420]
 881              		.syntax unified
 882              	@ 124 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 883 067e 03F30703 		ssat r3, #8, r3
 884              	@ 0 "" 2
 885              		.thumb
 886              		.syntax unified
 887 0682 C7F8A031 		str	r3, [r7, #416]
 888 0686 D7F8A011 		ldr	r1, [r7, #416]
 889              	.LBE105:
 890              		.loc 1 124 15
 891 068a D7F80432 		ldr	r3, [r7, #516]
 892 068e 5A1C     		adds	r2, r3, #1
 893 0690 C7F80422 		str	r2, [r7, #516]
 894              		.loc 1 124 20
 895 0694 4AB2     		sxtb	r2, r1
 896              		.loc 1 124 18
 897 0696 1A70     		strb	r2, [r3]
 898              	.LBB106:
 125:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 899              		.loc 1 125 27
 900 0698 B7F81432 		ldrh	r3, [r7, #532]
 901 069c D7F8E821 		ldr	r2, [r7, #488]
 902 06a0 42FA03F3 		asr	r3, r2, r3
 903 06a4 C7F89C31 		str	r3, [r7, #412]
 904 06a8 D7F89C31 		ldr	r3, [r7, #412]
 905              		.syntax unified
 906              	@ 125 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 907 06ac 03F30703 		ssat r3, #8, r3
 908              	@ 0 "" 2
 909              		.thumb
 910              		.syntax unified
 911 06b0 C7F89831 		str	r3, [r7, #408]
 912 06b4 D7F89811 		ldr	r1, [r7, #408]
 913              	.LBE106:
 914              		.loc 1 125 15
 915 06b8 D7F80432 		ldr	r3, [r7, #516]
 916 06bc 5A1C     		adds	r2, r3, #1
 917 06be C7F80422 		str	r2, [r7, #516]
 918              		.loc 1 125 20
 919 06c2 4AB2     		sxtb	r2, r1
 920              		.loc 1 125 18
 921 06c4 1A70     		strb	r2, [r3]
 126:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 127:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* skip the row computed with A2 */
 128:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         pA += numCol_A;
 922              		.loc 1 128 12
 923 06c6 3B1D     		adds	r3, r7, #4
 924 06c8 1A88     		ldrh	r2, [r3]
ARM GAS  /tmp/ccUAYEuC.s 			page 57


 925 06ca 07F10C03 		add	r3, r7, #12
 926 06ce 07F10C01 		add	r1, r7, #12
 927 06d2 0968     		ldr	r1, [r1]
 928 06d4 0A44     		add	r2, r2, r1
 929 06d6 1A60     		str	r2, [r3]
 129:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         rowCnt--;
 930              		.loc 1 129 15
 931 06d8 B7F8FE31 		ldrh	r3, [r7, #510]
 932 06dc 013B     		subs	r3, r3, #1
 933 06de A7F8FE31 		strh	r3, [r7, #510]	@ movhi
 934              	.L2:
 935              	.LBE68:
  67:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     {
 936              		.loc 1 67 11
 937 06e2 B7F8FE31 		ldrh	r3, [r7, #510]
 938 06e6 002B     		cmp	r3, #0
 939 06e8 7FF4ABAC 		bne	.L25
 130:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     }                           /* for over ch_im_out */
 131:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 132:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     /* compute left-over row if any */
 133:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     if (ch_im_out & 0x1)
 940              		.loc 1 133 19
 941 06ec BB1D     		adds	r3, r7, #6
 942 06ee 1B88     		ldrh	r3, [r3]
 943 06f0 03F00103 		and	r3, r3, #1
 944              		.loc 1 133 8
 945 06f4 002B     		cmp	r3, #0
 946 06f6 00F0EF81 		beq	.L26
 947              	.LBB107:
 134:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     {
 135:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* setup pointers for B */
 136:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         const q15_t *pB = pInBuffer;
 948              		.loc 1 136 22
 949 06fa 07F12003 		add	r3, r7, #32
 950 06fe 07F10802 		add	r2, r7, #8
 951 0702 1268     		ldr	r2, [r2]
 952 0704 1A60     		str	r2, [r3]
 137:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         const q15_t *pB2 = pB + numCol_A;
 953              		.loc 1 137 31
 954 0706 07F12003 		add	r3, r7, #32
 955 070a 1A68     		ldr	r2, [r3]
 956 070c 3B1D     		adds	r3, r7, #4
 957 070e 1B88     		ldrh	r3, [r3]
 958 0710 5B00     		lsls	r3, r3, #1
 959 0712 1A44     		add	r2, r2, r3
 960              		.loc 1 137 22
 961 0714 07F11C03 		add	r3, r7, #28
 962 0718 1A60     		str	r2, [r3]
 138:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 139:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         /* load the bias */
 140:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 963              		.loc 1 140 34
 964 071a D7F80032 		ldr	r3, [r7, #512]
 965 071e 93F90030 		ldrsb	r3, [r3]
 966              		.loc 1 140 26
 967 0722 1A46     		mov	r2, r3
 968              		.loc 1 140 42
ARM GAS  /tmp/ccUAYEuC.s 			page 58


 969 0724 B7F81032 		ldrh	r3, [r7, #528]
 970 0728 02FA03F3 		lsl	r3, r2, r3
 971 072c 1946     		mov	r1, r3
 972              		.loc 1 140 59
 973 072e B7F81432 		ldrh	r3, [r7, #532]
 974 0732 0122     		movs	r2, #1
 975 0734 02FA03F3 		lsl	r3, r2, r3
 976 0738 5B08     		lsrs	r3, r3, #1
 977              		.loc 1 140 57
 978 073a 0B44     		add	r3, r3, r1
 979              		.loc 1 140 19
 980 073c C7F8E031 		str	r3, [r7, #480]
 141:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 981              		.loc 1 141 41
 982 0740 D7F80032 		ldr	r3, [r7, #512]
 983 0744 5A1C     		adds	r2, r3, #1
 984 0746 C7F80022 		str	r2, [r7, #512]
 985              		.loc 1 141 35
 986 074a 93F90030 		ldrsb	r3, [r3]
 987              		.loc 1 141 27
 988 074e 1A46     		mov	r2, r3
 989              		.loc 1 141 45
 990 0750 B7F81032 		ldrh	r3, [r7, #528]
 991 0754 02FA03F3 		lsl	r3, r2, r3
 992 0758 1946     		mov	r1, r3
 993              		.loc 1 141 62
 994 075a B7F81432 		ldrh	r3, [r7, #532]
 995 075e 0122     		movs	r2, #1
 996 0760 02FA03F3 		lsl	r3, r2, r3
 997 0764 5B08     		lsrs	r3, r3, #1
 998              		.loc 1 141 60
 999 0766 0B44     		add	r3, r3, r1
 1000              		.loc 1 141 19
 1001 0768 C7F8DC31 		str	r3, [r7, #476]
 142:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 143:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         uint16_t  colCnt = numCol_A >> 2;
 1002              		.loc 1 143 19
 1003 076c 3B1D     		adds	r3, r7, #4
 1004 076e 1B88     		ldrh	r3, [r3]
 1005 0770 9B08     		lsrs	r3, r3, #2
 1006 0772 A7F8DA31 		strh	r3, [r7, #474]	@ movhi
 144:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         while (colCnt)
 1007              		.loc 1 144 15
 1008 0776 38E1     		b	.L27
 1009              	.L37:
 1010              	.LBB108:
 145:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 146:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inA11, inA12;
 147:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inB1 = *__SIMD32(pB)++;
 1011              		.loc 1 147 31
 1012 0778 07F12002 		add	r2, r7, #32
 1013 077c 1368     		ldr	r3, [r2]
 1014              		.loc 1 147 43
 1015 077e 191D     		adds	r1, r3, #4
 1016 0780 1160     		str	r1, [r2]
 1017              		.loc 1 147 23
 1018 0782 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUAYEuC.s 			page 59


 1019 0784 C7F8BC31 		str	r3, [r7, #444]
 148:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q31_t     inB2 = *__SIMD32(pB2)++;
 1020              		.loc 1 148 31
 1021 0788 07F11C02 		add	r2, r7, #28
 1022 078c 1368     		ldr	r3, [r2]
 1023              		.loc 1 148 44
 1024 078e 191D     		adds	r1, r3, #4
 1025 0790 1160     		str	r1, [r2]
 1026              		.loc 1 148 23
 1027 0792 1B68     		ldr	r3, [r3]
 1028 0794 C7F8B831 		str	r3, [r7, #440]
 1029 0798 07F11003 		add	r3, r7, #16
 1030 079c 07F10C02 		add	r2, r7, #12
 1031 07a0 1268     		ldr	r2, [r2]
 1032 07a2 1A60     		str	r2, [r3]
 1033 07a4 07F16C03 		add	r3, r7, #108
 1034 07a8 07F11802 		add	r2, r7, #24
 1035 07ac 1A60     		str	r2, [r3]
 1036 07ae 07F16803 		add	r3, r7, #104
 1037 07b2 07F11402 		add	r2, r7, #20
 1038 07b6 1A60     		str	r2, [r3]
 1039              	.LBB109:
 1040              	.LBB110:
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 1041              		.loc 2 108 26
 1042 07b8 07F11002 		add	r2, r7, #16
 1043 07bc 1368     		ldr	r3, [r2]
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 1044              		.loc 2 108 42
 1045 07be 191D     		adds	r1, r3, #4
 1046 07c0 1160     		str	r1, [r2]
 108:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 1047              		.loc 2 108 19
 1048 07c2 07F16402 		add	r2, r7, #100
 1049 07c6 1B68     		ldr	r3, [r3]
 1050 07c8 1360     		str	r3, [r2]
 109:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf2 = __SXTB16(inA);
 1051              		.loc 2 109 29
 1052 07ca 07F16403 		add	r3, r7, #100
 1053 07ce 1A68     		ldr	r2, [r3]
 1054 07d0 07F16003 		add	r3, r7, #96
 1055 07d4 1A60     		str	r2, [r3]
 1056 07d6 07F15C03 		add	r3, r7, #92
 1057 07da 0822     		movs	r2, #8
 1058 07dc 1A60     		str	r2, [r3]
 1059              	.LBB111:
 1060              	.LBB112:
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
 1061              		.loc 3 1023 7
 1062 07de 07F15C03 		add	r3, r7, #92
 1063 07e2 07F15C02 		add	r2, r7, #92
 1064 07e6 1268     		ldr	r2, [r2]
 1065 07e8 02F01F02 		and	r2, r2, #31
 1066 07ec 1A60     		str	r2, [r3]
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1067              		.loc 3 1024 6
 1068 07ee 07F15C03 		add	r3, r7, #92
ARM GAS  /tmp/ccUAYEuC.s 			page 60


 1069 07f2 1B68     		ldr	r3, [r3]
 1070 07f4 002B     		cmp	r3, #0
 1071 07f6 03D1     		bne	.L28
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1072              		.loc 3 1026 12
 1073 07f8 07F16003 		add	r3, r7, #96
 1074 07fc 1B68     		ldr	r3, [r3]
 1075 07fe 07E0     		b	.L29
 1076              	.L28:
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1077              		.loc 3 1028 23
 1078 0800 07F16002 		add	r2, r7, #96
 1079 0804 07F15C03 		add	r3, r7, #92
 1080 0808 1268     		ldr	r2, [r2]
 1081 080a 1B68     		ldr	r3, [r3]
 1082 080c 62FA03F3 		ror	r3, r2, r3
 1083              	.L29:
 1084 0810 07F15802 		add	r2, r7, #88
 1085 0814 1360     		str	r3, [r2]
 1086              	.LBE112:
 1087              	.LBE111:
 1088              	.LBB113:
 1089              	.LBB114:
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1090              		.loc 3 1961 3
 1091 0816 07F15803 		add	r3, r7, #88
 1092 081a 1B68     		ldr	r3, [r3]
 1093              		.syntax unified
 1094              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1095 081c 2FFA83F2 		sxtb16 r2, r3
 1096              	@ 0 "" 2
 1097              		.thumb
 1098              		.syntax unified
 1099 0820 07F15403 		add	r3, r7, #84
 1100 0824 1A60     		str	r2, [r3]
1962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1101              		.loc 3 1962 9
 1102 0826 07F15403 		add	r3, r7, #84
 1103 082a 1A68     		ldr	r2, [r3]
 1104              	.LBE114:
 1105              	.LBE113:
 109:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         q31_t     inAbuf2 = __SXTB16(inA);
 1106              		.loc 2 109 19
 1107 082c 07F15003 		add	r3, r7, #80
 1108 0830 1A60     		str	r2, [r3]
 110:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 1109              		.loc 2 110 29
 1110 0832 07F16403 		add	r3, r7, #100
 1111 0836 1A68     		ldr	r2, [r3]
 1112 0838 07F14C03 		add	r3, r7, #76
 1113 083c 1A60     		str	r2, [r3]
 1114              	.LBB115:
 1115              	.LBB116:
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1116              		.loc 3 1961 3
 1117 083e 07F14C03 		add	r3, r7, #76
 1118 0842 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccUAYEuC.s 			page 61


 1119              		.syntax unified
 1120              	@ 1961 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1121 0844 2FFA83F2 		sxtb16 r2, r3
 1122              	@ 0 "" 2
 1123              		.thumb
 1124              		.syntax unified
 1125 0848 07F14803 		add	r3, r7, #72
 1126 084c 1A60     		str	r2, [r3]
1962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1127              		.loc 3 1962 9
 1128 084e 07F14803 		add	r3, r7, #72
 1129 0852 1A68     		ldr	r2, [r3]
 1130              	.LBE116:
 1131              	.LBE115:
 110:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** 
 1132              		.loc 2 110 19
 1133 0854 07F14403 		add	r3, r7, #68
 1134 0858 1A60     		str	r2, [r3]
 113:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 1135              		.loc 2 113 17
 1136 085a 07F15003 		add	r3, r7, #80
 1137 085e 1A68     		ldr	r2, [r3]
 1138 0860 A54B     		ldr	r3, .L43
 1139 0862 1340     		ands	r3, r3, r2
 1140 0864 07F14402 		add	r2, r7, #68
 1141 0868 1268     		ldr	r2, [r2]
 1142 086a 120C     		lsrs	r2, r2, #16
 1143 086c 1343     		orrs	r3, r3, r2
 1144 086e 1A46     		mov	r2, r3
 113:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h ****         *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 1145              		.loc 2 113 15
 1146 0870 07F16803 		add	r3, r7, #104
 1147 0874 1B68     		ldr	r3, [r3]
 1148 0876 1A60     		str	r2, [r3]
 114:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #else
 1149              		.loc 2 114 17
 1150 0878 07F14403 		add	r3, r7, #68
 1151 087c 1B68     		ldr	r3, [r3]
 1152 087e 9AB2     		uxth	r2, r3
 1153 0880 07F15003 		add	r3, r7, #80
 1154 0884 1B68     		ldr	r3, [r3]
 1155 0886 1B04     		lsls	r3, r3, #16
 1156 0888 1343     		orrs	r3, r3, r2
 1157 088a 1A46     		mov	r2, r3
 114:./Libraries/CMSIS/NN/Include/arm_nnsupportfunctions.h **** #else
 1158              		.loc 2 114 15
 1159 088c 07F16C03 		add	r3, r7, #108
 1160 0890 1B68     		ldr	r3, [r3]
 1161 0892 1A60     		str	r2, [r3]
 1162              		.loc 2 120 16
 1163 0894 07F11003 		add	r3, r7, #16
 1164 0898 1A68     		ldr	r2, [r3]
 1165              	.LBE110:
 1166              	.LBE109:
 149:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 150:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 1167              		.loc 1 150 27
ARM GAS  /tmp/ccUAYEuC.s 			page 62


 1168 089a 07F10C03 		add	r3, r7, #12
 1169 089e 1A60     		str	r2, [r3]
 151:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 152:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum = __SMLAD(inA11, inB1, sum);
 1170              		.loc 1 152 19
 1171 08a0 07F11803 		add	r3, r7, #24
 1172 08a4 1B68     		ldr	r3, [r3]
 1173 08a6 1846     		mov	r0, r3
 1174 08a8 D7F8BC11 		ldr	r1, [r7, #444]
 1175 08ac D7F8E021 		ldr	r2, [r7, #480]
 1176 08b0 07F17C03 		add	r3, r7, #124
 1177 08b4 1860     		str	r0, [r3]
 1178 08b6 07F17803 		add	r3, r7, #120
 1179 08ba 1960     		str	r1, [r3]
 1180 08bc 07F17403 		add	r3, r7, #116
 1181 08c0 1A60     		str	r2, [r3]
 1182              	.LBB117:
 1183              	.LBB118:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1184              		.loc 3 1993 3
 1185 08c2 07F17C03 		add	r3, r7, #124
 1186 08c6 1B68     		ldr	r3, [r3]
 1187 08c8 07F17802 		add	r2, r7, #120
 1188 08cc 1268     		ldr	r2, [r2]
 1189 08ce 07F17401 		add	r1, r7, #116
 1190 08d2 0968     		ldr	r1, [r1]
 1191              		.syntax unified
 1192              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1193 08d4 23FB0212 		smlad r2, r3, r2, r1
 1194              	@ 0 "" 2
 1195              		.thumb
 1196              		.syntax unified
 1197 08d8 07F17003 		add	r3, r7, #112
 1198 08dc 1A60     		str	r2, [r3]
 1199              		.loc 3 1994 9
 1200 08de 07F17003 		add	r3, r7, #112
 1201 08e2 1B68     		ldr	r3, [r3]
 1202              	.LBE118:
 1203              	.LBE117:
 1204              		.loc 1 152 17
 1205 08e4 C7F8E031 		str	r3, [r7, #480]
 153:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 = __SMLAD(inA11, inB2, sum2);
 1206              		.loc 1 153 20
 1207 08e8 07F11803 		add	r3, r7, #24
 1208 08ec 1B68     		ldr	r3, [r3]
 1209 08ee 1846     		mov	r0, r3
 1210 08f0 D7F8B811 		ldr	r1, [r7, #440]
 1211 08f4 D7F8DC21 		ldr	r2, [r7, #476]
 1212 08f8 07F18C03 		add	r3, r7, #140
 1213 08fc 1860     		str	r0, [r3]
 1214 08fe 07F18803 		add	r3, r7, #136
 1215 0902 1960     		str	r1, [r3]
 1216 0904 07F18403 		add	r3, r7, #132
 1217 0908 1A60     		str	r2, [r3]
 1218              	.LBB119:
 1219              	.LBB120:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccUAYEuC.s 			page 63


 1220              		.loc 3 1993 3
 1221 090a 07F18C03 		add	r3, r7, #140
 1222 090e 1B68     		ldr	r3, [r3]
 1223 0910 07F18802 		add	r2, r7, #136
 1224 0914 1268     		ldr	r2, [r2]
 1225 0916 07F18401 		add	r1, r7, #132
 1226 091a 0968     		ldr	r1, [r1]
 1227              		.syntax unified
 1228              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1229 091c 23FB0212 		smlad r2, r3, r2, r1
 1230              	@ 0 "" 2
 1231              		.thumb
 1232              		.syntax unified
 1233 0920 07F18003 		add	r3, r7, #128
 1234 0924 1A60     		str	r2, [r3]
 1235              		.loc 3 1994 9
 1236 0926 07F18003 		add	r3, r7, #128
 1237 092a 1B68     		ldr	r3, [r3]
 1238              	.LBE120:
 1239              	.LBE119:
 1240              		.loc 1 153 18
 1241 092c C7F8DC31 		str	r3, [r7, #476]
 154:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 155:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             inB1 = *__SIMD32(pB)++;
 1242              		.loc 1 155 21
 1243 0930 07F12002 		add	r2, r7, #32
 1244 0934 1368     		ldr	r3, [r2]
 1245              		.loc 1 155 33
 1246 0936 191D     		adds	r1, r3, #4
 1247 0938 1160     		str	r1, [r2]
 1248              		.loc 1 155 18
 1249 093a 1B68     		ldr	r3, [r3]
 1250 093c C7F8BC31 		str	r3, [r7, #444]
 156:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             inB2 = *__SIMD32(pB2)++;
 1251              		.loc 1 156 21
 1252 0940 07F11C02 		add	r2, r7, #28
 1253 0944 1368     		ldr	r3, [r2]
 1254              		.loc 1 156 34
 1255 0946 191D     		adds	r1, r3, #4
 1256 0948 1160     		str	r1, [r2]
 1257              		.loc 1 156 18
 1258 094a 1B68     		ldr	r3, [r3]
 1259 094c C7F8B831 		str	r3, [r7, #440]
 157:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum = __SMLAD(inA12, inB1, sum);
 1260              		.loc 1 157 19
 1261 0950 07F11403 		add	r3, r7, #20
 1262 0954 1B68     		ldr	r3, [r3]
 1263 0956 1846     		mov	r0, r3
 1264 0958 D7F8BC11 		ldr	r1, [r7, #444]
 1265 095c D7F8E021 		ldr	r2, [r7, #480]
 1266 0960 07F19C03 		add	r3, r7, #156
 1267 0964 1860     		str	r0, [r3]
 1268 0966 07F19803 		add	r3, r7, #152
 1269 096a 1960     		str	r1, [r3]
 1270 096c 07F19403 		add	r3, r7, #148
 1271 0970 1A60     		str	r2, [r3]
 1272              	.LBB121:
ARM GAS  /tmp/ccUAYEuC.s 			page 64


 1273              	.LBB122:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1274              		.loc 3 1993 3
 1275 0972 07F19C03 		add	r3, r7, #156
 1276 0976 1B68     		ldr	r3, [r3]
 1277 0978 07F19802 		add	r2, r7, #152
 1278 097c 1268     		ldr	r2, [r2]
 1279 097e 07F19401 		add	r1, r7, #148
 1280 0982 0968     		ldr	r1, [r1]
 1281              		.syntax unified
 1282              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1283 0984 23FB0212 		smlad r2, r3, r2, r1
 1284              	@ 0 "" 2
 1285              		.thumb
 1286              		.syntax unified
 1287 0988 07F19003 		add	r3, r7, #144
 1288 098c 1A60     		str	r2, [r3]
 1289              		.loc 3 1994 9
 1290 098e 07F19003 		add	r3, r7, #144
 1291 0992 1B68     		ldr	r3, [r3]
 1292              	.LBE122:
 1293              	.LBE121:
 1294              		.loc 1 157 17
 1295 0994 C7F8E031 		str	r3, [r7, #480]
 158:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 = __SMLAD(inA12, inB2, sum2);
 1296              		.loc 1 158 20
 1297 0998 07F11403 		add	r3, r7, #20
 1298 099c 1B68     		ldr	r3, [r3]
 1299 099e 1846     		mov	r0, r3
 1300 09a0 D7F8B811 		ldr	r1, [r7, #440]
 1301 09a4 D7F8DC21 		ldr	r2, [r7, #476]
 1302 09a8 07F1AC03 		add	r3, r7, #172
 1303 09ac 1860     		str	r0, [r3]
 1304 09ae 07F1A803 		add	r3, r7, #168
 1305 09b2 1960     		str	r1, [r3]
 1306 09b4 07F1A403 		add	r3, r7, #164
 1307 09b8 1A60     		str	r2, [r3]
 1308              	.LBB123:
 1309              	.LBB124:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1310              		.loc 3 1993 3
 1311 09ba 07F1AC03 		add	r3, r7, #172
 1312 09be 1B68     		ldr	r3, [r3]
 1313 09c0 07F1A802 		add	r2, r7, #168
 1314 09c4 1268     		ldr	r2, [r2]
 1315 09c6 07F1A401 		add	r1, r7, #164
 1316 09ca 0968     		ldr	r1, [r1]
 1317              		.syntax unified
 1318              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1319 09cc 23FB0212 		smlad r2, r3, r2, r1
 1320              	@ 0 "" 2
 1321              		.thumb
 1322              		.syntax unified
 1323 09d0 07F1A003 		add	r3, r7, #160
 1324 09d4 1A60     		str	r2, [r3]
 1325              		.loc 3 1994 9
 1326 09d6 07F1A003 		add	r3, r7, #160
ARM GAS  /tmp/ccUAYEuC.s 			page 65


 1327 09da 1B68     		ldr	r3, [r3]
 1328              	.LBE124:
 1329              	.LBE123:
 1330              		.loc 1 158 18
 1331 09dc C7F8DC31 		str	r3, [r7, #476]
 159:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 160:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             colCnt--;
 1332              		.loc 1 160 19
 1333 09e0 B7F8DA31 		ldrh	r3, [r7, #474]
 1334 09e4 013B     		subs	r3, r3, #1
 1335 09e6 A7F8DA31 		strh	r3, [r7, #474]	@ movhi
 1336              	.L27:
 1337              	.LBE108:
 144:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 1338              		.loc 1 144 15
 1339 09ea B7F8DA31 		ldrh	r3, [r7, #474]
 1340 09ee 002B     		cmp	r3, #0
 1341 09f0 7FF4C2AE 		bne	.L37
 161:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         }
 162:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         colCnt = numCol_A & 0x3;
 1342              		.loc 1 162 16
 1343 09f4 3B1D     		adds	r3, r7, #4
 1344 09f6 1B88     		ldrh	r3, [r3]	@ movhi
 1345 09f8 03F00303 		and	r3, r3, #3
 1346 09fc A7F8DA31 		strh	r3, [r7, #474]	@ movhi
 163:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         while (colCnt)
 1347              		.loc 1 163 15
 1348 0a00 38E0     		b	.L38
 1349              	.L39:
 1350              	.LBB125:
 164:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 165:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q7_t      inA1 = *pA++;
 1351              		.loc 1 165 33
 1352 0a02 07F10C03 		add	r3, r7, #12
 1353 0a06 1B68     		ldr	r3, [r3]
 1354 0a08 07F10C02 		add	r2, r7, #12
 1355 0a0c 591C     		adds	r1, r3, #1
 1356 0a0e 1160     		str	r1, [r2]
 1357              		.loc 1 165 23
 1358 0a10 1B78     		ldrb	r3, [r3]
 1359 0a12 87F8C731 		strb	r3, [r7, #455]
 166:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q15_t     inB1 = *pB++;
 1360              		.loc 1 166 33
 1361 0a16 07F12003 		add	r3, r7, #32
 1362 0a1a 1B68     		ldr	r3, [r3]
 1363 0a1c 991C     		adds	r1, r3, #2
 1364 0a1e 07F12002 		add	r2, r7, #32
 1365 0a22 1160     		str	r1, [r2]
 1366              		.loc 1 166 23
 1367 0a24 1B88     		ldrh	r3, [r3]	@ movhi
 1368 0a26 A7F8C431 		strh	r3, [r7, #452]	@ movhi
 167:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             q15_t     inB2 = *pB2++;
 1369              		.loc 1 167 34
 1370 0a2a 07F11C03 		add	r3, r7, #28
 1371 0a2e 1B68     		ldr	r3, [r3]
 1372 0a30 991C     		adds	r1, r3, #2
 1373 0a32 07F11C02 		add	r2, r7, #28
ARM GAS  /tmp/ccUAYEuC.s 			page 66


 1374 0a36 1160     		str	r1, [r2]
 1375              		.loc 1 167 23
 1376 0a38 1B88     		ldrh	r3, [r3]	@ movhi
 1377 0a3a A7F8C231 		strh	r3, [r7, #450]	@ movhi
 168:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 169:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum += inA1 * inB1;
 1378              		.loc 1 169 25
 1379 0a3e 97F9C731 		ldrsb	r3, [r7, #455]
 1380 0a42 B7F9C421 		ldrsh	r2, [r7, #452]
 1381 0a46 02FB03F3 		mul	r3, r2, r3
 1382              		.loc 1 169 17
 1383 0a4a D7F8E021 		ldr	r2, [r7, #480]
 1384 0a4e 1344     		add	r3, r3, r2
 1385 0a50 C7F8E031 		str	r3, [r7, #480]
 170:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             sum2 += inA1 * inB2;
 1386              		.loc 1 170 26
 1387 0a54 97F9C731 		ldrsb	r3, [r7, #455]
 1388 0a58 B7F9C221 		ldrsh	r2, [r7, #450]
 1389 0a5c 02FB03F3 		mul	r3, r2, r3
 1390              		.loc 1 170 18
 1391 0a60 D7F8DC21 		ldr	r2, [r7, #476]
 1392 0a64 1344     		add	r3, r3, r2
 1393 0a66 C7F8DC31 		str	r3, [r7, #476]
 171:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****             colCnt--;
 1394              		.loc 1 171 19
 1395 0a6a B7F8DA31 		ldrh	r3, [r7, #474]
 1396 0a6e 013B     		subs	r3, r3, #1
 1397 0a70 A7F8DA31 		strh	r3, [r7, #474]	@ movhi
 1398              	.L38:
 1399              	.LBE125:
 163:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         {
 1400              		.loc 1 163 15
 1401 0a74 B7F8DA31 		ldrh	r3, [r7, #474]
 1402 0a78 002B     		cmp	r3, #0
 1403 0a7a C2D1     		bne	.L39
 1404              	.LBB126:
 172:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         }
 173:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 174:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 1405              		.loc 1 174 26
 1406 0a7c B7F81432 		ldrh	r3, [r7, #532]
 1407 0a80 D7F8E021 		ldr	r2, [r7, #480]
 1408 0a84 42FA03F3 		asr	r3, r2, r3
 1409 0a88 C7F8D431 		str	r3, [r7, #468]
 1410 0a8c D7F8D431 		ldr	r3, [r7, #468]
 1411              		.syntax unified
 1412              	@ 174 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 1413 0a90 03F30703 		ssat r3, #8, r3
 1414              	@ 0 "" 2
 1415              		.thumb
 1416              		.syntax unified
 1417 0a94 C7F8D031 		str	r3, [r7, #464]
 1418 0a98 D7F8D011 		ldr	r1, [r7, #464]
 1419              	.LBE126:
 1420              		.loc 1 174 14
 1421 0a9c D7F81C32 		ldr	r3, [r7, #540]
 1422 0aa0 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/ccUAYEuC.s 			page 67


 1423 0aa2 C7F81C22 		str	r2, [r7, #540]
 1424              		.loc 1 174 19
 1425 0aa6 4AB2     		sxtb	r2, r1
 1426              		.loc 1 174 17
 1427 0aa8 1A70     		strb	r2, [r3]
 1428              	.LBB127:
 175:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****         *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 1429              		.loc 1 175 27
 1430 0aaa B7F81432 		ldrh	r3, [r7, #532]
 1431 0aae D7F8DC21 		ldr	r2, [r7, #476]
 1432 0ab2 42FA03F3 		asr	r3, r2, r3
 1433 0ab6 C7F8CC31 		str	r3, [r7, #460]
 1434 0aba D7F8CC31 		ldr	r3, [r7, #460]
 1435              		.syntax unified
 1436              	@ 175 "./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c" 1
 1437 0abe 03F30703 		ssat r3, #8, r3
 1438              	@ 0 "" 2
 1439              		.thumb
 1440              		.syntax unified
 1441 0ac2 C7F8C831 		str	r3, [r7, #456]
 1442 0ac6 D7F8C811 		ldr	r1, [r7, #456]
 1443              	.LBE127:
 1444              		.loc 1 175 15
 1445 0aca D7F80432 		ldr	r3, [r7, #516]
 1446 0ace 5A1C     		adds	r2, r3, #1
 1447 0ad0 C7F80422 		str	r2, [r7, #516]
 1448              		.loc 1 175 20
 1449 0ad4 4AB2     		sxtb	r2, r1
 1450              		.loc 1 175 18
 1451 0ad6 1A70     		strb	r2, [r3]
 1452              	.L26:
 1453              	.LBE107:
 176:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     }
 177:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 178:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     pOut += ch_im_out;
 1454              		.loc 1 178 10
 1455 0ad8 BB1D     		adds	r3, r7, #6
 1456 0ada 1B88     		ldrh	r3, [r3]
 1457 0adc D7F81C22 		ldr	r2, [r7, #540]
 1458 0ae0 1344     		add	r3, r3, r2
 1459 0ae2 C7F81C32 		str	r3, [r7, #540]
 179:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 180:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     /* return the new output pointer with offset */
 181:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     return pOut;
 1460              		.loc 1 181 12
 1461 0ae6 D7F81C32 		ldr	r3, [r7, #540]
 182:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** #else
 183:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     /* To be completed */
 184:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c ****     return NULL;
 185:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** #endif                          /* ARM_MATH_DSP */
 186:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** 
 187:./Libraries/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c **** }
 1462              		.loc 1 187 1
 1463 0aea 1846     		mov	r0, r3
 1464 0aec 07F50277 		add	r7, r7, #520
 1465              	.LCFI3:
 1466              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccUAYEuC.s 			page 68


 1467 0af0 BD46     		mov	sp, r7
 1468              	.LCFI4:
 1469              		.cfi_def_cfa_register 13
 1470              		@ sp needed
 1471 0af2 90BC     		pop	{r4, r7}
 1472              	.LCFI5:
 1473              		.cfi_restore 7
 1474              		.cfi_restore 4
 1475              		.cfi_def_cfa_offset 0
 1476 0af4 7047     		bx	lr
 1477              	.L44:
 1478 0af6 00BF     		.align	2
 1479              	.L43:
 1480 0af8 0000FFFF 		.word	-65536
 1481              		.cfi_endproc
 1482              	.LFE149:
 1484              		.text
 1485              	.Letext0:
 1486              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1487              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1488              		.file 6 "/usr/include/newlib/sys/_types.h"
 1489              		.file 7 "/usr/include/newlib/sys/reent.h"
 1490              		.file 8 "/usr/include/newlib/sys/lock.h"
 1491              		.file 9 "/usr/include/newlib/math.h"
 1492              		.file 10 "./Libraries/CMSIS/DSP/Include/arm_math.h"
 1493              		.file 11 "./Libraries/CMSIS/DSP/Include/arm_common_tables.h"
 1494              		.file 12 "./Libraries/CMSIS/NN/Include/arm_nn_tables.h"
ARM GAS  /tmp/ccUAYEuC.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_nn_mat_mult_kernel_q7_q15.c
     /tmp/ccUAYEuC.s:17     .text.arm_nn_mat_mult_kernel_q7_q15:0000000000000000 $t
     /tmp/ccUAYEuC.s:25     .text.arm_nn_mat_mult_kernel_q7_q15:0000000000000000 arm_nn_mat_mult_kernel_q7_q15
     /tmp/ccUAYEuC.s:747    .text.arm_nn_mat_mult_kernel_q7_q15:0000000000000554 $d
     /tmp/ccUAYEuC.s:751    .text.arm_nn_mat_mult_kernel_q7_q15:0000000000000558 $t
     /tmp/ccUAYEuC.s:1480   .text.arm_nn_mat_mult_kernel_q7_q15:0000000000000af8 $d

NO UNDEFINED SYMBOLS
