ARM GAS  /tmp/cc0yi91q.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_pwr_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_PWREx_ConfigSupply
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	HAL_PWREx_ConfigSupply:
  26              	.LFB331:
  27              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @verbatim
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   [..]
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with the following different setups according to hardware (support SMPS):
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_DIRECT_SMPS_SUPPLY
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_LDO
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_LDO
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_LDO_SUPPLY
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the following scales :
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
ARM GAS  /tmp/cc0yi91q.s 			page 2


  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE2
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE3
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        main internal regulator output voltage in STOP mode. The voltage scaling
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in STOP mode could be one of the following scales :
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE3
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE4
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE5
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        output voltage applied to the main regulator in STOP mode.
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOP2Mode() function to enter the system in STOP mode
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with core domain in D2STOP mode. This API is used only for STM32H7Axxx
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and STM32H7Bxxx devices.
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOPMode() function to enter the selected domain in
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        DSTOP mode. Call this API with all available power domains to enter the
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        system in STOP mode.
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearPendingEvent() function always before entring the
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Cortex-Mx in any low power mode (SLEEP/DEEP-SLEEP) using WFE entry.
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTANDBYMode() function to enter the selected domain
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DSTANDBY mode. Call this API with all available power domains to enter
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the system in STANDBY mode.
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigD3Domain() function to setup the D3/SRD domain state
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (RUN/STOP) when the system enter to low power mode.
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearDomainFlags() function to clear the CPU flags for the
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        selected power domain. This API is used only for dual core devices.
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_HoldCore() and HAL_PWREx_ReleaseCore() functions to hold
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and release the selected CPU and and their domain peripherals when
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        exiting STOP mode. These APIs are used only for dual core devices.
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableFlashPowerDown() and
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableFlashPowerDown() functions to enable and disable the
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Flash Power Down in STOP mode.
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMemoryShutOff() and
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableMemoryShutOff() functions to enable and disable the
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        memory block shut-off in DStop or DStop2. These APIs are used only for
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines.
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cc0yi91q.s 			page 3


  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() and HAL_PWREx_DisableWakeUpPin()
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the Wake-up pin functionality for
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the selected pin.
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to manage wake-up flag for the selected pin.
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_WAKEUP_PIN_IRQHandler() function to handle all wake-up
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        pins interrupts.
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkUpReg() and HAL_PWREx_DisableBkUpReg() functions
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        to enable and disable the backup domain regulator.
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableUSBReg(), HAL_PWREx_DisableUSBReg(),
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_EnableUSBVoltageDetector() and
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableUSBVoltageDetector() functions to manage USB power
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        regulation functionalities.
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBatteryCharging() and
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableBatteryCharging() functions to enable and disable the
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        battery charging feature with the selected resistor.
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableAnalogBooster() and
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableAnalogBooster() functions to enable and disable the
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD boost feature when the VDD supply voltage is below 2V7.
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetMMCVoltage() and HAL_PWREx_DisableMonitoring()
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        function to get VDDMMC voltage level. This API is used only for
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigAVD() after setting parameter to be configured
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (event mode and voltage threshold) in order to set up the Analog Voltage
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Detector then use HAL_PWREx_EnableAVD() and  HAL_PWREx_DisableAVD()
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to start and stop the AVD detection.
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) AVD level could be one of the following values :
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 1V7
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V1
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V5
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V8
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_AVD_IRQHandler() function to handle the PWR PVD and
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD interrupt request.
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @endverbatim
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics.
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.</center></h2>
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
ARM GAS  /tmp/cc0yi91q.s 			page 4


 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * the "License"; You may not use this file except in compliance with the
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * License. You may obtain a copy of the License at:
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              (0x00010000U)
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             (0x00020000U)
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          (0x00000001U)
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         (0x00000002U)
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  (0x00000003U)
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY   (1000U)
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (EXTI_IMR2_IM57)
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM57 | EXTI_IMR2_IM58 |\
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  /tmp/cc0yi91q.s 			page 5


 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM58 | EXTI_IMR2_IM60)
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (EXTI_IMR2_IM57) */
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) When the system is powered on, the POR monitors VDD supply. Once VDD is
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        above the POR threshold level, the voltage regulator is enabled in the
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        default supply configuration:
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1V0 in accordance with
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the VOS3 level configured in PWR (D3/SRD) domain control register
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_D3CR/PWR_SRDCR).
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           oscillator is enabled.
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           and option bytes are loaded and the CPU starts in Run* mode.
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           configuration programming using the HAL_PWREx_ConfigSupply().
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration has been configured, the
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ConfigSupply() function checks the ACTVOSRDY bit in PWR
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control status register 1 (PWR_CSR1) to guarantee a valid voltage
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels:
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             system is in limited Run* mode, write accesses to the RAMs are not
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             permitted and VOS shall not be changed.
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             is in normal Run mode, write accesses to RAMs are allowed and VOS
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             can be changed.
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cc0yi91q.s 			page 6


 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        system startup.
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY : The SMPS supplies the Vcore Power
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                          Domains. The LDO is Bypassed.
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO : The SMPS 1.8V output supplies
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO : The SMPS 2.5V output supplies
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO : The SMPS 1.8V output
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO : The SMPS 2.5V output
 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT : The SMPS 1.8V output supplies
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT : The SMPS 2.5V output supplies
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY : The LDO regulator supplies the Vcore Power
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                  Domains. The SMPS regulator is Bypassed.
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY : The SMPS and the LDO are
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Bypassed. The Vcore Power
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Domains are supplied from
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              external source.
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_LDO_SUPPLY and PWR_EXTERNAL_SOURCE_SUPPLY are used by all
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         H7 lines.
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         The PWR_DIRECT_SMPS_SUPPLY, PWR_SMPS_1V8_SUPPLIES_LDO,
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_LDO, PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO,
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO, PWR_SMPS_1V8_SUPPLIES_EXT and
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator.
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  28              		.loc 1 315 1
ARM GAS  /tmp/cc0yi91q.s 			page 7


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_SUPPLY (SupplySource));
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if supply source was configured */
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_FLAG_SCUEN)
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_L
  44              		.loc 1 325 11
  45 0008 294B     		ldr	r3, .L11
  46 000a DB68     		ldr	r3, [r3, #12]
  47              		.loc 1 325 17
  48 000c 03F00703 		and	r3, r3, #7
  49              		.loc 1 325 6
  50 0010 062B     		cmp	r3, #6
  51 0012 0AD0     		beq	.L2
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check supply configuration */
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  52              		.loc 1 329 13
  53 0014 264B     		ldr	r3, .L11
  54 0016 DB68     		ldr	r3, [r3, #12]
  55              		.loc 1 329 19
  56 0018 03F03F03 		and	r3, r3, #63
  57              		.loc 1 329 8
  58 001c 7A68     		ldr	r2, [r7, #4]
  59 001e 9A42     		cmp	r2, r3
  60 0020 01D0     		beq	.L3
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new supply config */
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  61              		.loc 1 332 14
  62 0022 0123     		movs	r3, #1
  63 0024 40E0     		b	.L4
  64              	.L3:
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, but new supply configuration
ARM GAS  /tmp/cc0yi91q.s 			page 8


 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          matches with old supply configuration : nothing to do
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_OK;
  65              		.loc 1 339 14
  66 0026 0023     		movs	r3, #0
  67 0028 3EE0     		b	.L4
  68              	.L2:
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  69              		.loc 1 344 3
  70 002a 214B     		ldr	r3, .L11
  71 002c DB68     		ldr	r3, [r3, #12]
  72 002e 23F03F02 		bic	r2, r3, #63
  73 0032 1F49     		ldr	r1, .L11
  74 0034 7B68     		ldr	r3, [r7, #4]
  75 0036 1343     		orrs	r3, r3, r2
  76 0038 CB60     		str	r3, [r1, #12]
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
  77              		.loc 1 347 15
  78 003a FFF7FEFF 		bl	HAL_GetTick
  79 003e F860     		str	r0, [r7, #12]
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
  80              		.loc 1 350 9
  81 0040 09E0     		b	.L5
  82              	.L6:
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
  83              		.loc 1 352 10
  84 0042 FFF7FEFF 		bl	HAL_GetTick
  85 0046 0246     		mov	r2, r0
  86              		.loc 1 352 25
  87 0048 FB68     		ldr	r3, [r7, #12]
  88 004a D31A     		subs	r3, r2, r3
  89              		.loc 1 352 8
  90 004c B3F57A7F 		cmp	r3, #1000
  91 0050 01D9     		bls	.L5
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  92              		.loc 1 354 14
  93 0052 0123     		movs	r3, #1
  94 0054 28E0     		b	.L4
  95              	.L5:
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
  96              		.loc 1 350 10
  97 0056 164B     		ldr	r3, .L11
  98 0058 5B68     		ldr	r3, [r3, #4]
  99 005a 03F40053 		and	r3, r3, #8192
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 100              		.loc 1 350 9
 101 005e B3F5005F 		cmp	r3, #8192
ARM GAS  /tmp/cc0yi91q.s 			page 9


 102 0062 EED1     		bne	.L6
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (SMPS)
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 103              		.loc 1 360 6
 104 0064 7B68     		ldr	r3, [r7, #4]
 105 0066 1E2B     		cmp	r3, #30
 106 0068 08D0     		beq	.L7
 107              		.loc 1 360 59 discriminator 1
 108 006a 7B68     		ldr	r3, [r7, #4]
 109 006c 2E2B     		cmp	r3, #46
 110 006e 05D0     		beq	.L7
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 111              		.loc 1 361 59
 112 0070 7B68     		ldr	r3, [r7, #4]
 113 0072 1D2B     		cmp	r3, #29
 114 0074 02D0     		beq	.L7
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 115              		.loc 1 362 59
 116 0076 7B68     		ldr	r3, [r7, #4]
 117 0078 2D2B     		cmp	r3, #45
 118 007a 14D1     		bne	.L8
 119              	.L7:
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get the current tick number */
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick ();
 120              		.loc 1 366 17
 121 007c FFF7FEFF 		bl	HAL_GetTick
 122 0080 F860     		str	r0, [r7, #12]
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 123              		.loc 1 369 11
 124 0082 09E0     		b	.L9
 125              	.L10:
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 126              		.loc 1 371 12
 127 0084 FFF7FEFF 		bl	HAL_GetTick
 128 0088 0246     		mov	r2, r0
 129              		.loc 1 371 27
 130 008a FB68     		ldr	r3, [r7, #12]
 131 008c D31A     		subs	r3, r2, r3
 132              		.loc 1 371 10
 133 008e B3F57A7F 		cmp	r3, #1000
 134 0092 01D9     		bls	.L9
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_ERROR;
 135              		.loc 1 373 16
 136 0094 0123     		movs	r3, #1
 137 0096 07E0     		b	.L4
 138              	.L9:
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
ARM GAS  /tmp/cc0yi91q.s 			page 10


 139              		.loc 1 369 12
 140 0098 054B     		ldr	r3, .L11
 141 009a DB68     		ldr	r3, [r3, #12]
 142 009c 03F48033 		and	r3, r3, #65536
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 143              		.loc 1 369 11
 144 00a0 B3F5803F 		cmp	r3, #65536
 145 00a4 EED1     		bne	.L10
 146              	.L8:
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SMPS) */
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 147              		.loc 1 379 10
 148 00a6 0023     		movs	r3, #0
 149              	.L4:
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 150              		.loc 1 380 1
 151 00a8 1846     		mov	r0, r3
 152 00aa 1037     		adds	r7, r7, #16
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155 00ac BD46     		mov	sp, r7
 156              	.LCFI4:
 157              		.cfi_def_cfa_register 13
 158              		@ sp needed
 159 00ae 80BD     		pop	{r7, pc}
 160              	.L12:
 161              		.align	2
 162              	.L11:
 163 00b0 00480258 		.word	1476544512
 164              		.cfi_endproc
 165              	.LFE331:
 167              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 168              		.align	1
 169              		.global	HAL_PWREx_GetSupplyConfig
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv5-d16
 175              	HAL_PWREx_GetSupplyConfig:
 176              	.LFB332:
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig (void)
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 177              		.loc 1 387 1
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc0yi91q.s 			page 11


 183              	.LCFI5:
 184              		.cfi_def_cfa_offset 4
 185              		.cfi_offset 7, -4
 186 0002 00AF     		add	r7, sp, #0
 187              	.LCFI6:
 188              		.cfi_def_cfa_register 7
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 189              		.loc 1 388 14
 190 0004 044B     		ldr	r3, .L15
 191 0006 DB68     		ldr	r3, [r3, #12]
 192              		.loc 1 388 20
 193 0008 03F03F03 		and	r3, r3, #63
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 194              		.loc 1 389 1
 195 000c 1846     		mov	r0, r3
 196 000e BD46     		mov	sp, r7
 197              	.LCFI7:
 198              		.cfi_def_cfa_register 13
 199              		@ sp needed
 200 0010 5DF8047B 		ldr	r7, [sp], #4
 201              	.LCFI8:
 202              		.cfi_restore 7
 203              		.cfi_def_cfa_offset 0
 204 0014 7047     		bx	lr
 205              	.L16:
 206 0016 00BF     		.align	2
 207              	.L15:
 208 0018 00480258 		.word	1476544512
 209              		.cfi_endproc
 210              	.LFE332:
 212              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 213              		.align	1
 214              		.global	HAL_PWREx_ControlVoltageScaling
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv5-d16
 220              	HAL_PWREx_ControlVoltageScaling:
 221              	.LFB333:
 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          consumption.
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage output
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                Scale 0 mode.
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage output
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 1 mode.
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2 : Regulator voltage output
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 2 mode.
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3 : Regulator voltage output
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 3 mode.
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For STM32H74x and STM32H75x lines, configuring Voltage Scale 0 is
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only possible when Vcore is supplied from LDO (Low DropOut). The
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SYSCFG Clock must be enabled through __HAL_RCC_SYSCFG_CLK_ENABLE()
ARM GAS  /tmp/cc0yi91q.s 			page 12


 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         macro before configuring Voltage Scale 0.
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         To enter low power mode , and if current regulator voltage is
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         low power mode.
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 222              		.loc 1 415 1
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 16
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              	.LCFI9:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0002 84B0     		sub	sp, sp, #16
 232              	.LCFI10:
 233              		.cfi_def_cfa_offset 24
 234 0004 00AF     		add	r7, sp, #0
 235              	.LCFI11:
 236              		.cfi_def_cfa_register 7
 237 0006 7860     		str	r0, [r7, #4]
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the voltage scaling  */
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 238              		.loc 1 422 11
 239 0008 3F4B     		ldr	r3, .L30
 240 000a 5B68     		ldr	r3, [r3, #4]
 241              		.loc 1 422 18
 242 000c 03F44043 		and	r3, r3, #49152
 243              		.loc 1 422 6
 244 0010 7A68     		ldr	r2, [r7, #4]
 245 0012 9A42     		cmp	r2, r3
 246 0014 01D1     		bne	.L18
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Old and new voltage scaling configuration match : nothing to do */
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_OK;
 247              		.loc 1 425 12
 248 0016 0023     		movs	r3, #0
 249 0018 72E0     		b	.L19
 250              	.L18:
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_SRDCR_VOS)
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 251              		.loc 1 433 6
 252 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc0yi91q.s 			page 13


 253 001c 002B     		cmp	r3, #0
 254 001e 29D1     		bne	.L20
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 255              		.loc 1 435 13
 256 0020 394B     		ldr	r3, .L30
 257 0022 DB68     		ldr	r3, [r3, #12]
 258              		.loc 1 435 19
 259 0024 03F00203 		and	r3, r3, #2
 260              		.loc 1 435 8
 261 0028 022B     		cmp	r3, #2
 262 002a 21D1     		bne	.L21
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set the voltage range */
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 263              		.loc 1 438 7
 264 002c 364B     		ldr	r3, .L30
 265 002e 9B69     		ldr	r3, [r3, #24]
 266 0030 354A     		ldr	r2, .L30
 267 0032 43F44043 		orr	r3, r3, #49152
 268 0036 9361     		str	r3, [r2, #24]
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Get tick */
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       tickstart = HAL_GetTick ();
 269              		.loc 1 441 19
 270 0038 FFF7FEFF 		bl	HAL_GetTick
 271 003c F860     		str	r0, [r7, #12]
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Wait till voltage level flag is set */
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 272              		.loc 1 444 13
 273 003e 09E0     		b	.L22
 274              	.L23:
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 275              		.loc 1 446 14
 276 0040 FFF7FEFF 		bl	HAL_GetTick
 277 0044 0246     		mov	r2, r0
 278              		.loc 1 446 29
 279 0046 FB68     		ldr	r3, [r7, #12]
 280 0048 D31A     		subs	r3, r2, r3
 281              		.loc 1 446 12
 282 004a B3F57A7F 		cmp	r3, #1000
 283 004e 01D9     		bls	.L22
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           return HAL_ERROR;
 284              		.loc 1 448 18
 285 0050 0123     		movs	r3, #1
 286 0052 55E0     		b	.L19
 287              	.L22:
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 288              		.loc 1 444 14
 289 0054 2C4B     		ldr	r3, .L30
 290 0056 5B68     		ldr	r3, [r3, #4]
 291 0058 03F40053 		and	r3, r3, #8192
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 292              		.loc 1 444 13
ARM GAS  /tmp/cc0yi91q.s 			page 14


 293 005c B3F5005F 		cmp	r3, #8192
 294 0060 EED1     		bne	.L23
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Enable the PWR overdrive */
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 295              		.loc 1 453 7
 296 0062 2A4B     		ldr	r3, .L30+4
 297 0064 DB6A     		ldr	r3, [r3, #44]
 298 0066 294A     		ldr	r2, .L30+4
 299 0068 43F00103 		orr	r3, r3, #1
 300 006c D362     		str	r3, [r2, #44]
 301 006e 31E0     		b	.L24
 302              	.L21:
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* The voltage scale 0 is only possible when LDO regulator is enabled */
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 303              		.loc 1 458 14
 304 0070 0123     		movs	r3, #1
 305 0072 45E0     		b	.L19
 306              	.L20:
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 307              		.loc 1 463 13
 308 0074 244B     		ldr	r3, .L30
 309 0076 5B68     		ldr	r3, [r3, #4]
 310              		.loc 1 463 20
 311 0078 03F44043 		and	r3, r3, #49152
 312              		.loc 1 463 8
 313 007c B3F5404F 		cmp	r3, #49152
 314 0080 20D1     		bne	.L25
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
 315              		.loc 1 465 18
 316 0082 224B     		ldr	r3, .L30+4
 317 0084 DB6A     		ldr	r3, [r3, #44]
 318              		.loc 1 465 26
 319 0086 03F00103 		and	r3, r3, #1
 320              		.loc 1 465 10
 321 008a 002B     		cmp	r3, #0
 322 008c 1AD0     		beq	.L25
 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Disable the PWR overdrive */
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 323              		.loc 1 468 9
 324 008e 1F4B     		ldr	r3, .L30+4
 325 0090 DB6A     		ldr	r3, [r3, #44]
 326 0092 1E4A     		ldr	r2, .L30+4
 327 0094 23F00103 		bic	r3, r3, #1
 328 0098 D362     		str	r3, [r2, #44]
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cc0yi91q.s 			page 15


 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Get tick */
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         tickstart = HAL_GetTick ();
 329              		.loc 1 471 21
 330 009a FFF7FEFF 		bl	HAL_GetTick
 331 009e F860     		str	r0, [r7, #12]
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Wait till voltage level flag is set */
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 332              		.loc 1 474 15
 333 00a0 09E0     		b	.L26
 334              	.L27:
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 335              		.loc 1 476 16
 336 00a2 FFF7FEFF 		bl	HAL_GetTick
 337 00a6 0246     		mov	r2, r0
 338              		.loc 1 476 31
 339 00a8 FB68     		ldr	r3, [r7, #12]
 340 00aa D31A     		subs	r3, r2, r3
 341              		.loc 1 476 14
 342 00ac B3F57A7F 		cmp	r3, #1000
 343 00b0 01D9     		bls	.L26
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             return HAL_ERROR;
 344              		.loc 1 478 20
 345 00b2 0123     		movs	r3, #1
 346 00b4 24E0     		b	.L19
 347              	.L26:
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 348              		.loc 1 474 16
 349 00b6 144B     		ldr	r3, .L30
 350 00b8 5B68     		ldr	r3, [r3, #4]
 351 00ba 03F40053 		and	r3, r3, #8192
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 352              		.loc 1 474 15
 353 00be B3F5005F 		cmp	r3, #8192
 354 00c2 EED1     		bne	.L27
 355              	.L25:
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set the voltage range */
 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 356              		.loc 1 485 5
 357 00c4 104B     		ldr	r3, .L30
 358 00c6 9B69     		ldr	r3, [r3, #24]
 359 00c8 23F44042 		bic	r2, r3, #49152
 360 00cc 0E49     		ldr	r1, .L30
 361 00ce 7B68     		ldr	r3, [r7, #4]
 362 00d0 1343     		orrs	r3, r3, r2
 363 00d2 8B61     		str	r3, [r1, #24]
 364              	.L24:
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else  /* STM32H72xxx and STM32H73xxx lines */
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
ARM GAS  /tmp/cc0yi91q.s 			page 16


 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SYSCFG_PWRCR_ODEN) */
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_SRDCR_VOS) */
 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 365              		.loc 1 494 15
 366 00d4 FFF7FEFF 		bl	HAL_GetTick
 367 00d8 F860     		str	r0, [r7, #12]
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 368              		.loc 1 497 9
 369 00da 09E0     		b	.L28
 370              	.L29:
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 371              		.loc 1 499 10
 372 00dc FFF7FEFF 		bl	HAL_GetTick
 373 00e0 0246     		mov	r2, r0
 374              		.loc 1 499 24
 375 00e2 FB68     		ldr	r3, [r7, #12]
 376 00e4 D31A     		subs	r3, r2, r3
 377              		.loc 1 499 8
 378 00e6 B3F57A7F 		cmp	r3, #1000
 379 00ea 01D9     		bls	.L28
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 380              		.loc 1 501 14
 381 00ec 0123     		movs	r3, #1
 382 00ee 07E0     		b	.L19
 383              	.L28:
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 384              		.loc 1 497 10
 385 00f0 054B     		ldr	r3, .L30
 386 00f2 5B68     		ldr	r3, [r3, #4]
 387 00f4 03F40053 		and	r3, r3, #8192
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 388              		.loc 1 497 9
 389 00f8 B3F5005F 		cmp	r3, #8192
 390 00fc EED1     		bne	.L29
 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 391              		.loc 1 505 10
 392 00fe 0023     		movs	r3, #0
 393              	.L19:
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 394              		.loc 1 506 1
 395 0100 1846     		mov	r0, r3
 396 0102 1037     		adds	r7, r7, #16
 397              	.LCFI12:
 398              		.cfi_def_cfa_offset 8
 399 0104 BD46     		mov	sp, r7
 400              	.LCFI13:
 401              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc0yi91q.s 			page 17


 402              		@ sp needed
 403 0106 80BD     		pop	{r7, pc}
 404              	.L31:
 405              		.align	2
 406              	.L30:
 407 0108 00480258 		.word	1476544512
 408 010c 00040058 		.word	1476396032
 409              		.cfi_endproc
 410              	.LFE333:
 412              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 413              		.align	1
 414              		.global	HAL_PWREx_GetVoltageRange
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv5-d16
 420              	HAL_PWREx_GetVoltageRange:
 421              	.LFB334:
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange (void)
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 422              		.loc 1 514 1
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 427 0000 80B4     		push	{r7}
 428              	.LCFI14:
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 7, -4
 431 0002 00AF     		add	r7, sp, #0
 432              	.LCFI15:
 433              		.cfi_def_cfa_register 7
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 434              		.loc 1 516 14
 435 0004 044B     		ldr	r3, .L34
 436 0006 5B68     		ldr	r3, [r3, #4]
 437              		.loc 1 516 21
 438 0008 03F44043 		and	r3, r3, #49152
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 439              		.loc 1 517 1
 440 000c 1846     		mov	r0, r3
 441 000e BD46     		mov	sp, r7
 442              	.LCFI16:
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 0010 5DF8047B 		ldr	r7, [sp], #4
 446              	.LCFI17:
 447              		.cfi_restore 7
 448              		.cfi_def_cfa_offset 0
 449 0014 7047     		bx	lr
ARM GAS  /tmp/cc0yi91q.s 			page 18


 450              	.L35:
 451 0016 00BF     		.align	2
 452              	.L34:
 453 0018 00480258 		.word	1476544512
 454              		.cfi_endproc
 455              	.LFE334:
 457              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 458              		.align	1
 459              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 460              		.syntax unified
 461              		.thumb
 462              		.thumb_func
 463              		.fpu fpv5-d16
 465              	HAL_PWREx_ControlStopModeVoltageScaling:
 466              	.LFB335:
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and power consumption.
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3 : Regulator voltage output range
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             3 mode.
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4 : Regulator voltage output range
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             4 mode.
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5 : Regulator voltage output range
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             5 mode.
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator in Low-power (LP) mode to further reduce power consumption.
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode (LP) can be selected by LPDS register bit.
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         when exiting from system Stop mode.
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status.
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 467              		.loc 1 540 1
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 8
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              	.LCFI18:
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 7, -4
 476 0002 83B0     		sub	sp, sp, #12
 477              	.LCFI19:
 478              		.cfi_def_cfa_offset 16
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI20:
 481              		.cfi_def_cfa_register 7
 482 0006 7860     		str	r0, [r7, #4]
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cc0yi91q.s 			page 19


 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 483              		.loc 1 545 3
 484 0008 074B     		ldr	r3, .L38
 485 000a 1B68     		ldr	r3, [r3]
 486 000c 23F44042 		bic	r2, r3, #49152
 487 0010 0549     		ldr	r1, .L38
 488 0012 7B68     		ldr	r3, [r7, #4]
 489 0014 1343     		orrs	r3, r3, r2
 490 0016 0B60     		str	r3, [r1]
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 491              		.loc 1 547 10
 492 0018 0023     		movs	r3, #0
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 493              		.loc 1 548 1
 494 001a 1846     		mov	r0, r3
 495 001c 0C37     		adds	r7, r7, #12
 496              	.LCFI21:
 497              		.cfi_def_cfa_offset 4
 498 001e BD46     		mov	sp, r7
 499              	.LCFI22:
 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 0020 5DF8047B 		ldr	r7, [sp], #4
 503              	.LCFI23:
 504              		.cfi_restore 7
 505              		.cfi_def_cfa_offset 0
 506 0024 7047     		bx	lr
 507              	.L39:
 508 0026 00BF     		.align	2
 509              	.L38:
 510 0028 00480258 		.word	1476544512
 511              		.cfi_endproc
 512              	.LFE335:
 514              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 515              		.align	1
 516              		.global	HAL_PWREx_GetStopModeVoltageRange
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 520              		.fpu fpv5-d16
 522              	HAL_PWREx_GetStopModeVoltageRange:
 523              	.LFB336:
 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS selection.
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 524              		.loc 1 555 1
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc0yi91q.s 			page 20


 530              	.LCFI24:
 531              		.cfi_def_cfa_offset 4
 532              		.cfi_offset 7, -4
 533 0002 00AF     		add	r7, sp, #0
 534              	.LCFI25:
 535              		.cfi_def_cfa_register 7
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 536              		.loc 1 557 14
 537 0004 044B     		ldr	r3, .L42
 538 0006 1B68     		ldr	r3, [r3]
 539              		.loc 1 557 20
 540 0008 03F44043 		and	r3, r3, #49152
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 541              		.loc 1 558 1
 542 000c 1846     		mov	r0, r3
 543 000e BD46     		mov	sp, r7
 544              	.LCFI26:
 545              		.cfi_def_cfa_register 13
 546              		@ sp needed
 547 0010 5DF8047B 		ldr	r7, [sp], #4
 548              	.LCFI27:
 549              		.cfi_restore 7
 550              		.cfi_def_cfa_offset 0
 551 0014 7047     		bx	lr
 552              	.L43:
 553 0016 00BF     		.align	2
 554              	.L42:
 555 0018 00480258 		.word	1476544512
 556              		.cfi_endproc
 557              	.LFE336:
 559              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
 560              		.align	1
 561              		.global	HAL_PWREx_EnterSTOPMode
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu fpv5-d16
 567              	HAL_PWREx_EnterSTOPMode:
 568              	.LFB337:
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low Power Control Functions
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                      ##### Low power control functions #####
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       This section provides the extended low power mode control APIs.
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system presents 3 principles domains (D1, D2 and D3) that can be
ARM GAS  /tmp/cc0yi91q.s 			page 21


 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       operated in low-power modes (DSTOP or DSTANDBY mode):
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             domain.
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             regulator is running in main or low power mode.
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             enter STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             register (PWR_CPUCR) for the Dn domain selects Standby mode.
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             DSTANDBY mode. Consequently the VCORE supply regulator is powered
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             off.
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       FLPS in PWR_CR1 register. This allows a trade-off between domain DStop
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       restart time and low power consumption.
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       peripherals having a kernel clock request are still able to operate.
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator,
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          STOPEntry, Domain) function with:
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON     : Main regulator ON.
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON : Low Power regulator ON.
 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI : enter STOP mode with WFI instruction
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE : enter STOP mode with WFE instruction
ARM GAS  /tmp/cc0yi91q.s 			page 22


 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTOP mode.
 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTOP mode.
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTOP mode.
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    =====================
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             are lost.
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (Domain) function with:
 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTANDBY mode.
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTANDBY mode.
 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTANDBY mode.
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin,
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         IWDG reset.
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3/SRD in RUN mode ***
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===============================
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3/SRD domain can be kept in Run mode regardless of the CPU status when
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       entering STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       with :
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP : D3/SDR domain follows the CPU sub-system
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                   mode.
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN : D3/SRD domain remains in Run mode regardless
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                  of CPU subsystem mode.
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the
 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       power down mode when the device enters STOP mode. When the Flash memory is
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in power down mode, an additional startup delay is incurred when waking up
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       from STOP mode.
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
ARM GAS  /tmp/cc0yi91q.s 			page 23


 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function with:
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       generate an interrupt if enabled. The EXTI lines configuration is done by
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_EXTI_Dx_EventInputConfig() functions defined in the stm32h7xxhal.c
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       file.
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPFR register. Then in
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_PWREx_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_RETDS_CD)
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter the system to STOP mode with main domain in DSTOP2.
 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, the domain bus matrix clock is stalled.
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, memories and registers are maintained and peripherals
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in CPU domain are no longer operational.
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   All clocks in the VCORE domain are stopped, the PLL, the HSI and the
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HSE oscillators are disabled. Only Peripherals that have wakeup
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         capability can switch on the HSI to receive a frame, and switch off
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI after receiving the frame if it is not a wakeup frame. In
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         this case the HSI clock is propagated only to the peripheral
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         requesting it.
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When exiting STOP mode by issuing an interrupt or a wakeup event,
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         RCC_CFGR register is set.
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode (uint32_t Regulator, uint8_t STOPEntry)
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
ARM GAS  /tmp/cc0yi91q.s 			page 24


 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Go to DStop2 mode (deep retention) when CPU domain enters Deepsleep */
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CPUCR, PWR_CPUCR_RETDS_CD);
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep DSTOP mode when SmartRun domain enters Deepsleep */
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_SRD);
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Ensure that all instructions are done before entering STOP mode */
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __ISB ();
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __DSB ();
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select Stop mode entry */
 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_RETDS_CD) */
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTOP mode.
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain STOP
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode. For dual core lines, this API should be executed with the
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         corresponding Cortex-Mx to enter domain to DSTOP mode. When it is
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         executed by all available Cortex-Mx, the system enter to STOP mode.
 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with domain parameter set to
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_D1_DOMAIN (D1/CD), the whole system will enter in STOP mode
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         independently of PWR_CPUCR_PDDS_Dx bits values if RUN_D3 bit in the
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         CPUCR_RUN_D3 is cleared.
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enter Stop mode only when the CPU subsystem
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is in CStop mode, the EXTI wakeup sources are inactive and at least
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         one PDDS_Dn bit in PWR CPU control register (PWR_CPUCR) for
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         any domain request Stop.
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         function in order to clean the D-Cache and guarantee the data
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         integrity for the SRAM memories.
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         clock, and the peripherals that have a kernel clock request to
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select HSI or CSI as source, are still able to operate.
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
ARM GAS  /tmp/cc0yi91q.s 			page 25


 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter in DSTOP mode.
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN : Enter D1/CD Domain to DSTOP mode.
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 569              		.loc 1 818 1
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 16
 572              		@ frame_needed = 1, uses_anonymous_args = 0
 573 0000 80B5     		push	{r7, lr}
 574              	.LCFI28:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 84B0     		sub	sp, sp, #16
 579              	.LCFI29:
 580              		.cfi_def_cfa_offset 24
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI30:
 583              		.cfi_def_cfa_register 7
 584 0006 F860     		str	r0, [r7, #12]
 585 0008 0B46     		mov	r3, r1
 586 000a 7A60     		str	r2, [r7, #4]
 587 000c FB72     		strb	r3, [r7, #11]
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 588              		.loc 1 825 3
 589 000e 374B     		ldr	r3, .L57
 590 0010 1B68     		ldr	r3, [r3]
 591 0012 23F00102 		bic	r2, r3, #1
 592 0016 3549     		ldr	r1, .L57
 593 0018 FB68     		ldr	r3, [r7, #12]
 594 001a 1343     		orrs	r3, r3, r2
 595 001c 0B60     		str	r3, [r1]
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 596              		.loc 1 828 6
 597 001e 7B68     		ldr	r3, [r7, #4]
 598 0020 002B     		cmp	r3, #0
 599 0022 23D1     		bne	.L45
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/cc0yi91q.s 			page 26


 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 600              		.loc 1 832 9
 601 0024 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 602 0028 0346     		mov	r3, r0
 603              		.loc 1 832 8
 604 002a 032B     		cmp	r3, #3
 605 002c 58D1     		bne	.L55
 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 606              		.loc 1 843 5
 607 002e 2F4B     		ldr	r3, .L57
 608 0030 1B69     		ldr	r3, [r3, #16]
 609 0032 2E4A     		ldr	r2, .L57
 610 0034 23F00103 		bic	r3, r3, #1
 611 0038 1361     		str	r3, [r2, #16]
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 612              		.loc 1 846 5
 613 003a 2D4B     		ldr	r3, .L57+4
 614 003c 1B69     		ldr	r3, [r3, #16]
 615 003e 2C4A     		ldr	r2, .L57+4
 616 0040 43F00403 		orr	r3, r3, #4
 617 0044 1361     		str	r3, [r2, #16]
 618              	.LBB26:
 619              	.LBB27:
 620              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/cc0yi91q.s 			page 27


  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/cc0yi91q.s 			page 28


  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/cc0yi91q.s 			page 29


 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0yi91q.s 			page 30


 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0yi91q.s 			page 31


 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  /tmp/cc0yi91q.s 			page 32


 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0yi91q.s 			page 33


 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc0yi91q.s 			page 34


 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  /tmp/cc0yi91q.s 			page 35


 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  /tmp/cc0yi91q.s 			page 36


 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc0yi91q.s 			page 37


 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc0yi91q.s 			page 38


 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0yi91q.s 			page 39


 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/cc0yi91q.s 			page 40


 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  /tmp/cc0yi91q.s 			page 41


 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc0yi91q.s 			page 42


 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/cc0yi91q.s 			page 43


 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 621              		.loc 2 946 3
 622              		.syntax unified
 623              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 624 0046 BFF34F8F 		dsb 0xF
 625              	@ 0 "" 2
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 626              		.loc 2 947 1
 627              		.thumb
 628              		.syntax unified
 629 004a 00BF     		nop
 630              	.LBE27:
 631              	.LBE26:
 632              	.LBB28:
 633              	.LBB29:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 634              		.loc 2 935 3
 635              		.syntax unified
 636              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 637 004c BFF36F8F 		isb 0xF
 638              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 639              		.loc 2 936 1
 640              		.thumb
 641              		.syntax unified
 642 0050 00BF     		nop
 643              	.LBE29:
 644              	.LBE28:
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 645              		.loc 1 853 8
 646 0052 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 647 0054 012B     		cmp	r3, #1
 648 0056 01D1     		bne	.L48
 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 649              		.loc 1 856 7
ARM GAS  /tmp/cc0yi91q.s 			page 44


 650              		.syntax unified
 651              	@ 856 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 652 0058 30BF     		wfi
 653              	@ 0 "" 2
 654              		.thumb
 655              		.syntax unified
 656 005a 00E0     		b	.L49
 657              	.L48:
 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 658              		.loc 1 861 7
 659              		.syntax unified
 660              	@ 861 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 661 005c 20BF     		wfe
 662              	@ 0 "" 2
 663              		.thumb
 664              		.syntax unified
 665              	.L49:
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 666              		.loc 1 865 5
 667 005e 244B     		ldr	r3, .L57+4
 668 0060 1B69     		ldr	r3, [r3, #16]
 669 0062 234A     		ldr	r2, .L57+4
 670 0064 23F00403 		bic	r3, r3, #4
 671 0068 1361     		str	r3, [r2, #16]
 672 006a 3CE0     		b	.L44
 673              	.L45:
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 674              		.loc 1 868 11
 675 006c 7B68     		ldr	r3, [r7, #4]
 676 006e 012B     		cmp	r3, #1
 677 0070 23D1     		bne	.L50
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 678              		.loc 1 872 9
 679 0072 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 680 0076 0346     		mov	r3, r0
 681              		.loc 1 872 8
 682 0078 012B     		cmp	r3, #1
 683 007a 33D1     		bne	.L56
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
ARM GAS  /tmp/cc0yi91q.s 			page 45


 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 684              		.loc 1 882 5
 685 007c 1B4B     		ldr	r3, .L57
 686 007e 5B69     		ldr	r3, [r3, #20]
 687 0080 1A4A     		ldr	r2, .L57
 688 0082 23F00203 		bic	r3, r3, #2
 689 0086 5361     		str	r3, [r2, #20]
 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 690              		.loc 1 885 5
 691 0088 194B     		ldr	r3, .L57+4
 692 008a 1B69     		ldr	r3, [r3, #16]
 693 008c 184A     		ldr	r2, .L57+4
 694 008e 43F00403 		orr	r3, r3, #4
 695 0092 1361     		str	r3, [r2, #16]
 696              	.LBB30:
 697              	.LBB31:
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 698              		.loc 2 946 3
 699              		.syntax unified
 700              	@ 946 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 701 0094 BFF34F8F 		dsb 0xF
 702              	@ 0 "" 2
 703              		.loc 2 947 1
 704              		.thumb
 705              		.syntax unified
 706 0098 00BF     		nop
 707              	.LBE31:
 708              	.LBE30:
 709              	.LBB32:
 710              	.LBB33:
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 711              		.loc 2 935 3
 712              		.syntax unified
 713              	@ 935 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 714 009a BFF36F8F 		isb 0xF
 715              	@ 0 "" 2
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716              		.loc 2 936 1
 717              		.thumb
 718              		.syntax unified
 719 009e 00BF     		nop
 720              	.LBE33:
 721              	.LBE32:
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
 722              		.loc 1 892 8
 723 00a0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 724 00a2 012B     		cmp	r3, #1
ARM GAS  /tmp/cc0yi91q.s 			page 46


 725 00a4 01D1     		bne	.L52
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 726              		.loc 1 895 7
 727              		.syntax unified
 728              	@ 895 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 729 00a6 30BF     		wfi
 730              	@ 0 "" 2
 731              		.thumb
 732              		.syntax unified
 733 00a8 00E0     		b	.L53
 734              	.L52:
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 735              		.loc 1 900 7
 736              		.syntax unified
 737              	@ 900 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 738 00aa 20BF     		wfe
 739              	@ 0 "" 2
 740              		.thumb
 741              		.syntax unified
 742              	.L53:
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 743              		.loc 1 904 5
 744 00ac 104B     		ldr	r3, .L57+4
 745 00ae 1B69     		ldr	r3, [r3, #16]
 746 00b0 0F4A     		ldr	r2, .L57+4
 747 00b2 23F00403 		bic	r3, r3, #4
 748 00b6 1361     		str	r3, [r2, #16]
 749 00b8 15E0     		b	.L44
 750              	.L50:
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 751              		.loc 1 915 9
 752 00ba FFF7FEFF 		bl	HAL_GetCurrentCPUID
 753 00be 0346     		mov	r3, r0
 754              		.loc 1 915 8
 755 00c0 032B     		cmp	r3, #3
 756 00c2 06D1     		bne	.L54
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
ARM GAS  /tmp/cc0yi91q.s 			page 47


 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 757              		.loc 1 918 7
 758 00c4 094B     		ldr	r3, .L57
 759 00c6 1B69     		ldr	r3, [r3, #16]
 760 00c8 084A     		ldr	r2, .L57
 761 00ca 23F00403 		bic	r3, r3, #4
 762 00ce 1361     		str	r3, [r2, #16]
 763 00d0 09E0     		b	.L44
 764              	.L54:
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 765              		.loc 1 923 7
 766 00d2 064B     		ldr	r3, .L57
 767 00d4 5B69     		ldr	r3, [r3, #20]
 768 00d6 054A     		ldr	r2, .L57
 769 00d8 23F00403 		bic	r3, r3, #4
 770 00dc 5361     		str	r3, [r2, #20]
 771 00de 02E0     		b	.L44
 772              	.L55:
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 773              		.loc 1 838 7
 774 00e0 00BF     		nop
 775 00e2 00E0     		b	.L44
 776              	.L56:
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 777              		.loc 1 878 7
 778 00e4 00BF     		nop
 779              	.L44:
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 780              		.loc 1 930 1
 781 00e6 1037     		adds	r7, r7, #16
 782              	.LCFI31:
 783              		.cfi_def_cfa_offset 8
 784 00e8 BD46     		mov	sp, r7
 785              	.LCFI32:
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 00ea 80BD     		pop	{r7, pc}
 789              	.L58:
 790              		.align	2
 791              	.L57:
 792 00ec 00480258 		.word	1476544512
 793 00f0 00ED00E0 		.word	-536810240
 794              		.cfi_endproc
 795              	.LFE337:
 797              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 798              		.align	1
 799              		.global	HAL_PWREx_ClearPendingEvent
ARM GAS  /tmp/cc0yi91q.s 			page 48


 800              		.syntax unified
 801              		.thumb
 802              		.thumb_func
 803              		.fpu fpv5-d16
 805              	HAL_PWREx_ClearPendingEvent:
 806              	.LFB338:
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear pending event.
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clears the pending event in order to enter a given CPU
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to CSLEEP or CSTOP. It should be called just before APIs performing
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         enter low power mode using Wait For Event request.
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent (void)
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 807              		.loc 1 941 1
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0000 80B5     		push	{r7, lr}
 812              	.LCFI33:
 813              		.cfi_def_cfa_offset 8
 814              		.cfi_offset 7, -8
 815              		.cfi_offset 14, -4
 816 0002 00AF     		add	r7, sp, #0
 817              	.LCFI34:
 818              		.cfi_def_cfa_register 7
 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the current Core */
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (HAL_GetCurrentCPUID () == CM7_CPUID)
 819              		.loc 1 944 7
 820 0004 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 821 0008 0346     		mov	r3, r0
 822              		.loc 1 944 6
 823 000a 032B     		cmp	r3, #3
 824 000c 01D1     		bne	.L60
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 825              		.loc 1 946 5
 826              		.syntax unified
 827              	@ 946 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 828 000e 20BF     		wfe
 829              	@ 0 "" 2
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV ();
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE ();
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 830              		.loc 1 956 1
 831              		.thumb
ARM GAS  /tmp/cc0yi91q.s 			page 49


 832              		.syntax unified
 833 0010 01E0     		b	.L62
 834              	.L60:
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 835              		.loc 1 950 5
 836              		.syntax unified
 837              	@ 950 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 838 0012 40BF     		sev
 839              	@ 0 "" 2
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 840              		.loc 1 951 5
 841              	@ 951 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 842 0014 20BF     		wfe
 843              	@ 0 "" 2
 844              		.thumb
 845              		.syntax unified
 846              	.L62:
 847              		.loc 1 956 1
 848 0016 00BF     		nop
 849 0018 80BD     		pop	{r7, pc}
 850              		.cfi_endproc
 851              	.LFE338:
 853              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 854              		.align	1
 855              		.global	HAL_PWREx_EnterSTANDBYMode
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu fpv5-d16
 861              	HAL_PWREx_EnterSTANDBYMode:
 862              	.LFB339:
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTANDBY mode.
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         STANDBY mode. For dual core lines, this API should be executed with
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the corresponding Cortex-Mx to enter domain to DSTANDBY mode. When
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         it is executed by all available Cortex-Mx, the system enter STANDBY
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode.
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with D1/SRD the selected
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain will enter the whole system in STOP if PWR_CPUCR_PDDS_D3 = 0
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and enter the whole system in STANDBY if PWR_CPUCR_PDDS_D3 = 1.
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the Dn domain select Standby mode. When the system enters Standby
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode, the voltage regulator is disabled.
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain PDDS_Dn bit to select Stop mode, the domain remains in
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode. The domain will only exit DStandby when the CPU
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         allocates a peripheral in the domain.
 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enters Standby mode only when the D1 and D2
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain are in DStandby.
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SCB_CleanDCache function in order to clean the D-Cache and guarantee
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the data integrity for the SRAM memories.
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter to STANDBY mode.
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1/CD Domain to DSTANDBY mode.
ARM GAS  /tmp/cc0yi91q.s 			page 50


 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 863              		.loc 1 988 1
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 8
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              	.LCFI35:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872 0002 82B0     		sub	sp, sp, #8
 873              	.LCFI36:
 874              		.cfi_def_cfa_offset 16
 875 0004 00AF     		add	r7, sp, #0
 876              	.LCFI37:
 877              		.cfi_def_cfa_register 7
 878 0006 7860     		str	r0, [r7, #4]
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 879              		.loc 1 993 6
 880 0008 7B68     		ldr	r3, [r7, #4]
 881 000a 002B     		cmp	r3, #0
 882 000c 18D1     		bne	.L64
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 883              		.loc 1 997 9
 884 000e FFF7FEFF 		bl	HAL_GetCurrentCPUID
 885 0012 0346     		mov	r3, r0
 886              		.loc 1 997 8
 887 0014 032B     		cmp	r3, #3
 888 0016 3CD1     		bne	.L69
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 889              		.loc 1 1008 5
 890 0018 214B     		ldr	r3, .L71
 891 001a 1B69     		ldr	r3, [r3, #16]
 892 001c 204A     		ldr	r2, .L71
 893 001e 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/cc0yi91q.s 			page 51


 894 0022 1361     		str	r3, [r2, #16]
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
 895              		.loc 1 1012 5
 896 0024 1E4B     		ldr	r3, .L71
 897 0026 5B69     		ldr	r3, [r3, #20]
 898 0028 1D4A     		ldr	r2, .L71
 899 002a 43F00103 		orr	r3, r3, #1
 900 002e 5361     		str	r3, [r2, #20]
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 901              		.loc 1 1016 5
 902 0030 1C4B     		ldr	r3, .L71+4
 903 0032 1B69     		ldr	r3, [r3, #16]
 904 0034 1B4A     		ldr	r2, .L71+4
 905 0036 43F00403 		orr	r3, r3, #4
 906 003a 1361     		str	r3, [r2, #16]
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 907              		.loc 1 1024 5
 908              		.syntax unified
 909              	@ 1024 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 910 003c 30BF     		wfi
 911              	@ 0 "" 2
 912              		.thumb
 913              		.syntax unified
 914 003e 2BE0     		b	.L63
 915              	.L64:
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 916              		.loc 1 1027 11
 917 0040 7B68     		ldr	r3, [r7, #4]
 918 0042 012B     		cmp	r3, #1
 919 0044 18D1     		bne	.L67
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
 920              		.loc 1 1030 5
 921 0046 164B     		ldr	r3, .L71
 922 0048 1B69     		ldr	r3, [r3, #16]
 923 004a 154A     		ldr	r2, .L71
 924 004c 43F00203 		orr	r3, r3, #2
 925 0050 1361     		str	r3, [r2, #16]
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
ARM GAS  /tmp/cc0yi91q.s 			page 52


1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 926              		.loc 1 1034 9
 927 0052 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 928 0056 0346     		mov	r3, r0
 929              		.loc 1 1034 8
 930 0058 012B     		cmp	r3, #1
 931 005a 1CD1     		bne	.L70
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
 932              		.loc 1 1044 5
 933 005c 104B     		ldr	r3, .L71
 934 005e 5B69     		ldr	r3, [r3, #20]
 935 0060 0F4A     		ldr	r2, .L71
 936 0062 43F00203 		orr	r3, r3, #2
 937 0066 5361     		str	r3, [r2, #20]
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 938              		.loc 1 1047 5
 939 0068 0E4B     		ldr	r3, .L71+4
 940 006a 1B69     		ldr	r3, [r3, #16]
 941 006c 0D4A     		ldr	r2, .L71+4
 942 006e 43F00403 		orr	r3, r3, #4
 943 0072 1361     		str	r3, [r2, #16]
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 944              		.loc 1 1055 5
 945              		.syntax unified
 946              	@ 1055 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 947 0074 30BF     		wfi
 948              	@ 0 "" 2
 949              		.thumb
 950              		.syntax unified
 951 0076 0FE0     		b	.L63
 952              	.L67:
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 953              		.loc 1 1062 5
ARM GAS  /tmp/cc0yi91q.s 			page 53


 954 0078 094B     		ldr	r3, .L71
 955 007a 1B69     		ldr	r3, [r3, #16]
 956 007c 084A     		ldr	r2, .L71
 957 007e 43F00403 		orr	r3, r3, #4
 958 0082 1361     		str	r3, [r2, #16]
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 959              		.loc 1 1066 5
 960 0084 064B     		ldr	r3, .L71
 961 0086 5B69     		ldr	r3, [r3, #20]
 962 0088 054A     		ldr	r2, .L71
 963 008a 43F00403 		orr	r3, r3, #4
 964 008e 5361     		str	r3, [r2, #20]
 965 0090 02E0     		b	.L63
 966              	.L69:
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 967              		.loc 1 1003 7
 968 0092 00BF     		nop
 969 0094 00E0     		b	.L63
 970              	.L70:
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 971              		.loc 1 1040 7
 972 0096 00BF     		nop
 973              	.L63:
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 974              		.loc 1 1069 1
 975 0098 0837     		adds	r7, r7, #8
 976              	.LCFI38:
 977              		.cfi_def_cfa_offset 8
 978 009a BD46     		mov	sp, r7
 979              	.LCFI39:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 009c 80BD     		pop	{r7, pc}
 983              	.L72:
 984 009e 00BF     		.align	2
 985              	.L71:
 986 00a0 00480258 		.word	1476544512
 987 00a4 00ED00E0 		.word	-536810240
 988              		.cfi_endproc
 989              	.LFE339:
 991              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 992              		.align	1
 993              		.global	HAL_PWREx_ConfigD3Domain
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu fpv5-d16
 999              	HAL_PWREx_ConfigD3Domain:
 1000              	.LFB340:
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the D3/SRD Domain state when the System in low power mode.
ARM GAS  /tmp/cc0yi91q.s 			page 54


1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State : Specifies the D3/SRD state.
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP : D3/SRD domain will follow the most deep
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      CPU sub-system low power mode.
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3/SRD domain will stay in RUN mode
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     regardless of the CPU sub-system low
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     power mode.
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1001              		.loc 1 1083 1
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 8
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005              		@ link register save eliminated.
 1006 0000 80B4     		push	{r7}
 1007              	.LCFI40:
 1008              		.cfi_def_cfa_offset 4
 1009              		.cfi_offset 7, -4
 1010 0002 83B0     		sub	sp, sp, #12
 1011              	.LCFI41:
 1012              		.cfi_def_cfa_offset 16
 1013 0004 00AF     		add	r7, sp, #0
 1014              	.LCFI42:
 1015              		.cfi_def_cfa_register 7
 1016 0006 7860     		str	r0, [r7, #4]
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_D3_STATE (D3State));
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3/SRD in run mode */
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 1017              		.loc 1 1088 3
 1018 0008 064B     		ldr	r3, .L74
 1019 000a 1B69     		ldr	r3, [r3, #16]
 1020 000c 23F40062 		bic	r2, r3, #2048
 1021 0010 0449     		ldr	r1, .L74
 1022 0012 7B68     		ldr	r3, [r7, #4]
 1023 0014 1343     		orrs	r3, r3, r2
 1024 0016 0B61     		str	r3, [r1, #16]
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1025              		.loc 1 1089 1
 1026 0018 00BF     		nop
 1027 001a 0C37     		adds	r7, r7, #12
 1028              	.LCFI43:
 1029              		.cfi_def_cfa_offset 4
 1030 001c BD46     		mov	sp, r7
 1031              	.LCFI44:
 1032              		.cfi_def_cfa_register 13
 1033              		@ sp needed
 1034 001e 5DF8047B 		ldr	r7, [sp], #4
 1035              	.LCFI45:
 1036              		.cfi_restore 7
 1037              		.cfi_def_cfa_offset 0
 1038 0022 7047     		bx	lr
 1039              	.L75:
 1040              		.align	2
ARM GAS  /tmp/cc0yi91q.s 			page 55


 1041              	.L74:
 1042 0024 00480258 		.word	1476544512
 1043              		.cfi_endproc
 1044              	.LFE340:
 1046              		.section	.text.HAL_PWREx_ClearDomainFlags,"ax",%progbits
 1047              		.align	1
 1048              		.global	HAL_PWREx_ClearDomainFlags
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu fpv5-d16
 1054              	HAL_PWREx_ClearDomainFlags:
 1055              	.LFB341:
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear HOLD2F, HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        given domain.
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags : Specifies the Domain flags to be cleared.
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS : Clear D1 Domain flags.
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS : Clear D2 Domain flags.
1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_ALL_DOMAIN_FLAGS : Clear D1 and D2 Domain flags.
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags (uint32_t DomainFlags)
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1056              		.loc 1 1103 1
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061 0000 80B4     		push	{r7}
 1062              	.LCFI46:
 1063              		.cfi_def_cfa_offset 4
 1064              		.cfi_offset 7, -4
 1065 0002 83B0     		sub	sp, sp, #12
 1066              	.LCFI47:
 1067              		.cfi_def_cfa_offset 16
 1068 0004 00AF     		add	r7, sp, #0
 1069              	.LCFI48:
 1070              		.cfi_def_cfa_register 7
 1071 0006 7860     		str	r0, [r7, #4]
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D1 CPU flags */
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
 1072              		.loc 1 1108 6
 1073 0008 7B68     		ldr	r3, [r7, #4]
 1074 000a 002B     		cmp	r3, #0
 1075 000c 06D1     		bne	.L77
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
 1076              		.loc 1 1111 5
 1077 000e 114B     		ldr	r3, .L81
ARM GAS  /tmp/cc0yi91q.s 			page 56


 1078 0010 1B69     		ldr	r3, [r3, #16]
 1079 0012 104A     		ldr	r2, .L81
 1080 0014 43F40073 		orr	r3, r3, #512
 1081 0018 1361     		str	r3, [r2, #16]
1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D2 CPU flags */
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1082              		.loc 1 1126 1
 1083 001a 15E0     		b	.L80
 1084              	.L77:
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1085              		.loc 1 1114 11
 1086 001c 7B68     		ldr	r3, [r7, #4]
 1087 001e 012B     		cmp	r3, #1
 1088 0020 06D1     		bne	.L79
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1089              		.loc 1 1117 5
 1090 0022 0C4B     		ldr	r3, .L81
 1091 0024 5B69     		ldr	r3, [r3, #20]
 1092 0026 0B4A     		ldr	r2, .L81
 1093 0028 43F40073 		orr	r3, r3, #512
 1094 002c 5361     		str	r3, [r2, #20]
 1095              		.loc 1 1126 1
 1096 002e 0BE0     		b	.L80
 1097              	.L79:
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
 1098              		.loc 1 1122 5
 1099 0030 084B     		ldr	r3, .L81
 1100 0032 1B69     		ldr	r3, [r3, #16]
 1101 0034 074A     		ldr	r2, .L81
 1102 0036 43F40073 		orr	r3, r3, #512
 1103 003a 1361     		str	r3, [r2, #16]
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1104              		.loc 1 1124 5
 1105 003c 054B     		ldr	r3, .L81
 1106 003e 5B69     		ldr	r3, [r3, #20]
 1107 0040 044A     		ldr	r2, .L81
 1108 0042 43F40073 		orr	r3, r3, #512
 1109 0046 5361     		str	r3, [r2, #20]
 1110              	.L80:
 1111              		.loc 1 1126 1
 1112 0048 00BF     		nop
 1113 004a 0C37     		adds	r7, r7, #12
 1114              	.LCFI49:
 1115              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc0yi91q.s 			page 57


 1116 004c BD46     		mov	sp, r7
 1117              	.LCFI50:
 1118              		.cfi_def_cfa_register 13
 1119              		@ sp needed
 1120 004e 5DF8047B 		ldr	r7, [sp], #4
 1121              	.LCFI51:
 1122              		.cfi_restore 7
 1123              		.cfi_def_cfa_offset 0
 1124 0052 7047     		bx	lr
 1125              	.L82:
 1126              		.align	2
 1127              	.L81:
 1128 0054 00480258 		.word	1476544512
 1129              		.cfi_endproc
 1130              	.LFE341:
 1132              		.section	.text.HAL_PWREx_HoldCore,"ax",%progbits
 1133              		.align	1
 1134              		.global	HAL_PWREx_HoldCore
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu fpv5-d16
 1140              	HAL_PWREx_HoldCore:
 1141              	.LFB342:
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Hold the CPU and their domain peripherals when exiting STOP mode.
1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU : Specifies the core to be held.
1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore (uint32_t CPU)
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1142              		.loc 1 1137 1
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 16
 1145              		@ frame_needed = 1, uses_anonymous_args = 0
 1146              		@ link register save eliminated.
 1147 0000 80B4     		push	{r7}
 1148              	.LCFI52:
 1149              		.cfi_def_cfa_offset 4
 1150              		.cfi_offset 7, -4
 1151 0002 85B0     		sub	sp, sp, #20
 1152              	.LCFI53:
 1153              		.cfi_def_cfa_offset 24
 1154 0004 00AF     		add	r7, sp, #0
 1155              	.LCFI54:
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1158              		.loc 1 1138 21
 1159 0008 0023     		movs	r3, #0
 1160 000a FB73     		strb	r3, [r7, #15]
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
ARM GAS  /tmp/cc0yi91q.s 			page 58


1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
 1161              		.loc 1 1144 6
 1162 000c 7B68     		ldr	r3, [r7, #4]
 1163 000e 012B     		cmp	r3, #1
 1164 0010 10D1     		bne	.L84
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
 1165              		.loc 1 1147 13
 1166 0012 144B     		ldr	r3, .L89
 1167 0014 5B69     		ldr	r3, [r3, #20]
 1168              		.loc 1 1147 22
 1169 0016 03F48063 		and	r3, r3, #1024
 1170              		.loc 1 1147 8
 1171 001a B3F5806F 		cmp	r3, #1024
 1172 001e 06D0     		beq	.L85
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
 1173              		.loc 1 1150 7
 1174 0020 104B     		ldr	r3, .L89
 1175 0022 1B69     		ldr	r3, [r3, #16]
 1176 0024 0F4A     		ldr	r2, .L89
 1177 0026 43F48063 		orr	r3, r3, #1024
 1178 002a 1361     		str	r3, [r2, #16]
 1179 002c 12E0     		b	.L86
 1180              	.L85:
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 1181              		.loc 1 1154 14
 1182 002e 0123     		movs	r3, #1
 1183 0030 FB73     		strb	r3, [r7, #15]
 1184 0032 0FE0     		b	.L86
 1185              	.L84:
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
 1186              		.loc 1 1160 13
 1187 0034 0B4B     		ldr	r3, .L89
 1188 0036 1B69     		ldr	r3, [r3, #16]
 1189              		.loc 1 1160 21
 1190 0038 03F48063 		and	r3, r3, #1024
 1191              		.loc 1 1160 8
 1192 003c B3F5806F 		cmp	r3, #1024
 1193 0040 06D0     		beq	.L87
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
 1194              		.loc 1 1163 7
ARM GAS  /tmp/cc0yi91q.s 			page 59


 1195 0042 084B     		ldr	r3, .L89
 1196 0044 5B69     		ldr	r3, [r3, #20]
 1197 0046 074A     		ldr	r2, .L89
 1198 0048 43F48063 		orr	r3, r3, #1024
 1199 004c 5361     		str	r3, [r2, #20]
 1200 004e 01E0     		b	.L86
 1201              	.L87:
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 1202              		.loc 1 1167 14
 1203 0050 0123     		movs	r3, #1
 1204 0052 FB73     		strb	r3, [r7, #15]
 1205              	.L86:
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
 1206              		.loc 1 1171 10
 1207 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1208              		.loc 1 1172 1
 1209 0056 1846     		mov	r0, r3
 1210 0058 1437     		adds	r7, r7, #20
 1211              	.LCFI55:
 1212              		.cfi_def_cfa_offset 4
 1213 005a BD46     		mov	sp, r7
 1214              	.LCFI56:
 1215              		.cfi_def_cfa_register 13
 1216              		@ sp needed
 1217 005c 5DF8047B 		ldr	r7, [sp], #4
 1218              	.LCFI57:
 1219              		.cfi_restore 7
 1220              		.cfi_def_cfa_offset 0
 1221 0060 7047     		bx	lr
 1222              	.L90:
 1223 0062 00BF     		.align	2
 1224              	.L89:
 1225 0064 00480258 		.word	1476544512
 1226              		.cfi_endproc
 1227              	.LFE342:
 1229              		.section	.text.HAL_PWREx_ReleaseCore,"ax",%progbits
 1230              		.align	1
 1231              		.global	HAL_PWREx_ReleaseCore
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1235              		.fpu fpv5-d16
 1237              	HAL_PWREx_ReleaseCore:
 1238              	.LFB343:
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Release the CPU and their domain peripherals after a wake-up from
1176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        STOP mode.
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
ARM GAS  /tmp/cc0yi91q.s 			page 60


1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their domain
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their domain
1182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore (uint32_t CPU)
1186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1239              		.loc 1 1186 1
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 8
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 80B4     		push	{r7}
 1245              	.LCFI58:
 1246              		.cfi_def_cfa_offset 4
 1247              		.cfi_offset 7, -4
 1248 0002 83B0     		sub	sp, sp, #12
 1249              	.LCFI59:
 1250              		.cfi_def_cfa_offset 16
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI60:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
1187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
 1255              		.loc 1 1191 6
 1256 0008 7B68     		ldr	r3, [r7, #4]
 1257 000a 012B     		cmp	r3, #1
 1258 000c 06D1     		bne	.L92
1192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
 1259              		.loc 1 1194 5
 1260 000e 094B     		ldr	r3, .L95
 1261 0010 1B69     		ldr	r3, [r3, #16]
 1262 0012 084A     		ldr	r2, .L95
 1263 0014 23F48063 		bic	r3, r3, #1024
 1264 0018 1361     		str	r3, [r2, #16]
1195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1265              		.loc 1 1201 1
 1266 001a 05E0     		b	.L94
 1267              	.L92:
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1268              		.loc 1 1199 5
 1269 001c 054B     		ldr	r3, .L95
 1270 001e 5B69     		ldr	r3, [r3, #20]
 1271 0020 044A     		ldr	r2, .L95
ARM GAS  /tmp/cc0yi91q.s 			page 61


 1272 0022 23F48063 		bic	r3, r3, #1024
 1273 0026 5361     		str	r3, [r2, #20]
 1274              	.L94:
 1275              		.loc 1 1201 1
 1276 0028 00BF     		nop
 1277 002a 0C37     		adds	r7, r7, #12
 1278              	.LCFI61:
 1279              		.cfi_def_cfa_offset 4
 1280 002c BD46     		mov	sp, r7
 1281              	.LCFI62:
 1282              		.cfi_def_cfa_register 13
 1283              		@ sp needed
 1284 002e 5DF8047B 		ldr	r7, [sp], #4
 1285              	.LCFI63:
 1286              		.cfi_restore 7
 1287              		.cfi_def_cfa_offset 0
 1288 0032 7047     		bx	lr
 1289              	.L96:
 1290              		.align	2
 1291              	.L95:
 1292 0034 00480258 		.word	1476544512
 1293              		.cfi_endproc
 1294              	.LFE343:
 1296              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 1297              		.align	1
 1298              		.global	HAL_PWREx_EnableFlashPowerDown
 1299              		.syntax unified
 1300              		.thumb
 1301              		.thumb_func
 1302              		.fpu fpv5-d16
 1304              	HAL_PWREx_EnableFlashPowerDown:
 1305              	.LFB344:
1202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Flash Power Down in Stop mode.
1207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is enabled  the Flash memory enters low-power
1208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode when D1/SRD domain is in DStop mode. This feature allows to
1209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         obtain the best trade-off between low-power consumption and restart
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         time when exiting from DStop mode.
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown (void)
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1306              		.loc 1 1214 1
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310              		@ link register save eliminated.
 1311 0000 80B4     		push	{r7}
 1312              	.LCFI64:
 1313              		.cfi_def_cfa_offset 4
 1314              		.cfi_offset 7, -4
 1315 0002 00AF     		add	r7, sp, #0
 1316              	.LCFI65:
 1317              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc0yi91q.s 			page 62


1215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
1216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 1318              		.loc 1 1216 3
 1319 0004 054B     		ldr	r3, .L98
 1320 0006 1B68     		ldr	r3, [r3]
 1321 0008 044A     		ldr	r2, .L98
 1322 000a 43F40073 		orr	r3, r3, #512
 1323 000e 1360     		str	r3, [r2]
1217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1324              		.loc 1 1217 1
 1325 0010 00BF     		nop
 1326 0012 BD46     		mov	sp, r7
 1327              	.LCFI66:
 1328              		.cfi_def_cfa_register 13
 1329              		@ sp needed
 1330 0014 5DF8047B 		ldr	r7, [sp], #4
 1331              	.LCFI67:
 1332              		.cfi_restore 7
 1333              		.cfi_def_cfa_offset 0
 1334 0018 7047     		bx	lr
 1335              	.L99:
 1336 001a 00BF     		.align	2
 1337              	.L98:
 1338 001c 00480258 		.word	1476544512
 1339              		.cfi_endproc
 1340              	.LFE344:
 1342              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 1343              		.align	1
 1344              		.global	HAL_PWREx_DisableFlashPowerDown
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1348              		.fpu fpv5-d16
 1350              	HAL_PWREx_DisableFlashPowerDown:
 1351              	.LFB345:
1218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Flash Power Down in Stop mode.
1221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is disabled  the Flash memory is kept on
1222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         normal mode when D1/SRD domain is in DStop mode. This feature allows
1223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to obtain the best trade-off between low-power consumption and
1224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         restart time when exiting from DStop mode.
1225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown (void)
1228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1352              		.loc 1 1228 1
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 1, uses_anonymous_args = 0
 1356              		@ link register save eliminated.
 1357 0000 80B4     		push	{r7}
 1358              	.LCFI68:
 1359              		.cfi_def_cfa_offset 4
 1360              		.cfi_offset 7, -4
 1361 0002 00AF     		add	r7, sp, #0
 1362              	.LCFI69:
ARM GAS  /tmp/cc0yi91q.s 			page 63


 1363              		.cfi_def_cfa_register 7
1229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
1230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 1364              		.loc 1 1230 3
 1365 0004 054B     		ldr	r3, .L101
 1366 0006 1B68     		ldr	r3, [r3]
 1367 0008 044A     		ldr	r2, .L101
 1368 000a 23F40073 		bic	r3, r3, #512
 1369 000e 1360     		str	r3, [r2]
1231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1370              		.loc 1 1231 1
 1371 0010 00BF     		nop
 1372 0012 BD46     		mov	sp, r7
 1373              	.LCFI70:
 1374              		.cfi_def_cfa_register 13
 1375              		@ sp needed
 1376 0014 5DF8047B 		ldr	r7, [sp], #4
 1377              	.LCFI71:
 1378              		.cfi_restore 7
 1379              		.cfi_def_cfa_offset 0
 1380 0018 7047     		bx	lr
 1381              	.L102:
 1382 001a 00BF     		.align	2
 1383              	.L101:
 1384 001c 00480258 		.word	1476544512
 1385              		.cfi_endproc
 1386              	.LFE345:
 1388              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 1389              		.align	1
 1390              		.global	HAL_PWREx_EnableWakeUpPin
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv5-d16
 1396              	HAL_PWREx_EnableWakeUpPin:
 1397              	.LFB346:
1232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_SRDRAMSO)
1234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable memory block shut-off in DStop or DStop2 modes
1236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop or DStop2 mode, the content of the memory blocks is
1237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         maintained. Further power optimization can be obtained by switching
1238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         off some memory blocks. This optimization implies loss of the memory
1239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         content. The user can select which memory is discarded during STOP
1240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode by means of xxSO bits.
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to shut-off during DStop or
1242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop2 mode.
1243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
ARM GAS  /tmp/cc0yi91q.s 			page 64


1253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMemoryShutOff (uint32_t MemoryBlock)
1257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable memory block shut-off */
1262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, MemoryBlock);
1263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable memory block shut-off in DStop or DStop2 modes
1267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to keep content during
1268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop or DStop2 mode.
1269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMemoryShutOff (uint32_t MemoryBlock)
1283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable memory block shut-off */
1288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, MemoryBlock);
1289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_SRDRAMSO) */
1291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
1294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
1295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
1296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      Pin.
1297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx. All combination are allowed: wake up only
1299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
1300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M4.
1301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
1304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1398              		.loc 1 1304 1
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 72
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
ARM GAS  /tmp/cc0yi91q.s 			page 65


 1403 0000 80B4     		push	{r7}
 1404              	.LCFI72:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0002 93B0     		sub	sp, sp, #76
 1408              	.LCFI73:
 1409              		.cfi_def_cfa_offset 80
 1410 0004 00AF     		add	r7, sp, #0
 1411              	.LCFI74:
 1412              		.cfi_def_cfa_register 7
 1413 0006 7860     		str	r0, [r7, #4]
1305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
1306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
1307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 1414              		.loc 1 1307 18
 1415 0008 4FF44033 		mov	r3, #196608
 1416 000c 7B64     		str	r3, [r7, #68]
1308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
1311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
1312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));
1313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 1417              		.loc 1 1314 25
 1418 000e 7B68     		ldr	r3, [r7, #4]
 1419 0010 1A68     		ldr	r2, [r3]
1315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1420              		.loc 1 1315 26
 1421 0012 7B68     		ldr	r3, [r7, #4]
 1422 0014 5968     		ldr	r1, [r3, #4]
 1423              		.loc 1 1315 45
 1424 0016 7B68     		ldr	r3, [r7, #4]
 1425 0018 1B68     		ldr	r3, [r3]
 1426 001a 3B61     		str	r3, [r7, #16]
 1427              	.LBB34:
 1428              	.LBB35:
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
ARM GAS  /tmp/cc0yi91q.s 			page 66


 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
ARM GAS  /tmp/cc0yi91q.s 			page 67


1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1429              		.loc 2 1055 4
 1430 001c 3B69     		ldr	r3, [r7, #16]
 1431              		.syntax unified
 1432              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1433 001e 93FAA3F3 		rbit r3, r3
 1434              	@ 0 "" 2
 1435              		.thumb
 1436              		.syntax unified
 1437 0022 FB60     		str	r3, [r7, #12]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 1438              		.loc 2 1068 10
 1439 0024 FB68     		ldr	r3, [r7, #12]
 1440 0026 7B61     		str	r3, [r7, #20]
 1441              	.LBE35:
ARM GAS  /tmp/cc0yi91q.s 			page 68


 1442              	.LBE34:
 1443              	.LBB36:
 1444              	.LBB37:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 1445              		.loc 2 1089 6
 1446 0028 7B69     		ldr	r3, [r7, #20]
 1447 002a 002B     		cmp	r3, #0
 1448 002c 01D1     		bne	.L105
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
 1449              		.loc 2 1091 12
 1450 002e 2023     		movs	r3, #32
 1451 0030 03E0     		b	.L106
 1452              	.L105:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 1453              		.loc 2 1093 10
 1454 0032 7B69     		ldr	r3, [r7, #20]
 1455 0034 B3FA83F3 		clz	r3, r3
 1456 0038 DBB2     		uxtb	r3, r3
 1457              	.L106:
 1458              	.LBE37:
 1459              	.LBE36:
 1460              		.loc 1 1315 81
 1461 003a 0833     		adds	r3, r3, #8
 1462              		.loc 1 1315 107
 1463 003c 03F01F03 		and	r3, r3, #31
 1464              		.loc 1 1315 40
 1465 0040 01FA03F3 		lsl	r3, r1, r3
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1466              		.loc 1 1314 37
 1467 0044 1A43     		orrs	r2, r2, r3
1316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 1468              		.loc 1 1316 26
 1469 0046 7B68     		ldr	r3, [r7, #4]
 1470 0048 9968     		ldr	r1, [r3, #8]
 1471              		.loc 1 1316 42
ARM GAS  /tmp/cc0yi91q.s 			page 69


 1472 004a 7B68     		ldr	r3, [r7, #4]
 1473 004c 1B68     		ldr	r3, [r3]
 1474 004e FB61     		str	r3, [r7, #28]
 1475              	.LBB38:
 1476              	.LBB39:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1477              		.loc 2 1055 4
 1478 0050 FB69     		ldr	r3, [r7, #28]
 1479              		.syntax unified
 1480              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1481 0052 93FAA3F3 		rbit r3, r3
 1482              	@ 0 "" 2
 1483              		.thumb
 1484              		.syntax unified
 1485 0056 BB61     		str	r3, [r7, #24]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1486              		.loc 2 1068 10
 1487 0058 BB69     		ldr	r3, [r7, #24]
 1488 005a 3B62     		str	r3, [r7, #32]
 1489              	.LBE39:
 1490              	.LBE38:
 1491              	.LBB40:
 1492              	.LBB41:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1493              		.loc 2 1089 6
 1494 005c 3B6A     		ldr	r3, [r7, #32]
 1495 005e 002B     		cmp	r3, #0
 1496 0060 01D1     		bne	.L108
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1497              		.loc 2 1091 12
 1498 0062 2023     		movs	r3, #32
 1499 0064 03E0     		b	.L109
 1500              	.L108:
 1501              		.loc 2 1093 10
 1502 0066 3B6A     		ldr	r3, [r7, #32]
 1503 0068 B3FA83F3 		clz	r3, r3
 1504 006c DBB2     		uxtb	r3, r3
 1505              	.L109:
 1506              	.LBE41:
 1507              	.LBE40:
 1508              		.loc 1 1316 115
 1509 006e 0833     		adds	r3, r3, #8
 1510 0070 5B00     		lsls	r3, r3, #1
 1511              		.loc 1 1316 144
 1512 0072 03F01E03 		and	r3, r3, #30
 1513              		.loc 1 1316 36
 1514 0076 01FA03F3 		lsl	r3, r1, r3
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 1515              		.loc 1 1314 13
 1516 007a 1343     		orrs	r3, r3, r2
 1517 007c 3B64     		str	r3, [r7, #64]
1317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 1518              		.loc 1 1318 25
 1519 007e 7B68     		ldr	r3, [r7, #4]
 1520 0080 1A68     		ldr	r2, [r3]
1319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
ARM GAS  /tmp/cc0yi91q.s 			page 70


 1521              		.loc 1 1319 39
 1522 0082 7B68     		ldr	r3, [r7, #4]
 1523 0084 1B68     		ldr	r3, [r3]
 1524 0086 BB62     		str	r3, [r7, #40]
 1525              	.LBB42:
 1526              	.LBB43:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 1527              		.loc 2 1055 4
 1528 0088 BB6A     		ldr	r3, [r7, #40]
 1529              		.syntax unified
 1530              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1531 008a 93FAA3F3 		rbit r3, r3
 1532              	@ 0 "" 2
 1533              		.thumb
 1534              		.syntax unified
 1535 008e 7B62     		str	r3, [r7, #36]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1536              		.loc 2 1068 10
 1537 0090 7B6A     		ldr	r3, [r7, #36]
 1538 0092 FB62     		str	r3, [r7, #44]
 1539              	.LBE43:
 1540              	.LBE42:
 1541              	.LBB44:
 1542              	.LBB45:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1543              		.loc 2 1089 6
 1544 0094 FB6A     		ldr	r3, [r7, #44]
 1545 0096 002B     		cmp	r3, #0
 1546 0098 01D1     		bne	.L111
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1547              		.loc 2 1091 12
 1548 009a 2023     		movs	r3, #32
 1549 009c 03E0     		b	.L112
 1550              	.L111:
 1551              		.loc 2 1093 10
 1552 009e FB6A     		ldr	r3, [r7, #44]
 1553 00a0 B3FA83F3 		clz	r3, r3
 1554 00a4 DBB2     		uxtb	r3, r3
 1555              	.L112:
 1556              	.LBE45:
 1557              	.LBE44:
 1558              		.loc 1 1319 75
 1559 00a6 03F01F03 		and	r3, r3, #31
 1560              		.loc 1 1319 35
 1561 00aa 4FF48071 		mov	r1, #256
 1562 00ae 01FA03F3 		lsl	r3, r1, r3
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 1563              		.loc 1 1318 37
 1564 00b2 1A43     		orrs	r2, r2, r3
1320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 1565              		.loc 1 1320 30
 1566 00b4 7B68     		ldr	r3, [r7, #4]
 1567 00b6 1B68     		ldr	r3, [r3]
 1568 00b8 7B63     		str	r3, [r7, #52]
 1569              	.LBB46:
 1570              	.LBB47:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cc0yi91q.s 			page 71


 1571              		.loc 2 1055 4
 1572 00ba 7B6B     		ldr	r3, [r7, #52]
 1573              		.syntax unified
 1574              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1575 00bc 93FAA3F3 		rbit r3, r3
 1576              	@ 0 "" 2
 1577              		.thumb
 1578              		.syntax unified
 1579 00c0 3B63     		str	r3, [r7, #48]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 1580              		.loc 2 1068 10
 1581 00c2 3B6B     		ldr	r3, [r7, #48]
 1582 00c4 BB63     		str	r3, [r7, #56]
 1583              	.LBE47:
 1584              	.LBE46:
 1585              	.LBB48:
 1586              	.LBB49:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 1587              		.loc 2 1089 6
 1588 00c6 BB6B     		ldr	r3, [r7, #56]
 1589 00c8 002B     		cmp	r3, #0
 1590 00ca 01D1     		bne	.L114
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 1591              		.loc 2 1091 12
 1592 00cc 2023     		movs	r3, #32
 1593 00ce 03E0     		b	.L115
 1594              	.L114:
 1595              		.loc 2 1093 10
 1596 00d0 BB6B     		ldr	r3, [r7, #56]
 1597 00d2 B3FA83F3 		clz	r3, r3
 1598 00d6 DBB2     		uxtb	r3, r3
 1599              	.L115:
 1600              	.LBE49:
 1601              	.LBE48:
 1602              		.loc 1 1320 66
 1603 00d8 5B00     		lsls	r3, r3, #1
 1604              		.loc 1 1320 103
 1605 00da 03F01E03 		and	r3, r3, #30
 1606              		.loc 1 1320 25
 1607 00de 796C     		ldr	r1, [r7, #68]
 1608 00e0 01FA03F3 		lsl	r3, r1, r3
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 1609              		.loc 1 1318 13
 1610 00e4 1343     		orrs	r3, r3, r2
 1611 00e6 FB63     		str	r3, [r7, #60]
1321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
1323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
1324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 1612              		.loc 1 1324 3
 1613 00e8 074B     		ldr	r3, .L116
 1614 00ea 9A6A     		ldr	r2, [r3, #40]
 1615 00ec FB6B     		ldr	r3, [r7, #60]
 1616 00ee DB43     		mvns	r3, r3
 1617 00f0 1A40     		ands	r2, r2, r3
 1618 00f2 0549     		ldr	r1, .L116
 1619 00f4 3B6C     		ldr	r3, [r7, #64]
ARM GAS  /tmp/cc0yi91q.s 			page 72


 1620 00f6 1343     		orrs	r3, r3, r2
 1621 00f8 8B62     		str	r3, [r1, #40]
1325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
1326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
1327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos))
1328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !DUAL_CORE */
1329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1622              		.loc 1 1329 1
 1623 00fa 00BF     		nop
 1624 00fc 4C37     		adds	r7, r7, #76
 1625              	.LCFI75:
 1626              		.cfi_def_cfa_offset 4
 1627 00fe BD46     		mov	sp, r7
 1628              	.LCFI76:
 1629              		.cfi_def_cfa_register 13
 1630              		@ sp needed
 1631 0100 5DF8047B 		ldr	r7, [sp], #4
 1632              	.LCFI77:
 1633              		.cfi_restore 7
 1634              		.cfi_def_cfa_offset 0
 1635 0104 7047     		bx	lr
 1636              	.L117:
 1637 0106 00BF     		.align	2
 1638              	.L116:
 1639 0108 00480258 		.word	1476544512
 1640              		.cfi_endproc
 1641              	.LFE346:
 1643              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 1644              		.align	1
 1645              		.global	HAL_PWREx_DisableWakeUpPin
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv5-d16
 1651              	HAL_PWREx_DisableWakeUpPin:
 1652              	.LFB347:
1330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
1333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpPin : Specifies the Wake-Up pin to be disabled.
1334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1 : Disable PA0  wake-up PIN.
1336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2 : Disable PA2  wake-up PIN.
1337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3 : Disable PI8  wake-up PIN.
1338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4 : Disable PC13 wake-up PIN.
1339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5 : Disable PI11 wake-up PIN.
1340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6 : Disable PC1  wake-up PIN.
1341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
1342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
1346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1653              		.loc 1 1346 1
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 8
 1656              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc0yi91q.s 			page 73


 1657              		@ link register save eliminated.
 1658 0000 80B4     		push	{r7}
 1659              	.LCFI78:
 1660              		.cfi_def_cfa_offset 4
 1661              		.cfi_offset 7, -4
 1662 0002 83B0     		sub	sp, sp, #12
 1663              	.LCFI79:
 1664              		.cfi_def_cfa_offset 16
 1665 0004 00AF     		add	r7, sp, #0
 1666              	.LCFI80:
 1667              		.cfi_def_cfa_register 7
 1668 0006 7860     		str	r0, [r7, #4]
1347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));
1349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
1351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 1669              		.loc 1 1351 3
 1670 0008 064B     		ldr	r3, .L119
 1671 000a 9A6A     		ldr	r2, [r3, #40]
 1672 000c 7B68     		ldr	r3, [r7, #4]
 1673 000e DB43     		mvns	r3, r3
 1674 0010 0449     		ldr	r1, .L119
 1675 0012 1340     		ands	r3, r3, r2
 1676 0014 8B62     		str	r3, [r1, #40]
1352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1677              		.loc 1 1352 1
 1678 0016 00BF     		nop
 1679 0018 0C37     		adds	r7, r7, #12
 1680              	.LCFI81:
 1681              		.cfi_def_cfa_offset 4
 1682 001a BD46     		mov	sp, r7
 1683              	.LCFI82:
 1684              		.cfi_def_cfa_register 13
 1685              		@ sp needed
 1686 001c 5DF8047B 		ldr	r7, [sp], #4
 1687              	.LCFI83:
 1688              		.cfi_restore 7
 1689              		.cfi_def_cfa_offset 0
 1690 0020 7047     		bx	lr
 1691              	.L120:
 1692 0022 00BF     		.align	2
 1693              	.L119:
 1694 0024 00480258 		.word	1476544512
 1695              		.cfi_endproc
 1696              	.LFE347:
 1698              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
 1699              		.align	1
 1700              		.global	HAL_PWREx_GetWakeupFlag
 1701              		.syntax unified
 1702              		.thumb
 1703              		.thumb_func
 1704              		.fpu fpv5-d16
 1706              	HAL_PWREx_GetWakeupFlag:
 1707              	.LFB348:
1353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
ARM GAS  /tmp/cc0yi91q.s 			page 74


1355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the Wake-Up Pin pending flags.
1356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
1357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
1359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
1360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PI8.
1361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PC13.
1362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5    : Get wakeup event received from PI11.
1363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6    : Get wakeup event received from PC1.
1364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
1365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      wake up pins.
1366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
1369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1708              		.loc 1 1371 1
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 8
 1711              		@ frame_needed = 1, uses_anonymous_args = 0
 1712              		@ link register save eliminated.
 1713 0000 80B4     		push	{r7}
 1714              	.LCFI84:
 1715              		.cfi_def_cfa_offset 4
 1716              		.cfi_offset 7, -4
 1717 0002 83B0     		sub	sp, sp, #12
 1718              	.LCFI85:
 1719              		.cfi_def_cfa_offset 16
 1720 0004 00AF     		add	r7, sp, #0
 1721              	.LCFI86:
 1722              		.cfi_def_cfa_register 7
 1723 0006 7860     		str	r0, [r7, #4]
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the wake up pin flag */
1376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 1724              		.loc 1 1376 14
 1725 0008 044B     		ldr	r3, .L123
 1726 000a 5A6A     		ldr	r2, [r3, #36]
 1727              		.loc 1 1376 23
 1728 000c 7B68     		ldr	r3, [r7, #4]
 1729 000e 1340     		ands	r3, r3, r2
1377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1730              		.loc 1 1377 1
 1731 0010 1846     		mov	r0, r3
 1732 0012 0C37     		adds	r7, r7, #12
 1733              	.LCFI87:
 1734              		.cfi_def_cfa_offset 4
 1735 0014 BD46     		mov	sp, r7
 1736              	.LCFI88:
 1737              		.cfi_def_cfa_register 13
 1738              		@ sp needed
 1739 0016 5DF8047B 		ldr	r7, [sp], #4
 1740              	.LCFI89:
 1741              		.cfi_restore 7
ARM GAS  /tmp/cc0yi91q.s 			page 75


 1742              		.cfi_def_cfa_offset 0
 1743 001a 7047     		bx	lr
 1744              	.L124:
 1745              		.align	2
 1746              	.L123:
 1747 001c 00480258 		.word	1476544512
 1748              		.cfi_endproc
 1749              	.LFE348:
 1751              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1752              		.align	1
 1753              		.global	HAL_PWREx_ClearWakeupFlag
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu fpv5-d16
 1759              	HAL_PWREx_ClearWakeupFlag:
 1760              	.LFB349:
1378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear the Wake-Up pin pending flag.
1381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
1382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1 : Clear the wakeup event received from PA0.
1384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2 : Clear the wakeup event received from PA2.
1385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3 : Clear the wakeup event received from PI8.
1386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4 : Clear the wakeup event received from PC13.
1387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5 : Clear the wakeup event received from PI11.
1388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6 : Clear the wakeup event received from PC1.
1389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from
1390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      all wake up pins.
1391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
1396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1761              		.loc 1 1396 1
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 8
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766 0000 80B4     		push	{r7}
 1767              	.LCFI90:
 1768              		.cfi_def_cfa_offset 4
 1769              		.cfi_offset 7, -4
 1770 0002 83B0     		sub	sp, sp, #12
 1771              	.LCFI91:
 1772              		.cfi_def_cfa_offset 16
 1773 0004 00AF     		add	r7, sp, #0
 1774              	.LCFI92:
 1775              		.cfi_def_cfa_register 7
 1776 0006 7860     		str	r0, [r7, #4]
1397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
1399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear the wake up event received from wake up pin x */
1401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->WKUPCR, WakeUpFlag);
ARM GAS  /tmp/cc0yi91q.s 			page 76


 1777              		.loc 1 1401 3
 1778 0008 0A4B     		ldr	r3, .L128
 1779 000a 1A6A     		ldr	r2, [r3, #32]
 1780 000c 0949     		ldr	r1, .L128
 1781 000e 7B68     		ldr	r3, [r7, #4]
 1782 0010 1343     		orrs	r3, r3, r2
 1783 0012 0B62     		str	r3, [r1, #32]
1402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the wake up event is well cleared */
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 1784              		.loc 1 1404 11
 1785 0014 074B     		ldr	r3, .L128
 1786 0016 5A6A     		ldr	r2, [r3, #36]
 1787              		.loc 1 1404 20
 1788 0018 7B68     		ldr	r3, [r7, #4]
 1789 001a 1340     		ands	r3, r3, r2
 1790              		.loc 1 1404 6
 1791 001c 002B     		cmp	r3, #0
 1792 001e 01D0     		beq	.L126
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
 1793              		.loc 1 1406 12
 1794 0020 0123     		movs	r3, #1
 1795 0022 00E0     		b	.L127
 1796              	.L126:
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1797              		.loc 1 1409 10
 1798 0024 0023     		movs	r3, #0
 1799              	.L127:
1410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1800              		.loc 1 1410 1
 1801 0026 1846     		mov	r0, r3
 1802 0028 0C37     		adds	r7, r7, #12
 1803              	.LCFI93:
 1804              		.cfi_def_cfa_offset 4
 1805 002a BD46     		mov	sp, r7
 1806              	.LCFI94:
 1807              		.cfi_def_cfa_register 13
 1808              		@ sp needed
 1809 002c 5DF8047B 		ldr	r7, [sp], #4
 1810              	.LCFI95:
 1811              		.cfi_restore 7
 1812              		.cfi_def_cfa_offset 0
 1813 0030 7047     		bx	lr
 1814              	.L129:
 1815 0032 00BF     		.align	2
 1816              	.L128:
 1817 0034 00480258 		.word	1476544512
 1818              		.cfi_endproc
 1819              	.LFE349:
 1821              		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1822              		.align	1
 1823              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1824              		.syntax unified
 1825              		.thumb
ARM GAS  /tmp/cc0yi91q.s 			page 77


 1826              		.thumb_func
 1827              		.fpu fpv5-d16
 1829              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1830              	.LFB350:
1411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
1414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
1415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1831              		.loc 1 1418 1
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835 0000 80B5     		push	{r7, lr}
 1836              	.LCFI96:
 1837              		.cfi_def_cfa_offset 8
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840 0002 00AF     		add	r7, sp, #0
 1841              	.LCFI97:
 1842              		.cfi_def_cfa_register 7
1419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
 1843              		.loc 1 1420 7
 1844 0004 2A4B     		ldr	r3, .L138
 1845 0006 5B6A     		ldr	r3, [r3, #36]
 1846 0008 03F00103 		and	r3, r3, #1
 1847              		.loc 1 1420 6
 1848 000c 002B     		cmp	r3, #0
 1849 000e 08D0     		beq	.L131
1421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
 1850              		.loc 1 1423 5
 1851 0010 274B     		ldr	r3, .L138
 1852 0012 1B6A     		ldr	r3, [r3, #32]
 1853 0014 264A     		ldr	r2, .L138
 1854 0016 43F00103 		orr	r3, r3, #1
 1855 001a 1362     		str	r3, [r2, #32]
1424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback ();
 1856              		.loc 1 1426 5
 1857 001c FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
1427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
1429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
1432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback ();
1435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
ARM GAS  /tmp/cc0yi91q.s 			page 78


1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
1438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
1441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback ();
1444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
1450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback ();
1453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
1459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback ();
1462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
1468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback ();
1471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1858              		.loc 1 1472 1
 1859 0020 43E0     		b	.L137
 1860              	.L131:
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1861              		.loc 1 1428 12
 1862 0022 234B     		ldr	r3, .L138
 1863 0024 5B6A     		ldr	r3, [r3, #36]
 1864 0026 03F00203 		and	r3, r3, #2
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1865              		.loc 1 1428 11
 1866 002a 002B     		cmp	r3, #0
 1867 002c 08D0     		beq	.L133
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1868              		.loc 1 1431 5
 1869 002e 204B     		ldr	r3, .L138
 1870 0030 1B6A     		ldr	r3, [r3, #32]
 1871 0032 1F4A     		ldr	r2, .L138
 1872 0034 43F00203 		orr	r3, r3, #2
 1873 0038 1362     		str	r3, [r2, #32]
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1874              		.loc 1 1434 5
ARM GAS  /tmp/cc0yi91q.s 			page 79


 1875 003a FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1876              		.loc 1 1472 1
 1877 003e 34E0     		b	.L137
 1878              	.L133:
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1879              		.loc 1 1437 12
 1880 0040 1B4B     		ldr	r3, .L138
 1881 0042 5B6A     		ldr	r3, [r3, #36]
 1882 0044 03F00403 		and	r3, r3, #4
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1883              		.loc 1 1437 11
 1884 0048 002B     		cmp	r3, #0
 1885 004a 08D0     		beq	.L134
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1886              		.loc 1 1440 5
 1887 004c 184B     		ldr	r3, .L138
 1888 004e 1B6A     		ldr	r3, [r3, #32]
 1889 0050 174A     		ldr	r2, .L138
 1890 0052 43F00403 		orr	r3, r3, #4
 1891 0056 1362     		str	r3, [r2, #32]
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1892              		.loc 1 1443 5
 1893 0058 FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1894              		.loc 1 1472 1
 1895 005c 25E0     		b	.L137
 1896              	.L134:
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1897              		.loc 1 1446 12
 1898 005e 144B     		ldr	r3, .L138
 1899 0060 5B6A     		ldr	r3, [r3, #36]
 1900 0062 03F00803 		and	r3, r3, #8
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1901              		.loc 1 1446 11
 1902 0066 002B     		cmp	r3, #0
 1903 0068 08D0     		beq	.L135
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1904              		.loc 1 1449 5
 1905 006a 114B     		ldr	r3, .L138
 1906 006c 1B6A     		ldr	r3, [r3, #32]
 1907 006e 104A     		ldr	r2, .L138
 1908 0070 43F00803 		orr	r3, r3, #8
 1909 0074 1362     		str	r3, [r2, #32]
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1910              		.loc 1 1452 5
 1911 0076 FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1912              		.loc 1 1472 1
 1913 007a 16E0     		b	.L137
 1914              	.L135:
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1915              		.loc 1 1455 12
 1916 007c 0C4B     		ldr	r3, .L138
 1917 007e 5B6A     		ldr	r3, [r3, #36]
 1918 0080 03F01003 		and	r3, r3, #16
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1919              		.loc 1 1455 11
 1920 0084 002B     		cmp	r3, #0
 1921 0086 08D0     		beq	.L136
ARM GAS  /tmp/cc0yi91q.s 			page 80


1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1922              		.loc 1 1458 5
 1923 0088 094B     		ldr	r3, .L138
 1924 008a 1B6A     		ldr	r3, [r3, #32]
 1925 008c 084A     		ldr	r2, .L138
 1926 008e 43F01003 		orr	r3, r3, #16
 1927 0092 1362     		str	r3, [r2, #32]
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1928              		.loc 1 1461 5
 1929 0094 FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1930              		.loc 1 1472 1
 1931 0098 07E0     		b	.L137
 1932              	.L136:
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1933              		.loc 1 1467 5
 1934 009a 054B     		ldr	r3, .L138
 1935 009c 1B6A     		ldr	r3, [r3, #32]
 1936 009e 044A     		ldr	r2, .L138
 1937 00a0 43F02003 		orr	r3, r3, #32
 1938 00a4 1362     		str	r3, [r2, #32]
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1939              		.loc 1 1470 5
 1940 00a6 FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1941              	.L137:
 1942              		.loc 1 1472 1
 1943 00aa 00BF     		nop
 1944 00ac 80BD     		pop	{r7, pc}
 1945              	.L139:
 1946 00ae 00BF     		.align	2
 1947              	.L138:
 1948 00b0 00480258 		.word	1476544512
 1949              		.cfi_endproc
 1950              	.LFE350:
 1952              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1953              		.align	1
 1954              		.weak	HAL_PWREx_WKUP1_Callback
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1958              		.fpu fpv5-d16
 1960              	HAL_PWREx_WKUP1_Callback:
 1961              	.LFB351:
1473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP1 interrupt callback.
1476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback (void)
1479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1962              		.loc 1 1479 1
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967 0000 80B4     		push	{r7}
 1968              	.LCFI98:
 1969              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc0yi91q.s 			page 81


 1970              		.cfi_offset 7, -4
 1971 0002 00AF     		add	r7, sp, #0
 1972              	.LCFI99:
 1973              		.cfi_def_cfa_register 7
1480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback can be implemented in the user file
1482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1974              		.loc 1 1483 1
 1975 0004 00BF     		nop
 1976 0006 BD46     		mov	sp, r7
 1977              	.LCFI100:
 1978              		.cfi_def_cfa_register 13
 1979              		@ sp needed
 1980 0008 5DF8047B 		ldr	r7, [sp], #4
 1981              	.LCFI101:
 1982              		.cfi_restore 7
 1983              		.cfi_def_cfa_offset 0
 1984 000c 7047     		bx	lr
 1985              		.cfi_endproc
 1986              	.LFE351:
 1988              		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1989              		.align	1
 1990              		.weak	HAL_PWREx_WKUP2_Callback
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv5-d16
 1996              	HAL_PWREx_WKUP2_Callback:
 1997              	.LFB352:
1484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP2 interrupt callback.
1487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback (void)
1490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1998              		.loc 1 1490 1
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0000 80B4     		push	{r7}
 2004              	.LCFI102:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 0002 00AF     		add	r7, sp, #0
 2008              	.LCFI103:
 2009              		.cfi_def_cfa_register 7
1491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback can be implemented in the user file
1493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2010              		.loc 1 1494 1
 2011 0004 00BF     		nop
 2012 0006 BD46     		mov	sp, r7
 2013              	.LCFI104:
ARM GAS  /tmp/cc0yi91q.s 			page 82


 2014              		.cfi_def_cfa_register 13
 2015              		@ sp needed
 2016 0008 5DF8047B 		ldr	r7, [sp], #4
 2017              	.LCFI105:
 2018              		.cfi_restore 7
 2019              		.cfi_def_cfa_offset 0
 2020 000c 7047     		bx	lr
 2021              		.cfi_endproc
 2022              	.LFE352:
 2024              		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
 2025              		.align	1
 2026              		.weak	HAL_PWREx_WKUP3_Callback
 2027              		.syntax unified
 2028              		.thumb
 2029              		.thumb_func
 2030              		.fpu fpv5-d16
 2032              	HAL_PWREx_WKUP3_Callback:
 2033              	.LFB353:
1495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP3 interrupt callback.
1499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback (void)
1502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2034              		.loc 1 1502 1
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 1, uses_anonymous_args = 0
 2038              		@ link register save eliminated.
 2039 0000 80B4     		push	{r7}
 2040              	.LCFI106:
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 7, -4
 2043 0002 00AF     		add	r7, sp, #0
 2044              	.LCFI107:
 2045              		.cfi_def_cfa_register 7
1503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback can be implemented in the user file
1505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2046              		.loc 1 1506 1
 2047 0004 00BF     		nop
 2048 0006 BD46     		mov	sp, r7
 2049              	.LCFI108:
 2050              		.cfi_def_cfa_register 13
 2051              		@ sp needed
 2052 0008 5DF8047B 		ldr	r7, [sp], #4
 2053              	.LCFI109:
 2054              		.cfi_restore 7
 2055              		.cfi_def_cfa_offset 0
 2056 000c 7047     		bx	lr
 2057              		.cfi_endproc
 2058              	.LFE353:
 2060              		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 2061              		.align	1
ARM GAS  /tmp/cc0yi91q.s 			page 83


 2062              		.weak	HAL_PWREx_WKUP4_Callback
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2066              		.fpu fpv5-d16
 2068              	HAL_PWREx_WKUP4_Callback:
 2069              	.LFB354:
1507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP4 interrupt callback.
1511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback (void)
1514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2070              		.loc 1 1514 1
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 0
 2073              		@ frame_needed = 1, uses_anonymous_args = 0
 2074              		@ link register save eliminated.
 2075 0000 80B4     		push	{r7}
 2076              	.LCFI110:
 2077              		.cfi_def_cfa_offset 4
 2078              		.cfi_offset 7, -4
 2079 0002 00AF     		add	r7, sp, #0
 2080              	.LCFI111:
 2081              		.cfi_def_cfa_register 7
1515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback can be implemented in the user file
1517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2082              		.loc 1 1518 1
 2083 0004 00BF     		nop
 2084 0006 BD46     		mov	sp, r7
 2085              	.LCFI112:
 2086              		.cfi_def_cfa_register 13
 2087              		@ sp needed
 2088 0008 5DF8047B 		ldr	r7, [sp], #4
 2089              	.LCFI113:
 2090              		.cfi_restore 7
 2091              		.cfi_def_cfa_offset 0
 2092 000c 7047     		bx	lr
 2093              		.cfi_endproc
 2094              	.LFE354:
 2096              		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 2097              		.align	1
 2098              		.weak	HAL_PWREx_WKUP5_Callback
 2099              		.syntax unified
 2100              		.thumb
 2101              		.thumb_func
 2102              		.fpu fpv5-d16
 2104              	HAL_PWREx_WKUP5_Callback:
 2105              	.LFB355:
1519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP5 interrupt callback.
ARM GAS  /tmp/cc0yi91q.s 			page 84


1523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback (void)
1526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2106              		.loc 1 1526 1
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 1, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
 2111 0000 80B4     		push	{r7}
 2112              	.LCFI114:
 2113              		.cfi_def_cfa_offset 4
 2114              		.cfi_offset 7, -4
 2115 0002 00AF     		add	r7, sp, #0
 2116              	.LCFI115:
 2117              		.cfi_def_cfa_register 7
1527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback can be implemented in the user file
1529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2118              		.loc 1 1530 1
 2119 0004 00BF     		nop
 2120 0006 BD46     		mov	sp, r7
 2121              	.LCFI116:
 2122              		.cfi_def_cfa_register 13
 2123              		@ sp needed
 2124 0008 5DF8047B 		ldr	r7, [sp], #4
 2125              	.LCFI117:
 2126              		.cfi_restore 7
 2127              		.cfi_def_cfa_offset 0
 2128 000c 7047     		bx	lr
 2129              		.cfi_endproc
 2130              	.LFE355:
 2132              		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
 2133              		.align	1
 2134              		.weak	HAL_PWREx_WKUP6_Callback
 2135              		.syntax unified
 2136              		.thumb
 2137              		.thumb_func
 2138              		.fpu fpv5-d16
 2140              	HAL_PWREx_WKUP6_Callback:
 2141              	.LFB356:
1531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP6 interrupt callback.
1535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback (void)
1538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2142              		.loc 1 1538 1
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 0
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
 2146              		@ link register save eliminated.
 2147 0000 80B4     		push	{r7}
 2148              	.LCFI118:
ARM GAS  /tmp/cc0yi91q.s 			page 85


 2149              		.cfi_def_cfa_offset 4
 2150              		.cfi_offset 7, -4
 2151 0002 00AF     		add	r7, sp, #0
 2152              	.LCFI119:
 2153              		.cfi_def_cfa_register 7
1539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback can be implemented in the user file
1541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2154              		.loc 1 1542 1
 2155 0004 00BF     		nop
 2156 0006 BD46     		mov	sp, r7
 2157              	.LCFI120:
 2158              		.cfi_def_cfa_register 13
 2159              		@ sp needed
 2160 0008 5DF8047B 		ldr	r7, [sp], #4
 2161              	.LCFI121:
 2162              		.cfi_restore 7
 2163              		.cfi_def_cfa_offset 0
 2164 000c 7047     		bx	lr
 2165              		.cfi_endproc
 2166              	.LFE356:
 2168              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
 2169              		.align	1
 2170              		.global	HAL_PWREx_EnableBkUpReg
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2174              		.fpu fpv5-d16
 2176              	HAL_PWREx_EnableBkUpReg:
 2177              	.LFB357:
1543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
1553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
1557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only
1559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           from the CPU, and addressed in 32-bit, 16-bit or 8-bit mode. Its
1560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           content is retained even in Standby or VBAT mode when the low power
1561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           backup regulator is enabled. It can be considered as an internal
1562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           EEPROM when VBAT is always present. You can use the
1563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableBkUpReg() function to enable the low power backup
1564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           regulator.
1565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to
1566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD) the backup SRAM is powered from VDD which replaces the VBAT power
1567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           supply to save battery life.
1568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
ARM GAS  /tmp/cc0yi91q.s 			page 86


1569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff
1576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           between performance and power consumption when the device does not
1577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           operate at the maximum frequency. This is done through
1578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ControlVoltageScaling(VOS) function which configure the VOS
1579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           bit in PWR_D3CR register.
1580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power
1581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           mode when the system enters STOP mode to further reduce power
1582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           consumption.
1583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay
1586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           when exiting from system Stop mode.
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply
1593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           that can be provided either by the integrated USB regulator, or by an
1594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           external USB supply.
1595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the
1596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD33USB is then provided from the USB regulator.
1597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector
1598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           shall be enabled through  HAL_PWREx_EnableUSBVoltageDetector()
1599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg()
1601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and VDD33USB can be provided from an external supply. In this
1602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           case VDD33USB and VDD50USB shall be connected together.
1603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be
1608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           charged through an internal resistance. VBAT charging can be performed
1609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           either through a 5 KOhm resistor or through a 1.5 KOhm resistor.
1610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging
1611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (ResistorValue) function with:
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging()
1616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Backup Regulator.
1624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/cc0yi91q.s 			page 87


1626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2178              		.loc 1 1627 1
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 8
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182 0000 80B5     		push	{r7, lr}
 2183              	.LCFI122:
 2184              		.cfi_def_cfa_offset 8
 2185              		.cfi_offset 7, -8
 2186              		.cfi_offset 14, -4
 2187 0002 82B0     		sub	sp, sp, #8
 2188              	.LCFI123:
 2189              		.cfi_def_cfa_offset 16
 2190 0004 00AF     		add	r7, sp, #0
 2191              	.LCFI124:
 2192              		.cfi_def_cfa_register 7
1628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_BREN);
 2193              		.loc 1 1631 3
 2194 0006 104B     		ldr	r3, .L150
 2195 0008 9B68     		ldr	r3, [r3, #8]
 2196 000a 0F4A     		ldr	r2, .L150
 2197 000c 43F00103 		orr	r3, r3, #1
 2198 0010 9360     		str	r3, [r2, #8]
1632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 2199              		.loc 1 1634 15
 2200 0012 FFF7FEFF 		bl	HAL_GetTick
 2201 0016 7860     		str	r0, [r7, #4]
1635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 2202              		.loc 1 1637 9
 2203 0018 09E0     		b	.L147
 2204              	.L149:
1638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 2205              		.loc 1 1639 10
 2206 001a FFF7FEFF 		bl	HAL_GetTick
 2207 001e 0246     		mov	r2, r0
 2208              		.loc 1 1639 24
 2209 0020 7B68     		ldr	r3, [r7, #4]
 2210 0022 D31A     		subs	r3, r2, r3
 2211              		.loc 1 1639 8
 2212 0024 B3F57A7F 		cmp	r3, #1000
 2213 0028 01D9     		bls	.L147
1640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 2214              		.loc 1 1641 14
 2215 002a 0123     		movs	r3, #1
 2216 002c 07E0     		b	.L148
 2217              	.L147:
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/cc0yi91q.s 			page 88


 2218              		.loc 1 1637 10
 2219 002e 064B     		ldr	r3, .L150
 2220 0030 9B68     		ldr	r3, [r3, #8]
 2221 0032 03F48033 		and	r3, r3, #65536
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2222              		.loc 1 1637 9
 2223 0036 B3F5803F 		cmp	r3, #65536
 2224 003a EED1     		bne	.L149
1642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 2225              		.loc 1 1645 10
 2226 003c 0023     		movs	r3, #0
 2227              	.L148:
1646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2228              		.loc 1 1646 1
 2229 003e 1846     		mov	r0, r3
 2230 0040 0837     		adds	r7, r7, #8
 2231              	.LCFI125:
 2232              		.cfi_def_cfa_offset 8
 2233 0042 BD46     		mov	sp, r7
 2234              	.LCFI126:
 2235              		.cfi_def_cfa_register 13
 2236              		@ sp needed
 2237 0044 80BD     		pop	{r7, pc}
 2238              	.L151:
 2239 0046 00BF     		.align	2
 2240              	.L150:
 2241 0048 00480258 		.word	1476544512
 2242              		.cfi_endproc
 2243              	.LFE357:
 2245              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 2246              		.align	1
 2247              		.global	HAL_PWREx_DisableBkUpReg
 2248              		.syntax unified
 2249              		.thumb
 2250              		.thumb_func
 2251              		.fpu fpv5-d16
 2253              	HAL_PWREx_DisableBkUpReg:
 2254              	.LFB358:
1647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Backup Regulator.
1650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2255              		.loc 1 1653 1
 2256              		.cfi_startproc
 2257              		@ args = 0, pretend = 0, frame = 8
 2258              		@ frame_needed = 1, uses_anonymous_args = 0
 2259 0000 80B5     		push	{r7, lr}
 2260              	.LCFI127:
 2261              		.cfi_def_cfa_offset 8
 2262              		.cfi_offset 7, -8
 2263              		.cfi_offset 14, -4
ARM GAS  /tmp/cc0yi91q.s 			page 89


 2264 0002 82B0     		sub	sp, sp, #8
 2265              	.LCFI128:
 2266              		.cfi_def_cfa_offset 16
 2267 0004 00AF     		add	r7, sp, #0
 2268              	.LCFI129:
 2269              		.cfi_def_cfa_register 7
1654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 2270              		.loc 1 1657 3
 2271 0006 104B     		ldr	r3, .L156
 2272 0008 9B68     		ldr	r3, [r3, #8]
 2273 000a 0F4A     		ldr	r2, .L156
 2274 000c 23F00103 		bic	r3, r3, #1
 2275 0010 9360     		str	r3, [r2, #8]
1658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 2276              		.loc 1 1660 15
 2277 0012 FFF7FEFF 		bl	HAL_GetTick
 2278 0016 7860     		str	r0, [r7, #4]
1661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 2279              		.loc 1 1663 9
 2280 0018 09E0     		b	.L153
 2281              	.L155:
1664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 2282              		.loc 1 1665 10
 2283 001a FFF7FEFF 		bl	HAL_GetTick
 2284 001e 0246     		mov	r2, r0
 2285              		.loc 1 1665 24
 2286 0020 7B68     		ldr	r3, [r7, #4]
 2287 0022 D31A     		subs	r3, r2, r3
 2288              		.loc 1 1665 8
 2289 0024 B3F57A7F 		cmp	r3, #1000
 2290 0028 01D9     		bls	.L153
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 2291              		.loc 1 1667 14
 2292 002a 0123     		movs	r3, #1
 2293 002c 07E0     		b	.L154
 2294              	.L153:
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2295              		.loc 1 1663 10
 2296 002e 064B     		ldr	r3, .L156
 2297 0030 9B68     		ldr	r3, [r3, #8]
 2298 0032 03F48033 		and	r3, r3, #65536
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2299              		.loc 1 1663 9
 2300 0036 B3F5803F 		cmp	r3, #65536
 2301 003a EED0     		beq	.L155
1668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cc0yi91q.s 			page 90


1671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 2302              		.loc 1 1671 10
 2303 003c 0023     		movs	r3, #0
 2304              	.L154:
1672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2305              		.loc 1 1672 1
 2306 003e 1846     		mov	r0, r3
 2307 0040 0837     		adds	r7, r7, #8
 2308              	.LCFI130:
 2309              		.cfi_def_cfa_offset 8
 2310 0042 BD46     		mov	sp, r7
 2311              	.LCFI131:
 2312              		.cfi_def_cfa_register 13
 2313              		@ sp needed
 2314 0044 80BD     		pop	{r7, pc}
 2315              	.L157:
 2316 0046 00BF     		.align	2
 2317              	.L156:
 2318 0048 00480258 		.word	1476544512
 2319              		.cfi_endproc
 2320              	.LFE358:
 2322              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 2323              		.align	1
 2324              		.global	HAL_PWREx_EnableUSBReg
 2325              		.syntax unified
 2326              		.thumb
 2327              		.thumb_func
 2328              		.fpu fpv5-d16
 2330              	HAL_PWREx_EnableUSBReg:
 2331              	.LFB359:
1673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB Regulator.
1676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2332              		.loc 1 1679 1
 2333              		.cfi_startproc
 2334              		@ args = 0, pretend = 0, frame = 8
 2335              		@ frame_needed = 1, uses_anonymous_args = 0
 2336 0000 80B5     		push	{r7, lr}
 2337              	.LCFI132:
 2338              		.cfi_def_cfa_offset 8
 2339              		.cfi_offset 7, -8
 2340              		.cfi_offset 14, -4
 2341 0002 82B0     		sub	sp, sp, #8
 2342              	.LCFI133:
 2343              		.cfi_def_cfa_offset 16
 2344 0004 00AF     		add	r7, sp, #0
 2345              	.LCFI134:
 2346              		.cfi_def_cfa_register 7
1680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 2347              		.loc 1 1683 3
ARM GAS  /tmp/cc0yi91q.s 			page 91


 2348 0006 104B     		ldr	r3, .L162
 2349 0008 DB68     		ldr	r3, [r3, #12]
 2350 000a 0F4A     		ldr	r2, .L162
 2351 000c 43F00073 		orr	r3, r3, #33554432
 2352 0010 D360     		str	r3, [r2, #12]
1684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 2353              		.loc 1 1686 15
 2354 0012 FFF7FEFF 		bl	HAL_GetTick
 2355 0016 7860     		str	r0, [r7, #4]
1687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 2356              		.loc 1 1689 9
 2357 0018 09E0     		b	.L159
 2358              	.L161:
1690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 2359              		.loc 1 1691 10
 2360 001a FFF7FEFF 		bl	HAL_GetTick
 2361 001e 0246     		mov	r2, r0
 2362              		.loc 1 1691 24
 2363 0020 7B68     		ldr	r3, [r7, #4]
 2364 0022 D31A     		subs	r3, r2, r3
 2365              		.loc 1 1691 8
 2366 0024 B3F57A7F 		cmp	r3, #1000
 2367 0028 01D9     		bls	.L159
1692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 2368              		.loc 1 1693 14
 2369 002a 0123     		movs	r3, #1
 2370 002c 07E0     		b	.L160
 2371              	.L159:
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2372              		.loc 1 1689 10
 2373 002e 064B     		ldr	r3, .L162
 2374 0030 DB68     		ldr	r3, [r3, #12]
 2375 0032 03F08063 		and	r3, r3, #67108864
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2376              		.loc 1 1689 9
 2377 0036 B3F1806F 		cmp	r3, #67108864
 2378 003a EED1     		bne	.L161
1694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 2379              		.loc 1 1697 10
 2380 003c 0023     		movs	r3, #0
 2381              	.L160:
1698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2382              		.loc 1 1698 1
 2383 003e 1846     		mov	r0, r3
 2384 0040 0837     		adds	r7, r7, #8
 2385              	.LCFI135:
 2386              		.cfi_def_cfa_offset 8
 2387 0042 BD46     		mov	sp, r7
ARM GAS  /tmp/cc0yi91q.s 			page 92


 2388              	.LCFI136:
 2389              		.cfi_def_cfa_register 13
 2390              		@ sp needed
 2391 0044 80BD     		pop	{r7, pc}
 2392              	.L163:
 2393 0046 00BF     		.align	2
 2394              	.L162:
 2395 0048 00480258 		.word	1476544512
 2396              		.cfi_endproc
 2397              	.LFE359:
 2399              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
 2400              		.align	1
 2401              		.global	HAL_PWREx_DisableUSBReg
 2402              		.syntax unified
 2403              		.thumb
 2404              		.thumb_func
 2405              		.fpu fpv5-d16
 2407              	HAL_PWREx_DisableUSBReg:
 2408              	.LFB360:
1699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB Regulator.
1702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2409              		.loc 1 1705 1
 2410              		.cfi_startproc
 2411              		@ args = 0, pretend = 0, frame = 8
 2412              		@ frame_needed = 1, uses_anonymous_args = 0
 2413 0000 80B5     		push	{r7, lr}
 2414              	.LCFI137:
 2415              		.cfi_def_cfa_offset 8
 2416              		.cfi_offset 7, -8
 2417              		.cfi_offset 14, -4
 2418 0002 82B0     		sub	sp, sp, #8
 2419              	.LCFI138:
 2420              		.cfi_def_cfa_offset 16
 2421 0004 00AF     		add	r7, sp, #0
 2422              	.LCFI139:
 2423              		.cfi_def_cfa_register 7
1706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
1707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 2424              		.loc 1 1709 3
 2425 0006 104B     		ldr	r3, .L168
 2426 0008 DB68     		ldr	r3, [r3, #12]
 2427 000a 0F4A     		ldr	r2, .L168
 2428 000c 23F00073 		bic	r3, r3, #33554432
 2429 0010 D360     		str	r3, [r2, #12]
1710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 2430              		.loc 1 1712 15
 2431 0012 FFF7FEFF 		bl	HAL_GetTick
 2432 0016 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc0yi91q.s 			page 93


1713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 2433              		.loc 1 1715 8
 2434 0018 09E0     		b	.L165
 2435              	.L167:
1716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 2436              		.loc 1 1717 10
 2437 001a FFF7FEFF 		bl	HAL_GetTick
 2438 001e 0246     		mov	r2, r0
 2439              		.loc 1 1717 24
 2440 0020 7B68     		ldr	r3, [r7, #4]
 2441 0022 D31A     		subs	r3, r2, r3
 2442              		.loc 1 1717 8
 2443 0024 B3F57A7F 		cmp	r3, #1000
 2444 0028 01D9     		bls	.L165
1718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 2445              		.loc 1 1719 14
 2446 002a 0123     		movs	r3, #1
 2447 002c 07E0     		b	.L166
 2448              	.L165:
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2449              		.loc 1 1715 9
 2450 002e 064B     		ldr	r3, .L168
 2451 0030 DB68     		ldr	r3, [r3, #12]
 2452 0032 03F08063 		and	r3, r3, #67108864
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2453              		.loc 1 1715 8
 2454 0036 B3F1806F 		cmp	r3, #67108864
 2455 003a EED0     		beq	.L167
1720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 2456              		.loc 1 1723 10
 2457 003c 0023     		movs	r3, #0
 2458              	.L166:
1724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2459              		.loc 1 1724 1
 2460 003e 1846     		mov	r0, r3
 2461 0040 0837     		adds	r7, r7, #8
 2462              	.LCFI140:
 2463              		.cfi_def_cfa_offset 8
 2464 0042 BD46     		mov	sp, r7
 2465              	.LCFI141:
 2466              		.cfi_def_cfa_register 13
 2467              		@ sp needed
 2468 0044 80BD     		pop	{r7, pc}
 2469              	.L169:
 2470 0046 00BF     		.align	2
 2471              	.L168:
 2472 0048 00480258 		.word	1476544512
 2473              		.cfi_endproc
 2474              	.LFE360:
 2476              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
ARM GAS  /tmp/cc0yi91q.s 			page 94


 2477              		.align	1
 2478              		.global	HAL_PWREx_EnableUSBVoltageDetector
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv5-d16
 2484              	HAL_PWREx_EnableUSBVoltageDetector:
 2485              	.LFB361:
1725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB voltage level detector.
1728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector (void)
1731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2486              		.loc 1 1731 1
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 1, uses_anonymous_args = 0
 2490              		@ link register save eliminated.
 2491 0000 80B4     		push	{r7}
 2492              	.LCFI142:
 2493              		.cfi_def_cfa_offset 4
 2494              		.cfi_offset 7, -4
 2495 0002 00AF     		add	r7, sp, #0
 2496              	.LCFI143:
 2497              		.cfi_def_cfa_register 7
1732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 2498              		.loc 1 1733 3
 2499 0004 054B     		ldr	r3, .L171
 2500 0006 DB68     		ldr	r3, [r3, #12]
 2501 0008 044A     		ldr	r2, .L171
 2502 000a 43F08073 		orr	r3, r3, #16777216
 2503 000e D360     		str	r3, [r2, #12]
1734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2504              		.loc 1 1734 1
 2505 0010 00BF     		nop
 2506 0012 BD46     		mov	sp, r7
 2507              	.LCFI144:
 2508              		.cfi_def_cfa_register 13
 2509              		@ sp needed
 2510 0014 5DF8047B 		ldr	r7, [sp], #4
 2511              	.LCFI145:
 2512              		.cfi_restore 7
 2513              		.cfi_def_cfa_offset 0
 2514 0018 7047     		bx	lr
 2515              	.L172:
 2516 001a 00BF     		.align	2
 2517              	.L171:
 2518 001c 00480258 		.word	1476544512
 2519              		.cfi_endproc
 2520              	.LFE361:
 2522              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 2523              		.align	1
 2524              		.global	HAL_PWREx_DisableUSBVoltageDetector
 2525              		.syntax unified
ARM GAS  /tmp/cc0yi91q.s 			page 95


 2526              		.thumb
 2527              		.thumb_func
 2528              		.fpu fpv5-d16
 2530              	HAL_PWREx_DisableUSBVoltageDetector:
 2531              	.LFB362:
1735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB voltage level detector.
1738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector (void)
1741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2532              		.loc 1 1741 1
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 0
 2535              		@ frame_needed = 1, uses_anonymous_args = 0
 2536              		@ link register save eliminated.
 2537 0000 80B4     		push	{r7}
 2538              	.LCFI146:
 2539              		.cfi_def_cfa_offset 4
 2540              		.cfi_offset 7, -4
 2541 0002 00AF     		add	r7, sp, #0
 2542              	.LCFI147:
 2543              		.cfi_def_cfa_register 7
1742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 2544              		.loc 1 1743 3
 2545 0004 054B     		ldr	r3, .L174
 2546 0006 DB68     		ldr	r3, [r3, #12]
 2547 0008 044A     		ldr	r2, .L174
 2548 000a 23F08073 		bic	r3, r3, #16777216
 2549 000e D360     		str	r3, [r2, #12]
1744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2550              		.loc 1 1744 1
 2551 0010 00BF     		nop
 2552 0012 BD46     		mov	sp, r7
 2553              	.LCFI148:
 2554              		.cfi_def_cfa_register 13
 2555              		@ sp needed
 2556 0014 5DF8047B 		ldr	r7, [sp], #4
 2557              	.LCFI149:
 2558              		.cfi_restore 7
 2559              		.cfi_def_cfa_offset 0
 2560 0018 7047     		bx	lr
 2561              	.L175:
 2562 001a 00BF     		.align	2
 2563              	.L174:
 2564 001c 00480258 		.word	1476544512
 2565              		.cfi_endproc
 2566              	.LFE362:
 2568              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 2569              		.align	1
 2570              		.global	HAL_PWREx_EnableBatteryCharging
 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2574              		.fpu fpv5-d16
ARM GAS  /tmp/cc0yi91q.s 			page 96


 2576              	HAL_PWREx_EnableBatteryCharging:
 2577              	.LFB363:
1745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Battery charging.
1748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery through an internal
1749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         resistor.
1750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue : Specifies the charging resistor.
1751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
1753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
1754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
1757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2578              		.loc 1 1757 1
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 8
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583 0000 80B4     		push	{r7}
 2584              	.LCFI150:
 2585              		.cfi_def_cfa_offset 4
 2586              		.cfi_offset 7, -4
 2587 0002 83B0     		sub	sp, sp, #12
 2588              	.LCFI151:
 2589              		.cfi_def_cfa_offset 16
 2590 0004 00AF     		add	r7, sp, #0
 2591              	.LCFI152:
 2592              		.cfi_def_cfa_register 7
 2593 0006 7860     		str	r0, [r7, #4]
1758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));
1760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 2594              		.loc 1 1762 3
 2595 0008 094B     		ldr	r3, .L177
 2596 000a DB68     		ldr	r3, [r3, #12]
 2597 000c 23F40072 		bic	r2, r3, #512
 2598 0010 0749     		ldr	r1, .L177
 2599 0012 7B68     		ldr	r3, [r7, #4]
 2600 0014 1343     		orrs	r3, r3, r2
 2601 0016 CB60     		str	r3, [r1, #12]
1763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_VBE);
 2602              		.loc 1 1765 3
 2603 0018 054B     		ldr	r3, .L177
 2604 001a DB68     		ldr	r3, [r3, #12]
 2605 001c 044A     		ldr	r2, .L177
 2606 001e 43F48073 		orr	r3, r3, #256
 2607 0022 D360     		str	r3, [r2, #12]
1766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2608              		.loc 1 1766 1
 2609 0024 00BF     		nop
 2610 0026 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/cc0yi91q.s 			page 97


 2611              	.LCFI153:
 2612              		.cfi_def_cfa_offset 4
 2613 0028 BD46     		mov	sp, r7
 2614              	.LCFI154:
 2615              		.cfi_def_cfa_register 13
 2616              		@ sp needed
 2617 002a 5DF8047B 		ldr	r7, [sp], #4
 2618              	.LCFI155:
 2619              		.cfi_restore 7
 2620              		.cfi_def_cfa_offset 0
 2621 002e 7047     		bx	lr
 2622              	.L178:
 2623              		.align	2
 2624              	.L177:
 2625 0030 00480258 		.word	1476544512
 2626              		.cfi_endproc
 2627              	.LFE363:
 2629              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 2630              		.align	1
 2631              		.global	HAL_PWREx_DisableBatteryCharging
 2632              		.syntax unified
 2633              		.thumb
 2634              		.thumb_func
 2635              		.fpu fpv5-d16
 2637              	HAL_PWREx_DisableBatteryCharging:
 2638              	.LFB364:
1767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Battery charging.
1770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging (void)
1773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2639              		.loc 1 1773 1
 2640              		.cfi_startproc
 2641              		@ args = 0, pretend = 0, frame = 0
 2642              		@ frame_needed = 1, uses_anonymous_args = 0
 2643              		@ link register save eliminated.
 2644 0000 80B4     		push	{r7}
 2645              	.LCFI156:
 2646              		.cfi_def_cfa_offset 4
 2647              		.cfi_offset 7, -4
 2648 0002 00AF     		add	r7, sp, #0
 2649              	.LCFI157:
 2650              		.cfi_def_cfa_register 7
1774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 2651              		.loc 1 1775 3
 2652 0004 054B     		ldr	r3, .L180
 2653 0006 DB68     		ldr	r3, [r3, #12]
 2654 0008 044A     		ldr	r2, .L180
 2655 000a 23F48073 		bic	r3, r3, #256
 2656 000e D360     		str	r3, [r2, #12]
1776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2657              		.loc 1 1776 1
 2658 0010 00BF     		nop
 2659 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/cc0yi91q.s 			page 98


 2660              	.LCFI158:
 2661              		.cfi_def_cfa_register 13
 2662              		@ sp needed
 2663 0014 5DF8047B 		ldr	r7, [sp], #4
 2664              	.LCFI159:
 2665              		.cfi_restore 7
 2666              		.cfi_def_cfa_offset 0
 2667 0018 7047     		bx	lr
 2668              	.L181:
 2669 001a 00BF     		.align	2
 2670              	.L180:
 2671 001c 00480258 		.word	1476544512
 2672              		.cfi_endproc
 2673              	.LFE364:
 2675              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 2676              		.align	1
 2677              		.global	HAL_PWREx_EnableMonitoring
 2678              		.syntax unified
 2679              		.thumb
 2680              		.thumb_func
 2681              		.fpu fpv5-d16
 2683              	HAL_PWREx_EnableMonitoring:
 2684              	.LFB365:
1777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_BOOSTE)
1779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the booster to guarantee the analog switch AC performance when
1781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the VDD supply voltage is below 2V7.
1782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The VDD supply voltage can be monitored through the PVD and the PLS
1783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         field bits.
1784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAnalogBooster (void)
1787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog voltage */
1789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable VDDA booster */
1792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the analog booster.
1797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAnalogBooster (void)
1800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable VDDA booster */
1802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog voltage */
1805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_BOOSTE) */
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/cc0yi91q.s 			page 99


1811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
1813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
1818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
1824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
1825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_CR2), indicate if VBAT is higher or
1826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           lower than the threshold.
1827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
1828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
1829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control register 2 (PWR_CR2), indicate whether the device temperature
1830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
1831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
1832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
1833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
1834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
1835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
1838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level which can be :
1839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1
1847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           register).
1848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
1860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring (void)
1863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2685              		.loc 1 1863 1
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 0
 2688              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc0yi91q.s 			page 100


 2689              		@ link register save eliminated.
 2690 0000 80B4     		push	{r7}
 2691              	.LCFI160:
 2692              		.cfi_def_cfa_offset 4
 2693              		.cfi_offset 7, -4
 2694 0002 00AF     		add	r7, sp, #0
 2695              	.LCFI161:
 2696              		.cfi_def_cfa_register 7
1864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
1865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 2697              		.loc 1 1865 3
 2698 0004 054B     		ldr	r3, .L183
 2699 0006 9B68     		ldr	r3, [r3, #8]
 2700 0008 044A     		ldr	r2, .L183
 2701 000a 43F01003 		orr	r3, r3, #16
 2702 000e 9360     		str	r3, [r2, #8]
1866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2703              		.loc 1 1866 1
 2704 0010 00BF     		nop
 2705 0012 BD46     		mov	sp, r7
 2706              	.LCFI162:
 2707              		.cfi_def_cfa_register 13
 2708              		@ sp needed
 2709 0014 5DF8047B 		ldr	r7, [sp], #4
 2710              	.LCFI163:
 2711              		.cfi_restore 7
 2712              		.cfi_def_cfa_offset 0
 2713 0018 7047     		bx	lr
 2714              	.L184:
 2715 001a 00BF     		.align	2
 2716              	.L183:
 2717 001c 00480258 		.word	1476544512
 2718              		.cfi_endproc
 2719              	.LFE365:
 2721              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 2722              		.align	1
 2723              		.global	HAL_PWREx_DisableMonitoring
 2724              		.syntax unified
 2725              		.thumb
 2726              		.thumb_func
 2727              		.fpu fpv5-d16
 2729              	HAL_PWREx_DisableMonitoring:
 2730              	.LFB366:
1867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
1870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring (void)
1873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2731              		.loc 1 1873 1
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 0
 2734              		@ frame_needed = 1, uses_anonymous_args = 0
 2735              		@ link register save eliminated.
 2736 0000 80B4     		push	{r7}
 2737              	.LCFI164:
ARM GAS  /tmp/cc0yi91q.s 			page 101


 2738              		.cfi_def_cfa_offset 4
 2739              		.cfi_offset 7, -4
 2740 0002 00AF     		add	r7, sp, #0
 2741              	.LCFI165:
 2742              		.cfi_def_cfa_register 7
1874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 2743              		.loc 1 1875 3
 2744 0004 054B     		ldr	r3, .L186
 2745 0006 9B68     		ldr	r3, [r3, #8]
 2746 0008 044A     		ldr	r2, .L186
 2747 000a 23F01003 		bic	r3, r3, #16
 2748 000e 9360     		str	r3, [r2, #8]
1876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2749              		.loc 1 1876 1
 2750 0010 00BF     		nop
 2751 0012 BD46     		mov	sp, r7
 2752              	.LCFI166:
 2753              		.cfi_def_cfa_register 13
 2754              		@ sp needed
 2755 0014 5DF8047B 		ldr	r7, [sp], #4
 2756              	.LCFI167:
 2757              		.cfi_restore 7
 2758              		.cfi_def_cfa_offset 0
 2759 0018 7047     		bx	lr
 2760              	.L187:
 2761 001a 00BF     		.align	2
 2762              	.L186:
 2763 001c 00480258 		.word	1476544512
 2764              		.cfi_endproc
 2765              	.LFE366:
 2767              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 2768              		.align	1
 2769              		.global	HAL_PWREx_GetTemperatureLevel
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu fpv5-d16
 2775              	HAL_PWREx_GetTemperatureLevel:
 2776              	.LFB367:
1877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
1880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel (void)
1884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2777              		.loc 1 1884 1
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 8
 2780              		@ frame_needed = 1, uses_anonymous_args = 0
 2781              		@ link register save eliminated.
 2782 0000 80B4     		push	{r7}
 2783              	.LCFI168:
 2784              		.cfi_def_cfa_offset 4
 2785              		.cfi_offset 7, -4
ARM GAS  /tmp/cc0yi91q.s 			page 102


 2786 0002 83B0     		sub	sp, sp, #12
 2787              	.LCFI169:
 2788              		.cfi_def_cfa_offset 16
 2789 0004 00AF     		add	r7, sp, #0
 2790              	.LCFI170:
 2791              		.cfi_def_cfa_register 7
1885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel, regValue;
1886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 2792              		.loc 1 1888 14
 2793 0006 0F4B     		ldr	r3, .L193
 2794 0008 9B68     		ldr	r3, [r3, #8]
 2795              		.loc 1 1888 12
 2796 000a 03F44003 		and	r3, r3, #12582912
 2797 000e 3B60     		str	r3, [r7]
1889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
1891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_TEMPL)
 2798              		.loc 1 1891 6
 2799 0010 3B68     		ldr	r3, [r7]
 2800 0012 B3F5800F 		cmp	r3, #4194304
 2801 0016 03D1     		bne	.L189
1892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
 2802              		.loc 1 1893 15
 2803 0018 4FF48003 		mov	r3, #4194304
 2804 001c 7B60     		str	r3, [r7, #4]
 2805 001e 09E0     		b	.L190
 2806              	.L189:
1894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
1896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_TEMPH)
 2807              		.loc 1 1896 11
 2808 0020 3B68     		ldr	r3, [r7]
 2809 0022 B3F5000F 		cmp	r3, #8388608
 2810 0026 03D1     		bne	.L191
1897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
 2811              		.loc 1 1898 15
 2812 0028 4FF40003 		mov	r3, #8388608
 2813 002c 7B60     		str	r3, [r7, #4]
 2814 002e 01E0     		b	.L190
 2815              	.L191:
1899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
1901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 2816              		.loc 1 1903 15
 2817 0030 0023     		movs	r3, #0
 2818 0032 7B60     		str	r3, [r7, #4]
 2819              	.L190:
1904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
 2820              		.loc 1 1906 10
ARM GAS  /tmp/cc0yi91q.s 			page 103


 2821 0034 7B68     		ldr	r3, [r7, #4]
1907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2822              		.loc 1 1907 1
 2823 0036 1846     		mov	r0, r3
 2824 0038 0C37     		adds	r7, r7, #12
 2825              	.LCFI171:
 2826              		.cfi_def_cfa_offset 4
 2827 003a BD46     		mov	sp, r7
 2828              	.LCFI172:
 2829              		.cfi_def_cfa_register 13
 2830              		@ sp needed
 2831 003c 5DF8047B 		ldr	r7, [sp], #4
 2832              	.LCFI173:
 2833              		.cfi_restore 7
 2834              		.cfi_def_cfa_offset 0
 2835 0040 7047     		bx	lr
 2836              	.L194:
 2837 0042 00BF     		.align	2
 2838              	.L193:
 2839 0044 00480258 		.word	1476544512
 2840              		.cfi_endproc
 2841              	.LFE367:
 2843              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 2844              		.align	1
 2845              		.global	HAL_PWREx_GetVBATLevel
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu fpv5-d16
 2851              	HAL_PWREx_GetVBATLevel:
 2852              	.LFB368:
1908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
1911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel (void)
1915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2853              		.loc 1 1915 1
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 8
 2856              		@ frame_needed = 1, uses_anonymous_args = 0
 2857              		@ link register save eliminated.
 2858 0000 80B4     		push	{r7}
 2859              	.LCFI174:
 2860              		.cfi_def_cfa_offset 4
 2861              		.cfi_offset 7, -4
 2862 0002 83B0     		sub	sp, sp, #12
 2863              	.LCFI175:
 2864              		.cfi_def_cfa_offset 16
 2865 0004 00AF     		add	r7, sp, #0
 2866              	.LCFI176:
 2867              		.cfi_def_cfa_register 7
1916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel, regValue;
1917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
ARM GAS  /tmp/cc0yi91q.s 			page 104


1919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 2868              		.loc 1 1919 14
 2869 0006 0F4B     		ldr	r3, .L200
 2870 0008 9B68     		ldr	r3, [r3, #8]
 2871              		.loc 1 1919 12
 2872 000a 03F44013 		and	r3, r3, #3145728
 2873 000e 3B60     		str	r3, [r7]
1920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
1922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_VBATL)
 2874              		.loc 1 1922 6
 2875 0010 3B68     		ldr	r3, [r7]
 2876 0012 B3F5801F 		cmp	r3, #1048576
 2877 0016 03D1     		bne	.L196
1923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
 2878              		.loc 1 1924 15
 2879 0018 4FF48013 		mov	r3, #1048576
 2880 001c 7B60     		str	r3, [r7, #4]
 2881 001e 09E0     		b	.L197
 2882              	.L196:
1925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
1927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_VBATH)
 2883              		.loc 1 1927 11
 2884 0020 3B68     		ldr	r3, [r7]
 2885 0022 B3F5001F 		cmp	r3, #2097152
 2886 0026 03D1     		bne	.L198
1928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
 2887              		.loc 1 1929 15
 2888 0028 4FF40013 		mov	r3, #2097152
 2889 002c 7B60     		str	r3, [r7, #4]
 2890 002e 01E0     		b	.L197
 2891              	.L198:
1930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
1932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 2892              		.loc 1 1934 15
 2893 0030 0023     		movs	r3, #0
 2894 0032 7B60     		str	r3, [r7, #4]
 2895              	.L197:
1935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
 2896              		.loc 1 1937 10
 2897 0034 7B68     		ldr	r3, [r7, #4]
1938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2898              		.loc 1 1938 1
 2899 0036 1846     		mov	r0, r3
 2900 0038 0C37     		adds	r7, r7, #12
 2901              	.LCFI177:
 2902              		.cfi_def_cfa_offset 4
 2903 003a BD46     		mov	sp, r7
 2904              	.LCFI178:
ARM GAS  /tmp/cc0yi91q.s 			page 105


 2905              		.cfi_def_cfa_register 13
 2906              		@ sp needed
 2907 003c 5DF8047B 		ldr	r7, [sp], #4
 2908              	.LCFI179:
 2909              		.cfi_restore 7
 2910              		.cfi_def_cfa_offset 0
 2911 0040 7047     		bx	lr
 2912              	.L201:
 2913 0042 00BF     		.align	2
 2914              	.L200:
 2915 0044 00480258 		.word	1476544512
 2916              		.cfi_endproc
 2917              	.LFE368:
 2919              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 2920              		.align	1
 2921              		.global	HAL_PWREx_ConfigAVD
 2922              		.syntax unified
 2923              		.thumb
 2924              		.thumb_func
 2925              		.fpu fpv5-d16
 2927              	HAL_PWREx_ConfigAVD:
 2928              	.LFB369:
1939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CSR1_MMCVDO)
1941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the VDDMMC voltage level.
1943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The VDDMMC voltage level.
1944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** PWREx_MMC_VoltageLevel HAL_PWREx_GetMMCVoltage (void)
1946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   PWREx_MMC_VoltageLevel mmc_voltage;
1948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check voltage detector output on VDDMMC value */
1950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_MMCVDO_Msk) == 0U)
1951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_BELOW_1V2;
1953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_EQUAL_ABOVE_1V2;
1957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return mmc_voltage;
1960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CSR1_MMCVDO) */
1962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the event mode and the voltage threshold detected by the
1965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Analog Voltage Detector (AVD).
1966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD : Pointer to an PWREx_AVDTypeDef structure that contains
1967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      the configuration information for the AVD.
1968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
1969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         more details about the voltage threshold corresponding to each
1970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         detection level.
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx through PWR_Exported_Macro provided by this
1973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         driver. All combination are allowed: wake up only Cortex-M7, wake up
ARM GAS  /tmp/cc0yi91q.s 			page 106


1974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
1975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2929              		.loc 1 1978 1
 2930              		.cfi_startproc
 2931              		@ args = 0, pretend = 0, frame = 8
 2932              		@ frame_needed = 1, uses_anonymous_args = 0
 2933              		@ link register save eliminated.
 2934 0000 80B4     		push	{r7}
 2935              	.LCFI180:
 2936              		.cfi_def_cfa_offset 4
 2937              		.cfi_offset 7, -4
 2938 0002 83B0     		sub	sp, sp, #12
 2939              	.LCFI181:
 2940              		.cfi_def_cfa_offset 16
 2941 0004 00AF     		add	r7, sp, #0
 2942              	.LCFI182:
 2943              		.cfi_def_cfa_register 7
 2944 0006 7860     		str	r0, [r7, #4]
1979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
1981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));
1982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 2945              		.loc 1 1984 3
 2946 0008 1D4B     		ldr	r3, .L206
 2947 000a 1B68     		ldr	r3, [r3]
 2948 000c 23F4C022 		bic	r2, r3, #393216
 2949 0010 7B68     		ldr	r3, [r7, #4]
 2950 0012 1B68     		ldr	r3, [r3]
 2951 0014 1A49     		ldr	r1, .L206
 2952 0016 1343     		orrs	r3, r3, r2
 2953 0018 0B60     		str	r3, [r1]
1985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
1989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT ();
1990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
1991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 2954              		.loc 1 1992 3
 2955 001a 4FF0B043 		mov	r3, #1476395008
 2956 001e 1B68     		ldr	r3, [r3]
 2957 0020 4FF0B042 		mov	r2, #1476395008
 2958 0024 23F48033 		bic	r3, r3, #65536
 2959 0028 1360     		str	r3, [r2]
1993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 2960              		.loc 1 1993 3
 2961 002a 4FF0B043 		mov	r3, #1476395008
 2962 002e 5B68     		ldr	r3, [r3, #4]
 2963 0030 4FF0B042 		mov	r2, #1476395008
 2964 0034 23F48033 		bic	r3, r3, #65536
 2965 0038 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/cc0yi91q.s 			page 107


1994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
1998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT ();
2000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
2003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
2004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
2006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
2008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Rising edge configuration */
2010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 2966              		.loc 1 2010 18
 2967 003a 7B68     		ldr	r3, [r7, #4]
 2968 003c 5B68     		ldr	r3, [r3, #4]
 2969              		.loc 1 2010 25
 2970 003e 03F00103 		and	r3, r3, #1
 2971              		.loc 1 2010 6
 2972 0042 002B     		cmp	r3, #0
 2973 0044 07D0     		beq	.L203
2011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 2974              		.loc 1 2012 5
 2975 0046 4FF0B043 		mov	r3, #1476395008
 2976 004a 1B68     		ldr	r3, [r3]
 2977 004c 4FF0B042 		mov	r2, #1476395008
 2978 0050 43F48033 		orr	r3, r3, #65536
 2979 0054 1360     		str	r3, [r2]
 2980              	.L203:
2013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Falling edge configuration */
2016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 2981              		.loc 1 2016 18
 2982 0056 7B68     		ldr	r3, [r7, #4]
 2983 0058 5B68     		ldr	r3, [r3, #4]
 2984              		.loc 1 2016 25
 2985 005a 03F00203 		and	r3, r3, #2
 2986              		.loc 1 2016 6
 2987 005e 002B     		cmp	r3, #0
 2988 0060 07D0     		beq	.L205
2017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 2989              		.loc 1 2018 5
 2990 0062 4FF0B043 		mov	r3, #1476395008
 2991 0066 5B68     		ldr	r3, [r3, #4]
 2992 0068 4FF0B042 		mov	r2, #1476395008
 2993 006c 43F48033 		orr	r3, r3, #65536
 2994 0070 5360     		str	r3, [r2, #4]
 2995              	.L205:
2019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/cc0yi91q.s 			page 108


 2996              		.loc 1 2020 1
 2997 0072 00BF     		nop
 2998 0074 0C37     		adds	r7, r7, #12
 2999              	.LCFI183:
 3000              		.cfi_def_cfa_offset 4
 3001 0076 BD46     		mov	sp, r7
 3002              	.LCFI184:
 3003              		.cfi_def_cfa_register 13
 3004              		@ sp needed
 3005 0078 5DF8047B 		ldr	r7, [sp], #4
 3006              	.LCFI185:
 3007              		.cfi_restore 7
 3008              		.cfi_def_cfa_offset 0
 3009 007c 7047     		bx	lr
 3010              	.L207:
 3011 007e 00BF     		.align	2
 3012              	.L206:
 3013 0080 00480258 		.word	1476544512
 3014              		.cfi_endproc
 3015              	.LFE369:
 3017              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 3018              		.align	1
 3019              		.global	HAL_PWREx_EnableAVD
 3020              		.syntax unified
 3021              		.thumb
 3022              		.thumb_func
 3023              		.fpu fpv5-d16
 3025              	HAL_PWREx_EnableAVD:
 3026              	.LFB370:
2021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Analog Voltage Detector (AVD).
2024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD (void)
2027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 3027              		.loc 1 2027 1
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 0
 3030              		@ frame_needed = 1, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
 3032 0000 80B4     		push	{r7}
 3033              	.LCFI186:
 3034              		.cfi_def_cfa_offset 4
 3035              		.cfi_offset 7, -4
 3036 0002 00AF     		add	r7, sp, #0
 3037              	.LCFI187:
 3038              		.cfi_def_cfa_register 7
2028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
2029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 3039              		.loc 1 2029 3
 3040 0004 054B     		ldr	r3, .L209
 3041 0006 1B68     		ldr	r3, [r3]
 3042 0008 044A     		ldr	r2, .L209
 3043 000a 43F48033 		orr	r3, r3, #65536
 3044 000e 1360     		str	r3, [r2]
2030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/cc0yi91q.s 			page 109


 3045              		.loc 1 2030 1
 3046 0010 00BF     		nop
 3047 0012 BD46     		mov	sp, r7
 3048              	.LCFI188:
 3049              		.cfi_def_cfa_register 13
 3050              		@ sp needed
 3051 0014 5DF8047B 		ldr	r7, [sp], #4
 3052              	.LCFI189:
 3053              		.cfi_restore 7
 3054              		.cfi_def_cfa_offset 0
 3055 0018 7047     		bx	lr
 3056              	.L210:
 3057 001a 00BF     		.align	2
 3058              	.L209:
 3059 001c 00480258 		.word	1476544512
 3060              		.cfi_endproc
 3061              	.LFE370:
 3063              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
 3064              		.align	1
 3065              		.global	HAL_PWREx_DisableAVD
 3066              		.syntax unified
 3067              		.thumb
 3068              		.thumb_func
 3069              		.fpu fpv5-d16
 3071              	HAL_PWREx_DisableAVD:
 3072              	.LFB371:
2031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Analog Voltage Detector(AVD).
2034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD (void)
2037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 3073              		.loc 1 2037 1
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 0
 3076              		@ frame_needed = 1, uses_anonymous_args = 0
 3077              		@ link register save eliminated.
 3078 0000 80B4     		push	{r7}
 3079              	.LCFI190:
 3080              		.cfi_def_cfa_offset 4
 3081              		.cfi_offset 7, -4
 3082 0002 00AF     		add	r7, sp, #0
 3083              	.LCFI191:
 3084              		.cfi_def_cfa_register 7
2038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
2039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 3085              		.loc 1 2039 3
 3086 0004 054B     		ldr	r3, .L212
 3087 0006 1B68     		ldr	r3, [r3]
 3088 0008 044A     		ldr	r2, .L212
 3089 000a 23F48033 		bic	r3, r3, #65536
 3090 000e 1360     		str	r3, [r2]
2040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 3091              		.loc 1 2040 1
 3092 0010 00BF     		nop
 3093 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/cc0yi91q.s 			page 110


 3094              	.LCFI192:
 3095              		.cfi_def_cfa_register 13
 3096              		@ sp needed
 3097 0014 5DF8047B 		ldr	r7, [sp], #4
 3098              	.LCFI193:
 3099              		.cfi_restore 7
 3100              		.cfi_def_cfa_offset 0
 3101 0018 7047     		bx	lr
 3102              	.L213:
 3103 001a 00BF     		.align	2
 3104              	.L212:
 3105 001c 00480258 		.word	1476544512
 3106              		.cfi_endproc
 3107              	.LFE371:
 3109              		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 3110              		.align	1
 3111              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 3112              		.syntax unified
 3113              		.thumb
 3114              		.thumb_func
 3115              		.fpu fpv5-d16
 3117              	HAL_PWREx_PVD_AVD_IRQHandler:
 3118              	.LFB372:
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
2044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
2045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
2046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler (void)
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 3119              		.loc 1 2048 1
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 1, uses_anonymous_args = 0
 3123 0000 80B5     		push	{r7, lr}
 3124              	.LCFI194:
 3125              		.cfi_def_cfa_offset 8
 3126              		.cfi_offset 7, -8
 3127              		.cfi_offset 14, -4
 3128 0002 00AF     		add	r7, sp, #0
 3129              	.LCFI195:
 3130              		.cfi_def_cfa_register 7
2049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
2050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 3131              		.loc 1 2050 7
 3132 0004 304B     		ldr	r3, .L220
 3133 0006 1B68     		ldr	r3, [r3]
 3134 0008 03F01003 		and	r3, r3, #16
 3135              		.loc 1 2050 6
 3136 000c 002B     		cmp	r3, #0
 3137 000e 29D0     		beq	.L215
2051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 3138              		.loc 1 2053 9
 3139 0010 FFF7FEFF 		bl	HAL_GetCurrentCPUID
ARM GAS  /tmp/cc0yi91q.s 			page 111


 3140 0014 0346     		mov	r3, r0
 3141              		.loc 1 2053 8
 3142 0016 032B     		cmp	r3, #3
 3143 0018 15D1     		bne	.L216
2054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1/CD EXTI flag */
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 3144              		.loc 1 2057 11
 3145 001a 4FF0B043 		mov	r3, #1476395008
 3146 001e D3F88830 		ldr	r3, [r3, #136]
 3147 0022 03F48033 		and	r3, r3, #65536
 3148              		.loc 1 2057 10
 3149 0026 B3F5803F 		cmp	r3, #65536
 3150 002a 1BD1     		bne	.L215
2058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
 3151              		.loc 1 2060 9
 3152 002c FFF7FEFF 		bl	HAL_PWR_PVDCallback
2061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 3153              		.loc 1 2063 9
 3154 0030 4FF0B043 		mov	r3, #1476395008
 3155 0034 D3F88830 		ldr	r3, [r3, #136]
 3156 0038 4FF0B042 		mov	r2, #1476395008
 3157 003c 43F48033 		orr	r3, r3, #65536
 3158 0040 C2F88830 		str	r3, [r2, #136]
 3159 0044 0EE0     		b	.L215
 3160              	.L216:
2064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
 3161              		.loc 1 2070 11
 3162 0046 214B     		ldr	r3, .L220+4
 3163 0048 9B68     		ldr	r3, [r3, #8]
 3164 004a 03F48033 		and	r3, r3, #65536
 3165              		.loc 1 2070 10
 3166 004e B3F5803F 		cmp	r3, #65536
 3167 0052 07D1     		bne	.L215
2071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
 3168              		.loc 1 2073 9
 3169 0054 FFF7FEFF 		bl	HAL_PWR_PVDCallback
2074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
 3170              		.loc 1 2076 9
 3171 0058 1C4B     		ldr	r3, .L220+4
 3172 005a 9B68     		ldr	r3, [r3, #8]
 3173 005c 1B4A     		ldr	r2, .L220+4
ARM GAS  /tmp/cc0yi91q.s 			page 112


 3174 005e 43F48033 		orr	r3, r3, #65536
 3175 0062 9360     		str	r3, [r2, #8]
 3176              	.L215:
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Analog Voltage Detector is enabled (AVD) */
2083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 3177              		.loc 1 2083 7
 3178 0064 184B     		ldr	r3, .L220
 3179 0066 1B68     		ldr	r3, [r3]
 3180 0068 03F48033 		and	r3, r3, #65536
 3181              		.loc 1 2083 6
 3182 006c 002B     		cmp	r3, #0
 3183 006e 29D0     		beq	.L219
2084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 3184              		.loc 1 2086 9
 3185 0070 FFF7FEFF 		bl	HAL_GetCurrentCPUID
 3186 0074 0346     		mov	r3, r0
 3187              		.loc 1 2086 8
 3188 0076 032B     		cmp	r3, #3
 3189 0078 15D1     		bne	.L218
2087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1/CD flag */
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 3190              		.loc 1 2090 11
 3191 007a 4FF0B043 		mov	r3, #1476395008
 3192 007e D3F88830 		ldr	r3, [r3, #136]
 3193 0082 03F48033 		and	r3, r3, #65536
 3194              		.loc 1 2090 10
 3195 0086 B3F5803F 		cmp	r3, #65536
 3196 008a 1BD1     		bne	.L219
2091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
 3197              		.loc 1 2093 9
 3198 008c FFF7FEFF 		bl	HAL_PWREx_AVDCallback
2094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 3199              		.loc 1 2096 9
 3200 0090 4FF0B043 		mov	r3, #1476395008
 3201 0094 D3F88830 		ldr	r3, [r3, #136]
 3202 0098 4FF0B042 		mov	r2, #1476395008
 3203 009c 43F48033 		orr	r3, r3, #65536
 3204 00a0 C2F88830 		str	r3, [r2, #136]
2097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
ARM GAS  /tmp/cc0yi91q.s 			page 113


2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
2104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
2110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 3205              		.loc 1 2114 1
 3206 00a4 0EE0     		b	.L219
 3207              	.L218:
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 3208              		.loc 1 2103 11
 3209 00a6 094B     		ldr	r3, .L220+4
 3210 00a8 9B68     		ldr	r3, [r3, #8]
 3211 00aa 03F48033 		and	r3, r3, #65536
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 3212              		.loc 1 2103 10
 3213 00ae B3F5803F 		cmp	r3, #65536
 3214 00b2 07D1     		bne	.L219
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 3215              		.loc 1 2106 9
 3216 00b4 FFF7FEFF 		bl	HAL_PWREx_AVDCallback
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 3217              		.loc 1 2109 9
 3218 00b8 044B     		ldr	r3, .L220+4
 3219 00ba 9B68     		ldr	r3, [r3, #8]
 3220 00bc 034A     		ldr	r2, .L220+4
 3221 00be 43F48033 		orr	r3, r3, #65536
 3222 00c2 9360     		str	r3, [r2, #8]
 3223              	.L219:
 3224              		.loc 1 2114 1
 3225 00c4 00BF     		nop
 3226 00c6 80BD     		pop	{r7, pc}
 3227              	.L221:
 3228              		.align	2
 3229              	.L220:
 3230 00c8 00480258 		.word	1476544512
 3231 00cc C0000058 		.word	1476395200
 3232              		.cfi_endproc
 3233              	.LFE372:
 3235              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 3236              		.align	1
 3237              		.weak	HAL_PWREx_AVDCallback
 3238              		.syntax unified
 3239              		.thumb
 3240              		.thumb_func
 3241              		.fpu fpv5-d16
 3243              	HAL_PWREx_AVDCallback:
 3244              	.LFB373:
2115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR AVD interrupt callback.
ARM GAS  /tmp/cc0yi91q.s 			page 114


2118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_AVDCallback (void)
2121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 3245              		.loc 1 2121 1
 3246              		.cfi_startproc
 3247              		@ args = 0, pretend = 0, frame = 0
 3248              		@ frame_needed = 1, uses_anonymous_args = 0
 3249              		@ link register save eliminated.
 3250 0000 80B4     		push	{r7}
 3251              	.LCFI196:
 3252              		.cfi_def_cfa_offset 4
 3253              		.cfi_offset 7, -4
 3254 0002 00AF     		add	r7, sp, #0
 3255              	.LCFI197:
 3256              		.cfi_def_cfa_register 7
2122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWR_AVDCallback can be implemented in the user file
2124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 3257              		.loc 1 2125 1
 3258 0004 00BF     		nop
 3259 0006 BD46     		mov	sp, r7
 3260              	.LCFI198:
 3261              		.cfi_def_cfa_register 13
 3262              		@ sp needed
 3263 0008 5DF8047B 		ldr	r7, [sp], #4
 3264              	.LCFI199:
 3265              		.cfi_restore 7
 3266              		.cfi_def_cfa_offset 0
 3267 000c 7047     		bx	lr
 3268              		.cfi_endproc
 3269              	.LFE373:
 3271              		.text
 3272              	.Letext0:
 3273              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 3274              		.file 4 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 3275              		.file 5 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 3276              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 3277              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 3278              		.file 8 "/usr/include/newlib/sys/_types.h"
 3279              		.file 9 "/usr/include/newlib/sys/reent.h"
 3280              		.file 10 "/usr/include/newlib/sys/lock.h"
 3281              		.file 11 "/usr/include/newlib/math.h"
 3282              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 3283              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 3284              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
 3285              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 3286              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cc0yi91q.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_pwr_ex.c
     /tmp/cc0yi91q.s:17     .text.HAL_PWREx_ConfigSupply:0000000000000000 $t
     /tmp/cc0yi91q.s:25     .text.HAL_PWREx_ConfigSupply:0000000000000000 HAL_PWREx_ConfigSupply
     /tmp/cc0yi91q.s:163    .text.HAL_PWREx_ConfigSupply:00000000000000b0 $d
     /tmp/cc0yi91q.s:168    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 $t
     /tmp/cc0yi91q.s:175    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 HAL_PWREx_GetSupplyConfig
     /tmp/cc0yi91q.s:208    .text.HAL_PWREx_GetSupplyConfig:0000000000000018 $d
     /tmp/cc0yi91q.s:213    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/cc0yi91q.s:220    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/cc0yi91q.s:407    .text.HAL_PWREx_ControlVoltageScaling:0000000000000108 $d
     /tmp/cc0yi91q.s:413    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/cc0yi91q.s:420    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/cc0yi91q.s:453    .text.HAL_PWREx_GetVoltageRange:0000000000000018 $d
     /tmp/cc0yi91q.s:458    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 $t
     /tmp/cc0yi91q.s:465    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/cc0yi91q.s:510    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000028 $d
     /tmp/cc0yi91q.s:515    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 $t
     /tmp/cc0yi91q.s:522    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/cc0yi91q.s:555    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000018 $d
     /tmp/cc0yi91q.s:560    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 $t
     /tmp/cc0yi91q.s:567    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 HAL_PWREx_EnterSTOPMode
     /tmp/cc0yi91q.s:792    .text.HAL_PWREx_EnterSTOPMode:00000000000000ec $d
     /tmp/cc0yi91q.s:798    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 $t
     /tmp/cc0yi91q.s:805    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 HAL_PWREx_ClearPendingEvent
     /tmp/cc0yi91q.s:854    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cc0yi91q.s:861    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 HAL_PWREx_EnterSTANDBYMode
     /tmp/cc0yi91q.s:986    .text.HAL_PWREx_EnterSTANDBYMode:00000000000000a0 $d
     /tmp/cc0yi91q.s:992    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 $t
     /tmp/cc0yi91q.s:999    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 HAL_PWREx_ConfigD3Domain
     /tmp/cc0yi91q.s:1042   .text.HAL_PWREx_ConfigD3Domain:0000000000000024 $d
     /tmp/cc0yi91q.s:1047   .text.HAL_PWREx_ClearDomainFlags:0000000000000000 $t
     /tmp/cc0yi91q.s:1054   .text.HAL_PWREx_ClearDomainFlags:0000000000000000 HAL_PWREx_ClearDomainFlags
     /tmp/cc0yi91q.s:1128   .text.HAL_PWREx_ClearDomainFlags:0000000000000054 $d
     /tmp/cc0yi91q.s:1133   .text.HAL_PWREx_HoldCore:0000000000000000 $t
     /tmp/cc0yi91q.s:1140   .text.HAL_PWREx_HoldCore:0000000000000000 HAL_PWREx_HoldCore
     /tmp/cc0yi91q.s:1225   .text.HAL_PWREx_HoldCore:0000000000000064 $d
     /tmp/cc0yi91q.s:1230   .text.HAL_PWREx_ReleaseCore:0000000000000000 $t
     /tmp/cc0yi91q.s:1237   .text.HAL_PWREx_ReleaseCore:0000000000000000 HAL_PWREx_ReleaseCore
     /tmp/cc0yi91q.s:1292   .text.HAL_PWREx_ReleaseCore:0000000000000034 $d
     /tmp/cc0yi91q.s:1297   .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/cc0yi91q.s:1304   .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/cc0yi91q.s:1338   .text.HAL_PWREx_EnableFlashPowerDown:000000000000001c $d
     /tmp/cc0yi91q.s:1343   .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/cc0yi91q.s:1350   .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/cc0yi91q.s:1384   .text.HAL_PWREx_DisableFlashPowerDown:000000000000001c $d
     /tmp/cc0yi91q.s:1389   .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 $t
     /tmp/cc0yi91q.s:1396   .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 HAL_PWREx_EnableWakeUpPin
     /tmp/cc0yi91q.s:1639   .text.HAL_PWREx_EnableWakeUpPin:0000000000000108 $d
     /tmp/cc0yi91q.s:1644   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 $t
     /tmp/cc0yi91q.s:1651   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 HAL_PWREx_DisableWakeUpPin
     /tmp/cc0yi91q.s:1694   .text.HAL_PWREx_DisableWakeUpPin:0000000000000024 $d
     /tmp/cc0yi91q.s:1699   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 $t
     /tmp/cc0yi91q.s:1706   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 HAL_PWREx_GetWakeupFlag
     /tmp/cc0yi91q.s:1747   .text.HAL_PWREx_GetWakeupFlag:000000000000001c $d
     /tmp/cc0yi91q.s:1752   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 $t
     /tmp/cc0yi91q.s:1759   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 HAL_PWREx_ClearWakeupFlag
ARM GAS  /tmp/cc0yi91q.s 			page 116


     /tmp/cc0yi91q.s:1817   .text.HAL_PWREx_ClearWakeupFlag:0000000000000034 $d
     /tmp/cc0yi91q.s:1822   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 $t
     /tmp/cc0yi91q.s:1829   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
     /tmp/cc0yi91q.s:1960   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 HAL_PWREx_WKUP1_Callback
     /tmp/cc0yi91q.s:1996   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 HAL_PWREx_WKUP2_Callback
     /tmp/cc0yi91q.s:2032   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 HAL_PWREx_WKUP3_Callback
     /tmp/cc0yi91q.s:2068   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 HAL_PWREx_WKUP4_Callback
     /tmp/cc0yi91q.s:2104   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 HAL_PWREx_WKUP5_Callback
     /tmp/cc0yi91q.s:2140   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 HAL_PWREx_WKUP6_Callback
     /tmp/cc0yi91q.s:1948   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:00000000000000b0 $d
     /tmp/cc0yi91q.s:1953   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:1989   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:2025   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:2061   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:2097   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:2133   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 $t
     /tmp/cc0yi91q.s:2169   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/cc0yi91q.s:2176   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/cc0yi91q.s:2241   .text.HAL_PWREx_EnableBkUpReg:0000000000000048 $d
     /tmp/cc0yi91q.s:2246   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/cc0yi91q.s:2253   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/cc0yi91q.s:2318   .text.HAL_PWREx_DisableBkUpReg:0000000000000048 $d
     /tmp/cc0yi91q.s:2323   .text.HAL_PWREx_EnableUSBReg:0000000000000000 $t
     /tmp/cc0yi91q.s:2330   .text.HAL_PWREx_EnableUSBReg:0000000000000000 HAL_PWREx_EnableUSBReg
     /tmp/cc0yi91q.s:2395   .text.HAL_PWREx_EnableUSBReg:0000000000000048 $d
     /tmp/cc0yi91q.s:2400   .text.HAL_PWREx_DisableUSBReg:0000000000000000 $t
     /tmp/cc0yi91q.s:2407   .text.HAL_PWREx_DisableUSBReg:0000000000000000 HAL_PWREx_DisableUSBReg
     /tmp/cc0yi91q.s:2472   .text.HAL_PWREx_DisableUSBReg:0000000000000048 $d
     /tmp/cc0yi91q.s:2477   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 $t
     /tmp/cc0yi91q.s:2484   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 HAL_PWREx_EnableUSBVoltageDetector
     /tmp/cc0yi91q.s:2518   .text.HAL_PWREx_EnableUSBVoltageDetector:000000000000001c $d
     /tmp/cc0yi91q.s:2523   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 $t
     /tmp/cc0yi91q.s:2530   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 HAL_PWREx_DisableUSBVoltageDetector
     /tmp/cc0yi91q.s:2564   .text.HAL_PWREx_DisableUSBVoltageDetector:000000000000001c $d
     /tmp/cc0yi91q.s:2569   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/cc0yi91q.s:2576   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/cc0yi91q.s:2625   .text.HAL_PWREx_EnableBatteryCharging:0000000000000030 $d
     /tmp/cc0yi91q.s:2630   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/cc0yi91q.s:2637   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/cc0yi91q.s:2671   .text.HAL_PWREx_DisableBatteryCharging:000000000000001c $d
     /tmp/cc0yi91q.s:2676   .text.HAL_PWREx_EnableMonitoring:0000000000000000 $t
     /tmp/cc0yi91q.s:2683   .text.HAL_PWREx_EnableMonitoring:0000000000000000 HAL_PWREx_EnableMonitoring
     /tmp/cc0yi91q.s:2717   .text.HAL_PWREx_EnableMonitoring:000000000000001c $d
     /tmp/cc0yi91q.s:2722   .text.HAL_PWREx_DisableMonitoring:0000000000000000 $t
     /tmp/cc0yi91q.s:2729   .text.HAL_PWREx_DisableMonitoring:0000000000000000 HAL_PWREx_DisableMonitoring
     /tmp/cc0yi91q.s:2763   .text.HAL_PWREx_DisableMonitoring:000000000000001c $d
     /tmp/cc0yi91q.s:2768   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 $t
     /tmp/cc0yi91q.s:2775   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 HAL_PWREx_GetTemperatureLevel
     /tmp/cc0yi91q.s:2839   .text.HAL_PWREx_GetTemperatureLevel:0000000000000044 $d
     /tmp/cc0yi91q.s:2844   .text.HAL_PWREx_GetVBATLevel:0000000000000000 $t
     /tmp/cc0yi91q.s:2851   .text.HAL_PWREx_GetVBATLevel:0000000000000000 HAL_PWREx_GetVBATLevel
     /tmp/cc0yi91q.s:2915   .text.HAL_PWREx_GetVBATLevel:0000000000000044 $d
     /tmp/cc0yi91q.s:2920   .text.HAL_PWREx_ConfigAVD:0000000000000000 $t
     /tmp/cc0yi91q.s:2927   .text.HAL_PWREx_ConfigAVD:0000000000000000 HAL_PWREx_ConfigAVD
     /tmp/cc0yi91q.s:3013   .text.HAL_PWREx_ConfigAVD:0000000000000080 $d
     /tmp/cc0yi91q.s:3018   .text.HAL_PWREx_EnableAVD:0000000000000000 $t
     /tmp/cc0yi91q.s:3025   .text.HAL_PWREx_EnableAVD:0000000000000000 HAL_PWREx_EnableAVD
ARM GAS  /tmp/cc0yi91q.s 			page 117


     /tmp/cc0yi91q.s:3059   .text.HAL_PWREx_EnableAVD:000000000000001c $d
     /tmp/cc0yi91q.s:3064   .text.HAL_PWREx_DisableAVD:0000000000000000 $t
     /tmp/cc0yi91q.s:3071   .text.HAL_PWREx_DisableAVD:0000000000000000 HAL_PWREx_DisableAVD
     /tmp/cc0yi91q.s:3105   .text.HAL_PWREx_DisableAVD:000000000000001c $d
     /tmp/cc0yi91q.s:3110   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 $t
     /tmp/cc0yi91q.s:3117   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 HAL_PWREx_PVD_AVD_IRQHandler
     /tmp/cc0yi91q.s:3243   .text.HAL_PWREx_AVDCallback:0000000000000000 HAL_PWREx_AVDCallback
     /tmp/cc0yi91q.s:3230   .text.HAL_PWREx_PVD_AVD_IRQHandler:00000000000000c8 $d
     /tmp/cc0yi91q.s:3236   .text.HAL_PWREx_AVDCallback:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_GetCurrentCPUID
HAL_PWR_PVDCallback
