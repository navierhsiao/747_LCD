ARM GAS  /tmp/ccxZs44Y.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_dot_prod_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_dot_prod_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_dot_prod_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_dot_prod_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c"
   1:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Title:        arm_dot_prod_f32.c
   4:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Description:  Floating-point dot product
   5:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
ARM GAS  /tmp/ccxZs44Y.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @ingroup groupMath
  33:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @defgroup BasicDotProd Vector Dot Product
  37:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   Computes the dot product of two vectors.
  39:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  41:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   <pre>
  42:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****       sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
  43:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   </pre>
  44:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  45:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  46:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  47:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  48:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  49:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @addtogroup BasicDotProd
  50:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @{
  51:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  52:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  53:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  54:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @brief         Dot product of floating-point vectors.
  55:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  56:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  57:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[out]    result     output result returned here.
  59:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @return        none
  60:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  61:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  62:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
  63:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcA,
  64:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcB,
  65:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blockSize,
  66:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t * result)
  67:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** {
  28              		.loc 1 67 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  46 000c 3B60     		str	r3, [r7]
  68:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
  69:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t sum = 0.0f;                          /* Temporary return variable */
ARM GAS  /tmp/ccxZs44Y.s 			page 3


  47              		.loc 1 69 19
  48 000e 4FF00003 		mov	r3, #0
  49 0012 3B61     		str	r3, [r7, #16]	@ float
  70:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  71:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_NEON)
  72:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t vec1;
  73:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t vec2;
  74:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t res;
  75:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32x4_t accum = vdupq_n_f32(0);    
  76:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  77:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
  78:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
  79:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  80:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec1 = vld1q_f32(pSrcA);
  81:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec2 = vld1q_f32(pSrcB);
  82:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  83:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
  84:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     {
  85:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]*B[0] + A[1]*B[1] + A[2]*B[2] + ... + A[blockSize-1]*B[blockSize-1] */
  86:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
  87:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
  88:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	accum = vmlaq_f32(accum, vec1, vec2);
  89:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	
  90:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Increment pointers */
  91:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
  92:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4; 
  93:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  94:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec1 = vld1q_f32(pSrcA);
  95:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec2 = vld1q_f32(pSrcB);
  96:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
  97:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Decrement the loop counter */
  98:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt--;
  99:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     }
 100:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     
 101:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if __aarch64__
 102:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vpadds_f32(vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)));
 103:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 104:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = (vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)))[0] + (vpadd_f32(vget_low_f32(accum
 105:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif    
 106:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 107:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Tail */
 108:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 0x3;
 109:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 110:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 111:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 113:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize >> 2U;
 115:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 116:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* First part of the processing with loop unrolling. Compute 4 outputs at a time.
 117:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 118:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
 119:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 120:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 121:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 122:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 123:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
ARM GAS  /tmp/ccxZs44Y.s 			page 4


 124:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 125:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 126:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 127:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 128:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 129:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 130:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 131:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 132:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 133:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 134:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 135:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 136:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize % 0x4U;
 137:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 138:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 139:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 140:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 141:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize;
  50              		.loc 1 141 10
  51 0014 7B68     		ldr	r3, [r7, #4]
  52 0016 7B61     		str	r3, [r7, #20]
 142:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 143:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 144:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 145:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 146:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
  53              		.loc 1 146 9
  54 0018 14E0     		b	.L2
  55              	.L3:
 147:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 148:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 149:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 150:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 151:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  56              		.loc 1 151 19
  57 001a FB68     		ldr	r3, [r7, #12]
  58 001c 1A1D     		adds	r2, r3, #4
  59 001e FA60     		str	r2, [r7, #12]
  60              		.loc 1 151 13
  61 0020 93ED007A 		vldr.32	s14, [r3]
  62              		.loc 1 151 32
  63 0024 BB68     		ldr	r3, [r7, #8]
  64 0026 1A1D     		adds	r2, r3, #4
  65 0028 BA60     		str	r2, [r7, #8]
  66              		.loc 1 151 26
  67 002a D3ED007A 		vldr.32	s15, [r3]
  68              		.loc 1 151 23
  69 002e 67EE277A 		vmul.f32	s15, s14, s15
  70              		.loc 1 151 9
  71 0032 97ED047A 		vldr.32	s14, [r7, #16]
  72 0036 77EE277A 		vadd.f32	s15, s14, s15
  73 003a C7ED047A 		vstr.32	s15, [r7, #16]
 152:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 153:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 154:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
  74              		.loc 1 154 11
  75 003e 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccxZs44Y.s 			page 5


  76 0040 013B     		subs	r3, r3, #1
  77 0042 7B61     		str	r3, [r7, #20]
  78              	.L2:
 146:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
  79              		.loc 1 146 9
  80 0044 7B69     		ldr	r3, [r7, #20]
  81 0046 002B     		cmp	r3, #0
  82 0048 E7D1     		bne	.L3
 155:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 156:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 157:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Store result in destination buffer */
 158:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   *result = sum;
  83              		.loc 1 158 11
  84 004a 3B68     		ldr	r3, [r7]
  85 004c 3A69     		ldr	r2, [r7, #16]	@ float
  86 004e 1A60     		str	r2, [r3]	@ float
 159:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** }
  87              		.loc 1 159 1
  88 0050 00BF     		nop
  89 0052 1C37     		adds	r7, r7, #28
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 4
  92 0054 BD46     		mov	sp, r7
  93              	.LCFI4:
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 0056 5DF8047B 		ldr	r7, [sp], #4
  97              	.LCFI5:
  98              		.cfi_restore 7
  99              		.cfi_def_cfa_offset 0
 100 005a 7047     		bx	lr
 101              		.cfi_endproc
 102              	.LFE145:
 104              		.text
 105              	.Letext0:
 106              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 107              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 108              		.file 4 "/usr/include/newlib/sys/_types.h"
 109              		.file 5 "/usr/include/newlib/sys/reent.h"
 110              		.file 6 "/usr/include/newlib/sys/lock.h"
 111              		.file 7 "/usr/include/newlib/math.h"
 112              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccxZs44Y.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_dot_prod_f32.c
     /tmp/ccxZs44Y.s:17     .text.arm_dot_prod_f32:0000000000000000 $t
     /tmp/ccxZs44Y.s:25     .text.arm_dot_prod_f32:0000000000000000 arm_dot_prod_f32

NO UNDEFINED SYMBOLS
