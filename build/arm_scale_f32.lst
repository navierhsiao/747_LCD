ARM GAS  /tmp/cci6QhhO.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_scale_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_scale_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_scale_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_scale_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c"
   1:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Title:        arm_scale_f32.c
   4:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Description:  Multiplies a floating-point vector by a scalar
   5:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /**
ARM GAS  /tmp/cci6QhhO.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @ingroup groupMath
  33:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @defgroup BasicScale Vector Scale
  37:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   Multiply a vector by a scalar value.  For floating-point data, the algorithm used is:
  39:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  40:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   <pre>
  41:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****       pDst[n] = pSrc[n] * scale,   0 <= n < blockSize.
  42:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   </pre>
  43:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  44:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   In the fixed-point Q7, Q15, and Q31 functions, <code>scale</code> is represented by
  45:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   a fractional multiplication <code>scaleFract</code> and an arithmetic shift <code>shift</code>.
  46:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   The shift allows the gain of the scaling operation to exceed 1.0.
  47:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   The algorithm used with fixed-point data is:
  48:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  49:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   <pre>
  50:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****       pDst[n] = (pSrc[n] * scaleFract) << shift,   0 <= n < blockSize.
  51:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   </pre>
  52:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  53:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   The overall scale factor applied to the fixed-point data is
  54:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   <pre>
  55:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****       scale = scaleFract * 2^shift.
  56:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   </pre>
  57:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  58:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   The functions support in-place computation allowing the source and destination
  59:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   pointers to reference the same memory buffer.
  60:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  */
  61:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  62:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /**
  63:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @addtogroup BasicScale
  64:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @{
  65:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  */
  66:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  67:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** /**
  68:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @brief         Multiplies a floating-point vector by a scalar.
  69:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @param[in]     pSrc       points to the input vector
  70:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @param[in]     scale      scale factor to be applied
  71:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @param[out]    pDst       points to the output vector
  72:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @param[in]     blockSize  number of samples in each vector
  73:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   @return        none
  74:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****  */
  75:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  76:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** void arm_scale_f32(
  77:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   const float32_t *pSrc,
  78:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         float32_t scale,
  79:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         float32_t *pDst,
  80:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         uint32_t blockSize)
  81:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** {
  28              		.loc 1 81 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
ARM GAS  /tmp/cci6QhhO.s 			page 3


  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 87ED020A 		vstr.32	s0, [r7, #8]
  45 000c 7960     		str	r1, [r7, #4]
  46 000e 3A60     		str	r2, [r7]
  82:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   uint32_t blkCnt;                               /* Loop counter */
  83:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #if defined(ARM_MATH_NEON_EXPERIMENTAL)
  84:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     float32x4_t vec1;
  85:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     float32x4_t res;
  86:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  87:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Compute 4 outputs at a time */
  88:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize >> 2U;
  89:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  90:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     while (blkCnt > 0U)
  91:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     {
  92:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         /* C = A * scale */
  93:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  94:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     	/* Scale the input and then store the results in the destination buffer. */
  95:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         vec1 = vld1q_f32(pSrc);
  96:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         res = vmulq_f32(vec1, vdupq_n_f32(scale));
  97:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         vst1q_f32(pDst, res);
  98:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
  99:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         /* Increment pointers */
 100:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         pSrc += 4; 
 101:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         pDst += 4;
 102:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         
 103:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         /* Decrement the loop counter */
 104:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****         blkCnt--;
 105:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     }
 106:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 107:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Tail */
 108:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     blkCnt = blockSize & 0x3;
 109:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 110:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #else
 111:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 112:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 113:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 114:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize >> 2U;
 115:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 116:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0U)
 117:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   {
 118:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
 119:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 120:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Scale input and store result in destination buffer. */
 121:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 122:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 123:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 124:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 125:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 126:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
ARM GAS  /tmp/cci6QhhO.s 			page 4


 127:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 128:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 129:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Decrement loop counter */
 130:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
 131:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   }
 132:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 133:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 134:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize % 0x4U;
 135:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 136:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #else
 137:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 138:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   /* Initialize blkCnt with number of samples */
 139:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize;
  47              		.loc 1 139 10
  48 0010 3B68     		ldr	r3, [r7]
  49 0012 7B61     		str	r3, [r7, #20]
 140:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 141:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 142:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** #endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */
 143:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 144:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0U)
  50              		.loc 1 144 9
  51 0014 10E0     		b	.L2
  52              	.L3:
 145:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   {
 146:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
 147:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 148:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Scale input and store result in destination buffer. */
 149:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
  53              		.loc 1 149 21
  54 0016 FB68     		ldr	r3, [r7, #12]
  55 0018 1A1D     		adds	r2, r3, #4
  56 001a FA60     		str	r2, [r7, #12]
  57              		.loc 1 149 16
  58 001c 93ED007A 		vldr.32	s14, [r3]
  59              		.loc 1 149 10
  60 0020 7B68     		ldr	r3, [r7, #4]
  61 0022 1A1D     		adds	r2, r3, #4
  62 0024 7A60     		str	r2, [r7, #4]
  63              		.loc 1 149 25
  64 0026 D7ED027A 		vldr.32	s15, [r7, #8]
  65 002a 67EE277A 		vmul.f32	s15, s14, s15
  66              		.loc 1 149 13
  67 002e C3ED007A 		vstr.32	s15, [r3]
 150:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 151:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     /* Decrement loop counter */
 152:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
  68              		.loc 1 152 11
  69 0032 7B69     		ldr	r3, [r7, #20]
  70 0034 013B     		subs	r3, r3, #1
  71 0036 7B61     		str	r3, [r7, #20]
  72              	.L2:
 144:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   {
  73              		.loc 1 144 9
  74 0038 7B69     		ldr	r3, [r7, #20]
  75 003a 002B     		cmp	r3, #0
  76 003c EBD1     		bne	.L3
ARM GAS  /tmp/cci6QhhO.s 			page 5


 153:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c ****   }
 154:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** 
 155:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_scale_f32.c **** }
  77              		.loc 1 155 1
  78 003e 00BF     		nop
  79 0040 00BF     		nop
  80 0042 1C37     		adds	r7, r7, #28
  81              	.LCFI3:
  82              		.cfi_def_cfa_offset 4
  83 0044 BD46     		mov	sp, r7
  84              	.LCFI4:
  85              		.cfi_def_cfa_register 13
  86              		@ sp needed
  87 0046 5DF8047B 		ldr	r7, [sp], #4
  88              	.LCFI5:
  89              		.cfi_restore 7
  90              		.cfi_def_cfa_offset 0
  91 004a 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE145:
  95              		.text
  96              	.Letext0:
  97              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
  98              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
  99              		.file 4 "/usr/include/newlib/sys/_types.h"
 100              		.file 5 "/usr/include/newlib/sys/reent.h"
 101              		.file 6 "/usr/include/newlib/sys/lock.h"
 102              		.file 7 "/usr/include/newlib/math.h"
 103              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/cci6QhhO.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_scale_f32.c
     /tmp/cci6QhhO.s:17     .text.arm_scale_f32:0000000000000000 $t
     /tmp/cci6QhhO.s:25     .text.arm_scale_f32:0000000000000000 arm_scale_f32

NO UNDEFINED SYMBOLS
