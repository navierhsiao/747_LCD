ARM GAS  /tmp/cc4Ujozz.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_inverse_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_inverse_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_inverse_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_inverse_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Title:        arm_mat_inverse_f32.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Description:  Floating-point matrix inverse
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /**
ARM GAS  /tmp/cc4Ujozz.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @defgroup MatrixInv Matrix Inverse
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   Computes the inverse of a matrix.
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   The inverse is defined only if the input matrix is square and non-singular (the determinant is no
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   The function checks that the input and output matrices are square and of the same size.
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   Matrix inversion is numerically sensitive and the CMSIS DSP library only supports matrix
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   inversion of floating-point matrices.
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @par Algorithm
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   The Gauss-Jordan method is used to find the inverse.
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   The algorithm performs a sequence of elementary row-operations until it
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   reduces the input matrix to an identity matrix. Applying the same sequence
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   of elementary row-operations to an identity matrix yields the inverse matrix.
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   If the input matrix is singular, then the algorithm terminates and returns error status
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   <code>ARM_MATH_SINGULAR</code>.
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   \image html MatrixInverse.gif "Matrix Inverse of a 3 x 3 matrix using Gauss-Jordan Method"
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  */
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /**
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @addtogroup MatrixInv
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @{
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  */
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** /**
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @brief         Floating-point matrix inverse.
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @param[in]     pSrc      points to input matrix structure
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @param[out]    pDst      points to output matrix structure
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   @return        execution status
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                    - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invert
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****  */
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #if defined(ARM_MATH_NEON)
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** arm_status arm_mat_inverse_f32(
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   const arm_matrix_instance_f32 * pSrc,
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   arm_matrix_instance_f32 * pDst)
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** {
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t maxC;                                /* maximum value in the column */
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   arm_status status;                             /* status of matrix inverse */
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32x4_t vec1;
ARM GAS  /tmp/cc4Ujozz.s 			page 3


  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32x4_t vec2;
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32x4_t tmpV;
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   /* Check for matrix mismatch condition */
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   if ((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      || (pSrc->numRows != pDst->numRows))
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   }
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   else
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    /*----------------------------------------------------------------------------------------------
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    * Matrix Inverse can be solved using elementary row operations.
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *  Gauss-Jordan Method:
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *     1. First combine the identity matrix and the input matrix separated by a bar to form an
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *        augmented matrix as follows:
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *              _                  _         _         _
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *             |  a11  a12 | 1   0  |       |  X11 X12  |
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *             |           |        |   =   |           |
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *             |_ a21  a22 | 0   1 _|       |_ X21 X21 _|
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *    2. In our implementation, pDst Matrix is used as identity matrix.
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *    3. Begin with the first row. Let i = 1.
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *      4. Check to see if the pivot for column i is the greatest of the column.
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       The pivot is the element of the main diagonal that is on the current row.
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       For instance, if working with row i, then the pivot element is aii.
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       If the pivot is not the most significant of the columns, exchange that row with a row
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       below it that does contain the most significant value in column i. If the most
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *         significant value of the column is zero, then an inverse to that matrix does not exist
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       The most significant value of the column is the absolute maximum.
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *      5. Divide every element of row i by the pivot.
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *      6. For every row below and  row i, replace that row with the sum of that row and
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       a multiple of row i so that each new element in column i below row i is zero.
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       for every element below and above the main diagonal.
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *    8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *       Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****    *-----------------------------------------------------------------------------------------------
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Working pointer for destination matrix */
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     pOutT1 = pOut;
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of rows */
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     rowCnt = numRows;
ARM GAS  /tmp/cc4Ujozz.s 			page 4


 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Making the destination matrix as identity matrix */
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (rowCnt > 0U)
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numRows - rowCnt;
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all ones in the diagonal of the destination matrix */
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       *pOutT1++ = 1.0f;
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = rowCnt - 1U;
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement the loop counter */
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       rowCnt--;
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of columns of the input matrix.
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        All the elements in each column are processed by the row operations */
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     loopCnt = numCols;
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Index modifier to navigate through the columns */
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     l = 0U;
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (loopCnt > 0U)
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is zero..
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If it is zero then interchange the row with non zero row below.
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If there is no non zero element to replace in the rows below,
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * then the matrix is Singular. */
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the input matrix that points
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn + (l * numCols);
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the destination matrix that points
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pOutT1 = pOut + (l * numCols);
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary variable to hold the pivot value */
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *pInT1;
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Grab the most significant value from column l */
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       maxC = 0;
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = l; i < numRows; i++)
ARM GAS  /tmp/cc4Ujozz.s 			page 5


 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 += numCols;
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Update the status if the matrix is singular */
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if (maxC == 0.0f)
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         return ARM_MATH_SINGULAR;
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Restore pInT1 */
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn;
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Destination pointer modifier */
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       k = 1U;
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is the most significant of the column */
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if ( (in > 0.0f ? in : -in) != maxC)
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Loop over the number rows present below */
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         i = numRows - (l + 1U);
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         while (i > 0U)
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the input and destination pointers */
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT2 = pInT1 + (numCols * l);
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pOutT2 = pOutT1 + (numCols * k);
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Look for the most significant element to
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****            * replace in the rows below */
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Loop over number of columns
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              * to the right of the pilot element */
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j = numCols - l;
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             while (j > 0U)
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Exchange the row elements of the input matrix */
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pInT2;
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT2++ = *pInT1;
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT1++ = Xchg;
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Decrement the loop counter */
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               j--;
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Loop over number of columns of the destination matrix */
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j = numCols;
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             while (j > 0U)
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Exchange the row elements of the destination matrix */
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pOutT2;
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT2++ = *pOutT1;
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT1++ = Xchg;
ARM GAS  /tmp/cc4Ujozz.s 			page 6


 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Decrement the loop counter */
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               j--;
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Flag to indicate whether exchange is done or not */
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             flag = 1U;
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Break after exchange is done */
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             break;
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the destination pointer modifier */
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           k++;
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Decrement the loop counter */
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           i--;
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Update the status if the matrix is singular */
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if ((flag != 1U) && (in == 0.0f))
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         return ARM_MATH_SINGULAR;
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Points to the pivot row of input and destination matrices */
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowIn = pIn + (l * numCols);
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowDst = pOut + (l * numCols);
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers to the pivot row pointers */
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pPivotRowIn;
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT2 = pPivotRowDst;
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Pivot element of the row */
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *pPivotRowIn;
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       tmpV = vdupq_n_f32(1.0/in);
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of columns
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the right of the pilot element */
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = (numCols - l) >> 2;
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the input matrix
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vec1 = vld1q_f32(pInT1);
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vec1 = vmulq_f32(vec1, tmpV);
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vst1q_f32(pInT1, vec1);
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 += 4;
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Tail */
ARM GAS  /tmp/cc4Ujozz.s 			page 7


 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = (numCols - l) & 3;
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the input matrix
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         in1 = *pInT1;
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pInT1++ = in1 / in;
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of columns of the destination matrix */
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numCols >> 2;
 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the destination matrix
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vec1 = vld1q_f32(pInT2);
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vec1 = vmulq_f32(vec1, tmpV);
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         vst1q_f32(pInT2, vec1);
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT2 += 4;
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Tail */
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numCols & 3;
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the destination matrix
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         in1 = *pInT2;
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pInT2++ = in1 / in;
 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * so that each new element in column i above row i is zero.*/
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers for input and destination matrices */
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn;
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT2 = pOut;
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* index used to check for pivot element */
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       i = 0U;
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of rows */
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /*  to be replaced by the sum of that row and a multiple of row i */
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       k = numRows;
ARM GAS  /tmp/cc4Ujozz.s 			page 8


 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (k > 0U)
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Check for the pivot element */
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         if (i == l)
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* If the processing element is the pivot element,
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              only the columns to the right are to be processed */
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT1 += numCols - l;
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT2 += numCols;
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         else
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Element of the reference row */
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           in = *pInT1;
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           tmpV = vdupq_n_f32(in);
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Working pointers for input and destination pivot rows */
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_in = pPivotRowIn;
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_pDst = pPivotRowDst;
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to the right of the pivot element,
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              to replace the elements in the input matrix */
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = (numCols - l) >> 2;
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 	  
 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec1 = vld1q_f32(pInT1);
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec2 = vld1q_f32(pPRT_in);
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec1 = vmlsq_f32(vec1, tmpV, vec2);
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vst1q_f32(pInT1, vec1);
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pPRT_in += 4;
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pInT1 += 4;
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement the loop counter */
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 	  /* Tail */
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = (numCols - l) & 3;
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             in1 = *pInT1;
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement the loop counter */
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              replace the elements in the destination matrix */
ARM GAS  /tmp/cc4Ujozz.s 			page 9


 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = numCols >> 2;
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec1 = vld1q_f32(pInT2);
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec2 = vld1q_f32(pPRT_pDst);
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vec1 = vmlsq_f32(vec1, tmpV, vec2);
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             vst1q_f32(pInT2, vec1);
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pPRT_pDst += 4;
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pInT2 += 4;
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement the loop counter */
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 	  /* Tail */
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = numCols & 3;
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             in1 = *pInT2;
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement the loop counter */
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Increment the temporary input pointer */
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 = pInT1 + l;
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         k--;
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Increment the pivot index */
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         i++;
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the input pointer */
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pIn++;
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement the loop counter */
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       loopCnt--;
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 480:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the index modifier */
 481:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       l++;
 482:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 483:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 484:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 485:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     status = ARM_MATH_SUCCESS;
 486:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 487:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     if ((flag != 1U) && (in == 0.0f))
ARM GAS  /tmp/cc4Ujozz.s 			page 10


 488:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 489:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pIn = pSrc->pData;
 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0; i < numRows * numCols; i++)
 491:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 492:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         if (pIn[i] != 0.0f)
 493:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             break;
 494:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 495:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 496:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if (i == numRows * numCols)
 497:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         status = ARM_MATH_SINGULAR;
 498:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 499:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   }
 500:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   /* Return to application */
 501:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   return (status);
 502:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** }
 503:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #else
 504:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** arm_status arm_mat_inverse_f32(
 505:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   const arm_matrix_instance_f32 * pSrc,
 506:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         arm_matrix_instance_f32 * pDst)
 507:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** {
  28              		.loc 1 507 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 104
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 9BB0     		sub	sp, sp, #108
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 112
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
 508:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  45              		.loc 1 508 14
  46 000a 7B68     		ldr	r3, [r7, #4]
  47 000c 5B68     		ldr	r3, [r3, #4]
  48 000e 7B66     		str	r3, [r7, #100]
 509:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  49              		.loc 1 509 14
  50 0010 3B68     		ldr	r3, [r7]
  51 0012 5B68     		ldr	r3, [r3, #4]
  52 0014 3B62     		str	r3, [r7, #32]
 510:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
 511:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
 512:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
 513:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
  53              		.loc 1 513 26
  54 0016 7B68     		ldr	r3, [r7, #4]
  55 0018 1B88     		ldrh	r3, [r3]
  56              		.loc 1 513 12
  57 001a FB61     		str	r3, [r7, #28]
 514:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
ARM GAS  /tmp/cc4Ujozz.s 			page 11


  58              		.loc 1 514 26
  59 001c 7B68     		ldr	r3, [r7, #4]
  60 001e 5B88     		ldrh	r3, [r3, #2]
  61              		.loc 1 514 12
  62 0020 BB61     		str	r3, [r7, #24]
 515:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 516:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #if defined (ARM_MATH_DSP)
 517:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t maxC;                                /* maximum value in the column */
 518:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 519:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
  63              		.loc 1 519 19
  64 0022 4FF00003 		mov	r3, #0
  65 0026 7B64     		str	r3, [r7, #68]	@ float
 520:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
  66              		.loc 1 520 23
  67 0028 0023     		movs	r3, #0
  68 002a BB63     		str	r3, [r7, #56]
 521:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   arm_status status;                             /* status of matrix inverse */
 522:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 523:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 524:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 525:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   /* Check for matrix mismatch condition */
 526:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   if ((pSrc->numRows != pSrc->numCols) ||
 527:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       (pDst->numRows != pDst->numCols) ||
 528:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       (pSrc->numRows != pDst->numRows)   )
 529:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
 530:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 531:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 532:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   }
 533:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   else
 534:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 535:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 536:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 537:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
 538:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 539:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /*---------------------------------------------------------------------------------------------
 540:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      * Matrix Inverse can be solved using elementary row operations.
 541:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 542:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *  Gauss-Jordan Method:
 543:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 544:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
 545:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *        augmented matrix as follows:
 546:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                      _                  _         _         _
 547:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |  a11  a12 | 1   0  |       |  X11 X12  |
 548:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |           |        |   =   |           |
 549:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |_ a21  a22 | 0   1 _|       |_ X21 X21 _|
 550:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 551:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
 552:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 553:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      3. Begin with the first row. Let i = 1.
 554:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 555:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      4. Check to see if the pivot for column i is the greatest of the column.
 556:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         The pivot is the element of the main diagonal that is on the current row.
 557:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         For instance, if working with row i, then the pivot element is aii.
 558:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         If the pivot is not the most significant of the columns, exchange that row with a ro
 559:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         below it that does contain the most significant value in column i. If the most
 560:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         significant value of the column is zero, then an inverse to that matrix does not exi
ARM GAS  /tmp/cc4Ujozz.s 			page 12


 561:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         The most significant value of the column is the absolute maximum.
 562:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 563:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      5. Divide every element of row i by the pivot.
 564:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 565:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 566:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 567:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 568:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 569:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         for every element below and above the main diagonal.
 570:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 571:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
 572:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
 573:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *---------------------------------------------------------------------------------------------
 574:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 575:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Working pointer for destination matrix */
 576:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     pOutT1 = pOut;
  69              		.loc 1 576 12
  70 002c 3B6A     		ldr	r3, [r7, #32]
  71 002e BB65     		str	r3, [r7, #88]
 577:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 578:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of rows */
 579:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     rowCnt = numRows;
  72              		.loc 1 579 12
  73 0030 FB69     		ldr	r3, [r7, #28]
  74 0032 FB63     		str	r3, [r7, #60]
 580:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 581:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Making the destination matrix as identity matrix */
 582:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (rowCnt > 0U)
  75              		.loc 1 582 11
  76 0034 29E0     		b	.L2
  77              	.L7:
 583:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 584:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 585:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numRows - rowCnt;
  78              		.loc 1 585 9
  79 0036 FA69     		ldr	r2, [r7, #28]
  80 0038 FB6B     		ldr	r3, [r7, #60]
  81 003a D31A     		subs	r3, r2, r3
  82 003c 7B63     		str	r3, [r7, #52]
 586:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
  83              		.loc 1 586 13
  84 003e 08E0     		b	.L3
  85              	.L4:
 587:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 588:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
  86              		.loc 1 588 16
  87 0040 BB6D     		ldr	r3, [r7, #88]
  88 0042 1A1D     		adds	r2, r3, #4
  89 0044 BA65     		str	r2, [r7, #88]
  90              		.loc 1 588 19
  91 0046 4FF00002 		mov	r2, #0
  92 004a 1A60     		str	r2, [r3]	@ float
 589:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
  93              		.loc 1 589 10
  94 004c 7B6B     		ldr	r3, [r7, #52]
  95 004e 013B     		subs	r3, r3, #1
  96 0050 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/cc4Ujozz.s 			page 13


  97              	.L3:
 586:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
  98              		.loc 1 586 13
  99 0052 7B6B     		ldr	r3, [r7, #52]
 100 0054 002B     		cmp	r3, #0
 101 0056 F3D1     		bne	.L4
 590:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 591:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 592:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all ones in the diagonal of the destination matrix */
 593:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       *pOutT1++ = 1.0f;
 102              		.loc 1 593 14
 103 0058 BB6D     		ldr	r3, [r7, #88]
 104 005a 1A1D     		adds	r2, r3, #4
 105 005c BA65     		str	r2, [r7, #88]
 106              		.loc 1 593 17
 107 005e 4FF07E52 		mov	r2, #1065353216
 108 0062 1A60     		str	r2, [r3]	@ float
 594:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 595:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 596:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = rowCnt - 1U;
 109              		.loc 1 596 9
 110 0064 FB6B     		ldr	r3, [r7, #60]
 111 0066 013B     		subs	r3, r3, #1
 112 0068 7B63     		str	r3, [r7, #52]
 597:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 113              		.loc 1 597 13
 114 006a 08E0     		b	.L5
 115              	.L6:
 598:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 599:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
 116              		.loc 1 599 16
 117 006c BB6D     		ldr	r3, [r7, #88]
 118 006e 1A1D     		adds	r2, r3, #4
 119 0070 BA65     		str	r2, [r7, #88]
 120              		.loc 1 599 19
 121 0072 4FF00002 		mov	r2, #0
 122 0076 1A60     		str	r2, [r3]	@ float
 600:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 123              		.loc 1 600 10
 124 0078 7B6B     		ldr	r3, [r7, #52]
 125 007a 013B     		subs	r3, r3, #1
 126 007c 7B63     		str	r3, [r7, #52]
 127              	.L5:
 597:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 128              		.loc 1 597 13
 129 007e 7B6B     		ldr	r3, [r7, #52]
 130 0080 002B     		cmp	r3, #0
 131 0082 F3D1     		bne	.L6
 601:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 602:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 603:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement loop counter */
 604:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       rowCnt--;
 132              		.loc 1 604 13
 133 0084 FB6B     		ldr	r3, [r7, #60]
 134 0086 013B     		subs	r3, r3, #1
 135 0088 FB63     		str	r3, [r7, #60]
 136              	.L2:
ARM GAS  /tmp/cc4Ujozz.s 			page 14


 582:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 137              		.loc 1 582 11
 138 008a FB6B     		ldr	r3, [r7, #60]
 139 008c 002B     		cmp	r3, #0
 140 008e D2D1     		bne	.L7
 605:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 606:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 607:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of columns of the input matrix.
 608:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        All the elements in each column are processed by the row operations */
 609:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     loopCnt = numCols;
 141              		.loc 1 609 13
 142 0090 BB69     		ldr	r3, [r7, #24]
 143 0092 3B63     		str	r3, [r7, #48]
 610:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 611:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Index modifier to navigate through the columns */
 612:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     l = 0U;
 144              		.loc 1 612 7
 145 0094 0023     		movs	r3, #0
 146 0096 BB62     		str	r3, [r7, #40]
 613:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 614:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (loopCnt > 0U)
 147              		.loc 1 614 11
 148 0098 AAE1     		b	.L8
 149              	.L49:
 615:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 616:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is zero..
 617:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If it is zero then interchange the row with non zero row below.
 618:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If there is no non zero element to replace in the rows below,
 619:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * then the matrix is Singular. */
 620:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 621:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the input matrix that points
 622:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 623:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn + (l * numCols);
 150              		.loc 1 623 24
 151 009a BB6A     		ldr	r3, [r7, #40]
 152 009c BA69     		ldr	r2, [r7, #24]
 153 009e 02FB03F3 		mul	r3, r2, r3
 154              		.loc 1 623 19
 155 00a2 9B00     		lsls	r3, r3, #2
 156              		.loc 1 623 13
 157 00a4 7A6E     		ldr	r2, [r7, #100]
 158 00a6 1344     		add	r3, r3, r2
 159 00a8 3B66     		str	r3, [r7, #96]
 624:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 625:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the destination matrix that points
 626:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 627:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pOutT1 = pOut + (l * numCols);
 160              		.loc 1 627 26
 161 00aa BB6A     		ldr	r3, [r7, #40]
 162 00ac BA69     		ldr	r2, [r7, #24]
 163 00ae 02FB03F3 		mul	r3, r2, r3
 164              		.loc 1 627 21
 165 00b2 9B00     		lsls	r3, r3, #2
 166              		.loc 1 627 14
 167 00b4 3A6A     		ldr	r2, [r7, #32]
 168 00b6 1344     		add	r3, r3, r2
 169 00b8 BB65     		str	r3, [r7, #88]
ARM GAS  /tmp/cc4Ujozz.s 			page 15


 628:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 629:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary variable to hold the pivot value */
 630:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *pInT1;
 170              		.loc 1 630 10
 171 00ba 3B6E     		ldr	r3, [r7, #96]
 172 00bc 1B68     		ldr	r3, [r3]	@ float
 173 00be 7B64     		str	r3, [r7, #68]	@ float
 631:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 632:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Grab the most significant value from column l */
 633:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       maxC = 0;
 174              		.loc 1 633 12
 175 00c0 4FF00003 		mov	r3, #0
 176 00c4 BB64     		str	r3, [r7, #72]	@ float
 634:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = l; i < numRows; i++)
 177              		.loc 1 634 14
 178 00c6 BB6A     		ldr	r3, [r7, #40]
 179 00c8 3B64     		str	r3, [r7, #64]
 180              		.loc 1 634 7
 181 00ca 36E0     		b	.L9
 182              	.L19:
 635:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 636:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 183              		.loc 1 636 16
 184 00cc 3B6E     		ldr	r3, [r7, #96]
 185 00ce D3ED007A 		vldr.32	s15, [r3]
 186              		.loc 1 636 61
 187 00d2 F5EEC07A 		vcmpe.f32	s15, #0
 188 00d6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 189 00da 10DD     		ble	.L60
 190              		.loc 1 636 30 discriminator 1
 191 00dc 3B6E     		ldr	r3, [r7, #96]
 192 00de D3ED007A 		vldr.32	s15, [r3]
 193              		.loc 1 636 53 discriminator 1
 194 00e2 97ED127A 		vldr.32	s14, [r7, #72]
 195 00e6 B4EEE77A 		vcmpe.f32	s14, s15
 196 00ea F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 197 00ee 03D5     		bpl	.L61
 198              		.loc 1 636 53 is_stmt 0 discriminator 3
 199 00f0 3B6E     		ldr	r3, [r7, #96]
 200 00f2 D3ED007A 		vldr.32	s15, [r3]
 201 00f6 16E0     		b	.L15
 202              	.L61:
 203              		.loc 1 636 53 discriminator 4
 204 00f8 D7ED127A 		vldr.32	s15, [r7, #72]
 205 00fc 13E0     		b	.L15
 206              	.L60:
 207              		.loc 1 636 65 is_stmt 1 discriminator 2
 208 00fe 3B6E     		ldr	r3, [r7, #96]
 209 0100 D3ED007A 		vldr.32	s15, [r3]
 210              		.loc 1 636 64 discriminator 2
 211 0104 F1EE677A 		vneg.f32	s15, s15
 212              		.loc 1 636 89 discriminator 2
 213 0108 97ED127A 		vldr.32	s14, [r7, #72]
 214 010c B4EEE77A 		vcmpe.f32	s14, s15
 215 0110 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 216 0114 05D5     		bpl	.L62
 217              		.loc 1 636 82 discriminator 8
ARM GAS  /tmp/cc4Ujozz.s 			page 16


 218 0116 3B6E     		ldr	r3, [r7, #96]
 219 0118 D3ED007A 		vldr.32	s15, [r3]
 220              		.loc 1 636 89 discriminator 8
 221 011c F1EE677A 		vneg.f32	s15, s15
 222 0120 01E0     		b	.L15
 223              	.L62:
 224              		.loc 1 636 89 is_stmt 0 discriminator 9
 225 0122 D7ED127A 		vldr.32	s15, [r7, #72]
 226              	.L15:
 227              		.loc 1 636 14 is_stmt 1 discriminator 12
 228 0126 C7ED127A 		vstr.32	s15, [r7, #72]
 637:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 += numCols;
 229              		.loc 1 637 15 discriminator 12
 230 012a BB69     		ldr	r3, [r7, #24]
 231 012c 9B00     		lsls	r3, r3, #2
 232 012e 3A6E     		ldr	r2, [r7, #96]
 233 0130 1344     		add	r3, r3, r2
 234 0132 3B66     		str	r3, [r7, #96]
 634:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = l; i < numRows; i++)
 235              		.loc 1 634 33 discriminator 12
 236 0134 3B6C     		ldr	r3, [r7, #64]
 237 0136 0133     		adds	r3, r3, #1
 238 0138 3B64     		str	r3, [r7, #64]
 239              	.L9:
 634:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = l; i < numRows; i++)
 240              		.loc 1 634 7 discriminator 2
 241 013a 3A6C     		ldr	r2, [r7, #64]
 242 013c FB69     		ldr	r3, [r7, #28]
 243 013e 9A42     		cmp	r2, r3
 244 0140 C4D3     		bcc	.L19
 638:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 639:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 640:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Update the status if the matrix is singular */
 641:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if (maxC == 0.0f)
 245              		.loc 1 641 10
 246 0142 D7ED127A 		vldr.32	s15, [r7, #72]
 247 0146 F5EE407A 		vcmp.f32	s15, #0
 248 014a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 249 014e 02D1     		bne	.L20
 642:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 643:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         return ARM_MATH_SINGULAR;
 250              		.loc 1 643 16
 251 0150 6FF00403 		mvn	r3, #4
 252 0154 86E1     		b	.L21
 253              	.L20:
 644:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 645:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 646:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Restore pInT1  */
 647:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn;
 254              		.loc 1 647 13
 255 0156 7B6E     		ldr	r3, [r7, #100]
 256 0158 3B66     		str	r3, [r7, #96]
 648:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 649:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Destination pointer modifier */
 650:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       k = 1U;
 257              		.loc 1 650 9
 258 015a 0123     		movs	r3, #1
ARM GAS  /tmp/cc4Ujozz.s 			page 17


 259 015c FB62     		str	r3, [r7, #44]
 651:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 652:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is the most significant of the column */
 653:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if ( (in > 0.0f ? in : -in) != maxC)
 260              		.loc 1 653 28
 261 015e D7ED117A 		vldr.32	s15, [r7, #68]
 262 0162 F5EEC07A 		vcmpe.f32	s15, #0
 263 0166 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 264 016a 02DD     		ble	.L63
 265              		.loc 1 653 28 is_stmt 0 discriminator 1
 266 016c D7ED117A 		vldr.32	s15, [r7, #68]
 267 0170 03E0     		b	.L24
 268              	.L63:
 269              		.loc 1 653 28 discriminator 2
 270 0172 D7ED117A 		vldr.32	s15, [r7, #68]
 271 0176 F1EE677A 		vneg.f32	s15, s15
 272              	.L24:
 273              		.loc 1 653 10 is_stmt 1 discriminator 4
 274 017a 97ED127A 		vldr.32	s14, [r7, #72]
 275 017e F4EE477A 		vcmp.f32	s15, s14
 276 0182 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 277 0186 69D0     		beq	.L25
 654:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 655:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Loop over the number rows present below */
 656:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         i = numRows - (l + 1U);
 278              		.loc 1 656 21
 279 0188 FA69     		ldr	r2, [r7, #28]
 280 018a BB6A     		ldr	r3, [r7, #40]
 281 018c D31A     		subs	r3, r2, r3
 282              		.loc 1 656 11
 283 018e 013B     		subs	r3, r3, #1
 284 0190 3B64     		str	r3, [r7, #64]
 657:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         while (i > 0U)
 285              		.loc 1 658 15
 286 0192 60E0     		b	.L26
 287              	.L35:
 659:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 660:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the input and destination pointers */
 661:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT2 = pInT1 + (numCols * l);
 288              		.loc 1 661 36
 289 0194 BB69     		ldr	r3, [r7, #24]
 290 0196 BA6A     		ldr	r2, [r7, #40]
 291 0198 02FB03F3 		mul	r3, r2, r3
 292              		.loc 1 661 25
 293 019c 9B00     		lsls	r3, r3, #2
 294              		.loc 1 661 17
 295 019e 3A6E     		ldr	r2, [r7, #96]
 296 01a0 1344     		add	r3, r3, r2
 297 01a2 FB65     		str	r3, [r7, #92]
 662:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pOutT2 = pOutT1 + (numCols * k);
 298              		.loc 1 662 38
 299 01a4 BB69     		ldr	r3, [r7, #24]
 300 01a6 FA6A     		ldr	r2, [r7, #44]
 301 01a8 02FB03F3 		mul	r3, r2, r3
 302              		.loc 1 662 27
 303 01ac 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc4Ujozz.s 			page 18


 304              		.loc 1 662 18
 305 01ae BA6D     		ldr	r2, [r7, #88]
 306 01b0 1344     		add	r3, r3, r2
 307 01b2 7B65     		str	r3, [r7, #84]
 663:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 664:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Look for the most significant element to
 665:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****            * replace in the rows below */
 666:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 308              		.loc 1 666 16
 309 01b4 FB6D     		ldr	r3, [r7, #92]
 310 01b6 D3ED007A 		vldr.32	s15, [r3]
 311              		.loc 1 666 38
 312 01ba F5EEC07A 		vcmpe.f32	s15, #0
 313 01be F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 314 01c2 03DD     		ble	.L64
 315              		.loc 1 666 38 is_stmt 0 discriminator 1
 316 01c4 FB6D     		ldr	r3, [r7, #92]
 317 01c6 D3ED007A 		vldr.32	s15, [r3]
 318 01ca 04E0     		b	.L29
 319              	.L64:
 320              		.loc 1 666 41 is_stmt 1 discriminator 2
 321 01cc FB6D     		ldr	r3, [r7, #92]
 322 01ce D3ED007A 		vldr.32	s15, [r3]
 323              		.loc 1 666 38 discriminator 2
 324 01d2 F1EE677A 		vneg.f32	s15, s15
 325              	.L29:
 326              		.loc 1 666 14 discriminator 4
 327 01d6 97ED127A 		vldr.32	s14, [r7, #72]
 328 01da F4EE477A 		vcmp.f32	s15, s14
 329 01de F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 330 01e2 32D1     		bne	.L30
 667:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 668:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Loop over number of columns
 669:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              * to the right of the pilot element */
 670:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j = numCols - l;
 331              		.loc 1 670 15
 332 01e4 BA69     		ldr	r2, [r7, #24]
 333 01e6 BB6A     		ldr	r3, [r7, #40]
 334 01e8 D31A     		subs	r3, r2, r3
 335 01ea 7B63     		str	r3, [r7, #52]
 671:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 672:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             while (j > 0U)
 336              		.loc 1 672 19
 337 01ec 10E0     		b	.L31
 338              	.L32:
 673:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 674:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Exchange the row elements of the input matrix */
 675:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pInT2;
 339              		.loc 1 675 20
 340 01ee FB6D     		ldr	r3, [r7, #92]
 341 01f0 1B68     		ldr	r3, [r3]	@ float
 342 01f2 7B61     		str	r3, [r7, #20]	@ float
 676:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT2++ = *pInT1;
 343              		.loc 1 676 21
 344 01f4 FB6D     		ldr	r3, [r7, #92]
 345 01f6 1A1D     		adds	r2, r3, #4
 346 01f8 FA65     		str	r2, [r7, #92]
ARM GAS  /tmp/cc4Ujozz.s 			page 19


 347              		.loc 1 676 26
 348 01fa 3A6E     		ldr	r2, [r7, #96]
 349 01fc 1268     		ldr	r2, [r2]	@ float
 350              		.loc 1 676 24
 351 01fe 1A60     		str	r2, [r3]	@ float
 677:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT1++ = Xchg;
 352              		.loc 1 677 21
 353 0200 3B6E     		ldr	r3, [r7, #96]
 354 0202 1A1D     		adds	r2, r3, #4
 355 0204 3A66     		str	r2, [r7, #96]
 356              		.loc 1 677 24
 357 0206 7A69     		ldr	r2, [r7, #20]	@ float
 358 0208 1A60     		str	r2, [r3]	@ float
 678:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 679:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Decrement the loop counter */
 680:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               j--;
 359              		.loc 1 680 16
 360 020a 7B6B     		ldr	r3, [r7, #52]
 361 020c 013B     		subs	r3, r3, #1
 362 020e 7B63     		str	r3, [r7, #52]
 363              	.L31:
 672:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 364              		.loc 1 672 19
 365 0210 7B6B     		ldr	r3, [r7, #52]
 366 0212 002B     		cmp	r3, #0
 367 0214 EBD1     		bne	.L32
 681:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 682:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 683:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Loop over number of columns of the destination matrix */
 684:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j = numCols;
 368              		.loc 1 684 15
 369 0216 BB69     		ldr	r3, [r7, #24]
 370 0218 7B63     		str	r3, [r7, #52]
 685:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 686:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             while (j > 0U)
 371              		.loc 1 686 19
 372 021a 10E0     		b	.L33
 373              	.L34:
 687:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 688:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Exchange the row elements of the destination matrix */
 689:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pOutT2;
 374              		.loc 1 689 20
 375 021c 7B6D     		ldr	r3, [r7, #84]
 376 021e 1B68     		ldr	r3, [r3]	@ float
 377 0220 7B61     		str	r3, [r7, #20]	@ float
 690:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT2++ = *pOutT1;
 378              		.loc 1 690 22
 379 0222 7B6D     		ldr	r3, [r7, #84]
 380 0224 1A1D     		adds	r2, r3, #4
 381 0226 7A65     		str	r2, [r7, #84]
 382              		.loc 1 690 27
 383 0228 BA6D     		ldr	r2, [r7, #88]
 384 022a 1268     		ldr	r2, [r2]	@ float
 385              		.loc 1 690 25
 386 022c 1A60     		str	r2, [r3]	@ float
 691:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT1++ = Xchg;
 387              		.loc 1 691 22
ARM GAS  /tmp/cc4Ujozz.s 			page 20


 388 022e BB6D     		ldr	r3, [r7, #88]
 389 0230 1A1D     		adds	r2, r3, #4
 390 0232 BA65     		str	r2, [r7, #88]
 391              		.loc 1 691 25
 392 0234 7A69     		ldr	r2, [r7, #20]	@ float
 393 0236 1A60     		str	r2, [r3]	@ float
 692:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 693:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Decrement loop counter */
 694:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               j--;
 394              		.loc 1 694 16
 395 0238 7B6B     		ldr	r3, [r7, #52]
 396 023a 013B     		subs	r3, r3, #1
 397 023c 7B63     		str	r3, [r7, #52]
 398              	.L33:
 686:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 399              		.loc 1 686 19
 400 023e 7B6B     		ldr	r3, [r7, #52]
 401 0240 002B     		cmp	r3, #0
 402 0242 EBD1     		bne	.L34
 695:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 696:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 697:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Flag to indicate whether exchange is done or not */
 698:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             flag = 1U;
 403              		.loc 1 698 18
 404 0244 0123     		movs	r3, #1
 405 0246 BB63     		str	r3, [r7, #56]
 699:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 700:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Break after exchange is done */
 701:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             break;
 406              		.loc 1 701 13
 407 0248 08E0     		b	.L25
 408              	.L30:
 702:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 703:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 704:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the destination pointer modifier */
 705:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           k++;
 409              		.loc 1 705 12
 410 024a FB6A     		ldr	r3, [r7, #44]
 411 024c 0133     		adds	r3, r3, #1
 412 024e FB62     		str	r3, [r7, #44]
 706:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 707:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Decrement loop counter */
 708:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           i--;
 413              		.loc 1 708 12
 414 0250 3B6C     		ldr	r3, [r7, #64]
 415 0252 013B     		subs	r3, r3, #1
 416 0254 3B64     		str	r3, [r7, #64]
 417              	.L26:
 658:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 418              		.loc 1 658 15
 419 0256 3B6C     		ldr	r3, [r7, #64]
 420 0258 002B     		cmp	r3, #0
 421 025a 9BD1     		bne	.L35
 422              	.L25:
 709:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
 710:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 711:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
ARM GAS  /tmp/cc4Ujozz.s 			page 21


 712:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Update the status if the matrix is singular */
 713:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if ((flag != 1U) && (in == 0.0f))
 423              		.loc 1 713 10
 424 025c BB6B     		ldr	r3, [r7, #56]
 425 025e 012B     		cmp	r3, #1
 426 0260 09D0     		beq	.L36
 427              		.loc 1 713 24 discriminator 1
 428 0262 D7ED117A 		vldr.32	s15, [r7, #68]
 429 0266 F5EE407A 		vcmp.f32	s15, #0
 430 026a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 431 026e 02D1     		bne	.L36
 714:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 715:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         return ARM_MATH_SINGULAR;
 432              		.loc 1 715 16
 433 0270 6FF00403 		mvn	r3, #4
 434 0274 F6E0     		b	.L21
 435              	.L36:
 716:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 717:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 718:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Points to the pivot row of input and destination matrices */
 719:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowIn = pIn + (l * numCols);
 436              		.loc 1 719 30
 437 0276 BB6A     		ldr	r3, [r7, #40]
 438 0278 BA69     		ldr	r2, [r7, #24]
 439 027a 02FB03F3 		mul	r3, r2, r3
 440              		.loc 1 719 25
 441 027e 9B00     		lsls	r3, r3, #2
 442              		.loc 1 719 19
 443 0280 7A6E     		ldr	r2, [r7, #100]
 444 0282 1344     		add	r3, r3, r2
 445 0284 3B61     		str	r3, [r7, #16]
 720:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowDst = pOut + (l * numCols);
 446              		.loc 1 720 32
 447 0286 BB6A     		ldr	r3, [r7, #40]
 448 0288 BA69     		ldr	r2, [r7, #24]
 449 028a 02FB03F3 		mul	r3, r2, r3
 450              		.loc 1 720 27
 451 028e 9B00     		lsls	r3, r3, #2
 452              		.loc 1 720 20
 453 0290 3A6A     		ldr	r2, [r7, #32]
 454 0292 1344     		add	r3, r3, r2
 455 0294 FB60     		str	r3, [r7, #12]
 721:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 722:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers to the pivot row pointers */
 723:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pPivotRowIn;
 456              		.loc 1 723 13
 457 0296 3B69     		ldr	r3, [r7, #16]
 458 0298 3B66     		str	r3, [r7, #96]
 724:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT2 = pPivotRowDst;
 459              		.loc 1 724 13
 460 029a FB68     		ldr	r3, [r7, #12]
 461 029c FB65     		str	r3, [r7, #92]
 725:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 726:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Pivot element of the row */
 727:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *pPivotRowIn;
 462              		.loc 1 727 10
 463 029e 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/cc4Ujozz.s 			page 22


 464 02a0 1B68     		ldr	r3, [r3]	@ float
 465 02a2 7B64     		str	r3, [r7, #68]	@ float
 728:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 729:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of columns
 730:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the right of the pilot element */
 731:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = (numCols - l);
 466              		.loc 1 731 9
 467 02a4 BA69     		ldr	r2, [r7, #24]
 468 02a6 BB6A     		ldr	r3, [r7, #40]
 469 02a8 D31A     		subs	r3, r2, r3
 470 02aa 7B63     		str	r3, [r7, #52]
 732:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 733:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 471              		.loc 1 733 13
 472 02ac 10E0     		b	.L37
 473              	.L38:
 734:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 735:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the input matrix
 736:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 737:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         in1 = *pInT1;
 474              		.loc 1 737 13
 475 02ae 3B6E     		ldr	r3, [r7, #96]
 476 02b0 1B68     		ldr	r3, [r3]	@ float
 477 02b2 BB60     		str	r3, [r7, #8]	@ float
 738:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pInT1++ = in1 / in;
 478              		.loc 1 738 15
 479 02b4 3B6E     		ldr	r3, [r7, #96]
 480 02b6 1A1D     		adds	r2, r3, #4
 481 02b8 3A66     		str	r2, [r7, #96]
 482              		.loc 1 738 24
 483 02ba D7ED026A 		vldr.32	s13, [r7, #8]
 484 02be 97ED117A 		vldr.32	s14, [r7, #68]
 485 02c2 C6EE877A 		vdiv.f32	s15, s13, s14
 486              		.loc 1 738 18
 487 02c6 C3ED007A 		vstr.32	s15, [r3]
 739:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 740:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 741:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 488              		.loc 1 741 10
 489 02ca 7B6B     		ldr	r3, [r7, #52]
 490 02cc 013B     		subs	r3, r3, #1
 491 02ce 7B63     		str	r3, [r7, #52]
 492              	.L37:
 733:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 493              		.loc 1 733 13
 494 02d0 7B6B     		ldr	r3, [r7, #52]
 495 02d2 002B     		cmp	r3, #0
 496 02d4 EBD1     		bne	.L38
 742:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 743:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 744:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of columns of the destination matrix */
 745:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numCols;
 497              		.loc 1 745 9
 498 02d6 BB69     		ldr	r3, [r7, #24]
 499 02d8 7B63     		str	r3, [r7, #52]
 746:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 747:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
ARM GAS  /tmp/cc4Ujozz.s 			page 23


 500              		.loc 1 747 13
 501 02da 10E0     		b	.L39
 502              	.L40:
 748:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 749:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the destination matrix
 750:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
 751:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         in1 = *pInT2;
 503              		.loc 1 751 13
 504 02dc FB6D     		ldr	r3, [r7, #92]
 505 02de 1B68     		ldr	r3, [r3]	@ float
 506 02e0 BB60     		str	r3, [r7, #8]	@ float
 752:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pInT2++ = in1 / in;
 507              		.loc 1 752 15
 508 02e2 FB6D     		ldr	r3, [r7, #92]
 509 02e4 1A1D     		adds	r2, r3, #4
 510 02e6 FA65     		str	r2, [r7, #92]
 511              		.loc 1 752 24
 512 02e8 D7ED026A 		vldr.32	s13, [r7, #8]
 513 02ec 97ED117A 		vldr.32	s14, [r7, #68]
 514 02f0 C6EE877A 		vdiv.f32	s15, s13, s14
 515              		.loc 1 752 18
 516 02f4 C3ED007A 		vstr.32	s15, [r3]
 753:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 754:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement the loop counter */
 755:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 517              		.loc 1 755 10
 518 02f8 7B6B     		ldr	r3, [r7, #52]
 519 02fa 013B     		subs	r3, r3, #1
 520 02fc 7B63     		str	r3, [r7, #52]
 521              	.L39:
 747:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 522              		.loc 1 747 13
 523 02fe 7B6B     		ldr	r3, [r7, #52]
 524 0300 002B     		cmp	r3, #0
 525 0302 EBD1     		bne	.L40
 756:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 757:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 758:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 759:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * so that each new element in column i above row i is zero.*/
 760:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 761:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers for input and destination matrices */
 762:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn;
 526              		.loc 1 762 13
 527 0304 7B6E     		ldr	r3, [r7, #100]
 528 0306 3B66     		str	r3, [r7, #96]
 763:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT2 = pOut;
 529              		.loc 1 763 13
 530 0308 3B6A     		ldr	r3, [r7, #32]
 531 030a FB65     		str	r3, [r7, #92]
 764:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 765:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* index used to check for pivot element */
 766:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       i = 0U;
 532              		.loc 1 766 9
 533 030c 0023     		movs	r3, #0
 534 030e 3B64     		str	r3, [r7, #64]
 767:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 768:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of rows */
ARM GAS  /tmp/cc4Ujozz.s 			page 24


 769:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /*  to be replaced by the sum of that row and a multiple of row i */
 770:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       k = numRows;
 535              		.loc 1 770 9
 536 0310 FB69     		ldr	r3, [r7, #28]
 537 0312 FB62     		str	r3, [r7, #44]
 771:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 772:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (k > 0U)
 538              		.loc 1 772 13
 539 0314 60E0     		b	.L41
 540              	.L48:
 773:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 774:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Check for the pivot element */
 775:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         if (i == l)
 541              		.loc 1 775 12
 542 0316 3A6C     		ldr	r2, [r7, #64]
 543 0318 BB6A     		ldr	r3, [r7, #40]
 544 031a 9A42     		cmp	r2, r3
 545 031c 0CD1     		bne	.L42
 776:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 777:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* If the processing element is the pivot element,
 778:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              only the columns to the right are to be processed */
 779:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT1 += numCols - l;
 546              		.loc 1 779 28
 547 031e BA69     		ldr	r2, [r7, #24]
 548 0320 BB6A     		ldr	r3, [r7, #40]
 549 0322 D31A     		subs	r3, r2, r3
 550              		.loc 1 779 17
 551 0324 9B00     		lsls	r3, r3, #2
 552 0326 3A6E     		ldr	r2, [r7, #96]
 553 0328 1344     		add	r3, r3, r2
 554 032a 3B66     		str	r3, [r7, #96]
 780:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 781:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT2 += numCols;
 555              		.loc 1 781 17
 556 032c BB69     		ldr	r3, [r7, #24]
 557 032e 9B00     		lsls	r3, r3, #2
 558 0330 FA6D     		ldr	r2, [r7, #92]
 559 0332 1344     		add	r3, r3, r2
 560 0334 FB65     		str	r3, [r7, #92]
 561 0336 44E0     		b	.L43
 562              	.L42:
 782:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
 783:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         else
 784:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 785:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Element of the reference row */
 786:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           in = *pInT1;
 563              		.loc 1 786 14
 564 0338 3B6E     		ldr	r3, [r7, #96]
 565 033a 1B68     		ldr	r3, [r3]	@ float
 566 033c 7B64     		str	r3, [r7, #68]	@ float
 787:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 788:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Working pointers for input and destination pivot rows */
 789:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_in = pPivotRowIn;
 567              		.loc 1 789 19
 568 033e 3B69     		ldr	r3, [r7, #16]
 569 0340 3B65     		str	r3, [r7, #80]
 790:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_pDst = pPivotRowDst;
ARM GAS  /tmp/cc4Ujozz.s 			page 25


 570              		.loc 1 790 21
 571 0342 FB68     		ldr	r3, [r7, #12]
 572 0344 FB64     		str	r3, [r7, #76]
 791:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 792:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to the right of the pivot element,
 793:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              to replace the elements in the input matrix */
 794:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = (numCols - l);
 573              		.loc 1 794 13
 574 0346 BA69     		ldr	r2, [r7, #24]
 575 0348 BB6A     		ldr	r3, [r7, #40]
 576 034a D31A     		subs	r3, r2, r3
 577 034c 7B63     		str	r3, [r7, #52]
 795:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 796:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 578              		.loc 1 796 17
 579 034e 17E0     		b	.L44
 580              	.L45:
 797:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 798:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 799:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 800:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             in1 = *pInT1;
 581              		.loc 1 800 17
 582 0350 3B6E     		ldr	r3, [r7, #96]
 583 0352 1B68     		ldr	r3, [r3]	@ float
 584 0354 BB60     		str	r3, [r7, #8]	@ float
 801:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 585              		.loc 1 801 44
 586 0356 3B6D     		ldr	r3, [r7, #80]
 587 0358 1A1D     		adds	r2, r3, #4
 588 035a 3A65     		str	r2, [r7, #80]
 589              		.loc 1 801 36
 590 035c 93ED007A 		vldr.32	s14, [r3]
 591              		.loc 1 801 34
 592 0360 D7ED117A 		vldr.32	s15, [r7, #68]
 593 0364 67EE277A 		vmul.f32	s15, s14, s15
 594              		.loc 1 801 19
 595 0368 3B6E     		ldr	r3, [r7, #96]
 596 036a 1A1D     		adds	r2, r3, #4
 597 036c 3A66     		str	r2, [r7, #96]
 598              		.loc 1 801 28
 599 036e 97ED027A 		vldr.32	s14, [r7, #8]
 600 0372 77EE677A 		vsub.f32	s15, s14, s15
 601              		.loc 1 801 22
 602 0376 C3ED007A 		vstr.32	s15, [r3]
 802:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 803:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement the loop counter */
 804:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 603              		.loc 1 804 14
 604 037a 7B6B     		ldr	r3, [r7, #52]
 605 037c 013B     		subs	r3, r3, #1
 606 037e 7B63     		str	r3, [r7, #52]
 607              	.L44:
 796:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 608              		.loc 1 796 17
 609 0380 7B6B     		ldr	r3, [r7, #52]
 610 0382 002B     		cmp	r3, #0
 611 0384 E4D1     		bne	.L45
ARM GAS  /tmp/cc4Ujozz.s 			page 26


 805:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 806:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 807:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to
 808:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              replace the elements in the destination matrix */
 809:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           j = numCols;
 612              		.loc 1 809 13
 613 0386 BB69     		ldr	r3, [r7, #24]
 614 0388 7B63     		str	r3, [r7, #52]
 810:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 811:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           while (j > 0U)
 615              		.loc 1 811 17
 616 038a 17E0     		b	.L46
 617              	.L47:
 812:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 813:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
 814:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
 815:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             in1 = *pInT2;
 618              		.loc 1 815 17
 619 038c FB6D     		ldr	r3, [r7, #92]
 620 038e 1B68     		ldr	r3, [r3]	@ float
 621 0390 BB60     		str	r3, [r7, #8]	@ float
 816:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 622              		.loc 1 816 46
 623 0392 FB6C     		ldr	r3, [r7, #76]
 624 0394 1A1D     		adds	r2, r3, #4
 625 0396 FA64     		str	r2, [r7, #76]
 626              		.loc 1 816 36
 627 0398 93ED007A 		vldr.32	s14, [r3]
 628              		.loc 1 816 34
 629 039c D7ED117A 		vldr.32	s15, [r7, #68]
 630 03a0 67EE277A 		vmul.f32	s15, s14, s15
 631              		.loc 1 816 19
 632 03a4 FB6D     		ldr	r3, [r7, #92]
 633 03a6 1A1D     		adds	r2, r3, #4
 634 03a8 FA65     		str	r2, [r7, #92]
 635              		.loc 1 816 28
 636 03aa 97ED027A 		vldr.32	s14, [r7, #8]
 637 03ae 77EE677A 		vsub.f32	s15, s14, s15
 638              		.loc 1 816 22
 639 03b2 C3ED007A 		vstr.32	s15, [r3]
 817:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 818:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Decrement loop counter */
 819:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             j--;
 640              		.loc 1 819 14
 641 03b6 7B6B     		ldr	r3, [r7, #52]
 642 03b8 013B     		subs	r3, r3, #1
 643 03ba 7B63     		str	r3, [r7, #52]
 644              	.L46:
 811:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 645              		.loc 1 811 17
 646 03bc 7B6B     		ldr	r3, [r7, #52]
 647 03be 002B     		cmp	r3, #0
 648 03c0 E4D1     		bne	.L47
 649              	.L43:
 820:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 821:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 822:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
ARM GAS  /tmp/cc4Ujozz.s 			page 27


 823:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 824:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Increment temporary input pointer */
 825:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 = pInT1 + l;
 650              		.loc 1 825 23
 651 03c2 BB6A     		ldr	r3, [r7, #40]
 652 03c4 9B00     		lsls	r3, r3, #2
 653              		.loc 1 825 15
 654 03c6 3A6E     		ldr	r2, [r7, #96]
 655 03c8 1344     		add	r3, r3, r2
 656 03ca 3B66     		str	r3, [r7, #96]
 826:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 827:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Decrement loop counter */
 828:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         k--;
 657              		.loc 1 828 10
 658 03cc FB6A     		ldr	r3, [r7, #44]
 659 03ce 013B     		subs	r3, r3, #1
 660 03d0 FB62     		str	r3, [r7, #44]
 829:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 830:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Increment pivot index */
 831:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         i++;
 661              		.loc 1 831 10
 662 03d2 3B6C     		ldr	r3, [r7, #64]
 663 03d4 0133     		adds	r3, r3, #1
 664 03d6 3B64     		str	r3, [r7, #64]
 665              	.L41:
 772:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 666              		.loc 1 772 13
 667 03d8 FB6A     		ldr	r3, [r7, #44]
 668 03da 002B     		cmp	r3, #0
 669 03dc 9BD1     		bne	.L48
 832:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 833:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 834:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the input pointer */
 835:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pIn++;
 670              		.loc 1 835 10
 671 03de 7B6E     		ldr	r3, [r7, #100]
 672 03e0 0433     		adds	r3, r3, #4
 673 03e2 7B66     		str	r3, [r7, #100]
 836:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 837:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement the loop counter */
 838:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       loopCnt--;
 674              		.loc 1 838 14
 675 03e4 3B6B     		ldr	r3, [r7, #48]
 676 03e6 013B     		subs	r3, r3, #1
 677 03e8 3B63     		str	r3, [r7, #48]
 839:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 840:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the index modifier */
 841:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       l++;
 678              		.loc 1 841 8
 679 03ea BB6A     		ldr	r3, [r7, #40]
 680 03ec 0133     		adds	r3, r3, #1
 681 03ee BB62     		str	r3, [r7, #40]
 682              	.L8:
 614:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 683              		.loc 1 614 11
 684 03f0 3B6B     		ldr	r3, [r7, #48]
 685 03f2 002B     		cmp	r3, #0
ARM GAS  /tmp/cc4Ujozz.s 			page 28


 686 03f4 7FF451AE 		bne	.L49
 842:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 843:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 844:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 845:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #else
 846:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 847:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   float32_t Xchg, in = 0.0f;                     /* Temporary input values  */
 848:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 849:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   arm_status status;                             /* status of matrix inverse */
 850:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 851:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 852:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 853:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   /* Check for matrix mismatch condition */
 854:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   if ((pSrc->numRows != pSrc->numCols) ||
 855:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       (pDst->numRows != pDst->numCols) ||
 856:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       (pSrc->numRows != pDst->numRows)   )
 857:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
 858:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 859:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 860:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   }
 861:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   else
 862:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 863:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 864:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 865:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   {
 866:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 867:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /*---------------------------------------------------------------------------------------------
 868:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      * Matrix Inverse can be solved using elementary row operations.
 869:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 870:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *  Gauss-Jordan Method:
 871:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 872:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      1. First combine the identity matrix and the input matrix separated by a bar to form an
 873:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *        augmented matrix as follows:
 874:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                      _  _          _     _      _   _         _         _
 875:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |  |  a11  a12  | | | 1   0  |   |       |  X11 X12  |
 876:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |  |            | | |        |   |   =   |           |
 877:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *                     |_ |_ a21  a22 _| | |_0   1 _|  _|       |_ X21 X21 _|
 878:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 879:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      2. In our implementation, pDst Matrix is used as identity matrix.
 880:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 881:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      3. Begin with the first row. Let i = 1.
 882:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 883:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      4. Check to see if the pivot for row i is zero.
 884:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         The pivot is the element of the main diagonal that is on the current row.
 885:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         For instance, if working with row i, then the pivot element is aii.
 886:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         If the pivot is zero, exchange that row with a row below it that does not
 887:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         contain a zero in column i. If this is not possible, then an inverse
 888:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         to that matrix does not exist.
 889:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 890:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      5. Divide every element of row i by the pivot.
 891:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 892:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      6. For every row below and  row i, replace that row with the sum of that row and
 893:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         a multiple of row i so that each new element in column i below row i is zero.
 894:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
 895:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 896:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         for every element below and above the main diagonal.
 897:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *
ARM GAS  /tmp/cc4Ujozz.s 			page 29


 898:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *      8. Now an identical matrix is formed to the left of the bar(input matrix, src).
 899:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *         Therefore, the matrix to the right of the bar is our solution(dst matrix, dst).
 900:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****      *---------------------------------------------------------------------------------------------
 901:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 902:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Working pointer for destination matrix */
 903:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     pOutT1 = pOut;
 904:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 905:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of rows */
 906:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     rowCnt = numRows;
 907:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 908:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Making the destination matrix as identity matrix */
 909:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (rowCnt > 0U)
 910:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 911:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 912:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = numRows - rowCnt;
 913:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 914:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 915:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
 916:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 917:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 918:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 919:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all ones in the diagonal of the destination matrix */
 920:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       *pOutT1++ = 1.0f;
 921:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 922:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 923:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       j = rowCnt - 1U;
 924:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       while (j > 0U)
 925:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 926:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1++ = 0.0f;
 927:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         j--;
 928:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
 929:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 930:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement loop counter */
 931:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       rowCnt--;
 932:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
 933:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 934:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Loop over the number of columns of the input matrix.
 935:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        All the elements in each column are processed by the row operations */
 936:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     loopCnt = numCols;
 937:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 938:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Index modifier to navigate through the columns */
 939:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     l = 0U;
 940:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 941:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     while (loopCnt > 0U)
 942:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
 943:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is zero..
 944:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If it is zero then interchange the row with non zero row below.
 945:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * If there is no non zero element to replace in the rows below,
 946:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * then the matrix is Singular. */
 947:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 948:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the input matrix that points
 949:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 950:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn + (l * numCols);
 951:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 952:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Working pointer for the destination matrix that points
 953:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the pivot element of the particular row  */
 954:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pOutT1 = pOut + (l * numCols);
ARM GAS  /tmp/cc4Ujozz.s 			page 30


 955:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 956:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary variable to hold the pivot value */
 957:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *pInT1;
 958:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 959:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Destination pointer modifier */
 960:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       k = 1U;
 961:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 962:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Check if the pivot element is zero */
 963:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if (*pInT1 == 0.0f)
 964:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
 965:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Loop over the number rows present below */
 966:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         for (i = (l + 1U); i < numRows; i++)
 967:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
 968:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the input and destination pointers */
 969:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT2 = pInT1 + (numCols * l);
 970:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pOutT2 = pOutT1 + (numCols * k);
 971:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 972:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Check if there is a non zero pivot element to
 973:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****            * replace in the rows below */
 974:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           if (*pInT2 != 0.0f)
 975:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
 976:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Loop over number of columns
 977:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              * to the right of the pilot element */
 978:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             for (j = 0U; j < (numCols - l); j++)
 979:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 980:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               /* Exchange the row elements of the input matrix */
 981:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pInT2;
 982:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT2++ = *pInT1;
 983:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pInT1++ = Xchg;
 984:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 985:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 986:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             for (j = 0U; j < numCols; j++)
 987:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             {
 988:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               Xchg = *pOutT2;
 989:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT2++ = *pOutT1;
 990:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****               *pOutT1++ = Xchg;
 991:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             }
 992:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 993:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Flag to indicate whether exchange is done or not */
 994:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             flag = 1U;
 995:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
 996:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Break after exchange is done */
 997:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             break;
 998:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
 999:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1000:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Update the destination pointer modifier */
1001:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           k++;
1002:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
1003:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1004:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1005:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Update the status if the matrix is singular */
1006:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if ((flag != 1U) && (in == 0.0f))
1007:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
1008:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         return ARM_MATH_SINGULAR;
1009:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1010:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1011:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Points to the pivot row of input and destination matrices */
ARM GAS  /tmp/cc4Ujozz.s 			page 31


1012:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowIn = pIn + (l * numCols);
1013:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pPivotRowDst = pOut + (l * numCols);
1014:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1015:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers to the pivot row pointers */
1016:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pPivotRowIn;
1017:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pOutT1 = pPivotRowDst;
1018:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1019:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Pivot element of the row */
1020:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       in = *(pIn + (l * numCols));
1021:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1022:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Loop over number of columns
1023:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * to the right of the pilot element */
1024:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (j = 0U; j < (numCols - l); j++)
1025:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
1026:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the input matrix
1027:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
1028:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pInT1 = *pInT1 / in;
1029:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1++;
1030:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1031:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (j = 0U; j < numCols; j++)
1032:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
1033:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Divide each element of the row of the destination matrix
1034:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****          * by the pivot element */
1035:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         *pOutT1 = *pOutT1 / in;
1036:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pOutT1++;
1037:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1038:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1039:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Replace the rows with the sum of that row and a multiple of row i
1040:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****        * so that each new element in column i above row i is zero.*/
1041:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1042:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Temporary pointers for input and destination matrices */
1043:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pInT1 = pIn;
1044:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pOutT1 = pOut;
1045:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1046:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0U; i < numRows; i++)
1047:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
1048:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Check for the pivot element */
1049:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         if (i == l)
1050:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
1051:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* If the processing element is the pivot element,
1052:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              only the columns to the right are to be processed */
1053:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pInT1 += numCols - l;
1054:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pOutT1 += numCols;
1055:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
1056:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         else
1057:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         {
1058:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Element of the reference row */
1059:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           in = *pInT1;
1060:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1061:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Working pointers for input and destination pivot rows */
1062:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_in = pPivotRowIn;
1063:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           pPRT_pDst = pPivotRowDst;
1064:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1065:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to the right of the pivot element,
1066:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              to replace the elements in the input matrix */
1067:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           for (j = 0U; j < (numCols - l); j++)
1068:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
ARM GAS  /tmp/cc4Ujozz.s 			page 32


1069:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
1070:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
1071:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pInT1 = *pInT1 - (in * *pPRT_in++);
1072:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pInT1++;
1073:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
1074:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1075:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           /* Loop over the number of columns to
1076:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****              replace the elements in the destination matrix */
1077:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           for (j = 0U; j < numCols; j++)
1078:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           {
1079:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             /* Replace the element by the sum of that row
1080:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****                and a multiple of the reference row  */
1081:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
1082:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             pOutT1++;
1083:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****           }
1084:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1085:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         }
1086:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1087:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         /* Increment temporary input pointer */
1088:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         pInT1 = pInT1 + l;
1089:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1090:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1091:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the input pointer */
1092:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pIn++;
1093:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1094:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Decrement the loop counter */
1095:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       loopCnt--;
1096:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1097:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       /* Increment the index modifier */
1098:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       l++;
1099:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
1100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
1102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
1104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     status = ARM_MATH_SUCCESS;
 687              		.loc 1 1104 12
 688 03f8 0023     		movs	r3, #0
 689 03fa 87F82730 		strb	r3, [r7, #39]
1105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     if ((flag != 1U) && (in == 0.0f))
 690              		.loc 1 1106 8
 691 03fe BB6B     		ldr	r3, [r7, #56]
 692 0400 012B     		cmp	r3, #1
 693 0402 2DD0     		beq	.L50
 694              		.loc 1 1106 22 discriminator 1
 695 0404 D7ED117A 		vldr.32	s15, [r7, #68]
 696 0408 F5EE407A 		vcmp.f32	s15, #0
 697 040c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 698 0410 26D1     		bne	.L50
1107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     {
1108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       pIn = pSrc->pData;
 699              		.loc 1 1108 11
 700 0412 7B68     		ldr	r3, [r7, #4]
 701 0414 5B68     		ldr	r3, [r3, #4]
 702 0416 7B66     		str	r3, [r7, #100]
1109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0; i < numRows * numCols; i++)
ARM GAS  /tmp/cc4Ujozz.s 			page 33


 703              		.loc 1 1109 14
 704 0418 0023     		movs	r3, #0
 705 041a 3B64     		str	r3, [r7, #64]
 706              		.loc 1 1109 7
 707 041c 0DE0     		b	.L51
 708              	.L54:
1110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       {
1111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         if (pIn[i] != 0.0f)
 709              		.loc 1 1111 16
 710 041e 3B6C     		ldr	r3, [r7, #64]
 711 0420 9B00     		lsls	r3, r3, #2
 712 0422 7A6E     		ldr	r2, [r7, #100]
 713 0424 1344     		add	r3, r3, r2
 714 0426 D3ED007A 		vldr.32	s15, [r3]
 715              		.loc 1 1111 12
 716 042a F5EE407A 		vcmp.f32	s15, #0
 717 042e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 718 0432 0AD1     		bne	.L65
1109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0; i < numRows * numCols; i++)
 719              		.loc 1 1109 43 discriminator 2
 720 0434 3B6C     		ldr	r3, [r7, #64]
 721 0436 0133     		adds	r3, r3, #1
 722 0438 3B64     		str	r3, [r7, #64]
 723              	.L51:
1109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0; i < numRows * numCols; i++)
 724              		.loc 1 1109 31 discriminator 1
 725 043a FB69     		ldr	r3, [r7, #28]
 726 043c BA69     		ldr	r2, [r7, #24]
 727 043e 02FB03F3 		mul	r3, r2, r3
1109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       for (i = 0; i < numRows * numCols; i++)
 728              		.loc 1 1109 7 discriminator 1
 729 0442 3A6C     		ldr	r2, [r7, #64]
 730 0444 9A42     		cmp	r2, r3
 731 0446 EAD3     		bcc	.L54
 732 0448 00E0     		b	.L53
 733              	.L65:
1112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****             break;
 734              		.loc 1 1112 13
 735 044a 00BF     		nop
 736              	.L53:
1113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       }
1114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****       if (i == numRows * numCols)
 737              		.loc 1 1115 24
 738 044c FB69     		ldr	r3, [r7, #28]
 739 044e BA69     		ldr	r2, [r7, #24]
 740 0450 02FB03F3 		mul	r3, r2, r3
 741              		.loc 1 1115 10
 742 0454 3A6C     		ldr	r2, [r7, #64]
 743 0456 9A42     		cmp	r2, r3
 744 0458 02D1     		bne	.L50
1116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****         status = ARM_MATH_SINGULAR;
 745              		.loc 1 1116 16
 746 045a FB23     		movs	r3, #251
 747 045c 87F82730 		strb	r3, [r7, #39]
 748              	.L50:
1117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****     }
ARM GAS  /tmp/cc4Ujozz.s 			page 34


1118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   }
1119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** 
1120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   /* Return to application */
1121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c ****   return (status);
 749              		.loc 1 1121 10
 750 0460 97F92730 		ldrsb	r3, [r7, #39]
 751              	.L21:
1122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_inverse_f32.c **** }
 752              		.loc 1 1122 1
 753 0464 1846     		mov	r0, r3
 754 0466 6C37     		adds	r7, r7, #108
 755              	.LCFI3:
 756              		.cfi_def_cfa_offset 4
 757 0468 BD46     		mov	sp, r7
 758              	.LCFI4:
 759              		.cfi_def_cfa_register 13
 760              		@ sp needed
 761 046a 5DF8047B 		ldr	r7, [sp], #4
 762              	.LCFI5:
 763              		.cfi_restore 7
 764              		.cfi_def_cfa_offset 0
 765 046e 7047     		bx	lr
 766              		.cfi_endproc
 767              	.LFE145:
 769              		.text
 770              	.Letext0:
 771              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 772              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 773              		.file 4 "/usr/include/newlib/sys/_types.h"
 774              		.file 5 "/usr/include/newlib/sys/reent.h"
 775              		.file 6 "/usr/include/newlib/sys/lock.h"
 776              		.file 7 "/usr/include/newlib/math.h"
 777              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/cc4Ujozz.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_inverse_f32.c
     /tmp/cc4Ujozz.s:17     .text.arm_mat_inverse_f32:0000000000000000 $t
     /tmp/cc4Ujozz.s:25     .text.arm_mat_inverse_f32:0000000000000000 arm_mat_inverse_f32

NO UNDEFINED SYMBOLS
