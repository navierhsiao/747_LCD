ARM GAS  /tmp/ccUMrugT.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_cmplx_mult_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_cmplx_mult_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_cmplx_mult_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_cmplx_mult_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Title:        arm_mat_cmplx_mult_f32.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Description:  Floating-point matrix multiplication
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**
ARM GAS  /tmp/ccUMrugT.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @defgroup CmplxMatrixMult  Complex Matrix Multiplication
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   Complex Matrix multiplication is only defined if the number of columns of the
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   first matrix equals the number of rows of the second matrix.
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   Multiplying an <code>M x N</code> matrix with an <code>N x P</code> matrix results
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   in an <code>M x P</code> matrix.
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @par
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   When matrix size checking is enabled, the functions check:
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****    - that the inner dimensions of <code>pSrcA</code> and <code>pSrcB</code> are equal;
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****    - that the size of the output matrix equals the outer dimensions of <code>pSrcA</code> and <code
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @addtogroup CmplxMatrixMult
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @{
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @brief         Floating-point Complex matrix multiplication.
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @param[in]     pSrcA      points to first input complex matrix structure
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @param[in]     pSrcB      points to second input complex matrix structure
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @param[out]    pDst       points to output complex matrix structure
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   @return        execution status
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #if defined(ARM_MATH_NEON)
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** arm_status arm_mat_cmplx_mult_f32(
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_matrix_instance_f32 * pDst)
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** {
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal1, sumImag1;                  /* accumulator */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a0, b0, c0, d0;
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a1, a1B,b1, b1B, c1, d1;
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal2, sumImag2;                  /* accumulator */
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32x4x2_t a0V, a1V;
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32x4_t accR0,accI0, accR1,accI1,tempR, tempI;
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32x2_t accum = vdup_n_f32(0);
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn1B = pSrcA->pData;    
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t col, i = 0U, j, rowCnt, row = numRowsA, colCnt;      /* loop counters */
ARM GAS  /tmp/ccUMrugT.s 			page 3


  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal1B, sumImag1B; 
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal2B, sumImag2B; 
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pxB;  
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Check for matrix mismatch condition */
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   else
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     rowCnt = row >> 1;
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Row loop */
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     while (rowCnt > 0U)
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     {
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       px = pOut + 2 * i;
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pxB = px + 2 * numColsB;
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       col = numColsB;
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****        ** to the starting address of the pSrcB data */
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pIn2 = pSrcB->pData;
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       j = 0U;
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Column loop */
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       while (col > 0U)
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       {
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 = 0.0f;
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 = 0.0f;
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1B = 0.0f;
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1B = 0.0f;
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal2 = 0.0f;
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag2 = 0.0f;
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal2B = 0.0f;
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag2B = 0.0f;
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1 = pInA;
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1B = pIn1 + 2*numColsA;
ARM GAS  /tmp/ccUMrugT.s 			page 4


 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accR0 = vdupq_n_f32(0.0);
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accI0 = vdupq_n_f32(0.0);
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accR1 = vdupq_n_f32(0.0);
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accI1 = vdupq_n_f32(0.0);
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Compute 4 MACs simultaneously. */
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA >> 2;
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Matrix multiplication */
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix A */
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0V = vld2q_f32(pIn1);  // load & separate real/imag pSrcA (de-interleave 2)
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1V = vld2q_f32(pIn1B);  // load & separate real/imag pSrcA (de-interleave 2)
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 8;
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1B += 8;
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[0] = *pIn2;
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[0] = *(pIn2 + 1U);
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[1] = *pIn2;
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[1] = *(pIn2 + 1U);
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[2] = *pIn2;
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[2] = *(pIn2 + 1U);
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[3] = *pIn2;
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[3] = *(pIn2 + 1U);
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR0 = vmlaq_f32(accR0,a0V.val[0],tempR);
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR0 = vmlsq_f32(accR0,a0V.val[1],tempI);
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI0 = vmlaq_f32(accI0,a0V.val[1],tempR);
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI0 = vmlaq_f32(accI0,a0V.val[0],tempI);
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR1 = vmlaq_f32(accR1,a1V.val[0],tempR);
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR1 = vmlsq_f32(accR1,a1V.val[1],tempI);
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI1 = vmlaq_f32(accI1,a1V.val[1],tempR);
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI1 = vmlaq_f32(accI1,a1V.val[0],tempI);
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop count */
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accR0), vget_high_f32(accR0));
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += accum[0] + accum[1];
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accI0), vget_high_f32(accI0));
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += accum[0] + accum[1];
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
ARM GAS  /tmp/ccUMrugT.s 			page 5


 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accR1), vget_high_f32(accR1));
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1B += accum[0] + accum[1];
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accI1), vget_high_f32(accI1));
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1B += accum[0] + accum[1];
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****          ** No loop unrolling is used. */
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA & 3;
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1B = *pIn1B;
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1U);
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1B = *(pIn1B + 1U);
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1U);
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1B += a1B * c1;
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1B += b1B * c1;
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1B += 2U;
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2B -= b1B * d1;
 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2B += a1B * d1;
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop counter */
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += sumReal2;
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += sumImag2;
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1B += sumReal2B;
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1B += sumImag2B;
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Store the result in the destination buffer */
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumReal1;
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumImag1;
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *pxB++ = sumReal1B;
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *pxB++ = sumImag1B;
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         j++;
ARM GAS  /tmp/ccUMrugT.s 			page 6


 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn2 = pSrcB->pData + 2U * j;
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Decrement the column loop counter */
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         col--;
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       } 
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next 2 row */
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       i = i + 2*numColsB;
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pInA = pInA + 4 * numColsA;
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Decrement the row loop counter */
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       rowCnt--;
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     }
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     rowCnt = row & 1;
 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     while (rowCnt > 0U)
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     {
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       px = pOut + 2 * i;
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       col = numColsB;
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****        ** to the starting address of the pSrcB data */
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pIn2 = pSrcB->pData;
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       j = 0U;
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Column loop */
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       while (col > 0U)
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       {
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 = 0.0f;
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 = 0.0f;
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal2 = 0.0f;
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag2 = 0.0f;
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1 = pInA;
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accR0 = vdupq_n_f32(0.0);
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accI0 = vdupq_n_f32(0.0);
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Compute 4 MACs simultaneously. */
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA >> 2;
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Matrix multiplication */
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix A */
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0V = vld2q_f32(pIn1);  // load & separate real/imag pSrcA (de-interleave 2)
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 8;
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[0] = *pIn2;
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[0] = *(pIn2 + 1U);
ARM GAS  /tmp/ccUMrugT.s 			page 7


 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[1] = *pIn2;
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[1] = *(pIn2 + 1U);
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[2] = *pIn2;
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[2] = *(pIn2 + 1U);
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempR[3] = *pIn2;
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           tempI[3] = *(pIn2 + 1U);
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR0 = vmlaq_f32(accR0,a0V.val[0],tempR);
 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accR0 = vmlsq_f32(accR0,a0V.val[1],tempI);
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI0 = vmlaq_f32(accI0,a0V.val[1],tempR);
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           accI0 = vmlaq_f32(accI0,a0V.val[0],tempI);
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop count */
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accR0), vget_high_f32(accR0));
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += accum[0] + accum[1];
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(accI0), vget_high_f32(accI0));
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += accum[0] + accum[1];
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****          ** No loop unrolling is used. */
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA & 3;
 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1U);
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1U);
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop counter */
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += sumReal2;
ARM GAS  /tmp/ccUMrugT.s 			page 8


 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += sumImag2;
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Store the result in the destination buffer */
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumReal1;
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumImag1;
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         j++;
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn2 = pSrcB->pData + 2U * j;
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Decrement the column loop counter */
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         col--;
 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       } 
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       i = i + numColsB;
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pInA = pInA + 2 * numColsA;
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Decrement the row loop counter */
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       rowCnt--;
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     }
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Return to application */
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   return (status);
 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** }
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #else
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** arm_status arm_mat_cmplx_mult_f32(
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         arm_matrix_instance_f32 * pDst)
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** {
  28              		.loc 1 410 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 88
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 97B0     		sub	sp, sp, #92
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 96
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
  46              		.loc 1 411 14
ARM GAS  /tmp/ccUMrugT.s 			page 9


  47 000c FB68     		ldr	r3, [r7, #12]
  48 000e 5B68     		ldr	r3, [r3, #4]
  49 0010 7B65     		str	r3, [r7, #84]
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
  50              		.loc 1 412 14
  51 0012 BB68     		ldr	r3, [r7, #8]
  52 0014 5B68     		ldr	r3, [r3, #4]
  53 0016 3B65     		str	r3, [r7, #80]
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  54              		.loc 1 413 14
  55 0018 FB68     		ldr	r3, [r7, #12]
  56 001a 5B68     		ldr	r3, [r3, #4]
  57 001c FB64     		str	r3, [r7, #76]
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
  58              		.loc 1 414 14
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 5B68     		ldr	r3, [r3, #4]
  61 0022 BB62     		str	r3, [r7, #40]
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  62              		.loc 1 416 12
  63 0024 FB68     		ldr	r3, [r7, #12]
  64 0026 1B88     		ldrh	r3, [r3]	@ movhi
  65 0028 FB84     		strh	r3, [r7, #38]	@ movhi
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
  66              		.loc 1 417 12
  67 002a BB68     		ldr	r3, [r7, #8]
  68 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
  69 002e BB84     		strh	r3, [r7, #36]	@ movhi
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
  70              		.loc 1 418 12
  71 0030 FB68     		ldr	r3, [r7, #12]
  72 0032 5B88     		ldrh	r3, [r3, #2]	@ movhi
  73 0034 7B84     		strh	r3, [r7, #34]	@ movhi
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal, sumImag;                    /* Accumulator */
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a1, b1, c1, d1;
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint32_t col, i = 0U, j, row = numRowsA, colCnt; /* loop counters */
  74              		.loc 1 421 17
  75 0036 0023     		movs	r3, #0
  76 0038 BB63     		str	r3, [r7, #56]
  77              		.loc 1 421 28
  78 003a FB8C     		ldrh	r3, [r7, #38]
  79 003c 3B63     		str	r3, [r7, #48]
  80              	.L5:
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a0, b0, c0, d0;
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Check for matrix mismatch condition */
 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       (pSrcA->numRows != pDst->numRows)  ||
 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       (pSrcB->numCols != pDst->numCols)    )
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
ARM GAS  /tmp/ccUMrugT.s 			page 10


 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   else
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* row loop */
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     do
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     {
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       px = pOut + 2 * i;
  81              		.loc 1 448 17
  82 003e BB6B     		ldr	r3, [r7, #56]
  83 0040 DB00     		lsls	r3, r3, #3
  84              		.loc 1 448 10
  85 0042 BA6A     		ldr	r2, [r7, #40]
  86 0044 1344     		add	r3, r3, r2
  87 0046 BB64     		str	r3, [r7, #72]
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       col = numColsB;
  88              		.loc 1 451 11
  89 0048 BB8C     		ldrh	r3, [r7, #36]
  90 004a FB63     		str	r3, [r7, #60]
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****        ** to the starting address of the pSrcB data */
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pIn2 = pSrcB->pData;
  91              		.loc 1 455 12
  92 004c BB68     		ldr	r3, [r7, #8]
  93 004e 5B68     		ldr	r3, [r3, #4]
  94 0050 3B65     		str	r3, [r7, #80]
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       j = 0U;
  95              		.loc 1 457 9
  96 0052 0023     		movs	r3, #0
  97 0054 7B63     		str	r3, [r7, #52]
  98              	.L4:
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* column loop */
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       do
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       {
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal = 0.0f;
  99              		.loc 1 463 17
 100 0056 4FF00003 		mov	r3, #0
 101 005a 7B64     		str	r3, [r7, #68]	@ float
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag = 0.0f;
 102              		.loc 1 464 17
 103 005c 4FF00003 		mov	r3, #0
 104 0060 3B64     		str	r3, [r7, #64]	@ float
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initiate pointer pIn1 to point to starting address of column being processed */
 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1 = pInA;
ARM GAS  /tmp/ccUMrugT.s 			page 11


 105              		.loc 1 467 14
 106 0062 FB6C     		ldr	r3, [r7, #76]
 107 0064 7B65     		str	r3, [r7, #84]
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA >> 2U;
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* matrix multiplication */
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix A */
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *pIn1;
 480:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 481:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix B */
 482:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *pIn2;
 483:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 484:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix A */
 485:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1U);
 486:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 487:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix B */
 488:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1U);
 489:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 491:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal += a0 * c0;
 492:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += b0 * c0;
 493:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 494:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* update pointers */
 495:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 496:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 497:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 498:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 499:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal -= b0 * d0;
 500:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += a0 * d0;
 501:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 502:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 503:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 504:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 505:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *(pIn1     );
 506:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *(pIn2     );
 507:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1U);
 508:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1U);
 509:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 510:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 511:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal += a1 * c1;
 512:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += b1 * c1;
 513:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 514:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* update pointers */
 515:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 516:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 517:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 518:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 519:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal -= b1 * d1;
 520:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += a1 * d1;
 521:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
ARM GAS  /tmp/ccUMrugT.s 			page 12


 522:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *(pIn1     );
 523:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *(pIn2     );
 524:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1U);
 525:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1U);
 526:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 527:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 528:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal += a0 * c0;
 529:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += b0 * c0;
 530:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 531:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* update pointers */
 532:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 533:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 534:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 535:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 536:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal -= b0 * d0;
 537:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += a0 * d0;
 538:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 539:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 540:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 541:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *(pIn1     );
 542:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *(pIn2     );
 543:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1U);
 544:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1U);
 545:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 546:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 547:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal += a1 * c1;
 548:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += b1 * c1;
 549:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 550:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* update pointers */
 551:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 552:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 553:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 554:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 555:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal -= b1 * d1;
 556:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += a1 * d1;
 557:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 558:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement loop count */
 559:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 560:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 561:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 562:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 563:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****          ** No loop unrolling is used. */
 564:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA % 0x4U;
 565:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 566:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #else
 567:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 568:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initialize blkCnt with number of samples */
 569:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA;
 108              		.loc 1 569 16
 109 0066 7B8C     		ldrh	r3, [r7, #34]
 110 0068 FB62     		str	r3, [r7, #44]
 570:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 571:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 572:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 573:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while (colCnt > 0U)
 111              		.loc 1 573 15
 112 006a 46E0     		b	.L2
ARM GAS  /tmp/ccUMrugT.s 			page 13


 113              	.L3:
 574:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 575:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 576:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *(pIn1     );
 114              		.loc 1 576 14
 115 006c 7B6D     		ldr	r3, [r7, #84]
 116 006e 1B68     		ldr	r3, [r3]	@ float
 117 0070 FB61     		str	r3, [r7, #28]	@ float
 577:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *(pIn2     );
 118              		.loc 1 577 14
 119 0072 3B6D     		ldr	r3, [r7, #80]
 120 0074 1B68     		ldr	r3, [r3]	@ float
 121 0076 BB61     		str	r3, [r7, #24]	@ float
 578:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1U);
 122              		.loc 1 578 14
 123 0078 7B6D     		ldr	r3, [r7, #84]
 124 007a 5B68     		ldr	r3, [r3, #4]	@ float
 125 007c 7B61     		str	r3, [r7, #20]	@ float
 579:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1U);
 126              		.loc 1 579 14
 127 007e 3B6D     		ldr	r3, [r7, #80]
 128 0080 5B68     		ldr	r3, [r3, #4]	@ float
 129 0082 3B61     		str	r3, [r7, #16]	@ float
 580:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 581:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 582:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal += a1 * c1;
 130              		.loc 1 582 25
 131 0084 97ED077A 		vldr.32	s14, [r7, #28]
 132 0088 D7ED067A 		vldr.32	s15, [r7, #24]
 133 008c 67EE277A 		vmul.f32	s15, s14, s15
 134              		.loc 1 582 19
 135 0090 97ED117A 		vldr.32	s14, [r7, #68]
 136 0094 77EE277A 		vadd.f32	s15, s14, s15
 137 0098 C7ED117A 		vstr.32	s15, [r7, #68]
 583:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += b1 * c1;
 138              		.loc 1 583 25
 139 009c 97ED057A 		vldr.32	s14, [r7, #20]
 140 00a0 D7ED067A 		vldr.32	s15, [r7, #24]
 141 00a4 67EE277A 		vmul.f32	s15, s14, s15
 142              		.loc 1 583 19
 143 00a8 97ED107A 		vldr.32	s14, [r7, #64]
 144 00ac 77EE277A 		vadd.f32	s15, s14, s15
 145 00b0 C7ED107A 		vstr.32	s15, [r7, #64]
 584:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 585:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* update pointers */
 586:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2U;
 146              		.loc 1 586 16
 147 00b4 7B6D     		ldr	r3, [r7, #84]
 148 00b6 0833     		adds	r3, r3, #8
 149 00b8 7B65     		str	r3, [r7, #84]
 587:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 150              		.loc 1 587 16
 151 00ba BB8C     		ldrh	r3, [r7, #36]
 152 00bc DB00     		lsls	r3, r3, #3
 153 00be 3A6D     		ldr	r2, [r7, #80]
 154 00c0 1344     		add	r3, r3, r2
 155 00c2 3B65     		str	r3, [r7, #80]
ARM GAS  /tmp/ccUMrugT.s 			page 14


 588:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 589:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Multiply and Accumlates */
 590:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal -= b1 * d1;
 156              		.loc 1 590 25
 157 00c4 97ED057A 		vldr.32	s14, [r7, #20]
 158 00c8 D7ED047A 		vldr.32	s15, [r7, #16]
 159 00cc 67EE277A 		vmul.f32	s15, s14, s15
 160              		.loc 1 590 19
 161 00d0 97ED117A 		vldr.32	s14, [r7, #68]
 162 00d4 77EE677A 		vsub.f32	s15, s14, s15
 163 00d8 C7ED117A 		vstr.32	s15, [r7, #68]
 591:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag += a1 * d1;
 164              		.loc 1 591 25
 165 00dc 97ED077A 		vldr.32	s14, [r7, #28]
 166 00e0 D7ED047A 		vldr.32	s15, [r7, #16]
 167 00e4 67EE277A 		vmul.f32	s15, s14, s15
 168              		.loc 1 591 19
 169 00e8 97ED107A 		vldr.32	s14, [r7, #64]
 170 00ec 77EE277A 		vadd.f32	s15, s14, s15
 171 00f0 C7ED107A 		vstr.32	s15, [r7, #64]
 592:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 593:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement loop counter */
 594:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 172              		.loc 1 594 17
 173 00f4 FB6A     		ldr	r3, [r7, #44]
 174 00f6 013B     		subs	r3, r3, #1
 175 00f8 FB62     		str	r3, [r7, #44]
 176              	.L2:
 573:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 177              		.loc 1 573 15
 178 00fa FB6A     		ldr	r3, [r7, #44]
 179 00fc 002B     		cmp	r3, #0
 180 00fe B5D1     		bne	.L3
 595:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 596:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 597:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Store result in destination buffer */
 598:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumReal;
 181              		.loc 1 598 12
 182 0100 BB6C     		ldr	r3, [r7, #72]
 183 0102 1A1D     		adds	r2, r3, #4
 184 0104 BA64     		str	r2, [r7, #72]
 185              		.loc 1 598 15
 186 0106 7A6C     		ldr	r2, [r7, #68]	@ float
 187 0108 1A60     		str	r2, [r3]	@ float
 599:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumImag;
 188              		.loc 1 599 12
 189 010a BB6C     		ldr	r3, [r7, #72]
 190 010c 1A1D     		adds	r2, r3, #4
 191 010e BA64     		str	r2, [r7, #72]
 192              		.loc 1 599 15
 193 0110 3A6C     		ldr	r2, [r7, #64]	@ float
 194 0112 1A60     		str	r2, [r3]	@ float
 600:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 601:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Update pointer pIn2 to point to starting address of next column */
 602:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         j++;
 195              		.loc 1 602 10
 196 0114 7B6B     		ldr	r3, [r7, #52]
ARM GAS  /tmp/ccUMrugT.s 			page 15


 197 0116 0133     		adds	r3, r3, #1
 198 0118 7B63     		str	r3, [r7, #52]
 603:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn2 = pSrcB->pData + 2U * j;
 199              		.loc 1 603 21
 200 011a BB68     		ldr	r3, [r7, #8]
 201 011c 5A68     		ldr	r2, [r3, #4]
 202              		.loc 1 603 29
 203 011e 7B6B     		ldr	r3, [r7, #52]
 204 0120 DB00     		lsls	r3, r3, #3
 205              		.loc 1 603 14
 206 0122 1344     		add	r3, r3, r2
 207 0124 3B65     		str	r3, [r7, #80]
 604:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 605:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Decrement column loop counter */
 606:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         col--;
 208              		.loc 1 606 12
 209 0126 FB6B     		ldr	r3, [r7, #60]
 210 0128 013B     		subs	r3, r3, #1
 211 012a FB63     		str	r3, [r7, #60]
 607:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 608:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       } while (col > 0U);
 212              		.loc 1 608 7
 213 012c FB6B     		ldr	r3, [r7, #60]
 214 012e 002B     		cmp	r3, #0
 215 0130 91D1     		bne	.L4
 609:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 610:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Update pointer pInA to point to starting address of next row */
 611:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       i = i + numColsB;
 216              		.loc 1 611 13
 217 0132 BB8C     		ldrh	r3, [r7, #36]
 218              		.loc 1 611 9
 219 0134 BA6B     		ldr	r2, [r7, #56]
 220 0136 1344     		add	r3, r3, r2
 221 0138 BB63     		str	r3, [r7, #56]
 612:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pInA = pInA + 2 * numColsA;
 222              		.loc 1 612 19
 223 013a 7B8C     		ldrh	r3, [r7, #34]
 224 013c DB00     		lsls	r3, r3, #3
 225              		.loc 1 612 12
 226 013e FA6C     		ldr	r2, [r7, #76]
 227 0140 1344     		add	r3, r3, r2
 228 0142 FB64     		str	r3, [r7, #76]
 613:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 614:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Decrement row loop counter */
 615:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       row--;
 229              		.loc 1 615 10
 230 0144 3B6B     		ldr	r3, [r7, #48]
 231 0146 013B     		subs	r3, r3, #1
 232 0148 3B63     		str	r3, [r7, #48]
 616:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 617:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     } while (row > 0U);
 233              		.loc 1 617 5
 234 014a 3B6B     		ldr	r3, [r7, #48]
 235 014c 002B     		cmp	r3, #0
 236 014e 7FF476AF 		bne	.L5
 618:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 619:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
ARM GAS  /tmp/ccUMrugT.s 			page 16


 620:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 237              		.loc 1 620 12
 238 0152 0023     		movs	r3, #0
 239 0154 87F82130 		strb	r3, [r7, #33]
 621:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 622:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 623:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Return to application */
 624:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   return (status);
 240              		.loc 1 624 10
 241 0158 97F92130 		ldrsb	r3, [r7, #33]
 625:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** }
 242              		.loc 1 625 1
 243 015c 1846     		mov	r0, r3
 244 015e 5C37     		adds	r7, r7, #92
 245              	.LCFI3:
 246              		.cfi_def_cfa_offset 4
 247 0160 BD46     		mov	sp, r7
 248              	.LCFI4:
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0162 5DF8047B 		ldr	r7, [sp], #4
 252              	.LCFI5:
 253              		.cfi_restore 7
 254              		.cfi_def_cfa_offset 0
 255 0166 7047     		bx	lr
 256              		.cfi_endproc
 257              	.LFE145:
 259              		.text
 260              	.Letext0:
 261              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 262              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 263              		.file 4 "/usr/include/newlib/sys/_types.h"
 264              		.file 5 "/usr/include/newlib/sys/reent.h"
 265              		.file 6 "/usr/include/newlib/sys/lock.h"
 266              		.file 7 "/usr/include/newlib/math.h"
 267              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccUMrugT.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_cmplx_mult_f32.c
     /tmp/ccUMrugT.s:17     .text.arm_mat_cmplx_mult_f32:0000000000000000 $t
     /tmp/ccUMrugT.s:25     .text.arm_mat_cmplx_mult_f32:0000000000000000 arm_mat_cmplx_mult_f32

NO UNDEFINED SYMBOLS
