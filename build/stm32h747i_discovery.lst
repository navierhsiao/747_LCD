ARM GAS  /tmp/ccddg22r.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h747i_discovery.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.comm	hpb_exti,8,4
  17              		.comm	hcom_uart,144,4
  18              		.global	COM_USART
  19              		.section	.data.COM_USART,"aw"
  20              		.align	2
  23              	COM_USART:
  24 0000 00100140 		.word	1073811456
  25              		.section	.data.LED_PORT,"aw"
  26              		.align	2
  29              	LED_PORT:
  30 0000 00200258 		.word	1476534272
  31 0004 00200258 		.word	1476534272
  32 0008 00200258 		.word	1476534272
  33 000c 00200258 		.word	1476534272
  34              		.section	.rodata.LED_PIN,"a"
  35              		.align	2
  38              	LED_PIN:
  39 0000 00100000 		.word	4096
  40 0004 00200000 		.word	8192
  41 0008 00400000 		.word	16384
  42 000c 00800000 		.word	32768
  43              		.section	.data.BUTTON_PORT,"aw"
  44              		.align	2
  47              	BUTTON_PORT:
  48 0000 00080258 		.word	1476528128
  49              		.section	.rodata.BUTTON_PIN,"a"
  50              		.align	2
  53              	BUTTON_PIN:
  54 0000 0020     		.short	8192
  55              		.section	.rodata.BUTTON_IRQn,"a"
  56              		.align	2
  59              	BUTTON_IRQn:
  60 0000 2800     		.short	40
  61              		.section	.bss.COM_ActiveLogPort,"aw",%nobits
  64              	COM_ActiveLogPort:
  65 0000 00       		.space	1
  66              		.section	.bss.JoyPinsMask,"aw",%nobits
  67              		.align	2
  70              	JoyPinsMask:
  71 0000 00000000 		.space	4
  72              		.section	.data.JOY1_PORT,"aw"
  73              		.align	2
ARM GAS  /tmp/ccddg22r.s 			page 2


  76              	JOY1_PORT:
  77 0000 00280258 		.word	1476536320
  78 0004 00280258 		.word	1476536320
  79 0008 00280258 		.word	1476536320
  80 000c 00280258 		.word	1476536320
  81 0010 00280258 		.word	1476536320
  82              		.section	.rodata.JOY1_PIN,"a"
  83              		.align	2
  86              	JOY1_PIN:
  87 0000 0400     		.short	4
  88 0002 0800     		.short	8
  89 0004 1000     		.short	16
  90 0006 2000     		.short	32
  91 0008 4000     		.short	64
  92              		.section	.rodata.JOY1_IRQn,"a"
  93              		.align	2
  96              	JOY1_IRQn:
  97 0000 0800     		.short	8
  98 0002 0900     		.short	9
  99 0004 0A00     		.short	10
 100 0006 1700     		.short	23
 101 0008 1700     		.short	23
 102              		.section	.bss.hjoy_exti,"aw",%nobits
 103              		.align	2
 106              	hjoy_exti:
 107 0000 00000000 		.space	40
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.section	.text.BSP_GetVersion,"ax",%progbits
 109              		.align	1
 110              		.global	BSP_GetVersion
 111              		.arch armv7e-m
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv5-d16
 117              	BSP_GetVersion:
 118              	.LFB331:
 119              		.file 1 "./BSP/ST/stm32h747i_discovery.c"
   1:./BSP/ST/stm32h747i_discovery.c **** /**
   2:./BSP/ST/stm32h747i_discovery.c ****   ******************************************************************************
   3:./BSP/ST/stm32h747i_discovery.c ****   * @file    stm32h747i_discovery.c
   4:./BSP/ST/stm32h747i_discovery.c ****   * @author  MCD Application Team
   5:./BSP/ST/stm32h747i_discovery.c ****   * @brief   This file provides a set of firmware functions to manage
   6:./BSP/ST/stm32h747i_discovery.c ****   *          LEDs
   7:./BSP/ST/stm32h747i_discovery.c ****   *          push-buttons
   8:./BSP/ST/stm32h747i_discovery.c ****   *          COM ports
   9:./BSP/ST/stm32h747i_discovery.c ****   *          available on STM32H747I-DISCO board(MB1248) from STMicroelectronics.
  10:./BSP/ST/stm32h747i_discovery.c ****   ******************************************************************************
  11:./BSP/ST/stm32h747i_discovery.c ****   * @attention
  12:./BSP/ST/stm32h747i_discovery.c ****   *
  13:./BSP/ST/stm32h747i_discovery.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
  14:./BSP/ST/stm32h747i_discovery.c ****   * All rights reserved.</center></h2>
  15:./BSP/ST/stm32h747i_discovery.c ****   *
  16:./BSP/ST/stm32h747i_discovery.c ****   * This software component is licensed by ST under BSD 3-Clause license,
ARM GAS  /tmp/ccddg22r.s 			page 3


  17:./BSP/ST/stm32h747i_discovery.c ****   * the "License"; You may not use this file except in compliance with the
  18:./BSP/ST/stm32h747i_discovery.c ****   * License. You may obtain a copy of the License at:
  19:./BSP/ST/stm32h747i_discovery.c ****   *                        opensource.org/licenses/BSD-3-Clause
  20:./BSP/ST/stm32h747i_discovery.c ****   *
  21:./BSP/ST/stm32h747i_discovery.c ****   ******************************************************************************
  22:./BSP/ST/stm32h747i_discovery.c ****   */
  23:./BSP/ST/stm32h747i_discovery.c **** 
  24:./BSP/ST/stm32h747i_discovery.c **** /* Includes ------------------------------------------------------------------*/
  25:./BSP/ST/stm32h747i_discovery.c **** #include "stm32h747i_discovery.h"
  26:./BSP/ST/stm32h747i_discovery.c **** 
  27:./BSP/ST/stm32h747i_discovery.c **** /** @addtogroup BSP
  28:./BSP/ST/stm32h747i_discovery.c ****   * @{
  29:./BSP/ST/stm32h747i_discovery.c ****   */
  30:./BSP/ST/stm32h747i_discovery.c **** 
  31:./BSP/ST/stm32h747i_discovery.c **** /** @addtogroup STM32H747I_DISCO
  32:./BSP/ST/stm32h747i_discovery.c ****   * @{
  33:./BSP/ST/stm32h747i_discovery.c ****   */
  34:./BSP/ST/stm32h747i_discovery.c **** 
  35:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL LOW LEVEL
  36:./BSP/ST/stm32h747i_discovery.c ****   * @{
  37:./BSP/ST/stm32h747i_discovery.c ****   */
  38:./BSP/ST/stm32h747i_discovery.c **** 
  39:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Private_TypesDefinitions  Private Types Definitions
  40:./BSP/ST/stm32h747i_discovery.c ****   * @{
  41:./BSP/ST/stm32h747i_discovery.c ****   */
  42:./BSP/ST/stm32h747i_discovery.c **** typedef void (* BSP_EXTI_LineCallback) (void);
  43:./BSP/ST/stm32h747i_discovery.c **** /**
  44:./BSP/ST/stm32h747i_discovery.c ****   * @}
  45:./BSP/ST/stm32h747i_discovery.c ****   */
  46:./BSP/ST/stm32h747i_discovery.c **** 
  47:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Private_FunctionPrototypes  Private Function Prototypes
  48:./BSP/ST/stm32h747i_discovery.c ****   * @{
  49:./BSP/ST/stm32h747i_discovery.c ****   */
  50:./BSP/ST/stm32h747i_discovery.c ****  static void BUTTON_WAKEUP_EXTI_Callback(void);
  51:./BSP/ST/stm32h747i_discovery.c ****  #if (USE_BSP_COM_FEATURE > 0)
  52:./BSP/ST/stm32h747i_discovery.c **** static void USART1_MspInit(UART_HandleTypeDef *huart);
  53:./BSP/ST/stm32h747i_discovery.c **** static void USART1_MspDeInit(UART_HandleTypeDef *huart);
  54:./BSP/ST/stm32h747i_discovery.c **** #endif
  55:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_UP_EXTI_Callback(void);
  56:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_DOWN_EXTI_Callback(void);
  57:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_LEFT_EXTI_Callback(void);
  58:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_RIGHT_EXTI_Callback(void);
  59:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_SEL_EXTI_Callback(void);
  60:./BSP/ST/stm32h747i_discovery.c **** /**
  61:./BSP/ST/stm32h747i_discovery.c ****   * @}
  62:./BSP/ST/stm32h747i_discovery.c ****   */
  63:./BSP/ST/stm32h747i_discovery.c **** 
  64:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Exported_Variables Exported Variables
  65:./BSP/ST/stm32h747i_discovery.c ****   * @{
  66:./BSP/ST/stm32h747i_discovery.c ****   */
  67:./BSP/ST/stm32h747i_discovery.c **** EXTI_HandleTypeDef hpb_exti[BUTTONn];
  68:./BSP/ST/stm32h747i_discovery.c **** #if (USE_BSP_COM_FEATURE > 0)
  69:./BSP/ST/stm32h747i_discovery.c **** UART_HandleTypeDef hcom_uart[COMn];
  70:./BSP/ST/stm32h747i_discovery.c **** USART_TypeDef* COM_USART[COMn]   = {COM1_UART};
  71:./BSP/ST/stm32h747i_discovery.c **** #endif
  72:./BSP/ST/stm32h747i_discovery.c **** /**
  73:./BSP/ST/stm32h747i_discovery.c ****   * @}
ARM GAS  /tmp/ccddg22r.s 			page 4


  74:./BSP/ST/stm32h747i_discovery.c ****   */
  75:./BSP/ST/stm32h747i_discovery.c **** 
  76:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Private_Variables Private Variables
  77:./BSP/ST/stm32h747i_discovery.c ****   * @{
  78:./BSP/ST/stm32h747i_discovery.c ****   */
  79:./BSP/ST/stm32h747i_discovery.c **** 
  80:./BSP/ST/stm32h747i_discovery.c **** static GPIO_TypeDef* LED_PORT[LEDn] = { LED1_GPIO_PORT,
  81:./BSP/ST/stm32h747i_discovery.c ****                                         LED2_GPIO_PORT,
  82:./BSP/ST/stm32h747i_discovery.c ****                                         LED3_GPIO_PORT,
  83:./BSP/ST/stm32h747i_discovery.c ****                                         LED4_GPIO_PORT};
  84:./BSP/ST/stm32h747i_discovery.c **** 
  85:./BSP/ST/stm32h747i_discovery.c **** static const uint32_t LED_PIN[LEDn] = { LED1_PIN,
  86:./BSP/ST/stm32h747i_discovery.c ****                                         LED2_PIN,
  87:./BSP/ST/stm32h747i_discovery.c ****                                         LED3_PIN,
  88:./BSP/ST/stm32h747i_discovery.c ****                                         LED4_PIN};
  89:./BSP/ST/stm32h747i_discovery.c **** 
  90:./BSP/ST/stm32h747i_discovery.c **** static GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {BUTTON_WAKEUP_GPIO_PORT};
  91:./BSP/ST/stm32h747i_discovery.c **** static const uint16_t BUTTON_PIN[BUTTONn] = {BUTTON_WAKEUP_PIN};
  92:./BSP/ST/stm32h747i_discovery.c **** static const IRQn_Type BUTTON_IRQn[BUTTONn] = {BUTTON_WAKEUP_EXTI_IRQn};
  93:./BSP/ST/stm32h747i_discovery.c **** 
  94:./BSP/ST/stm32h747i_discovery.c **** #if (USE_COM_LOG > 0)
  95:./BSP/ST/stm32h747i_discovery.c **** static COM_TypeDef COM_ActiveLogPort = COM1;
  96:./BSP/ST/stm32h747i_discovery.c **** #endif
  97:./BSP/ST/stm32h747i_discovery.c **** #if (USE_BSP_COM_FEATURE > 0)
  98:./BSP/ST/stm32h747i_discovery.c ****  #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  99:./BSP/ST/stm32h747i_discovery.c ****   static uint32_t IsComMspCbValid[COMn] = {0};
 100:./BSP/ST/stm32h747i_discovery.c ****  #endif
 101:./BSP/ST/stm32h747i_discovery.c **** #endif
 102:./BSP/ST/stm32h747i_discovery.c **** 
 103:./BSP/ST/stm32h747i_discovery.c **** static uint32_t JoyPinsMask;
 104:./BSP/ST/stm32h747i_discovery.c **** static GPIO_TypeDef* JOY1_PORT[JOY_KEY_NUMBER] = {JOY1_SEL_GPIO_PORT,
 105:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_DOWN_GPIO_PORT,
 106:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_LEFT_GPIO_PORT,
 107:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_RIGHT_GPIO_PORT,
 108:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_UP_GPIO_PORT
 109:./BSP/ST/stm32h747i_discovery.c ****                                                  };
 110:./BSP/ST/stm32h747i_discovery.c **** 
 111:./BSP/ST/stm32h747i_discovery.c **** static const uint16_t JOY1_PIN[JOY_KEY_NUMBER] = {JOY1_SEL_PIN,
 112:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_DOWN_PIN,
 113:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_LEFT_PIN,
 114:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_RIGHT_PIN,
 115:./BSP/ST/stm32h747i_discovery.c ****                                                   JOY1_UP_PIN
 116:./BSP/ST/stm32h747i_discovery.c ****                                                  };
 117:./BSP/ST/stm32h747i_discovery.c **** 
 118:./BSP/ST/stm32h747i_discovery.c **** static const IRQn_Type JOY1_IRQn[JOY_KEY_NUMBER] = {JOY1_SEL_EXTI_IRQn,
 119:./BSP/ST/stm32h747i_discovery.c ****                                                     JOY1_DOWN_EXTI_IRQn,
 120:./BSP/ST/stm32h747i_discovery.c ****                                                     JOY1_LEFT_EXTI_IRQn,
 121:./BSP/ST/stm32h747i_discovery.c ****                                                     JOY1_RIGHT_EXTI_IRQn,
 122:./BSP/ST/stm32h747i_discovery.c ****                                                     JOY1_UP_EXTI_IRQn
 123:./BSP/ST/stm32h747i_discovery.c ****                                                    };
 124:./BSP/ST/stm32h747i_discovery.c **** static EXTI_HandleTypeDef hjoy_exti[JOY_KEY_NUMBER];
 125:./BSP/ST/stm32h747i_discovery.c **** /**
 126:./BSP/ST/stm32h747i_discovery.c ****   * @}
 127:./BSP/ST/stm32h747i_discovery.c ****   */
 128:./BSP/ST/stm32h747i_discovery.c **** 
 129:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Exported_Functions Exported Functions
 130:./BSP/ST/stm32h747i_discovery.c ****   * @{
ARM GAS  /tmp/ccddg22r.s 			page 5


 131:./BSP/ST/stm32h747i_discovery.c ****   */
 132:./BSP/ST/stm32h747i_discovery.c **** 
 133:./BSP/ST/stm32h747i_discovery.c ****   /**
 134:./BSP/ST/stm32h747i_discovery.c ****   * @brief  This method returns the STM32H747I DISCO BSP Driver revision
 135:./BSP/ST/stm32h747i_discovery.c ****   * @retval version: 0xXYZR (8bits for each decimal, R for RC)
 136:./BSP/ST/stm32h747i_discovery.c ****   */
 137:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_GetVersion(void)
 138:./BSP/ST/stm32h747i_discovery.c **** {
 120              		.loc 1 138 1
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI0:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 00AF     		add	r7, sp, #0
 130              	.LCFI1:
 131              		.cfi_def_cfa_register 7
 139:./BSP/ST/stm32h747i_discovery.c ****   return (int32_t)STM32H747I_DISCO_BSP_VERSION;
 132              		.loc 1 139 10
 133 0004 024B     		ldr	r3, .L3
 140:./BSP/ST/stm32h747i_discovery.c **** }
 134              		.loc 1 140 1
 135 0006 1846     		mov	r0, r3
 136 0008 BD46     		mov	sp, r7
 137              	.LCFI2:
 138              		.cfi_def_cfa_register 13
 139              		@ sp needed
 140 000a 5DF8047B 		ldr	r7, [sp], #4
 141              	.LCFI3:
 142              		.cfi_restore 7
 143              		.cfi_def_cfa_offset 0
 144 000e 7047     		bx	lr
 145              	.L4:
 146              		.align	2
 147              	.L3:
 148 0010 00000503 		.word	50659328
 149              		.cfi_endproc
 150              	.LFE331:
 152              		.section	.rodata
 153              		.align	2
 154              	.LC0:
 155 0000 53544D33 		.ascii	"STM32H747I-DISCO\000"
 155      32483734 
 155      37492D44 
 155      4953434F 
 155      00
 156              		.section	.text.BSP_GetBoardName,"ax",%progbits
 157              		.align	1
 158              		.global	BSP_GetBoardName
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv5-d16
 164              	BSP_GetBoardName:
ARM GAS  /tmp/ccddg22r.s 			page 6


 165              	.LFB332:
 141:./BSP/ST/stm32h747i_discovery.c **** 
 142:./BSP/ST/stm32h747i_discovery.c **** /**
 143:./BSP/ST/stm32h747i_discovery.c ****   * @brief  This method returns the board name
 144:./BSP/ST/stm32h747i_discovery.c ****   * @retval pointer to the board name string
 145:./BSP/ST/stm32h747i_discovery.c ****   */
 146:./BSP/ST/stm32h747i_discovery.c **** const uint8_t* BSP_GetBoardName(void)
 147:./BSP/ST/stm32h747i_discovery.c **** {
 166              		.loc 1 147 1
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171 0000 80B4     		push	{r7}
 172              	.LCFI4:
 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 7, -4
 175 0002 00AF     		add	r7, sp, #0
 176              	.LCFI5:
 177              		.cfi_def_cfa_register 7
 148:./BSP/ST/stm32h747i_discovery.c ****   return (uint8_t*)STM32H747I_DISCO_BSP_BOARD_NAME;
 178              		.loc 1 148 10
 179 0004 024B     		ldr	r3, .L7
 149:./BSP/ST/stm32h747i_discovery.c **** }
 180              		.loc 1 149 1
 181 0006 1846     		mov	r0, r3
 182 0008 BD46     		mov	sp, r7
 183              	.LCFI6:
 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 000a 5DF8047B 		ldr	r7, [sp], #4
 187              	.LCFI7:
 188              		.cfi_restore 7
 189              		.cfi_def_cfa_offset 0
 190 000e 7047     		bx	lr
 191              	.L8:
 192              		.align	2
 193              	.L7:
 194 0010 00000000 		.word	.LC0
 195              		.cfi_endproc
 196              	.LFE332:
 198              		.section	.rodata
 199 0011 000000   		.align	2
 200              	.LC1:
 201 0014 4D423132 		.ascii	"MB12481D\000"
 201      34383144 
 201      00
 202              		.section	.text.BSP_GetBoardID,"ax",%progbits
 203              		.align	1
 204              		.global	BSP_GetBoardID
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv5-d16
 210              	BSP_GetBoardID:
 211              	.LFB333:
 150:./BSP/ST/stm32h747i_discovery.c **** 
ARM GAS  /tmp/ccddg22r.s 			page 7


 151:./BSP/ST/stm32h747i_discovery.c **** /**
 152:./BSP/ST/stm32h747i_discovery.c ****   * @brief  This method returns the board ID
 153:./BSP/ST/stm32h747i_discovery.c ****   * @retval pointer to the board name string
 154:./BSP/ST/stm32h747i_discovery.c ****   */
 155:./BSP/ST/stm32h747i_discovery.c **** const uint8_t* BSP_GetBoardID(void)
 156:./BSP/ST/stm32h747i_discovery.c **** {
 212              		.loc 1 156 1
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217 0000 80B4     		push	{r7}
 218              	.LCFI8:
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 0002 00AF     		add	r7, sp, #0
 222              	.LCFI9:
 223              		.cfi_def_cfa_register 7
 157:./BSP/ST/stm32h747i_discovery.c ****   return (uint8_t*)STM32H747I_DISCO_BSP_BOARD_ID;
 224              		.loc 1 157 10
 225 0004 024B     		ldr	r3, .L11
 158:./BSP/ST/stm32h747i_discovery.c **** }
 226              		.loc 1 158 1
 227 0006 1846     		mov	r0, r3
 228 0008 BD46     		mov	sp, r7
 229              	.LCFI10:
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 000a 5DF8047B 		ldr	r7, [sp], #4
 233              	.LCFI11:
 234              		.cfi_restore 7
 235              		.cfi_def_cfa_offset 0
 236 000e 7047     		bx	lr
 237              	.L12:
 238              		.align	2
 239              	.L11:
 240 0010 14000000 		.word	.LC1
 241              		.cfi_endproc
 242              	.LFE333:
 244              		.section	.text.BSP_LED_Init,"ax",%progbits
 245              		.align	1
 246              		.global	BSP_LED_Init
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv5-d16
 252              	BSP_LED_Init:
 253              	.LFB334:
 159:./BSP/ST/stm32h747i_discovery.c **** 
 160:./BSP/ST/stm32h747i_discovery.c **** /**
 161:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Configures LED on GPIO.
 162:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be configured.
 163:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 164:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 165:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 166:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 167:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
ARM GAS  /tmp/ccddg22r.s 			page 8


 168:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 169:./BSP/ST/stm32h747i_discovery.c ****   */
 170:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_LED_Init(Led_TypeDef Led)
 171:./BSP/ST/stm32h747i_discovery.c **** {
 254              		.loc 1 171 1
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 40
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 0000 80B5     		push	{r7, lr}
 259              	.LCFI12:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 8AB0     		sub	sp, sp, #40
 264              	.LCFI13:
 265              		.cfi_def_cfa_offset 48
 266 0004 00AF     		add	r7, sp, #0
 267              	.LCFI14:
 268              		.cfi_def_cfa_register 7
 269 0006 0346     		mov	r3, r0
 270 0008 FB71     		strb	r3, [r7, #7]
 172:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 271              		.loc 1 172 11
 272 000a 0023     		movs	r3, #0
 273 000c 7B62     		str	r3, [r7, #36]
 274              	.LBB6:
 173:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef  GPIO_InitStruct;
 174:./BSP/ST/stm32h747i_discovery.c **** 
 175:./BSP/ST/stm32h747i_discovery.c ****   /* Enable the GPIO_LED clock */
 176:./BSP/ST/stm32h747i_discovery.c ****   LEDx_GPIO_CLK_ENABLE();
 275              		.loc 1 176 3
 276 000e 1B4B     		ldr	r3, .L15
 277 0010 D3F8E030 		ldr	r3, [r3, #224]
 278 0014 194A     		ldr	r2, .L15
 279 0016 43F48073 		orr	r3, r3, #256
 280 001a C2F8E030 		str	r3, [r2, #224]
 281 001e 174B     		ldr	r3, .L15
 282 0020 D3F8E030 		ldr	r3, [r3, #224]
 283 0024 03F48073 		and	r3, r3, #256
 284 0028 FB60     		str	r3, [r7, #12]
 285 002a FB68     		ldr	r3, [r7, #12]
 286              	.LBE6:
 177:./BSP/ST/stm32h747i_discovery.c **** 
 178:./BSP/ST/stm32h747i_discovery.c ****   /* Configure the GPIO_LED pin */
 179:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitStruct.Pin = LED_PIN[Led];
 287              		.loc 1 179 32
 288 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 289 002e 144A     		ldr	r2, .L15+4
 290 0030 52F82330 		ldr	r3, [r2, r3, lsl #2]
 291              		.loc 1 179 23
 292 0034 3B61     		str	r3, [r7, #16]
 180:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 293              		.loc 1 180 24
 294 0036 0123     		movs	r3, #1
 295 0038 7B61     		str	r3, [r7, #20]
 181:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 296              		.loc 1 181 24
ARM GAS  /tmp/ccddg22r.s 			page 9


 297 003a 0123     		movs	r3, #1
 298 003c BB61     		str	r3, [r7, #24]
 182:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 299              		.loc 1 182 25
 300 003e 0323     		movs	r3, #3
 301 0040 FB61     		str	r3, [r7, #28]
 183:./BSP/ST/stm32h747i_discovery.c **** 
 184:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 302              		.loc 1 184 3
 303 0042 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 304 0044 0F4A     		ldr	r2, .L15+8
 305 0046 52F82330 		ldr	r3, [r2, r3, lsl #2]
 306 004a 07F11002 		add	r2, r7, #16
 307 004e 1146     		mov	r1, r2
 308 0050 1846     		mov	r0, r3
 309 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 185:./BSP/ST/stm32h747i_discovery.c **** 
 186:./BSP/ST/stm32h747i_discovery.c ****   /* By default, turn off LED */
 187:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 310              		.loc 1 187 3
 311 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 312 0058 0A4A     		ldr	r2, .L15+8
 313 005a 52F82300 		ldr	r0, [r2, r3, lsl #2]
 314              		.loc 1 187 43
 315 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 316 0060 074A     		ldr	r2, .L15+4
 317 0062 52F82330 		ldr	r3, [r2, r3, lsl #2]
 318              		.loc 1 187 3
 319 0066 9BB2     		uxth	r3, r3
 320 0068 0122     		movs	r2, #1
 321 006a 1946     		mov	r1, r3
 322 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 188:./BSP/ST/stm32h747i_discovery.c ****  return ret;
 323              		.loc 1 188 9
 324 0070 7B6A     		ldr	r3, [r7, #36]
 189:./BSP/ST/stm32h747i_discovery.c **** }
 325              		.loc 1 189 1
 326 0072 1846     		mov	r0, r3
 327 0074 2837     		adds	r7, r7, #40
 328              	.LCFI15:
 329              		.cfi_def_cfa_offset 8
 330 0076 BD46     		mov	sp, r7
 331              	.LCFI16:
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 0078 80BD     		pop	{r7, pc}
 335              	.L16:
 336 007a 00BF     		.align	2
 337              	.L15:
 338 007c 00440258 		.word	1476543488
 339 0080 00000000 		.word	LED_PIN
 340 0084 00000000 		.word	LED_PORT
 341              		.cfi_endproc
 342              	.LFE334:
 344              		.section	.text.BSP_LED_DeInit,"ax",%progbits
 345              		.align	1
 346              		.global	BSP_LED_DeInit
ARM GAS  /tmp/ccddg22r.s 			page 10


 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu fpv5-d16
 352              	BSP_LED_DeInit:
 353              	.LFB335:
 190:./BSP/ST/stm32h747i_discovery.c **** 
 191:./BSP/ST/stm32h747i_discovery.c **** /**
 192:./BSP/ST/stm32h747i_discovery.c ****   * @brief  DeInit LEDs.
 193:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be configured.
 194:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 195:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 196:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 197:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 198:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
 199:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 200:./BSP/ST/stm32h747i_discovery.c ****   */
 201:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_LED_DeInit(Led_TypeDef Led)
 202:./BSP/ST/stm32h747i_discovery.c **** {
 354              		.loc 1 202 1
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 32
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 80B5     		push	{r7, lr}
 359              	.LCFI17:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 88B0     		sub	sp, sp, #32
 364              	.LCFI18:
 365              		.cfi_def_cfa_offset 40
 366 0004 00AF     		add	r7, sp, #0
 367              	.LCFI19:
 368              		.cfi_def_cfa_register 7
 369 0006 0346     		mov	r3, r0
 370 0008 FB71     		strb	r3, [r7, #7]
 203:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 371              		.loc 1 203 11
 372 000a 0023     		movs	r3, #0
 373 000c FB61     		str	r3, [r7, #28]
 204:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef  gpio_init_structure;
 205:./BSP/ST/stm32h747i_discovery.c **** 
 206:./BSP/ST/stm32h747i_discovery.c ****   /* DeInit the GPIO_LED pin */
 207:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin = LED_PIN [Led];
 374              		.loc 1 207 37
 375 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 376 0010 0F4A     		ldr	r2, .L19
 377 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 378              		.loc 1 207 27
 379 0016 BB60     		str	r3, [r7, #8]
 208:./BSP/ST/stm32h747i_discovery.c ****   /* Turn off LED */
 209:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 380              		.loc 1 209 3
 381 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 382 001a 0E4A     		ldr	r2, .L19+4
 383 001c 52F82300 		ldr	r0, [r2, r3, lsl #2]
 384              		.loc 1 209 55
ARM GAS  /tmp/ccddg22r.s 			page 11


 385 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 386 0022 0B4A     		ldr	r2, .L19
 387 0024 52F82330 		ldr	r3, [r2, r3, lsl #2]
 388              		.loc 1 209 3
 389 0028 9BB2     		uxth	r3, r3
 390 002a 0122     		movs	r2, #1
 391 002c 1946     		mov	r1, r3
 392 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 210:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_DeInit (LED_PORT [Led], gpio_init_structure.Pin);
 393              		.loc 1 210 3
 394 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 395 0034 074A     		ldr	r2, .L19+4
 396 0036 52F82330 		ldr	r3, [r2, r3, lsl #2]
 397 003a BA68     		ldr	r2, [r7, #8]
 398 003c 1146     		mov	r1, r2
 399 003e 1846     		mov	r0, r3
 400 0040 FFF7FEFF 		bl	HAL_GPIO_DeInit
 211:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 401              		.loc 1 211 10
 402 0044 FB69     		ldr	r3, [r7, #28]
 212:./BSP/ST/stm32h747i_discovery.c **** }
 403              		.loc 1 212 1
 404 0046 1846     		mov	r0, r3
 405 0048 2037     		adds	r7, r7, #32
 406              	.LCFI20:
 407              		.cfi_def_cfa_offset 8
 408 004a BD46     		mov	sp, r7
 409              	.LCFI21:
 410              		.cfi_def_cfa_register 13
 411              		@ sp needed
 412 004c 80BD     		pop	{r7, pc}
 413              	.L20:
 414 004e 00BF     		.align	2
 415              	.L19:
 416 0050 00000000 		.word	LED_PIN
 417 0054 00000000 		.word	LED_PORT
 418              		.cfi_endproc
 419              	.LFE335:
 421              		.section	.text.BSP_LED_On,"ax",%progbits
 422              		.align	1
 423              		.global	BSP_LED_On
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv5-d16
 429              	BSP_LED_On:
 430              	.LFB336:
 213:./BSP/ST/stm32h747i_discovery.c **** 
 214:./BSP/ST/stm32h747i_discovery.c **** /**
 215:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Turns selected LED On.
 216:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be set on
 217:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 218:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 219:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 220:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 221:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
 222:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
ARM GAS  /tmp/ccddg22r.s 			page 12


 223:./BSP/ST/stm32h747i_discovery.c ****   */
 224:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_LED_On(Led_TypeDef Led)
 225:./BSP/ST/stm32h747i_discovery.c **** {
 431              		.loc 1 225 1
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 16
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435 0000 80B5     		push	{r7, lr}
 436              	.LCFI22:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 7, -8
 439              		.cfi_offset 14, -4
 440 0002 84B0     		sub	sp, sp, #16
 441              	.LCFI23:
 442              		.cfi_def_cfa_offset 24
 443 0004 00AF     		add	r7, sp, #0
 444              	.LCFI24:
 445              		.cfi_def_cfa_register 7
 446 0006 0346     		mov	r3, r0
 447 0008 FB71     		strb	r3, [r7, #7]
 226:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 448              		.loc 1 226 11
 449 000a 0023     		movs	r3, #0
 450 000c FB60     		str	r3, [r7, #12]
 227:./BSP/ST/stm32h747i_discovery.c **** 
 228:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 451              		.loc 1 228 3
 452 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453 0010 084A     		ldr	r2, .L23
 454 0012 52F82300 		ldr	r0, [r2, r3, lsl #2]
 455              		.loc 1 228 56
 456 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457 0018 074A     		ldr	r2, .L23+4
 458 001a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 459              		.loc 1 228 3
 460 001e 9BB2     		uxth	r3, r3
 461 0020 0022     		movs	r2, #0
 462 0022 1946     		mov	r1, r3
 463 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 229:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 464              		.loc 1 229 10
 465 0028 FB68     		ldr	r3, [r7, #12]
 230:./BSP/ST/stm32h747i_discovery.c **** }
 466              		.loc 1 230 1
 467 002a 1846     		mov	r0, r3
 468 002c 1037     		adds	r7, r7, #16
 469              	.LCFI25:
 470              		.cfi_def_cfa_offset 8
 471 002e BD46     		mov	sp, r7
 472              	.LCFI26:
 473              		.cfi_def_cfa_register 13
 474              		@ sp needed
 475 0030 80BD     		pop	{r7, pc}
 476              	.L24:
 477 0032 00BF     		.align	2
 478              	.L23:
 479 0034 00000000 		.word	LED_PORT
ARM GAS  /tmp/ccddg22r.s 			page 13


 480 0038 00000000 		.word	LED_PIN
 481              		.cfi_endproc
 482              	.LFE336:
 484              		.section	.text.BSP_LED_Off,"ax",%progbits
 485              		.align	1
 486              		.global	BSP_LED_Off
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu fpv5-d16
 492              	BSP_LED_Off:
 493              	.LFB337:
 231:./BSP/ST/stm32h747i_discovery.c **** 
 232:./BSP/ST/stm32h747i_discovery.c **** /**
 233:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Turns selected LED Off.
 234:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be set off
 235:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 236:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 237:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 238:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 239:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
 240:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 241:./BSP/ST/stm32h747i_discovery.c ****   */
 242:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_LED_Off(Led_TypeDef Led)
 243:./BSP/ST/stm32h747i_discovery.c **** {
 494              		.loc 1 243 1
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 16
 497              		@ frame_needed = 1, uses_anonymous_args = 0
 498 0000 80B5     		push	{r7, lr}
 499              	.LCFI27:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 84B0     		sub	sp, sp, #16
 504              	.LCFI28:
 505              		.cfi_def_cfa_offset 24
 506 0004 00AF     		add	r7, sp, #0
 507              	.LCFI29:
 508              		.cfi_def_cfa_register 7
 509 0006 0346     		mov	r3, r0
 510 0008 FB71     		strb	r3, [r7, #7]
 244:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 511              		.loc 1 244 11
 512 000a 0023     		movs	r3, #0
 513 000c FB60     		str	r3, [r7, #12]
 245:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 514              		.loc 1 245 3
 515 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 516 0010 084A     		ldr	r2, .L27
 517 0012 52F82300 		ldr	r0, [r2, r3, lsl #2]
 518              		.loc 1 245 56
 519 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 520 0018 074A     		ldr	r2, .L27+4
 521 001a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 522              		.loc 1 245 3
 523 001e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccddg22r.s 			page 14


 524 0020 0122     		movs	r2, #1
 525 0022 1946     		mov	r1, r3
 526 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 246:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 527              		.loc 1 246 10
 528 0028 FB68     		ldr	r3, [r7, #12]
 247:./BSP/ST/stm32h747i_discovery.c **** }
 529              		.loc 1 247 1
 530 002a 1846     		mov	r0, r3
 531 002c 1037     		adds	r7, r7, #16
 532              	.LCFI30:
 533              		.cfi_def_cfa_offset 8
 534 002e BD46     		mov	sp, r7
 535              	.LCFI31:
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 0030 80BD     		pop	{r7, pc}
 539              	.L28:
 540 0032 00BF     		.align	2
 541              	.L27:
 542 0034 00000000 		.word	LED_PORT
 543 0038 00000000 		.word	LED_PIN
 544              		.cfi_endproc
 545              	.LFE337:
 547              		.section	.text.BSP_LED_Toggle,"ax",%progbits
 548              		.align	1
 549              		.global	BSP_LED_Toggle
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu fpv5-d16
 555              	BSP_LED_Toggle:
 556              	.LFB338:
 248:./BSP/ST/stm32h747i_discovery.c **** 
 249:./BSP/ST/stm32h747i_discovery.c **** /**
 250:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Toggles the selected LED.
 251:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be toggled
 252:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 253:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 254:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 255:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 256:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
 257:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 258:./BSP/ST/stm32h747i_discovery.c ****   */
 259:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_LED_Toggle(Led_TypeDef Led)
 260:./BSP/ST/stm32h747i_discovery.c **** {
 557              		.loc 1 260 1
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 16
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0000 80B5     		push	{r7, lr}
 562              	.LCFI32:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 84B0     		sub	sp, sp, #16
 567              	.LCFI33:
ARM GAS  /tmp/ccddg22r.s 			page 15


 568              		.cfi_def_cfa_offset 24
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI34:
 571              		.cfi_def_cfa_register 7
 572 0006 0346     		mov	r3, r0
 573 0008 FB71     		strb	r3, [r7, #7]
 261:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 574              		.loc 1 261 11
 575 000a 0023     		movs	r3, #0
 576 000c FB60     		str	r3, [r7, #12]
 262:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 577              		.loc 1 262 3
 578 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 579 0010 084A     		ldr	r2, .L31
 580 0012 52F82320 		ldr	r2, [r2, r3, lsl #2]
 581              		.loc 1 262 54
 582 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 583 0018 0749     		ldr	r1, .L31+4
 584 001a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 585              		.loc 1 262 3
 586 001e 9BB2     		uxth	r3, r3
 587 0020 1946     		mov	r1, r3
 588 0022 1046     		mov	r0, r2
 589 0024 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 263:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 590              		.loc 1 263 10
 591 0028 FB68     		ldr	r3, [r7, #12]
 264:./BSP/ST/stm32h747i_discovery.c **** }
 592              		.loc 1 264 1
 593 002a 1846     		mov	r0, r3
 594 002c 1037     		adds	r7, r7, #16
 595              	.LCFI35:
 596              		.cfi_def_cfa_offset 8
 597 002e BD46     		mov	sp, r7
 598              	.LCFI36:
 599              		.cfi_def_cfa_register 13
 600              		@ sp needed
 601 0030 80BD     		pop	{r7, pc}
 602              	.L32:
 603 0032 00BF     		.align	2
 604              	.L31:
 605 0034 00000000 		.word	LED_PORT
 606 0038 00000000 		.word	LED_PIN
 607              		.cfi_endproc
 608              	.LFE338:
 610              		.section	.text.BSP_LED_GetState,"ax",%progbits
 611              		.align	1
 612              		.global	BSP_LED_GetState
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 616              		.fpu fpv5-d16
 618              	BSP_LED_GetState:
 619              	.LFB339:
 265:./BSP/ST/stm32h747i_discovery.c **** /**
 266:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Get the selected LED state.
 267:./BSP/ST/stm32h747i_discovery.c ****   * @param  Led LED to be get its state
ARM GAS  /tmp/ccddg22r.s 			page 16


 268:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 269:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED1
 270:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED2
 271:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED3
 272:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  LED4
 273:./BSP/ST/stm32h747i_discovery.c ****   * @retval LED status
 274:./BSP/ST/stm32h747i_discovery.c ****   */
 275:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_LED_GetState (Led_TypeDef Led)
 276:./BSP/ST/stm32h747i_discovery.c **** {
 620              		.loc 1 276 1
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 16
 623              		@ frame_needed = 1, uses_anonymous_args = 0
 624 0000 80B5     		push	{r7, lr}
 625              	.LCFI37:
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 7, -8
 628              		.cfi_offset 14, -4
 629 0002 84B0     		sub	sp, sp, #16
 630              	.LCFI38:
 631              		.cfi_def_cfa_offset 24
 632 0004 00AF     		add	r7, sp, #0
 633              	.LCFI39:
 634              		.cfi_def_cfa_register 7
 635 0006 0346     		mov	r3, r0
 636 0008 FB71     		strb	r3, [r7, #7]
 277:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 637              		.loc 1 277 11
 638 000a 0023     		movs	r3, #0
 639 000c FB60     		str	r3, [r7, #12]
 278:./BSP/ST/stm32h747i_discovery.c ****   ret = (int32_t)HAL_GPIO_ReadPin (LED_PORT [Led], (uint16_t)LED_PIN [Led]);
 640              		.loc 1 278 18
 641 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 642 0010 094A     		ldr	r2, .L35
 643 0012 52F82320 		ldr	r2, [r2, r3, lsl #2]
 644              		.loc 1 278 70
 645 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 646 0018 0849     		ldr	r1, .L35+4
 647 001a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 648              		.loc 1 278 18
 649 001e 9BB2     		uxth	r3, r3
 650 0020 1946     		mov	r1, r3
 651 0022 1046     		mov	r0, r2
 652 0024 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 653 0028 0346     		mov	r3, r0
 654              		.loc 1 278 7
 655 002a FB60     		str	r3, [r7, #12]
 279:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 656              		.loc 1 279 10
 657 002c FB68     		ldr	r3, [r7, #12]
 280:./BSP/ST/stm32h747i_discovery.c **** }
 658              		.loc 1 280 1
 659 002e 1846     		mov	r0, r3
 660 0030 1037     		adds	r7, r7, #16
 661              	.LCFI40:
 662              		.cfi_def_cfa_offset 8
 663 0032 BD46     		mov	sp, r7
ARM GAS  /tmp/ccddg22r.s 			page 17


 664              	.LCFI41:
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 0034 80BD     		pop	{r7, pc}
 668              	.L36:
 669 0036 00BF     		.align	2
 670              	.L35:
 671 0038 00000000 		.word	LED_PORT
 672 003c 00000000 		.word	LED_PIN
 673              		.cfi_endproc
 674              	.LFE339:
 676              		.section	.text.BSP_PB_Init,"ax",%progbits
 677              		.align	1
 678              		.global	BSP_PB_Init
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu fpv5-d16
 684              	BSP_PB_Init:
 685              	.LFB340:
 281:./BSP/ST/stm32h747i_discovery.c **** /**
 282:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Configures button GPIO and EXTI Line.
 283:./BSP/ST/stm32h747i_discovery.c ****   * @param  Button Button to be configured
 284:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 285:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  BUTTON_WAKEUP: Wakeup Push Button
 286:./BSP/ST/stm32h747i_discovery.c ****   * @param  ButtonMode Button mode
 287:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 288:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
 289:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
 290:./BSP/ST/stm32h747i_discovery.c ****   *                                    with interrupt generation capability
 291:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 292:./BSP/ST/stm32h747i_discovery.c ****   */
 293:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
 294:./BSP/ST/stm32h747i_discovery.c **** {
 686              		.loc 1 294 1
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 32
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690 0000 80B5     		push	{r7, lr}
 691              	.LCFI42:
 692              		.cfi_def_cfa_offset 8
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695 0002 88B0     		sub	sp, sp, #32
 696              	.LCFI43:
 697              		.cfi_def_cfa_offset 40
 698 0004 00AF     		add	r7, sp, #0
 699              	.LCFI44:
 700              		.cfi_def_cfa_register 7
 701 0006 0346     		mov	r3, r0
 702 0008 0A46     		mov	r2, r1
 703 000a FB71     		strb	r3, [r7, #7]
 704 000c 1346     		mov	r3, r2
 705 000e BB71     		strb	r3, [r7, #6]
 706              	.LBB7:
 295:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef gpio_init_structure;
 296:./BSP/ST/stm32h747i_discovery.c ****   static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
ARM GAS  /tmp/ccddg22r.s 			page 18


 297:./BSP/ST/stm32h747i_discovery.c ****   static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
 298:./BSP/ST/stm32h747i_discovery.c ****   static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
 299:./BSP/ST/stm32h747i_discovery.c ****   /* Enable the BUTTON clock*/
 300:./BSP/ST/stm32h747i_discovery.c ****   BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 707              		.loc 1 300 3
 708 0010 2D4B     		ldr	r3, .L41
 709 0012 D3F8E030 		ldr	r3, [r3, #224]
 710 0016 2C4A     		ldr	r2, .L41
 711 0018 43F00403 		orr	r3, r3, #4
 712 001c C2F8E030 		str	r3, [r2, #224]
 713 0020 294B     		ldr	r3, .L41
 714 0022 D3F8E030 		ldr	r3, [r3, #224]
 715 0026 03F00403 		and	r3, r3, #4
 716 002a BB60     		str	r3, [r7, #8]
 717 002c BB68     		ldr	r3, [r7, #8]
 718              	.LBE7:
 301:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin = BUTTON_PIN [Button];
 719              		.loc 1 301 40
 720 002e 4FF40053 		mov	r3, #8192
 721              		.loc 1 301 27
 722 0032 FB60     		str	r3, [r7, #12]
 302:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pull = GPIO_NOPULL;
 723              		.loc 1 302 28
 724 0034 0023     		movs	r3, #0
 725 0036 7B61     		str	r3, [r7, #20]
 303:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 726              		.loc 1 303 29
 727 0038 0223     		movs	r3, #2
 728 003a BB61     		str	r3, [r7, #24]
 304:./BSP/ST/stm32h747i_discovery.c **** 
 305:./BSP/ST/stm32h747i_discovery.c ****   if(ButtonMode == BUTTON_MODE_GPIO)
 729              		.loc 1 305 5
 730 003c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 731 003e 002B     		cmp	r3, #0
 732 0040 0CD1     		bne	.L38
 306:./BSP/ST/stm32h747i_discovery.c ****   {
 307:./BSP/ST/stm32h747i_discovery.c ****     /* Configure Button pin as input */
 308:./BSP/ST/stm32h747i_discovery.c ****     gpio_init_structure.Mode = GPIO_MODE_INPUT;
 733              		.loc 1 308 30
 734 0042 0023     		movs	r3, #0
 735 0044 3B61     		str	r3, [r7, #16]
 309:./BSP/ST/stm32h747i_discovery.c ****     HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 736              		.loc 1 309 5
 737 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 738 0048 204A     		ldr	r2, .L41+4
 739 004a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 740 004e 07F10C02 		add	r2, r7, #12
 741 0052 1146     		mov	r1, r2
 742 0054 1846     		mov	r0, r3
 743 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 744 005a 30E0     		b	.L39
 745              	.L38:
 310:./BSP/ST/stm32h747i_discovery.c ****   }
 311:./BSP/ST/stm32h747i_discovery.c ****   else /* (ButtonMode == BUTTON_MODE_EXTI) */
 312:./BSP/ST/stm32h747i_discovery.c ****   {
 313:./BSP/ST/stm32h747i_discovery.c ****     /* Configure Button pin as input with External interrupt */
 314:./BSP/ST/stm32h747i_discovery.c ****     gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
ARM GAS  /tmp/ccddg22r.s 			page 19


 746              		.loc 1 314 30
 747 005c 1C4B     		ldr	r3, .L41+8
 748 005e 3B61     		str	r3, [r7, #16]
 315:./BSP/ST/stm32h747i_discovery.c **** 
 316:./BSP/ST/stm32h747i_discovery.c ****     HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 749              		.loc 1 316 5
 750 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 751 0062 1A4A     		ldr	r2, .L41+4
 752 0064 52F82330 		ldr	r3, [r2, r3, lsl #2]
 753 0068 07F10C02 		add	r2, r7, #12
 754 006c 1146     		mov	r1, r2
 755 006e 1846     		mov	r0, r3
 756 0070 FFF7FEFF 		bl	HAL_GPIO_Init
 317:./BSP/ST/stm32h747i_discovery.c **** 
 318:./BSP/ST/stm32h747i_discovery.c ****     (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 757              		.loc 1 318 39
 758 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 759              		.loc 1 318 11
 760 0076 DB00     		lsls	r3, r3, #3
 761 0078 164A     		ldr	r2, .L41+12
 762 007a 1A44     		add	r2, r2, r3
 763 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 764 007e 1649     		ldr	r1, .L41+16
 765 0080 51F82330 		ldr	r3, [r1, r3, lsl #2]
 766 0084 1946     		mov	r1, r3
 767 0086 1046     		mov	r0, r2
 768 0088 FFF7FEFF 		bl	HAL_EXTI_GetHandle
 319:./BSP/ST/stm32h747i_discovery.c ****     (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Butto
 769              		.loc 1 319 46
 770 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 771              		.loc 1 319 11
 772 008e DB00     		lsls	r3, r3, #3
 773 0090 104A     		ldr	r2, .L41+12
 774 0092 9818     		adds	r0, r3, r2
 775 0094 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 776 0096 114A     		ldr	r2, .L41+20
 777 0098 52F82330 		ldr	r3, [r2, r3, lsl #2]
 778 009c 1A46     		mov	r2, r3
 779 009e 0021     		movs	r1, #0
 780 00a0 FFF7FEFF 		bl	HAL_EXTI_RegisterCallback
 320:./BSP/ST/stm32h747i_discovery.c **** 
 321:./BSP/ST/stm32h747i_discovery.c ****     /* Enable and set Button EXTI Interrupt to the lowest priority */
 322:./BSP/ST/stm32h747i_discovery.c ****     HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 781              		.loc 1 322 5
 782 00a4 2820     		movs	r0, #40
 783 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 784 00a8 0D4A     		ldr	r2, .L41+24
 785 00aa 52F82330 		ldr	r3, [r2, r3, lsl #2]
 786 00ae 0022     		movs	r2, #0
 787 00b0 1946     		mov	r1, r3
 788 00b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 323:./BSP/ST/stm32h747i_discovery.c ****     HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 789              		.loc 1 323 5
 790 00b6 2823     		movs	r3, #40
 791 00b8 1846     		mov	r0, r3
 792 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 793              	.L39:
ARM GAS  /tmp/ccddg22r.s 			page 20


 324:./BSP/ST/stm32h747i_discovery.c ****   }
 325:./BSP/ST/stm32h747i_discovery.c ****   return BSP_ERROR_NONE;
 794              		.loc 1 325 10
 795 00be 0023     		movs	r3, #0
 326:./BSP/ST/stm32h747i_discovery.c **** }
 796              		.loc 1 326 1
 797 00c0 1846     		mov	r0, r3
 798 00c2 2037     		adds	r7, r7, #32
 799              	.LCFI45:
 800              		.cfi_def_cfa_offset 8
 801 00c4 BD46     		mov	sp, r7
 802              	.LCFI46:
 803              		.cfi_def_cfa_register 13
 804              		@ sp needed
 805 00c6 80BD     		pop	{r7, pc}
 806              	.L42:
 807              		.align	2
 808              	.L41:
 809 00c8 00440258 		.word	1476543488
 810 00cc 00000000 		.word	BUTTON_PORT
 811 00d0 00001111 		.word	286326784
 812 00d4 00000000 		.word	hpb_exti
 813 00d8 00000000 		.word	BUTTON_EXTI_LINE.12349
 814 00dc 00000000 		.word	ButtonCallback.12347
 815 00e0 00000000 		.word	BSP_BUTTON_PRIO.12348
 816              		.cfi_endproc
 817              	.LFE340:
 819              		.section	.text.BSP_PB_DeInit,"ax",%progbits
 820              		.align	1
 821              		.global	BSP_PB_DeInit
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 825              		.fpu fpv5-d16
 827              	BSP_PB_DeInit:
 828              	.LFB341:
 327:./BSP/ST/stm32h747i_discovery.c **** 
 328:./BSP/ST/stm32h747i_discovery.c **** /**
 329:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Push Button DeInit.
 330:./BSP/ST/stm32h747i_discovery.c ****   * @param  Button Button to be configured
 331:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 332:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  BUTTON_WAKEUP: Wakeup Push Button
 333:./BSP/ST/stm32h747i_discovery.c ****   * @note PB DeInit does not disable the GPIO clock
 334:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 335:./BSP/ST/stm32h747i_discovery.c ****   */
 336:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_PB_DeInit(Button_TypeDef Button)
 337:./BSP/ST/stm32h747i_discovery.c **** {
 829              		.loc 1 337 1
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 32
 832              		@ frame_needed = 1, uses_anonymous_args = 0
 833 0000 80B5     		push	{r7, lr}
 834              	.LCFI47:
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/ccddg22r.s 			page 21


 839              	.LCFI48:
 840              		.cfi_def_cfa_offset 40
 841 0004 00AF     		add	r7, sp, #0
 842              	.LCFI49:
 843              		.cfi_def_cfa_register 7
 844 0006 0346     		mov	r3, r0
 845 0008 FB71     		strb	r3, [r7, #7]
 338:./BSP/ST/stm32h747i_discovery.c ****     GPIO_InitTypeDef gpio_init_structure;
 339:./BSP/ST/stm32h747i_discovery.c **** 
 340:./BSP/ST/stm32h747i_discovery.c ****     gpio_init_structure.Pin = BUTTON_PIN[Button];
 846              		.loc 1 340 41
 847 000a 4FF40053 		mov	r3, #8192
 848              		.loc 1 340 29
 849 000e FB60     		str	r3, [r7, #12]
 341:./BSP/ST/stm32h747i_discovery.c ****     HAL_NVIC_DisableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 850              		.loc 1 341 48
 851 0010 2823     		movs	r3, #40
 852              		.loc 1 341 5
 853 0012 1846     		mov	r0, r3
 854 0014 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 342:./BSP/ST/stm32h747i_discovery.c ****     HAL_GPIO_DeInit(BUTTON_PORT[Button], gpio_init_structure.Pin);
 855              		.loc 1 342 5
 856 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 857 001a 064A     		ldr	r2, .L45
 858 001c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 859 0020 FA68     		ldr	r2, [r7, #12]
 860 0022 1146     		mov	r1, r2
 861 0024 1846     		mov	r0, r3
 862 0026 FFF7FEFF 		bl	HAL_GPIO_DeInit
 343:./BSP/ST/stm32h747i_discovery.c **** 
 344:./BSP/ST/stm32h747i_discovery.c ****     return BSP_ERROR_NONE;
 863              		.loc 1 344 12
 864 002a 0023     		movs	r3, #0
 345:./BSP/ST/stm32h747i_discovery.c **** }
 865              		.loc 1 345 1
 866 002c 1846     		mov	r0, r3
 867 002e 2037     		adds	r7, r7, #32
 868              	.LCFI50:
 869              		.cfi_def_cfa_offset 8
 870 0030 BD46     		mov	sp, r7
 871              	.LCFI51:
 872              		.cfi_def_cfa_register 13
 873              		@ sp needed
 874 0032 80BD     		pop	{r7, pc}
 875              	.L46:
 876              		.align	2
 877              	.L45:
 878 0034 00000000 		.word	BUTTON_PORT
 879              		.cfi_endproc
 880              	.LFE341:
 882              		.section	.text.BSP_PB_GetState,"ax",%progbits
 883              		.align	1
 884              		.global	BSP_PB_GetState
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu fpv5-d16
ARM GAS  /tmp/ccddg22r.s 			page 22


 890              	BSP_PB_GetState:
 891              	.LFB342:
 346:./BSP/ST/stm32h747i_discovery.c **** 
 347:./BSP/ST/stm32h747i_discovery.c **** /**
 348:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Returns the selected button state.
 349:./BSP/ST/stm32h747i_discovery.c ****   * @param  Button Button to be checked
 350:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 351:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  BUTTON_WAKEUP: Wakeup Push Button
 352:./BSP/ST/stm32h747i_discovery.c ****   * @retval The Button GPIO pin value
 353:./BSP/ST/stm32h747i_discovery.c ****   */
 354:./BSP/ST/stm32h747i_discovery.c **** int32_t  BSP_PB_GetState(Button_TypeDef Button)
 355:./BSP/ST/stm32h747i_discovery.c **** {
 892              		.loc 1 355 1
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 8
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896 0000 80B5     		push	{r7, lr}
 897              	.LCFI52:
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 901 0002 82B0     		sub	sp, sp, #8
 902              	.LCFI53:
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              	.LCFI54:
 906              		.cfi_def_cfa_register 7
 907 0006 0346     		mov	r3, r0
 908 0008 FB71     		strb	r3, [r7, #7]
 356:./BSP/ST/stm32h747i_discovery.c ****   return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 909              		.loc 1 356 10
 910 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 911 000c 064A     		ldr	r2, .L49
 912 000e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 913 0012 4FF40052 		mov	r2, #8192
 914 0016 1146     		mov	r1, r2
 915 0018 1846     		mov	r0, r3
 916 001a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 917 001e 0346     		mov	r3, r0
 357:./BSP/ST/stm32h747i_discovery.c **** }
 918              		.loc 1 357 1
 919 0020 1846     		mov	r0, r3
 920 0022 0837     		adds	r7, r7, #8
 921              	.LCFI55:
 922              		.cfi_def_cfa_offset 8
 923 0024 BD46     		mov	sp, r7
 924              	.LCFI56:
 925              		.cfi_def_cfa_register 13
 926              		@ sp needed
 927 0026 80BD     		pop	{r7, pc}
 928              	.L50:
 929              		.align	2
 930              	.L49:
 931 0028 00000000 		.word	BUTTON_PORT
 932              		.cfi_endproc
 933              	.LFE342:
 935              		.section	.text.BSP_PB_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccddg22r.s 			page 23


 936              		.align	1
 937              		.global	BSP_PB_IRQHandler
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv5-d16
 943              	BSP_PB_IRQHandler:
 944              	.LFB343:
 358:./BSP/ST/stm32h747i_discovery.c **** 
 359:./BSP/ST/stm32h747i_discovery.c **** /**
 360:./BSP/ST/stm32h747i_discovery.c ****   * @brief  This function handles Push-Button interrupt requests.
 361:./BSP/ST/stm32h747i_discovery.c ****   * @param  Button Specifies the pin connected EXTI line
 362:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 363:./BSP/ST/stm32h747i_discovery.c ****   */
 364:./BSP/ST/stm32h747i_discovery.c **** void BSP_PB_IRQHandler(Button_TypeDef Button)
 365:./BSP/ST/stm32h747i_discovery.c **** {
 945              		.loc 1 365 1
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 8
 948              		@ frame_needed = 1, uses_anonymous_args = 0
 949 0000 80B5     		push	{r7, lr}
 950              	.LCFI57:
 951              		.cfi_def_cfa_offset 8
 952              		.cfi_offset 7, -8
 953              		.cfi_offset 14, -4
 954 0002 82B0     		sub	sp, sp, #8
 955              	.LCFI58:
 956              		.cfi_def_cfa_offset 16
 957 0004 00AF     		add	r7, sp, #0
 958              	.LCFI59:
 959              		.cfi_def_cfa_register 7
 960 0006 0346     		mov	r3, r0
 961 0008 FB71     		strb	r3, [r7, #7]
 366:./BSP/ST/stm32h747i_discovery.c ****   HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 962              		.loc 1 366 32
 963 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 964              		.loc 1 366 3
 965 000c DB00     		lsls	r3, r3, #3
 966 000e 044A     		ldr	r2, .L52
 967 0010 1344     		add	r3, r3, r2
 968 0012 1846     		mov	r0, r3
 969 0014 FFF7FEFF 		bl	HAL_EXTI_IRQHandler
 367:./BSP/ST/stm32h747i_discovery.c **** }
 970              		.loc 1 367 1
 971 0018 00BF     		nop
 972 001a 0837     		adds	r7, r7, #8
 973              	.LCFI60:
 974              		.cfi_def_cfa_offset 8
 975 001c BD46     		mov	sp, r7
 976              	.LCFI61:
 977              		.cfi_def_cfa_register 13
 978              		@ sp needed
 979 001e 80BD     		pop	{r7, pc}
 980              	.L53:
 981              		.align	2
 982              	.L52:
 983 0020 00000000 		.word	hpb_exti
ARM GAS  /tmp/ccddg22r.s 			page 24


 984              		.cfi_endproc
 985              	.LFE343:
 987              		.section	.text.BUTTON_WAKEUP_EXTI_Callback,"ax",%progbits
 988              		.align	1
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu fpv5-d16
 994              	BUTTON_WAKEUP_EXTI_Callback:
 995              	.LFB344:
 368:./BSP/ST/stm32h747i_discovery.c **** 
 369:./BSP/ST/stm32h747i_discovery.c **** /**
 370:./BSP/ST/stm32h747i_discovery.c ****   * @brief  KEY EXTI line detection callbacks.
 371:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 372:./BSP/ST/stm32h747i_discovery.c ****   */
 373:./BSP/ST/stm32h747i_discovery.c **** static void BUTTON_WAKEUP_EXTI_Callback(void)
 374:./BSP/ST/stm32h747i_discovery.c **** {
 996              		.loc 1 374 1
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 1, uses_anonymous_args = 0
 1000 0000 80B5     		push	{r7, lr}
 1001              	.LCFI62:
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 00AF     		add	r7, sp, #0
 1006              	.LCFI63:
 1007              		.cfi_def_cfa_register 7
 375:./BSP/ST/stm32h747i_discovery.c ****   BSP_PB_Callback(BUTTON_WAKEUP);
 1008              		.loc 1 375 3
 1009 0004 0020     		movs	r0, #0
 1010 0006 FFF7FEFF 		bl	BSP_PB_Callback
 376:./BSP/ST/stm32h747i_discovery.c **** }
 1011              		.loc 1 376 1
 1012 000a 00BF     		nop
 1013 000c 80BD     		pop	{r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE344:
 1017              		.section	.text.BSP_PB_Callback,"ax",%progbits
 1018              		.align	1
 1019              		.weak	BSP_PB_Callback
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu fpv5-d16
 1025              	BSP_PB_Callback:
 1026              	.LFB345:
 377:./BSP/ST/stm32h747i_discovery.c **** /**
 378:./BSP/ST/stm32h747i_discovery.c ****   * @brief  BSP Push Button callback
 379:./BSP/ST/stm32h747i_discovery.c ****   * @param  Button Specifies the pin connected EXTI line
 380:./BSP/ST/stm32h747i_discovery.c ****   * @retval None.
 381:./BSP/ST/stm32h747i_discovery.c ****   */
 382:./BSP/ST/stm32h747i_discovery.c **** __weak void BSP_PB_Callback(Button_TypeDef Button)
 383:./BSP/ST/stm32h747i_discovery.c **** {
 1027              		.loc 1 383 1
 1028              		.cfi_startproc
ARM GAS  /tmp/ccddg22r.s 			page 25


 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 1032 0000 80B4     		push	{r7}
 1033              	.LCFI64:
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 7, -4
 1036 0002 83B0     		sub	sp, sp, #12
 1037              	.LCFI65:
 1038              		.cfi_def_cfa_offset 16
 1039 0004 00AF     		add	r7, sp, #0
 1040              	.LCFI66:
 1041              		.cfi_def_cfa_register 7
 1042 0006 0346     		mov	r3, r0
 1043 0008 FB71     		strb	r3, [r7, #7]
 384:./BSP/ST/stm32h747i_discovery.c ****   /* Prevent unused argument(s) compilation warning */
 385:./BSP/ST/stm32h747i_discovery.c ****   UNUSED(Button);
 386:./BSP/ST/stm32h747i_discovery.c ****   /* This function should be implemented by the user application.
 387:./BSP/ST/stm32h747i_discovery.c ****      It is called into this driver when an event on Button is triggered. */
 388:./BSP/ST/stm32h747i_discovery.c **** }
 1044              		.loc 1 388 1
 1045 000a 00BF     		nop
 1046 000c 0C37     		adds	r7, r7, #12
 1047              	.LCFI67:
 1048              		.cfi_def_cfa_offset 4
 1049 000e BD46     		mov	sp, r7
 1050              	.LCFI68:
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 0010 5DF8047B 		ldr	r7, [sp], #4
 1054              	.LCFI69:
 1055              		.cfi_restore 7
 1056              		.cfi_def_cfa_offset 0
 1057 0014 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE345:
 1061              		.section	.text.BSP_COM_Init,"ax",%progbits
 1062              		.align	1
 1063              		.global	BSP_COM_Init
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv5-d16
 1069              	BSP_COM_Init:
 1070              	.LFB346:
 389:./BSP/ST/stm32h747i_discovery.c **** 
 390:./BSP/ST/stm32h747i_discovery.c **** #if (USE_BSP_COM_FEATURE > 0)
 391:./BSP/ST/stm32h747i_discovery.c **** /**
 392:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Configures COM port.
 393:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM COM port to be configured.
 394:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be COM1
 395:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
 396:./BSP/ST/stm32h747i_discovery.c ****   *                configuration information for the specified USART peripheral.
 397:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 398:./BSP/ST/stm32h747i_discovery.c ****   */
 399:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
 400:./BSP/ST/stm32h747i_discovery.c **** {
ARM GAS  /tmp/ccddg22r.s 			page 26


 1071              		.loc 1 400 1
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 16
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              	.LCFI70:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 84B0     		sub	sp, sp, #16
 1081              	.LCFI71:
 1082              		.cfi_def_cfa_offset 24
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI72:
 1085              		.cfi_def_cfa_register 7
 1086 0006 0346     		mov	r3, r0
 1087 0008 3960     		str	r1, [r7]
 1088 000a FB71     		strb	r3, [r7, #7]
 401:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 1089              		.loc 1 401 11
 1090 000c 0023     		movs	r3, #0
 1091 000e FB60     		str	r3, [r7, #12]
 402:./BSP/ST/stm32h747i_discovery.c **** 
 403:./BSP/ST/stm32h747i_discovery.c ****   if(COM >= COMn)
 1092              		.loc 1 403 5
 1093 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1094 0012 002B     		cmp	r3, #0
 1095 0014 03D0     		beq	.L57
 404:./BSP/ST/stm32h747i_discovery.c ****   {
 405:./BSP/ST/stm32h747i_discovery.c ****     ret = BSP_ERROR_WRONG_PARAM;
 1096              		.loc 1 405 9
 1097 0016 6FF00103 		mvn	r3, #1
 1098 001a FB60     		str	r3, [r7, #12]
 1099 001c 1AE0     		b	.L58
 1100              	.L57:
 406:./BSP/ST/stm32h747i_discovery.c ****   }
 407:./BSP/ST/stm32h747i_discovery.c ****   else
 408:./BSP/ST/stm32h747i_discovery.c ****   {
 409:./BSP/ST/stm32h747i_discovery.c ****     /* Init the UART Msp */
 410:./BSP/ST/stm32h747i_discovery.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
 411:./BSP/ST/stm32h747i_discovery.c ****     USART1_MspInit(&hcom_uart[COM]);
 1101              		.loc 1 411 30
 1102 001e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1103              		.loc 1 411 5
 1104 0020 1346     		mov	r3, r2
 1105 0022 DB00     		lsls	r3, r3, #3
 1106 0024 1344     		add	r3, r3, r2
 1107 0026 1B01     		lsls	r3, r3, #4
 1108 0028 0D4A     		ldr	r2, .L60
 1109 002a 1344     		add	r3, r3, r2
 1110 002c 1846     		mov	r0, r3
 1111 002e FFF7FEFF 		bl	USART1_MspInit
 412:./BSP/ST/stm32h747i_discovery.c **** #else
 413:./BSP/ST/stm32h747i_discovery.c ****     if(IsComMspCbValid[COM] == 0U)
 414:./BSP/ST/stm32h747i_discovery.c ****     {
 415:./BSP/ST/stm32h747i_discovery.c ****       if(BSP_COM_RegisterDefaultMspCallbacks(COM) != BSP_ERROR_NONE)
 416:./BSP/ST/stm32h747i_discovery.c ****       {
ARM GAS  /tmp/ccddg22r.s 			page 27


 417:./BSP/ST/stm32h747i_discovery.c ****         return BSP_ERROR_MSP_FAILURE;
 418:./BSP/ST/stm32h747i_discovery.c ****       }
 419:./BSP/ST/stm32h747i_discovery.c ****     }
 420:./BSP/ST/stm32h747i_discovery.c **** #endif
 421:./BSP/ST/stm32h747i_discovery.c **** 
 422:./BSP/ST/stm32h747i_discovery.c ****     if(MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 1112              		.loc 1 422 33
 1113 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1114              		.loc 1 422 8
 1115 0034 1346     		mov	r3, r2
 1116 0036 DB00     		lsls	r3, r3, #3
 1117 0038 1344     		add	r3, r3, r2
 1118 003a 1B01     		lsls	r3, r3, #4
 1119 003c 084A     		ldr	r2, .L60
 1120 003e 1344     		add	r3, r3, r2
 1121 0040 3968     		ldr	r1, [r7]
 1122 0042 1846     		mov	r0, r3
 1123 0044 FFF7FEFF 		bl	MX_USART1_Init
 1124 0048 0346     		mov	r3, r0
 1125              		.loc 1 422 7
 1126 004a 002B     		cmp	r3, #0
 1127 004c 02D0     		beq	.L58
 423:./BSP/ST/stm32h747i_discovery.c ****     {
 424:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 1128              		.loc 1 424 11
 1129 004e 6FF00303 		mvn	r3, #3
 1130 0052 FB60     		str	r3, [r7, #12]
 1131              	.L58:
 425:./BSP/ST/stm32h747i_discovery.c ****     }
 426:./BSP/ST/stm32h747i_discovery.c ****   }
 427:./BSP/ST/stm32h747i_discovery.c **** 
 428:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 1132              		.loc 1 428 10
 1133 0054 FB68     		ldr	r3, [r7, #12]
 429:./BSP/ST/stm32h747i_discovery.c **** }
 1134              		.loc 1 429 1
 1135 0056 1846     		mov	r0, r3
 1136 0058 1037     		adds	r7, r7, #16
 1137              	.LCFI73:
 1138              		.cfi_def_cfa_offset 8
 1139 005a BD46     		mov	sp, r7
 1140              	.LCFI74:
 1141              		.cfi_def_cfa_register 13
 1142              		@ sp needed
 1143 005c 80BD     		pop	{r7, pc}
 1144              	.L61:
 1145 005e 00BF     		.align	2
 1146              	.L60:
 1147 0060 00000000 		.word	hcom_uart
 1148              		.cfi_endproc
 1149              	.LFE346:
 1151              		.section	.text.BSP_COM_DeInit,"ax",%progbits
 1152              		.align	1
 1153              		.global	BSP_COM_DeInit
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
ARM GAS  /tmp/ccddg22r.s 			page 28


 1157              		.fpu fpv5-d16
 1159              	BSP_COM_DeInit:
 1160              	.LFB347:
 430:./BSP/ST/stm32h747i_discovery.c **** 
 431:./BSP/ST/stm32h747i_discovery.c **** /**
 432:./BSP/ST/stm32h747i_discovery.c ****   * @brief  DeInit COM port.
 433:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM COM port to be configured.
 434:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be (COM1)
 435:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 436:./BSP/ST/stm32h747i_discovery.c ****   */
 437:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_COM_DeInit(COM_TypeDef COM)
 438:./BSP/ST/stm32h747i_discovery.c **** {
 1161              		.loc 1 438 1
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 16
 1164              		@ frame_needed = 1, uses_anonymous_args = 0
 1165 0000 80B5     		push	{r7, lr}
 1166              	.LCFI75:
 1167              		.cfi_def_cfa_offset 8
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
 1170 0002 84B0     		sub	sp, sp, #16
 1171              	.LCFI76:
 1172              		.cfi_def_cfa_offset 24
 1173 0004 00AF     		add	r7, sp, #0
 1174              	.LCFI77:
 1175              		.cfi_def_cfa_register 7
 1176 0006 0346     		mov	r3, r0
 1177 0008 FB71     		strb	r3, [r7, #7]
 439:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 1178              		.loc 1 439 11
 1179 000a 0023     		movs	r3, #0
 1180 000c FB60     		str	r3, [r7, #12]
 440:./BSP/ST/stm32h747i_discovery.c **** 
 441:./BSP/ST/stm32h747i_discovery.c ****   if(COM >= COMn)
 1181              		.loc 1 441 5
 1182 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1183 0010 002B     		cmp	r3, #0
 1184 0012 03D0     		beq	.L63
 442:./BSP/ST/stm32h747i_discovery.c ****   {
 443:./BSP/ST/stm32h747i_discovery.c ****     ret = BSP_ERROR_WRONG_PARAM;
 1185              		.loc 1 443 9
 1186 0014 6FF00103 		mvn	r3, #1
 1187 0018 FB60     		str	r3, [r7, #12]
 1188 001a 25E0     		b	.L64
 1189              	.L63:
 444:./BSP/ST/stm32h747i_discovery.c ****   }
 445:./BSP/ST/stm32h747i_discovery.c ****   else
 446:./BSP/ST/stm32h747i_discovery.c ****   {
 447:./BSP/ST/stm32h747i_discovery.c ****     /* USART configuration */
 448:./BSP/ST/stm32h747i_discovery.c ****     hcom_uart[COM].Instance = COM_USART[COM];
 1190              		.loc 1 448 40
 1191 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1192              		.loc 1 448 19
 1193 001e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1194              		.loc 1 448 40
 1195 0020 1449     		ldr	r1, .L66
ARM GAS  /tmp/ccddg22r.s 			page 29


 1196 0022 51F82310 		ldr	r1, [r1, r3, lsl #2]
 1197              		.loc 1 448 29
 1198 0026 1448     		ldr	r0, .L66+4
 1199 0028 1346     		mov	r3, r2
 1200 002a DB00     		lsls	r3, r3, #3
 1201 002c 1344     		add	r3, r3, r2
 1202 002e 1B01     		lsls	r3, r3, #4
 1203 0030 0344     		add	r3, r3, r0
 1204 0032 1960     		str	r1, [r3]
 449:./BSP/ST/stm32h747i_discovery.c **** 
 450:./BSP/ST/stm32h747i_discovery.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
 451:./BSP/ST/stm32h747i_discovery.c ****     USART1_MspDeInit(&hcom_uart[COM]);
 1205              		.loc 1 451 32
 1206 0034 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1207              		.loc 1 451 5
 1208 0036 1346     		mov	r3, r2
 1209 0038 DB00     		lsls	r3, r3, #3
 1210 003a 1344     		add	r3, r3, r2
 1211 003c 1B01     		lsls	r3, r3, #4
 1212 003e 0E4A     		ldr	r2, .L66+4
 1213 0040 1344     		add	r3, r3, r2
 1214 0042 1846     		mov	r0, r3
 1215 0044 FFF7FEFF 		bl	USART1_MspDeInit
 452:./BSP/ST/stm32h747i_discovery.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */
 453:./BSP/ST/stm32h747i_discovery.c **** 
 454:./BSP/ST/stm32h747i_discovery.c ****     if(HAL_UART_DeInit(&hcom_uart[COM]) != HAL_OK)
 1216              		.loc 1 454 34
 1217 0048 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1218              		.loc 1 454 8
 1219 004a 1346     		mov	r3, r2
 1220 004c DB00     		lsls	r3, r3, #3
 1221 004e 1344     		add	r3, r3, r2
 1222 0050 1B01     		lsls	r3, r3, #4
 1223 0052 094A     		ldr	r2, .L66+4
 1224 0054 1344     		add	r3, r3, r2
 1225 0056 1846     		mov	r0, r3
 1226 0058 FFF7FEFF 		bl	HAL_UART_DeInit
 1227 005c 0346     		mov	r3, r0
 1228              		.loc 1 454 7
 1229 005e 002B     		cmp	r3, #0
 1230 0060 02D0     		beq	.L64
 455:./BSP/ST/stm32h747i_discovery.c ****     {
 456:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 1231              		.loc 1 456 11
 1232 0062 6FF00303 		mvn	r3, #3
 1233 0066 FB60     		str	r3, [r7, #12]
 1234              	.L64:
 457:./BSP/ST/stm32h747i_discovery.c ****     }
 458:./BSP/ST/stm32h747i_discovery.c ****   }
 459:./BSP/ST/stm32h747i_discovery.c **** 
 460:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 1235              		.loc 1 460 10
 1236 0068 FB68     		ldr	r3, [r7, #12]
 461:./BSP/ST/stm32h747i_discovery.c **** }
 1237              		.loc 1 461 1
 1238 006a 1846     		mov	r0, r3
 1239 006c 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccddg22r.s 			page 30


 1240              	.LCFI78:
 1241              		.cfi_def_cfa_offset 8
 1242 006e BD46     		mov	sp, r7
 1243              	.LCFI79:
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 0070 80BD     		pop	{r7, pc}
 1247              	.L67:
 1248 0072 00BF     		.align	2
 1249              	.L66:
 1250 0074 00000000 		.word	COM_USART
 1251 0078 00000000 		.word	hcom_uart
 1252              		.cfi_endproc
 1253              	.LFE347:
 1255              		.section	.text.MX_USART1_Init,"ax",%progbits
 1256              		.align	1
 1257              		.weak	MX_USART1_Init
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1261              		.fpu fpv5-d16
 1263              	MX_USART1_Init:
 1264              	.LFB348:
 462:./BSP/ST/stm32h747i_discovery.c **** 
 463:./BSP/ST/stm32h747i_discovery.c **** /**
 464:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Configures COM1 port.
 465:./BSP/ST/stm32h747i_discovery.c ****   * @param  huart USART handle
 466:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
 467:./BSP/ST/stm32h747i_discovery.c ****   *                  configuration information for the specified USART peripheral.
 468:./BSP/ST/stm32h747i_discovery.c ****   * @retval HAL error code
 469:./BSP/ST/stm32h747i_discovery.c ****   */
 470:./BSP/ST/stm32h747i_discovery.c **** __weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
 471:./BSP/ST/stm32h747i_discovery.c **** {
 1265              		.loc 1 471 1
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 8
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269 0000 80B5     		push	{r7, lr}
 1270              	.LCFI80:
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 82B0     		sub	sp, sp, #8
 1275              	.LCFI81:
 1276              		.cfi_def_cfa_offset 16
 1277 0004 00AF     		add	r7, sp, #0
 1278              	.LCFI82:
 1279              		.cfi_def_cfa_register 7
 1280 0006 7860     		str	r0, [r7, #4]
 1281 0008 3960     		str	r1, [r7]
 472:./BSP/ST/stm32h747i_discovery.c ****   /* USART configuration */
 473:./BSP/ST/stm32h747i_discovery.c ****   huart->Instance          = COM_USART[COM1];
 1282              		.loc 1 473 39
 1283 000a 154B     		ldr	r3, .L70
 1284 000c 1A68     		ldr	r2, [r3]
 1285              		.loc 1 473 28
 1286 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccddg22r.s 			page 31


 1287 0010 1A60     		str	r2, [r3]
 474:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.BaudRate     = (uint32_t)COM_Init->BaudRate;
 1288              		.loc 1 474 48
 1289 0012 3B68     		ldr	r3, [r7]
 1290 0014 1A68     		ldr	r2, [r3]
 1291              		.loc 1 474 28
 1292 0016 7B68     		ldr	r3, [r7, #4]
 1293 0018 5A60     		str	r2, [r3, #4]
 475:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.Mode         = UART_MODE_TX_RX;
 1294              		.loc 1 475 28
 1295 001a 7B68     		ldr	r3, [r7, #4]
 1296 001c 0C22     		movs	r2, #12
 1297 001e 5A61     		str	r2, [r3, #20]
 476:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 1298              		.loc 1 476 48
 1299 0020 3B68     		ldr	r3, [r7]
 1300 0022 5B89     		ldrh	r3, [r3, #10]
 1301              		.loc 1 476 30
 1302 0024 1A46     		mov	r2, r3
 1303              		.loc 1 476 28
 1304 0026 7B68     		ldr	r3, [r7, #4]
 1305 0028 1A61     		str	r2, [r3, #16]
 477:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 1306              		.loc 1 477 48
 1307 002a 3B68     		ldr	r3, [r7]
 1308 002c 5A68     		ldr	r2, [r3, #4]
 1309              		.loc 1 477 28
 1310 002e 7B68     		ldr	r3, [r7, #4]
 1311 0030 9A60     		str	r2, [r3, #8]
 478:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 1312              		.loc 1 478 48
 1313 0032 3B68     		ldr	r3, [r7]
 1314 0034 1B89     		ldrh	r3, [r3, #8]
 1315              		.loc 1 478 30
 1316 0036 1A46     		mov	r2, r3
 1317              		.loc 1 478 28
 1318 0038 7B68     		ldr	r3, [r7, #4]
 1319 003a DA60     		str	r2, [r3, #12]
 479:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 1320              		.loc 1 479 48
 1321 003c 3B68     		ldr	r3, [r7]
 1322 003e 9B89     		ldrh	r3, [r3, #12]
 1323              		.loc 1 479 30
 1324 0040 1A46     		mov	r2, r3
 1325              		.loc 1 479 28
 1326 0042 7B68     		ldr	r3, [r7, #4]
 1327 0044 9A61     		str	r2, [r3, #24]
 480:./BSP/ST/stm32h747i_discovery.c ****   huart->Init.OverSampling = UART_OVERSAMPLING_8;
 1328              		.loc 1 480 28
 1329 0046 7B68     		ldr	r3, [r7, #4]
 1330 0048 4FF40042 		mov	r2, #32768
 1331 004c DA61     		str	r2, [r3, #28]
 481:./BSP/ST/stm32h747i_discovery.c **** 
 482:./BSP/ST/stm32h747i_discovery.c ****   return HAL_UART_Init(huart);
 1332              		.loc 1 482 10
 1333 004e 7868     		ldr	r0, [r7, #4]
 1334 0050 FFF7FEFF 		bl	HAL_UART_Init
ARM GAS  /tmp/ccddg22r.s 			page 32


 1335 0054 0346     		mov	r3, r0
 483:./BSP/ST/stm32h747i_discovery.c **** }
 1336              		.loc 1 483 1
 1337 0056 1846     		mov	r0, r3
 1338 0058 0837     		adds	r7, r7, #8
 1339              	.LCFI83:
 1340              		.cfi_def_cfa_offset 8
 1341 005a BD46     		mov	sp, r7
 1342              	.LCFI84:
 1343              		.cfi_def_cfa_register 13
 1344              		@ sp needed
 1345 005c 80BD     		pop	{r7, pc}
 1346              	.L71:
 1347 005e 00BF     		.align	2
 1348              	.L70:
 1349 0060 00000000 		.word	COM_USART
 1350              		.cfi_endproc
 1351              	.LFE348:
 1353              		.section	.text.BSP_COM_SelectLogPort,"ax",%progbits
 1354              		.align	1
 1355              		.global	BSP_COM_SelectLogPort
 1356              		.syntax unified
 1357              		.thumb
 1358              		.thumb_func
 1359              		.fpu fpv5-d16
 1361              	BSP_COM_SelectLogPort:
 1362              	.LFB349:
 484:./BSP/ST/stm32h747i_discovery.c **** 
 485:./BSP/ST/stm32h747i_discovery.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 486:./BSP/ST/stm32h747i_discovery.c **** /**
 487:./BSP/ST/stm32h747i_discovery.c ****   * @brief Register Default COM Msp Callbacks
 488:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM COM port to be configured.
 489:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 490:./BSP/ST/stm32h747i_discovery.c ****   */
 491:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_COM_RegisterDefaultMspCallbacks(COM_TypeDef COM)
 492:./BSP/ST/stm32h747i_discovery.c **** {
 493:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 494:./BSP/ST/stm32h747i_discovery.c **** 
 495:./BSP/ST/stm32h747i_discovery.c ****   if(COM >= COMn)
 496:./BSP/ST/stm32h747i_discovery.c ****   {
 497:./BSP/ST/stm32h747i_discovery.c ****     ret = BSP_ERROR_WRONG_PARAM;
 498:./BSP/ST/stm32h747i_discovery.c ****   }
 499:./BSP/ST/stm32h747i_discovery.c ****   else
 500:./BSP/ST/stm32h747i_discovery.c ****   {
 501:./BSP/ST/stm32h747i_discovery.c ****     __HAL_UART_RESET_HANDLE_STATE(&hcom_uart[COM]);
 502:./BSP/ST/stm32h747i_discovery.c **** 
 503:./BSP/ST/stm32h747i_discovery.c ****     /* Register default MspInit/MspDeInit Callback */
 504:./BSP/ST/stm32h747i_discovery.c ****     if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, USART1_MspInit) != HAL_OK
 505:./BSP/ST/stm32h747i_discovery.c ****     {
 506:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 507:./BSP/ST/stm32h747i_discovery.c ****     }
 508:./BSP/ST/stm32h747i_discovery.c ****     else if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, USART1_MspDeInit) 
 509:./BSP/ST/stm32h747i_discovery.c ****     {
 510:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 511:./BSP/ST/stm32h747i_discovery.c ****     }
 512:./BSP/ST/stm32h747i_discovery.c ****     else
 513:./BSP/ST/stm32h747i_discovery.c ****     {
ARM GAS  /tmp/ccddg22r.s 			page 33


 514:./BSP/ST/stm32h747i_discovery.c ****       IsComMspCbValid[COM] = 1U;
 515:./BSP/ST/stm32h747i_discovery.c ****     }
 516:./BSP/ST/stm32h747i_discovery.c ****   }
 517:./BSP/ST/stm32h747i_discovery.c **** 
 518:./BSP/ST/stm32h747i_discovery.c ****   /* BSP status */
 519:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 520:./BSP/ST/stm32h747i_discovery.c **** }
 521:./BSP/ST/stm32h747i_discovery.c **** 
 522:./BSP/ST/stm32h747i_discovery.c **** /**
 523:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Register COM1 Msp Callback registering
 524:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM COM port to be configured.
 525:./BSP/ST/stm32h747i_discovery.c ****   * @param  Callbacks     pointer to COM MspInit/MspDeInit callback functions
 526:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 527:./BSP/ST/stm32h747i_discovery.c ****   */
 528:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_COM_RegisterMspCallbacks(COM_TypeDef COM, BSP_COM_Cb_t *Callback)
 529:./BSP/ST/stm32h747i_discovery.c **** {
 530:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
 531:./BSP/ST/stm32h747i_discovery.c **** 
 532:./BSP/ST/stm32h747i_discovery.c ****   if(COM >= COMn)
 533:./BSP/ST/stm32h747i_discovery.c ****   {
 534:./BSP/ST/stm32h747i_discovery.c ****     ret = BSP_ERROR_WRONG_PARAM;
 535:./BSP/ST/stm32h747i_discovery.c ****   }
 536:./BSP/ST/stm32h747i_discovery.c ****   else
 537:./BSP/ST/stm32h747i_discovery.c ****   {
 538:./BSP/ST/stm32h747i_discovery.c ****     __HAL_UART_RESET_HANDLE_STATE(&hcom_uart[COM]);
 539:./BSP/ST/stm32h747i_discovery.c **** 
 540:./BSP/ST/stm32h747i_discovery.c ****     /* Register MspInit/MspDeInit Callbacks */
 541:./BSP/ST/stm32h747i_discovery.c ****     if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, Callback->pMspInitCb) != 
 542:./BSP/ST/stm32h747i_discovery.c ****     {
 543:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 544:./BSP/ST/stm32h747i_discovery.c ****     }
 545:./BSP/ST/stm32h747i_discovery.c ****     else if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, Callback->pMspDeIn
 546:./BSP/ST/stm32h747i_discovery.c ****     {
 547:./BSP/ST/stm32h747i_discovery.c ****       ret = BSP_ERROR_PERIPH_FAILURE;
 548:./BSP/ST/stm32h747i_discovery.c ****     }
 549:./BSP/ST/stm32h747i_discovery.c ****     else
 550:./BSP/ST/stm32h747i_discovery.c ****     {
 551:./BSP/ST/stm32h747i_discovery.c ****       IsComMspCbValid[COM] = 1U;
 552:./BSP/ST/stm32h747i_discovery.c ****     }
 553:./BSP/ST/stm32h747i_discovery.c ****   }
 554:./BSP/ST/stm32h747i_discovery.c **** 
 555:./BSP/ST/stm32h747i_discovery.c ****   /* BSP status */
 556:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 557:./BSP/ST/stm32h747i_discovery.c **** }
 558:./BSP/ST/stm32h747i_discovery.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 559:./BSP/ST/stm32h747i_discovery.c **** 
 560:./BSP/ST/stm32h747i_discovery.c **** #if (USE_COM_LOG > 0)
 561:./BSP/ST/stm32h747i_discovery.c **** /**
 562:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Select the active COM port.
 563:./BSP/ST/stm32h747i_discovery.c ****   * @param  COM COM port to be activated.
 564:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be COM1 or/and COM2
 565:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 566:./BSP/ST/stm32h747i_discovery.c ****   */
 567:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_COM_SelectLogPort(COM_TypeDef COM)
 568:./BSP/ST/stm32h747i_discovery.c **** {
 1363              		.loc 1 568 1
 1364              		.cfi_startproc
ARM GAS  /tmp/ccddg22r.s 			page 34


 1365              		@ args = 0, pretend = 0, frame = 8
 1366              		@ frame_needed = 1, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 1368 0000 80B4     		push	{r7}
 1369              	.LCFI85:
 1370              		.cfi_def_cfa_offset 4
 1371              		.cfi_offset 7, -4
 1372 0002 83B0     		sub	sp, sp, #12
 1373              	.LCFI86:
 1374              		.cfi_def_cfa_offset 16
 1375 0004 00AF     		add	r7, sp, #0
 1376              	.LCFI87:
 1377              		.cfi_def_cfa_register 7
 1378 0006 0346     		mov	r3, r0
 1379 0008 FB71     		strb	r3, [r7, #7]
 569:./BSP/ST/stm32h747i_discovery.c ****   if(COM_ActiveLogPort != COM)
 1380              		.loc 1 569 24
 1381 000a 074B     		ldr	r3, .L75
 1382 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1383              		.loc 1 569 5
 1384 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1385 0010 9A42     		cmp	r2, r3
 1386 0012 02D0     		beq	.L73
 570:./BSP/ST/stm32h747i_discovery.c ****   {
 571:./BSP/ST/stm32h747i_discovery.c ****     COM_ActiveLogPort = COM;
 1387              		.loc 1 571 23
 1388 0014 044A     		ldr	r2, .L75
 1389 0016 FB79     		ldrb	r3, [r7, #7]
 1390 0018 1370     		strb	r3, [r2]
 1391              	.L73:
 572:./BSP/ST/stm32h747i_discovery.c ****   }
 573:./BSP/ST/stm32h747i_discovery.c ****   return BSP_ERROR_NONE;
 1392              		.loc 1 573 10
 1393 001a 0023     		movs	r3, #0
 574:./BSP/ST/stm32h747i_discovery.c **** }
 1394              		.loc 1 574 1
 1395 001c 1846     		mov	r0, r3
 1396 001e 0C37     		adds	r7, r7, #12
 1397              	.LCFI88:
 1398              		.cfi_def_cfa_offset 4
 1399 0020 BD46     		mov	sp, r7
 1400              	.LCFI89:
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 0022 5DF8047B 		ldr	r7, [sp], #4
 1404              	.LCFI90:
 1405              		.cfi_restore 7
 1406              		.cfi_def_cfa_offset 0
 1407 0026 7047     		bx	lr
 1408              	.L76:
 1409              		.align	2
 1410              	.L75:
 1411 0028 00000000 		.word	COM_ActiveLogPort
 1412              		.cfi_endproc
 1413              	.LFE349:
 1415              		.section	.text.__io_putchar,"ax",%progbits
 1416              		.align	1
ARM GAS  /tmp/ccddg22r.s 			page 35


 1417              		.global	__io_putchar
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu fpv5-d16
 1423              	__io_putchar:
 1424              	.LFB350:
 575:./BSP/ST/stm32h747i_discovery.c **** 
 576:./BSP/ST/stm32h747i_discovery.c ****  #ifdef __GNUC__
 577:./BSP/ST/stm32h747i_discovery.c ****  int __io_putchar (int ch)
 578:./BSP/ST/stm32h747i_discovery.c ****  #else
 579:./BSP/ST/stm32h747i_discovery.c ****  int fputc (int ch, FILE *f)
 580:./BSP/ST/stm32h747i_discovery.c ****  #endif /* __GNUC__ */
 581:./BSP/ST/stm32h747i_discovery.c **** {
 1425              		.loc 1 581 1
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 8
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429 0000 80B5     		push	{r7, lr}
 1430              	.LCFI91:
 1431              		.cfi_def_cfa_offset 8
 1432              		.cfi_offset 7, -8
 1433              		.cfi_offset 14, -4
 1434 0002 82B0     		sub	sp, sp, #8
 1435              	.LCFI92:
 1436              		.cfi_def_cfa_offset 16
 1437 0004 00AF     		add	r7, sp, #0
 1438              	.LCFI93:
 1439              		.cfi_def_cfa_register 7
 1440 0006 7860     		str	r0, [r7, #4]
 582:./BSP/ST/stm32h747i_discovery.c ****   (void)HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 1441              		.loc 1 582 39
 1442 0008 094B     		ldr	r3, .L79
 1443 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1444 000c 1A46     		mov	r2, r3
 1445              		.loc 1 582 9
 1446 000e 1346     		mov	r3, r2
 1447 0010 DB00     		lsls	r3, r3, #3
 1448 0012 1344     		add	r3, r3, r2
 1449 0014 1B01     		lsls	r3, r3, #4
 1450 0016 074A     		ldr	r2, .L79+4
 1451 0018 9818     		adds	r0, r3, r2
 1452 001a 391D     		adds	r1, r7, #4
 1453 001c 4FF47A73 		mov	r3, #1000
 1454 0020 0122     		movs	r2, #1
 1455 0022 FFF7FEFF 		bl	HAL_UART_Transmit
 583:./BSP/ST/stm32h747i_discovery.c ****   return ch;
 1456              		.loc 1 583 10
 1457 0026 7B68     		ldr	r3, [r7, #4]
 584:./BSP/ST/stm32h747i_discovery.c **** }
 1458              		.loc 1 584 1
 1459 0028 1846     		mov	r0, r3
 1460 002a 0837     		adds	r7, r7, #8
 1461              	.LCFI94:
 1462              		.cfi_def_cfa_offset 8
 1463 002c BD46     		mov	sp, r7
 1464              	.LCFI95:
ARM GAS  /tmp/ccddg22r.s 			page 36


 1465              		.cfi_def_cfa_register 13
 1466              		@ sp needed
 1467 002e 80BD     		pop	{r7, pc}
 1468              	.L80:
 1469              		.align	2
 1470              	.L79:
 1471 0030 00000000 		.word	COM_ActiveLogPort
 1472 0034 00000000 		.word	hcom_uart
 1473              		.cfi_endproc
 1474              	.LFE350:
 1476              		.section	.text.BSP_JOY_Init,"ax",%progbits
 1477              		.align	1
 1478              		.global	BSP_JOY_Init
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv5-d16
 1484              	BSP_JOY_Init:
 1485              	.LFB351:
 585:./BSP/ST/stm32h747i_discovery.c **** #endif /* USE_COM_LOG */
 586:./BSP/ST/stm32h747i_discovery.c **** #endif /* USE_BSP_COM_FEATURE */
 587:./BSP/ST/stm32h747i_discovery.c **** 
 588:./BSP/ST/stm32h747i_discovery.c **** /**
 589:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Configures joystick GPIO and EXTI modes.
 590:./BSP/ST/stm32h747i_discovery.c ****   * @param  JOY Joystick to be initialized
 591:./BSP/ST/stm32h747i_discovery.c ****   * @param  JoyMode Button mode.
 592:./BSP/ST/stm32h747i_discovery.c ****   *          This parameter can be one of the following values:
 593:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  JOY_MODE_GPIO: Joystick pins will be used as simple IOs
 594:./BSP/ST/stm32h747i_discovery.c ****   *            @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
 595:./BSP/ST/stm32h747i_discovery.c ****   *                                 with interrupt generation capability
 596:./BSP/ST/stm32h747i_discovery.c ****   * @param  JoyPins joystick pins to be initialized
 597:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 598:./BSP/ST/stm32h747i_discovery.c ****   */
 599:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
 600:./BSP/ST/stm32h747i_discovery.c **** {
 1486              		.loc 1 600 1
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 64
 1489              		@ frame_needed = 1, uses_anonymous_args = 0
 1490 0000 80B5     		push	{r7, lr}
 1491              	.LCFI96:
 1492              		.cfi_def_cfa_offset 8
 1493              		.cfi_offset 7, -8
 1494              		.cfi_offset 14, -4
 1495 0002 90B0     		sub	sp, sp, #64
 1496              	.LCFI97:
 1497              		.cfi_def_cfa_offset 72
 1498 0004 00AF     		add	r7, sp, #0
 1499              	.LCFI98:
 1500              		.cfi_def_cfa_register 7
 1501 0006 0346     		mov	r3, r0
 1502 0008 FB71     		strb	r3, [r7, #7]
 1503 000a 0B46     		mov	r3, r1
 1504 000c BB71     		strb	r3, [r7, #6]
 1505 000e 1346     		mov	r3, r2
 1506 0010 7B71     		strb	r3, [r7, #5]
 601:./BSP/ST/stm32h747i_discovery.c ****   int32_t ret = BSP_ERROR_NONE;
ARM GAS  /tmp/ccddg22r.s 			page 37


 1507              		.loc 1 601 11
 1508 0012 0023     		movs	r3, #0
 1509 0014 BB63     		str	r3, [r7, #56]
 602:./BSP/ST/stm32h747i_discovery.c ****   uint32_t joykey, key_pressed;
 603:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef gpio_init_structure;
 604:./BSP/ST/stm32h747i_discovery.c **** 
 605:./BSP/ST/stm32h747i_discovery.c ****   static BSP_EXTI_LineCallback JoyCallback[JOY_KEY_NUMBER] = {JOY1_SEL_EXTI_Callback,
 606:./BSP/ST/stm32h747i_discovery.c ****                                                               JOY1_DOWN_EXTI_Callback,
 607:./BSP/ST/stm32h747i_discovery.c ****                                                               JOY1_LEFT_EXTI_Callback,
 608:./BSP/ST/stm32h747i_discovery.c ****                                                               JOY1_RIGHT_EXTI_Callback,
 609:./BSP/ST/stm32h747i_discovery.c ****                                                               JOY1_UP_EXTI_Callback
 610:./BSP/ST/stm32h747i_discovery.c ****                                                              };
 611:./BSP/ST/stm32h747i_discovery.c ****   static const uint32_t JOY_EXTI_LINE[JOY_KEY_NUMBER]   = {JOY1_SEL_EXTI_LINE,
 612:./BSP/ST/stm32h747i_discovery.c ****                                                            JOY1_DOWN_EXTI_LINE,
 613:./BSP/ST/stm32h747i_discovery.c ****                                                            JOY1_LEFT_EXTI_LINE,
 614:./BSP/ST/stm32h747i_discovery.c ****                                                            JOY1_RIGHT_EXTI_LINE,
 615:./BSP/ST/stm32h747i_discovery.c ****                                                            JOY1_UP_EXTI_LINE
 616:./BSP/ST/stm32h747i_discovery.c ****                                                           };
 617:./BSP/ST/stm32h747i_discovery.c ****   static uint32_t  BSP_JOY_PRIO [JOY_KEY_NUMBER] ={BSP_JOY1_SEL_IT_PRIORITY,
 618:./BSP/ST/stm32h747i_discovery.c ****                                                    BSP_JOY1_DOWN_IT_PRIORITY,
 619:./BSP/ST/stm32h747i_discovery.c ****                                                    BSP_JOY1_LEFT_IT_PRIORITY,
 620:./BSP/ST/stm32h747i_discovery.c ****                                                    BSP_JOY1_RIGHT_IT_PRIORITY,
 621:./BSP/ST/stm32h747i_discovery.c ****                                                    BSP_JOY1_UP_IT_PRIORITY
 622:./BSP/ST/stm32h747i_discovery.c ****                                                   };
 623:./BSP/ST/stm32h747i_discovery.c **** 
 624:./BSP/ST/stm32h747i_discovery.c ****   /* Store Joystick pins initialized */
 625:./BSP/ST/stm32h747i_discovery.c ****   JoyPinsMask |= (uint32_t)JoyPins;
 1510              		.loc 1 625 18
 1511 0016 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1512              		.loc 1 625 15
 1513 0018 684B     		ldr	r3, .L92
 1514 001a 1B68     		ldr	r3, [r3]
 1515 001c 1343     		orrs	r3, r3, r2
 1516 001e 674A     		ldr	r2, .L92
 1517 0020 1360     		str	r3, [r2]
 626:./BSP/ST/stm32h747i_discovery.c **** 
 627:./BSP/ST/stm32h747i_discovery.c ****   /* Initialized the Joystick. */
 628:./BSP/ST/stm32h747i_discovery.c ****   for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 1518              		.loc 1 628 14
 1519 0022 0023     		movs	r3, #0
 1520 0024 FB63     		str	r3, [r7, #60]
 1521              		.loc 1 628 3
 1522 0026 C0E0     		b	.L82
 1523              	.L90:
 629:./BSP/ST/stm32h747i_discovery.c ****   {
 630:./BSP/ST/stm32h747i_discovery.c ****     key_pressed = 1UL << joykey;
 1524              		.loc 1 630 17
 1525 0028 0122     		movs	r2, #1
 1526 002a FB6B     		ldr	r3, [r7, #60]
 1527 002c 02FA03F3 		lsl	r3, r2, r3
 1528 0030 7B63     		str	r3, [r7, #52]
 631:./BSP/ST/stm32h747i_discovery.c ****     if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 1529              		.loc 1 631 23
 1530 0032 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1531              		.loc 1 631 21
 1532 0034 7B6B     		ldr	r3, [r7, #52]
 1533 0036 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccddg22r.s 			page 38


 1534              		.loc 1 631 7
 1535 0038 7A6B     		ldr	r2, [r7, #52]
 1536 003a 9A42     		cmp	r2, r3
 1537 003c 40F0B280 		bne	.L83
 632:./BSP/ST/stm32h747i_discovery.c ****     {
 633:./BSP/ST/stm32h747i_discovery.c ****       if(JOY == JOY1)
 1538              		.loc 1 633 9
 1539 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1540 0042 002B     		cmp	r3, #0
 1541 0044 40F0AE80 		bne	.L83
 634:./BSP/ST/stm32h747i_discovery.c ****       {
 635:./BSP/ST/stm32h747i_discovery.c ****       /* Enable the JOY clock */
 636:./BSP/ST/stm32h747i_discovery.c ****         if(key_pressed == (uint32_t)JOY_SEL)
 1542              		.loc 1 636 11
 1543 0048 7B6B     		ldr	r3, [r7, #52]
 1544 004a 012B     		cmp	r3, #1
 1545 004c 0FD1     		bne	.L84
 1546              	.LBB8:
 637:./BSP/ST/stm32h747i_discovery.c ****         {
 638:./BSP/ST/stm32h747i_discovery.c ****           JOY1_SEL_GPIO_CLK_ENABLE();
 1547              		.loc 1 638 11
 1548 004e 5C4B     		ldr	r3, .L92+4
 1549 0050 D3F8E030 		ldr	r3, [r3, #224]
 1550 0054 5A4A     		ldr	r2, .L92+4
 1551 0056 43F48063 		orr	r3, r3, #1024
 1552 005a C2F8E030 		str	r3, [r2, #224]
 1553 005e 584B     		ldr	r3, .L92+4
 1554 0060 D3F8E030 		ldr	r3, [r3, #224]
 1555 0064 03F48063 		and	r3, r3, #1024
 1556 0068 FB61     		str	r3, [r7, #28]
 1557 006a FB69     		ldr	r3, [r7, #28]
 1558              	.LBE8:
 1559 006c 4AE0     		b	.L85
 1560              	.L84:
 639:./BSP/ST/stm32h747i_discovery.c ****         }
 640:./BSP/ST/stm32h747i_discovery.c ****         else if(key_pressed == (uint32_t)JOY_DOWN)
 1561              		.loc 1 640 16
 1562 006e 7B6B     		ldr	r3, [r7, #52]
 1563 0070 022B     		cmp	r3, #2
 1564 0072 0FD1     		bne	.L86
 1565              	.LBB9:
 641:./BSP/ST/stm32h747i_discovery.c ****         {
 642:./BSP/ST/stm32h747i_discovery.c ****           JOY1_DOWN_GPIO_CLK_ENABLE();
 1566              		.loc 1 642 11
 1567 0074 524B     		ldr	r3, .L92+4
 1568 0076 D3F8E030 		ldr	r3, [r3, #224]
 1569 007a 514A     		ldr	r2, .L92+4
 1570 007c 43F48063 		orr	r3, r3, #1024
 1571 0080 C2F8E030 		str	r3, [r2, #224]
 1572 0084 4E4B     		ldr	r3, .L92+4
 1573 0086 D3F8E030 		ldr	r3, [r3, #224]
 1574 008a 03F48063 		and	r3, r3, #1024
 1575 008e BB61     		str	r3, [r7, #24]
 1576 0090 BB69     		ldr	r3, [r7, #24]
 1577              	.LBE9:
 1578 0092 37E0     		b	.L85
 1579              	.L86:
ARM GAS  /tmp/ccddg22r.s 			page 39


 643:./BSP/ST/stm32h747i_discovery.c ****         }
 644:./BSP/ST/stm32h747i_discovery.c ****         else if(key_pressed == (uint32_t) JOY_LEFT)
 1580              		.loc 1 644 16
 1581 0094 7B6B     		ldr	r3, [r7, #52]
 1582 0096 042B     		cmp	r3, #4
 1583 0098 0FD1     		bne	.L87
 1584              	.LBB10:
 645:./BSP/ST/stm32h747i_discovery.c ****         {
 646:./BSP/ST/stm32h747i_discovery.c ****           JOY1_LEFT_GPIO_CLK_ENABLE();
 1585              		.loc 1 646 11
 1586 009a 494B     		ldr	r3, .L92+4
 1587 009c D3F8E030 		ldr	r3, [r3, #224]
 1588 00a0 474A     		ldr	r2, .L92+4
 1589 00a2 43F48063 		orr	r3, r3, #1024
 1590 00a6 C2F8E030 		str	r3, [r2, #224]
 1591 00aa 454B     		ldr	r3, .L92+4
 1592 00ac D3F8E030 		ldr	r3, [r3, #224]
 1593 00b0 03F48063 		and	r3, r3, #1024
 1594 00b4 7B61     		str	r3, [r7, #20]
 1595 00b6 7B69     		ldr	r3, [r7, #20]
 1596              	.LBE10:
 1597 00b8 24E0     		b	.L85
 1598              	.L87:
 647:./BSP/ST/stm32h747i_discovery.c ****         }
 648:./BSP/ST/stm32h747i_discovery.c ****         else if(key_pressed == (uint32_t) JOY_RIGHT)
 1599              		.loc 1 648 16
 1600 00ba 7B6B     		ldr	r3, [r7, #52]
 1601 00bc 082B     		cmp	r3, #8
 1602 00be 0FD1     		bne	.L88
 1603              	.LBB11:
 649:./BSP/ST/stm32h747i_discovery.c ****         {
 650:./BSP/ST/stm32h747i_discovery.c ****           JOY1_RIGHT_GPIO_CLK_ENABLE();
 1604              		.loc 1 650 11
 1605 00c0 3F4B     		ldr	r3, .L92+4
 1606 00c2 D3F8E030 		ldr	r3, [r3, #224]
 1607 00c6 3E4A     		ldr	r2, .L92+4
 1608 00c8 43F48063 		orr	r3, r3, #1024
 1609 00cc C2F8E030 		str	r3, [r2, #224]
 1610 00d0 3B4B     		ldr	r3, .L92+4
 1611 00d2 D3F8E030 		ldr	r3, [r3, #224]
 1612 00d6 03F48063 		and	r3, r3, #1024
 1613 00da 3B61     		str	r3, [r7, #16]
 1614 00dc 3B69     		ldr	r3, [r7, #16]
 1615              	.LBE11:
 1616 00de 11E0     		b	.L85
 1617              	.L88:
 651:./BSP/ST/stm32h747i_discovery.c ****         }
 652:./BSP/ST/stm32h747i_discovery.c ****         else
 653:./BSP/ST/stm32h747i_discovery.c ****         {
 654:./BSP/ST/stm32h747i_discovery.c ****           if(key_pressed == (uint32_t) JOY_UP)
 1618              		.loc 1 654 13
 1619 00e0 7B6B     		ldr	r3, [r7, #52]
 1620 00e2 102B     		cmp	r3, #16
 1621 00e4 0ED1     		bne	.L85
 1622              	.LBB12:
 655:./BSP/ST/stm32h747i_discovery.c ****           {
 656:./BSP/ST/stm32h747i_discovery.c ****             JOY1_UP_GPIO_CLK_ENABLE();
ARM GAS  /tmp/ccddg22r.s 			page 40


 1623              		.loc 1 656 13
 1624 00e6 364B     		ldr	r3, .L92+4
 1625 00e8 D3F8E030 		ldr	r3, [r3, #224]
 1626 00ec 344A     		ldr	r2, .L92+4
 1627 00ee 43F48063 		orr	r3, r3, #1024
 1628 00f2 C2F8E030 		str	r3, [r2, #224]
 1629 00f6 324B     		ldr	r3, .L92+4
 1630 00f8 D3F8E030 		ldr	r3, [r3, #224]
 1631 00fc 03F48063 		and	r3, r3, #1024
 1632 0100 FB60     		str	r3, [r7, #12]
 1633 0102 FB68     		ldr	r3, [r7, #12]
 1634              	.L85:
 1635              	.LBE12:
 657:./BSP/ST/stm32h747i_discovery.c ****           }
 658:./BSP/ST/stm32h747i_discovery.c ****         }
 659:./BSP/ST/stm32h747i_discovery.c **** 
 660:./BSP/ST/stm32h747i_discovery.c ****         gpio_init_structure.Pin = JOY1_PIN[joykey];
 1636              		.loc 1 660 43
 1637 0104 2F4A     		ldr	r2, .L92+8
 1638 0106 FB6B     		ldr	r3, [r7, #60]
 1639 0108 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1640              		.loc 1 660 33
 1641 010c 3B62     		str	r3, [r7, #32]
 661:./BSP/ST/stm32h747i_discovery.c ****         gpio_init_structure.Pull = GPIO_PULLUP;
 1642              		.loc 1 661 34
 1643 010e 0123     		movs	r3, #1
 1644 0110 BB62     		str	r3, [r7, #40]
 662:./BSP/ST/stm32h747i_discovery.c ****         gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 1645              		.loc 1 662 35
 1646 0112 0323     		movs	r3, #3
 1647 0114 FB62     		str	r3, [r7, #44]
 663:./BSP/ST/stm32h747i_discovery.c **** 
 664:./BSP/ST/stm32h747i_discovery.c ****         if (JoyMode == JOY_MODE_GPIO)
 1648              		.loc 1 664 12
 1649 0116 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1650 0118 002B     		cmp	r3, #0
 1651 011a 0CD1     		bne	.L89
 665:./BSP/ST/stm32h747i_discovery.c ****         {
 666:./BSP/ST/stm32h747i_discovery.c ****           /* Configure Joy pin as input */
 667:./BSP/ST/stm32h747i_discovery.c ****           gpio_init_structure.Mode = GPIO_MODE_INPUT;
 1652              		.loc 1 667 36
 1653 011c 0023     		movs	r3, #0
 1654 011e 7B62     		str	r3, [r7, #36]
 668:./BSP/ST/stm32h747i_discovery.c ****           HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 1655              		.loc 1 668 11
 1656 0120 294A     		ldr	r2, .L92+12
 1657 0122 FB6B     		ldr	r3, [r7, #60]
 1658 0124 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1659 0128 07F12002 		add	r2, r7, #32
 1660 012c 1146     		mov	r1, r2
 1661 012e 1846     		mov	r0, r3
 1662 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 1663 0134 36E0     		b	.L83
 1664              	.L89:
 669:./BSP/ST/stm32h747i_discovery.c ****         }
 670:./BSP/ST/stm32h747i_discovery.c ****         else /*(JoyMode == JOY_MODE_EXTI)*/
 671:./BSP/ST/stm32h747i_discovery.c ****         {
ARM GAS  /tmp/ccddg22r.s 			page 41


 672:./BSP/ST/stm32h747i_discovery.c ****           /* Configure Joy pin as input with External interrupt */
 673:./BSP/ST/stm32h747i_discovery.c ****           gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 1665              		.loc 1 673 36
 1666 0136 254B     		ldr	r3, .L92+16
 1667 0138 7B62     		str	r3, [r7, #36]
 674:./BSP/ST/stm32h747i_discovery.c ****           HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 1668              		.loc 1 674 11
 1669 013a 234A     		ldr	r2, .L92+12
 1670 013c FB6B     		ldr	r3, [r7, #60]
 1671 013e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1672 0142 07F12002 		add	r2, r7, #32
 1673 0146 1146     		mov	r1, r2
 1674 0148 1846     		mov	r0, r3
 1675 014a FFF7FEFF 		bl	HAL_GPIO_Init
 675:./BSP/ST/stm32h747i_discovery.c **** 
 676:./BSP/ST/stm32h747i_discovery.c ****          (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 1676              		.loc 1 676 16
 1677 014e FB6B     		ldr	r3, [r7, #60]
 1678 0150 DB00     		lsls	r3, r3, #3
 1679 0152 1F4A     		ldr	r2, .L92+20
 1680 0154 1A44     		add	r2, r2, r3
 1681 0156 1F49     		ldr	r1, .L92+24
 1682 0158 FB6B     		ldr	r3, [r7, #60]
 1683 015a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1684 015e 1946     		mov	r1, r3
 1685 0160 1046     		mov	r0, r2
 1686 0162 FFF7FEFF 		bl	HAL_EXTI_GetHandle
 677:./BSP/ST/stm32h747i_discovery.c ****          (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[jo
 1687              		.loc 1 677 16
 1688 0166 FB6B     		ldr	r3, [r7, #60]
 1689 0168 DB00     		lsls	r3, r3, #3
 1690 016a 194A     		ldr	r2, .L92+20
 1691 016c 9818     		adds	r0, r3, r2
 1692 016e 1A4A     		ldr	r2, .L92+28
 1693 0170 FB6B     		ldr	r3, [r7, #60]
 1694 0172 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1695 0176 1A46     		mov	r2, r3
 1696 0178 0021     		movs	r1, #0
 1697 017a FFF7FEFF 		bl	HAL_EXTI_RegisterCallback
 678:./BSP/ST/stm32h747i_discovery.c **** 
 679:./BSP/ST/stm32h747i_discovery.c ****           /* Enable and set Joy EXTI Interrupt to the lowest priority */
 680:./BSP/ST/stm32h747i_discovery.c ****           HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 1698              		.loc 1 680 53
 1699 017e 174A     		ldr	r2, .L92+32
 1700 0180 FB6B     		ldr	r3, [r7, #60]
 1701 0182 32F91300 		ldrsh	r0, [r2, r3, lsl #1]
 1702              		.loc 1 680 11
 1703 0186 164A     		ldr	r2, .L92+36
 1704 0188 FB6B     		ldr	r3, [r7, #60]
 1705 018a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1706 018e 0022     		movs	r2, #0
 1707 0190 1946     		mov	r1, r3
 1708 0192 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 681:./BSP/ST/stm32h747i_discovery.c ****           HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 1709              		.loc 1 681 51
 1710 0196 114A     		ldr	r2, .L92+32
 1711 0198 FB6B     		ldr	r3, [r7, #60]
ARM GAS  /tmp/ccddg22r.s 			page 42


 1712 019a 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 1713              		.loc 1 681 11
 1714 019e 1846     		mov	r0, r3
 1715 01a0 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1716              	.L83:
 628:./BSP/ST/stm32h747i_discovery.c ****   {
 1717              		.loc 1 628 52 discriminator 2
 1718 01a4 FB6B     		ldr	r3, [r7, #60]
 1719 01a6 0133     		adds	r3, r3, #1
 1720 01a8 FB63     		str	r3, [r7, #60]
 1721              	.L82:
 628:./BSP/ST/stm32h747i_discovery.c ****   {
 1722              		.loc 1 628 3 discriminator 1
 1723 01aa FB6B     		ldr	r3, [r7, #60]
 1724 01ac 042B     		cmp	r3, #4
 1725 01ae 7FF63BAF 		bls	.L90
 682:./BSP/ST/stm32h747i_discovery.c ****         }
 683:./BSP/ST/stm32h747i_discovery.c ****       }
 684:./BSP/ST/stm32h747i_discovery.c ****     }
 685:./BSP/ST/stm32h747i_discovery.c ****   }
 686:./BSP/ST/stm32h747i_discovery.c **** 
 687:./BSP/ST/stm32h747i_discovery.c ****   return ret;
 1726              		.loc 1 687 10
 1727 01b2 BB6B     		ldr	r3, [r7, #56]
 688:./BSP/ST/stm32h747i_discovery.c **** }
 1728              		.loc 1 688 1
 1729 01b4 1846     		mov	r0, r3
 1730 01b6 4037     		adds	r7, r7, #64
 1731              	.LCFI99:
 1732              		.cfi_def_cfa_offset 8
 1733 01b8 BD46     		mov	sp, r7
 1734              	.LCFI100:
 1735              		.cfi_def_cfa_register 13
 1736              		@ sp needed
 1737 01ba 80BD     		pop	{r7, pc}
 1738              	.L93:
 1739              		.align	2
 1740              	.L92:
 1741 01bc 00000000 		.word	JoyPinsMask
 1742 01c0 00440258 		.word	1476543488
 1743 01c4 00000000 		.word	JOY1_PIN
 1744 01c8 00000000 		.word	JOY1_PORT
 1745 01cc 00003111 		.word	288423936
 1746 01d0 00000000 		.word	hjoy_exti
 1747 01d4 00000000 		.word	JOY_EXTI_LINE.12396
 1748 01d8 00000000 		.word	JoyCallback.12395
 1749 01dc 00000000 		.word	JOY1_IRQn
 1750 01e0 00000000 		.word	BSP_JOY_PRIO.12397
 1751              		.cfi_endproc
 1752              	.LFE351:
 1754              		.section	.text.BSP_JOY_DeInit,"ax",%progbits
 1755              		.align	1
 1756              		.global	BSP_JOY_DeInit
 1757              		.syntax unified
 1758              		.thumb
 1759              		.thumb_func
 1760              		.fpu fpv5-d16
ARM GAS  /tmp/ccddg22r.s 			page 43


 1762              	BSP_JOY_DeInit:
 1763              	.LFB352:
 689:./BSP/ST/stm32h747i_discovery.c **** /**
 690:./BSP/ST/stm32h747i_discovery.c ****   * @brief  DeInit joystick GPIOs.
 691:./BSP/ST/stm32h747i_discovery.c ****   * @param  JOY instance
 692:./BSP/ST/stm32h747i_discovery.c ****   * @note   JOY DeInit does not disable the MFX, just set the MFX pins in Off mode
 693:./BSP/ST/stm32h747i_discovery.c ****   * @param  JoyPins joystick pins to be de-initialized
 694:./BSP/ST/stm32h747i_discovery.c ****   * @retval BSP status
 695:./BSP/ST/stm32h747i_discovery.c ****   */
 696:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_JOY_DeInit(JOY_TypeDef JOY, JOYPin_TypeDef JoyPins)
 697:./BSP/ST/stm32h747i_discovery.c **** {
 1764              		.loc 1 697 1
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 16
 1767              		@ frame_needed = 1, uses_anonymous_args = 0
 1768 0000 80B5     		push	{r7, lr}
 1769              	.LCFI101:
 1770              		.cfi_def_cfa_offset 8
 1771              		.cfi_offset 7, -8
 1772              		.cfi_offset 14, -4
 1773 0002 84B0     		sub	sp, sp, #16
 1774              	.LCFI102:
 1775              		.cfi_def_cfa_offset 24
 1776 0004 00AF     		add	r7, sp, #0
 1777              	.LCFI103:
 1778              		.cfi_def_cfa_register 7
 1779 0006 0346     		mov	r3, r0
 1780 0008 0A46     		mov	r2, r1
 1781 000a FB71     		strb	r3, [r7, #7]
 1782 000c 1346     		mov	r3, r2
 1783 000e BB71     		strb	r3, [r7, #6]
 698:./BSP/ST/stm32h747i_discovery.c ****   uint32_t joykey, key_pressed;
 699:./BSP/ST/stm32h747i_discovery.c **** 
 700:./BSP/ST/stm32h747i_discovery.c ****   /* Store Joystick pins initialized */
 701:./BSP/ST/stm32h747i_discovery.c ****   JoyPinsMask &= (uint32_t)JoyPins;
 1784              		.loc 1 701 18
 1785 0010 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1786              		.loc 1 701 15
 1787 0012 414B     		ldr	r3, .L108
 1788 0014 1B68     		ldr	r3, [r3]
 1789 0016 1340     		ands	r3, r3, r2
 1790 0018 3F4A     		ldr	r2, .L108
 1791 001a 1360     		str	r3, [r2]
 702:./BSP/ST/stm32h747i_discovery.c **** 
 703:./BSP/ST/stm32h747i_discovery.c ****   /* Initialized the Joystick. */
 704:./BSP/ST/stm32h747i_discovery.c ****   for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 1792              		.loc 1 704 14
 1793 001c 0023     		movs	r3, #0
 1794 001e FB60     		str	r3, [r7, #12]
 1795              		.loc 1 704 3
 1796 0020 71E0     		b	.L95
 1797              	.L105:
 705:./BSP/ST/stm32h747i_discovery.c ****   {
 706:./BSP/ST/stm32h747i_discovery.c ****     key_pressed = 1UL << joykey;
 1798              		.loc 1 706 17
 1799 0022 0122     		movs	r2, #1
 1800 0024 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccddg22r.s 			page 44


 1801 0026 02FA03F3 		lsl	r3, r2, r3
 1802 002a BB60     		str	r3, [r7, #8]
 707:./BSP/ST/stm32h747i_discovery.c ****     if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 1803              		.loc 1 707 23
 1804 002c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1805              		.loc 1 707 21
 1806 002e BB68     		ldr	r3, [r7, #8]
 1807 0030 1340     		ands	r3, r3, r2
 1808              		.loc 1 707 7
 1809 0032 BA68     		ldr	r2, [r7, #8]
 1810 0034 9A42     		cmp	r2, r3
 1811 0036 63D1     		bne	.L96
 708:./BSP/ST/stm32h747i_discovery.c ****     {
 709:./BSP/ST/stm32h747i_discovery.c ****       if(JOY == JOY1)
 1812              		.loc 1 709 9
 1813 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1814 003a 002B     		cmp	r3, #0
 1815 003c 60D1     		bne	.L96
 1816 003e BB68     		ldr	r3, [r7, #8]
 1817 0040 013B     		subs	r3, r3, #1
 1818 0042 0F2B     		cmp	r3, #15
 1819 0044 4FD8     		bhi	.L107
 1820 0046 01A2     		adr	r2, .L99
 1821 0048 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1822              		.p2align 2
 1823              	.L99:
 1824 004c 8D000000 		.word	.L103+1
 1825 0050 9F000000 		.word	.L102+1
 1826 0054 E7000000 		.word	.L107+1
 1827 0058 B1000000 		.word	.L101+1
 1828 005c E7000000 		.word	.L107+1
 1829 0060 E7000000 		.word	.L107+1
 1830 0064 E7000000 		.word	.L107+1
 1831 0068 C3000000 		.word	.L100+1
 1832 006c E7000000 		.word	.L107+1
 1833 0070 E7000000 		.word	.L107+1
 1834 0074 E7000000 		.word	.L107+1
 1835 0078 E7000000 		.word	.L107+1
 1836 007c E7000000 		.word	.L107+1
 1837 0080 E7000000 		.word	.L107+1
 1838 0084 E7000000 		.word	.L107+1
 1839 0088 D5000000 		.word	.L98+1
 1840              		.p2align 1
 1841              	.L103:
 710:./BSP/ST/stm32h747i_discovery.c ****       {
 711:./BSP/ST/stm32h747i_discovery.c ****         /* Disable the JOY clock */
 712:./BSP/ST/stm32h747i_discovery.c ****         switch(key_pressed)
 713:./BSP/ST/stm32h747i_discovery.c ****         {
 714:./BSP/ST/stm32h747i_discovery.c ****           case JOY_SEL:
 715:./BSP/ST/stm32h747i_discovery.c ****           JOY1_SEL_GPIO_CLK_DISABLE();
 1842              		.loc 1 715 11
 1843 008c 234B     		ldr	r3, .L108+4
 1844 008e D3F8E030 		ldr	r3, [r3, #224]
 1845 0092 224A     		ldr	r2, .L108+4
 1846 0094 23F48063 		bic	r3, r3, #1024
 1847 0098 C2F8E030 		str	r3, [r2, #224]
 716:./BSP/ST/stm32h747i_discovery.c ****           break;
ARM GAS  /tmp/ccddg22r.s 			page 45


 1848              		.loc 1 716 11
 1849 009c 24E0     		b	.L104
 1850              	.L102:
 717:./BSP/ST/stm32h747i_discovery.c **** 
 718:./BSP/ST/stm32h747i_discovery.c ****           case JOY_DOWN:
 719:./BSP/ST/stm32h747i_discovery.c ****           JOY1_DOWN_GPIO_CLK_DISABLE();
 1851              		.loc 1 719 11
 1852 009e 1F4B     		ldr	r3, .L108+4
 1853 00a0 D3F8E030 		ldr	r3, [r3, #224]
 1854 00a4 1D4A     		ldr	r2, .L108+4
 1855 00a6 23F48063 		bic	r3, r3, #1024
 1856 00aa C2F8E030 		str	r3, [r2, #224]
 720:./BSP/ST/stm32h747i_discovery.c ****           break;
 1857              		.loc 1 720 11
 1858 00ae 1BE0     		b	.L104
 1859              	.L101:
 721:./BSP/ST/stm32h747i_discovery.c **** 
 722:./BSP/ST/stm32h747i_discovery.c ****           case JOY_LEFT:
 723:./BSP/ST/stm32h747i_discovery.c ****           JOY1_LEFT_GPIO_CLK_DISABLE();
 1860              		.loc 1 723 11
 1861 00b0 1A4B     		ldr	r3, .L108+4
 1862 00b2 D3F8E030 		ldr	r3, [r3, #224]
 1863 00b6 194A     		ldr	r2, .L108+4
 1864 00b8 23F48063 		bic	r3, r3, #1024
 1865 00bc C2F8E030 		str	r3, [r2, #224]
 724:./BSP/ST/stm32h747i_discovery.c ****           break;
 1866              		.loc 1 724 11
 1867 00c0 12E0     		b	.L104
 1868              	.L100:
 725:./BSP/ST/stm32h747i_discovery.c **** 
 726:./BSP/ST/stm32h747i_discovery.c ****           case JOY_RIGHT:
 727:./BSP/ST/stm32h747i_discovery.c ****           JOY1_RIGHT_GPIO_CLK_DISABLE();
 1869              		.loc 1 727 11
 1870 00c2 164B     		ldr	r3, .L108+4
 1871 00c4 D3F8E030 		ldr	r3, [r3, #224]
 1872 00c8 144A     		ldr	r2, .L108+4
 1873 00ca 23F48063 		bic	r3, r3, #1024
 1874 00ce C2F8E030 		str	r3, [r2, #224]
 728:./BSP/ST/stm32h747i_discovery.c ****           break;
 1875              		.loc 1 728 11
 1876 00d2 09E0     		b	.L104
 1877              	.L98:
 729:./BSP/ST/stm32h747i_discovery.c **** 
 730:./BSP/ST/stm32h747i_discovery.c ****           case JOY_UP:
 731:./BSP/ST/stm32h747i_discovery.c ****           JOY1_UP_GPIO_CLK_DISABLE();
 1878              		.loc 1 731 11
 1879 00d4 114B     		ldr	r3, .L108+4
 1880 00d6 D3F8E030 		ldr	r3, [r3, #224]
 1881 00da 104A     		ldr	r2, .L108+4
 1882 00dc 23F48063 		bic	r3, r3, #1024
 1883 00e0 C2F8E030 		str	r3, [r2, #224]
 732:./BSP/ST/stm32h747i_discovery.c ****           break;
 1884              		.loc 1 732 11
 1885 00e4 00E0     		b	.L104
 1886              	.L107:
 733:./BSP/ST/stm32h747i_discovery.c ****           default:
 734:./BSP/ST/stm32h747i_discovery.c ****           break;
ARM GAS  /tmp/ccddg22r.s 			page 46


 1887              		.loc 1 734 11
 1888 00e6 00BF     		nop
 1889              	.L104:
 735:./BSP/ST/stm32h747i_discovery.c ****         }
 736:./BSP/ST/stm32h747i_discovery.c ****         HAL_GPIO_DeInit(JOY1_PORT[joykey], JOY1_PIN[joykey]);
 1890              		.loc 1 736 9
 1891 00e8 0D4A     		ldr	r2, .L108+8
 1892 00ea FB68     		ldr	r3, [r7, #12]
 1893 00ec 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1894              		.loc 1 736 52
 1895 00f0 0C49     		ldr	r1, .L108+12
 1896 00f2 FB68     		ldr	r3, [r7, #12]
 1897 00f4 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1898              		.loc 1 736 9
 1899 00f8 1946     		mov	r1, r3
 1900 00fa 1046     		mov	r0, r2
 1901 00fc FFF7FEFF 		bl	HAL_GPIO_DeInit
 1902              	.L96:
 704:./BSP/ST/stm32h747i_discovery.c ****   {
 1903              		.loc 1 704 52 discriminator 2
 1904 0100 FB68     		ldr	r3, [r7, #12]
 1905 0102 0133     		adds	r3, r3, #1
 1906 0104 FB60     		str	r3, [r7, #12]
 1907              	.L95:
 704:./BSP/ST/stm32h747i_discovery.c ****   {
 1908              		.loc 1 704 3 discriminator 1
 1909 0106 FB68     		ldr	r3, [r7, #12]
 1910 0108 042B     		cmp	r3, #4
 1911 010a 8AD9     		bls	.L105
 737:./BSP/ST/stm32h747i_discovery.c ****       }
 738:./BSP/ST/stm32h747i_discovery.c ****     }
 739:./BSP/ST/stm32h747i_discovery.c ****   }
 740:./BSP/ST/stm32h747i_discovery.c ****   return BSP_ERROR_NONE;
 1912              		.loc 1 740 10
 1913 010c 0023     		movs	r3, #0
 741:./BSP/ST/stm32h747i_discovery.c **** }
 1914              		.loc 1 741 1
 1915 010e 1846     		mov	r0, r3
 1916 0110 1037     		adds	r7, r7, #16
 1917              	.LCFI104:
 1918              		.cfi_def_cfa_offset 8
 1919 0112 BD46     		mov	sp, r7
 1920              	.LCFI105:
 1921              		.cfi_def_cfa_register 13
 1922              		@ sp needed
 1923 0114 80BD     		pop	{r7, pc}
 1924              	.L109:
 1925 0116 00BF     		.align	2
 1926              	.L108:
 1927 0118 00000000 		.word	JoyPinsMask
 1928 011c 00440258 		.word	1476543488
 1929 0120 00000000 		.word	JOY1_PORT
 1930 0124 00000000 		.word	JOY1_PIN
 1931              		.cfi_endproc
 1932              	.LFE352:
 1934              		.section	.text.BSP_JOY_GetState,"ax",%progbits
 1935              		.align	1
ARM GAS  /tmp/ccddg22r.s 			page 47


 1936              		.global	BSP_JOY_GetState
 1937              		.syntax unified
 1938              		.thumb
 1939              		.thumb_func
 1940              		.fpu fpv5-d16
 1942              	BSP_JOY_GetState:
 1943              	.LFB353:
 742:./BSP/ST/stm32h747i_discovery.c **** /**
 743:./BSP/ST/stm32h747i_discovery.c **** * @brief  Returns the current joystick status.
 744:./BSP/ST/stm32h747i_discovery.c **** * @retval Code of the joystick key pressed
 745:./BSP/ST/stm32h747i_discovery.c **** *          This code can be one of the following values:
 746:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_NONE
 747:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_SEL
 748:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_DOWN
 749:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_LEFT
 750:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_RIGHT
 751:./BSP/ST/stm32h747i_discovery.c **** *            @arg  JOY_UP
 752:./BSP/ST/stm32h747i_discovery.c **** */
 753:./BSP/ST/stm32h747i_discovery.c **** int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
 754:./BSP/ST/stm32h747i_discovery.c **** {
 1944              		.loc 1 754 1
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 16
 1947              		@ frame_needed = 1, uses_anonymous_args = 0
 1948 0000 80B5     		push	{r7, lr}
 1949              	.LCFI106:
 1950              		.cfi_def_cfa_offset 8
 1951              		.cfi_offset 7, -8
 1952              		.cfi_offset 14, -4
 1953 0002 84B0     		sub	sp, sp, #16
 1954              	.LCFI107:
 1955              		.cfi_def_cfa_offset 24
 1956 0004 00AF     		add	r7, sp, #0
 1957              	.LCFI108:
 1958              		.cfi_def_cfa_register 7
 1959 0006 0346     		mov	r3, r0
 1960 0008 3960     		str	r1, [r7]
 1961 000a FB71     		strb	r3, [r7, #7]
 755:./BSP/ST/stm32h747i_discovery.c **** 
 756:./BSP/ST/stm32h747i_discovery.c ****   uint32_t joykey, key_pressed;
 757:./BSP/ST/stm32h747i_discovery.c ****   for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 1962              		.loc 1 757 15
 1963 000c 0023     		movs	r3, #0
 1964 000e FB60     		str	r3, [r7, #12]
 1965              		.loc 1 757 3
 1966 0010 22E0     		b	.L111
 1967              	.L114:
 758:./BSP/ST/stm32h747i_discovery.c ****   {
 759:./BSP/ST/stm32h747i_discovery.c ****     key_pressed = 1UL << joykey;
 1968              		.loc 1 759 17
 1969 0012 0122     		movs	r2, #1
 1970 0014 FB68     		ldr	r3, [r7, #12]
 1971 0016 02FA03F3 		lsl	r3, r2, r3
 1972 001a BB60     		str	r3, [r7, #8]
 760:./BSP/ST/stm32h747i_discovery.c ****     if((key_pressed & JoyPinsMask) == key_pressed)
 1973              		.loc 1 760 21
 1974 001c 124B     		ldr	r3, .L115
ARM GAS  /tmp/ccddg22r.s 			page 48


 1975 001e 1A68     		ldr	r2, [r3]
 1976 0020 BB68     		ldr	r3, [r7, #8]
 1977 0022 1340     		ands	r3, r3, r2
 1978              		.loc 1 760 7
 1979 0024 BA68     		ldr	r2, [r7, #8]
 1980 0026 9A42     		cmp	r2, r3
 1981 0028 13D1     		bne	.L112
 761:./BSP/ST/stm32h747i_discovery.c ****     {
 762:./BSP/ST/stm32h747i_discovery.c ****       if(JOY == JOY1)
 1982              		.loc 1 762 9
 1983 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1984 002c 002B     		cmp	r3, #0
 1985 002e 10D1     		bne	.L112
 763:./BSP/ST/stm32h747i_discovery.c ****       {
 764:./BSP/ST/stm32h747i_discovery.c ****         if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 1986              		.loc 1 764 13
 1987 0030 0E4A     		ldr	r2, .L115+4
 1988 0032 FB68     		ldr	r3, [r7, #12]
 1989 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1990 0038 0D49     		ldr	r1, .L115+8
 1991 003a FB68     		ldr	r3, [r7, #12]
 1992 003c 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1993 0040 1946     		mov	r1, r3
 1994 0042 1046     		mov	r0, r2
 1995 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1996 0048 0346     		mov	r3, r0
 1997              		.loc 1 764 12
 1998 004a 012B     		cmp	r3, #1
 1999 004c 01D0     		beq	.L112
 765:./BSP/ST/stm32h747i_discovery.c ****         {
 766:./BSP/ST/stm32h747i_discovery.c ****           /* Return Code Joystick key pressed */
 767:./BSP/ST/stm32h747i_discovery.c ****           return (int32_t)key_pressed;
 2000              		.loc 1 767 18
 2001 004e BB68     		ldr	r3, [r7, #8]
 2002 0050 06E0     		b	.L113
 2003              	.L112:
 757:./BSP/ST/stm32h747i_discovery.c ****   {
 2004              		.loc 1 757 53 discriminator 2
 2005 0052 FB68     		ldr	r3, [r7, #12]
 2006 0054 0133     		adds	r3, r3, #1
 2007 0056 FB60     		str	r3, [r7, #12]
 2008              	.L111:
 757:./BSP/ST/stm32h747i_discovery.c ****   {
 2009              		.loc 1 757 3 discriminator 1
 2010 0058 FB68     		ldr	r3, [r7, #12]
 2011 005a 042B     		cmp	r3, #4
 2012 005c D9D9     		bls	.L114
 768:./BSP/ST/stm32h747i_discovery.c ****         }
 769:./BSP/ST/stm32h747i_discovery.c ****       }
 770:./BSP/ST/stm32h747i_discovery.c ****     }
 771:./BSP/ST/stm32h747i_discovery.c ****   }
 772:./BSP/ST/stm32h747i_discovery.c ****   /* No Joystick key pressed */
 773:./BSP/ST/stm32h747i_discovery.c ****   return (int32_t)JOY_NONE;
 2013              		.loc 1 773 10
 2014 005e 0023     		movs	r3, #0
 2015              	.L113:
 774:./BSP/ST/stm32h747i_discovery.c **** 
ARM GAS  /tmp/ccddg22r.s 			page 49


 775:./BSP/ST/stm32h747i_discovery.c **** }
 2016              		.loc 1 775 1
 2017 0060 1846     		mov	r0, r3
 2018 0062 1037     		adds	r7, r7, #16
 2019              	.LCFI109:
 2020              		.cfi_def_cfa_offset 8
 2021 0064 BD46     		mov	sp, r7
 2022              	.LCFI110:
 2023              		.cfi_def_cfa_register 13
 2024              		@ sp needed
 2025 0066 80BD     		pop	{r7, pc}
 2026              	.L116:
 2027              		.align	2
 2028              	.L115:
 2029 0068 00000000 		.word	JoyPinsMask
 2030 006c 00000000 		.word	JOY1_PORT
 2031 0070 00000000 		.word	JOY1_PIN
 2032              		.cfi_endproc
 2033              	.LFE353:
 2035              		.section	.text.BSP_JOY_IRQHandler,"ax",%progbits
 2036              		.align	1
 2037              		.global	BSP_JOY_IRQHandler
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2041              		.fpu fpv5-d16
 2043              	BSP_JOY_IRQHandler:
 2044              	.LFB354:
 776:./BSP/ST/stm32h747i_discovery.c **** 
 777:./BSP/ST/stm32h747i_discovery.c **** 
 778:./BSP/ST/stm32h747i_discovery.c **** /**
 779:./BSP/ST/stm32h747i_discovery.c ****   * @brief  This function handles JOY keys interrupt request.
 780:./BSP/ST/stm32h747i_discovery.c ****   * @param  JOY Joystick instance
 781:./BSP/ST/stm32h747i_discovery.c ****   * @param  JoyPin Specifies the pin connected EXTI handler
 782:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 783:./BSP/ST/stm32h747i_discovery.c ****   */
 784:./BSP/ST/stm32h747i_discovery.c **** void BSP_JOY_IRQHandler(JOY_TypeDef JOY, JOYPin_TypeDef JoyPin)
 785:./BSP/ST/stm32h747i_discovery.c **** {
 2045              		.loc 1 785 1
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 24
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049 0000 80B5     		push	{r7, lr}
 2050              	.LCFI111:
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 7, -8
 2053              		.cfi_offset 14, -4
 2054 0002 86B0     		sub	sp, sp, #24
 2055              	.LCFI112:
 2056              		.cfi_def_cfa_offset 32
 2057 0004 00AF     		add	r7, sp, #0
 2058              	.LCFI113:
 2059              		.cfi_def_cfa_register 7
 2060 0006 0346     		mov	r3, r0
 2061 0008 0A46     		mov	r2, r1
 2062 000a FB71     		strb	r3, [r7, #7]
 2063 000c 1346     		mov	r3, r2
ARM GAS  /tmp/ccddg22r.s 			page 50


 2064 000e BB71     		strb	r3, [r7, #6]
 786:./BSP/ST/stm32h747i_discovery.c ****   if(JOY == JOY1)
 2065              		.loc 1 786 5
 2066 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2067 0012 002B     		cmp	r3, #0
 2068 0014 16D1     		bne	.L122
 787:./BSP/ST/stm32h747i_discovery.c ****   {
 788:./BSP/ST/stm32h747i_discovery.c ****     HAL_EXTI_IRQHandler(&hjoy_exti[POSITION_VAL(JoyPin)]);
 2069              		.loc 1 788 36
 2070 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2071 0018 3B61     		str	r3, [r7, #16]
 2072              	.LBB13:
 2073              	.LBB14:
 2074              		.file 2 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/ccddg22r.s 			page 51


  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccddg22r.s 			page 52


 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  /tmp/ccddg22r.s 			page 53


 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
ARM GAS  /tmp/ccddg22r.s 			page 54


 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccddg22r.s 			page 55


 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccddg22r.s 			page 56


 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccddg22r.s 			page 57


 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccddg22r.s 			page 58


 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccddg22r.s 			page 59


 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/ccddg22r.s 			page 60


 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
ARM GAS  /tmp/ccddg22r.s 			page 61


 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccddg22r.s 			page 62


 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/ccddg22r.s 			page 63


 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
ARM GAS  /tmp/ccddg22r.s 			page 64


 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
ARM GAS  /tmp/ccddg22r.s 			page 65


 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccddg22r.s 			page 66


 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
ARM GAS  /tmp/ccddg22r.s 			page 67


 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccddg22r.s 			page 68


1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 2075              		.loc 2 1055 4
 2076 001a 3B69     		ldr	r3, [r7, #16]
 2077              		.syntax unified
 2078              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 2079 001c 93FAA3F3 		rbit r3, r3
 2080              	@ 0 "" 2
 2081              		.thumb
 2082              		.syntax unified
 2083 0020 FB60     		str	r3, [r7, #12]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
ARM GAS  /tmp/ccddg22r.s 			page 69


1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 2084              		.loc 2 1068 10
 2085 0022 FB68     		ldr	r3, [r7, #12]
 2086 0024 7B61     		str	r3, [r7, #20]
 2087              	.LBE14:
 2088              	.LBE13:
 2089              	.LBB15:
 2090              	.LBB16:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 2091              		.loc 2 1089 6
 2092 0026 7B69     		ldr	r3, [r7, #20]
 2093 0028 002B     		cmp	r3, #0
 2094 002a 01D1     		bne	.L120
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
 2095              		.loc 2 1091 12
 2096 002c 2023     		movs	r3, #32
 2097 002e 03E0     		b	.L121
 2098              	.L120:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 2099              		.loc 2 1093 10
 2100 0030 7B69     		ldr	r3, [r7, #20]
 2101 0032 B3FA83F3 		clz	r3, r3
 2102 0036 DBB2     		uxtb	r3, r3
 2103              	.L121:
 2104              	.LBE16:
 2105              	.LBE15:
 2106              		.loc 1 788 5
 2107 0038 DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/ccddg22r.s 			page 70


 2108 003a 044A     		ldr	r2, .L123
 2109 003c 1344     		add	r3, r3, r2
 2110 003e 1846     		mov	r0, r3
 2111 0040 FFF7FEFF 		bl	HAL_EXTI_IRQHandler
 2112              	.L122:
 789:./BSP/ST/stm32h747i_discovery.c ****   }
 790:./BSP/ST/stm32h747i_discovery.c **** }
 2113              		.loc 1 790 1
 2114 0044 00BF     		nop
 2115 0046 1837     		adds	r7, r7, #24
 2116              	.LCFI114:
 2117              		.cfi_def_cfa_offset 8
 2118 0048 BD46     		mov	sp, r7
 2119              	.LCFI115:
 2120              		.cfi_def_cfa_register 13
 2121              		@ sp needed
 2122 004a 80BD     		pop	{r7, pc}
 2123              	.L124:
 2124              		.align	2
 2125              	.L123:
 2126 004c 00000000 		.word	hjoy_exti
 2127              		.cfi_endproc
 2128              	.LFE354:
 2130              		.section	.text.BSP_JOY_Callback,"ax",%progbits
 2131              		.align	1
 2132              		.weak	BSP_JOY_Callback
 2133              		.syntax unified
 2134              		.thumb
 2135              		.thumb_func
 2136              		.fpu fpv5-d16
 2138              	BSP_JOY_Callback:
 2139              	.LFB355:
 791:./BSP/ST/stm32h747i_discovery.c **** 
 792:./BSP/ST/stm32h747i_discovery.c **** /**
 793:./BSP/ST/stm32h747i_discovery.c ****   * @brief  BSP Joystick Callback.
 794:./BSP/ST/stm32h747i_discovery.c ****   * @param  JOY Joystick instance
 795:./BSP/ST/stm32h747i_discovery.c ****   * @param  JoyPin Specifies the pin connected EXTI line
 796:./BSP/ST/stm32h747i_discovery.c ****   * @retval None.
 797:./BSP/ST/stm32h747i_discovery.c ****   */
 798:./BSP/ST/stm32h747i_discovery.c **** __weak void BSP_JOY_Callback(JOY_TypeDef JOY, uint32_t JoyPin)
 799:./BSP/ST/stm32h747i_discovery.c **** {
 2140              		.loc 1 799 1
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 8
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 2145 0000 80B4     		push	{r7}
 2146              	.LCFI116:
 2147              		.cfi_def_cfa_offset 4
 2148              		.cfi_offset 7, -4
 2149 0002 83B0     		sub	sp, sp, #12
 2150              	.LCFI117:
 2151              		.cfi_def_cfa_offset 16
 2152 0004 00AF     		add	r7, sp, #0
 2153              	.LCFI118:
 2154              		.cfi_def_cfa_register 7
 2155 0006 0346     		mov	r3, r0
ARM GAS  /tmp/ccddg22r.s 			page 71


 2156 0008 3960     		str	r1, [r7]
 2157 000a FB71     		strb	r3, [r7, #7]
 800:./BSP/ST/stm32h747i_discovery.c ****   /* Prevent unused argument(s) compilation warning */
 801:./BSP/ST/stm32h747i_discovery.c ****   UNUSED(JOY);
 802:./BSP/ST/stm32h747i_discovery.c ****   UNUSED(JoyPin);
 803:./BSP/ST/stm32h747i_discovery.c **** 
 804:./BSP/ST/stm32h747i_discovery.c ****   /* This function should be implemented by the user application.
 805:./BSP/ST/stm32h747i_discovery.c ****      It is called into this driver when an event on JoyPin is triggered. */
 806:./BSP/ST/stm32h747i_discovery.c **** }
 2158              		.loc 1 806 1
 2159 000c 00BF     		nop
 2160 000e 0C37     		adds	r7, r7, #12
 2161              	.LCFI119:
 2162              		.cfi_def_cfa_offset 4
 2163 0010 BD46     		mov	sp, r7
 2164              	.LCFI120:
 2165              		.cfi_def_cfa_register 13
 2166              		@ sp needed
 2167 0012 5DF8047B 		ldr	r7, [sp], #4
 2168              	.LCFI121:
 2169              		.cfi_restore 7
 2170              		.cfi_def_cfa_offset 0
 2171 0016 7047     		bx	lr
 2172              		.cfi_endproc
 2173              	.LFE355:
 2175              		.section	.text.JOY1_UP_EXTI_Callback,"ax",%progbits
 2176              		.align	1
 2177              		.syntax unified
 2178              		.thumb
 2179              		.thumb_func
 2180              		.fpu fpv5-d16
 2182              	JOY1_UP_EXTI_Callback:
 2183              	.LFB356:
 807:./BSP/ST/stm32h747i_discovery.c **** /**
 808:./BSP/ST/stm32h747i_discovery.c ****   * @}
 809:./BSP/ST/stm32h747i_discovery.c ****   */
 810:./BSP/ST/stm32h747i_discovery.c **** 
 811:./BSP/ST/stm32h747i_discovery.c **** /** @defgroup STM32H747I_DISCO_LOW_LEVEL_Private_Functions Private Functions
 812:./BSP/ST/stm32h747i_discovery.c ****   * @{
 813:./BSP/ST/stm32h747i_discovery.c ****   */
 814:./BSP/ST/stm32h747i_discovery.c **** /**
 815:./BSP/ST/stm32h747i_discovery.c ****   * @brief  JOY1 UP EXTI line detection callbacks.
 816:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 817:./BSP/ST/stm32h747i_discovery.c ****   */
 818:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_UP_EXTI_Callback(void)
 819:./BSP/ST/stm32h747i_discovery.c **** {
 2184              		.loc 1 819 1
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 1, uses_anonymous_args = 0
 2188 0000 80B5     		push	{r7, lr}
 2189              	.LCFI122:
 2190              		.cfi_def_cfa_offset 8
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
 2193 0002 00AF     		add	r7, sp, #0
 2194              	.LCFI123:
ARM GAS  /tmp/ccddg22r.s 			page 72


 2195              		.cfi_def_cfa_register 7
 820:./BSP/ST/stm32h747i_discovery.c ****   BSP_JOY_Callback(JOY1, JOY_UP);
 2196              		.loc 1 820 3
 2197 0004 1021     		movs	r1, #16
 2198 0006 0020     		movs	r0, #0
 2199 0008 FFF7FEFF 		bl	BSP_JOY_Callback
 821:./BSP/ST/stm32h747i_discovery.c **** }
 2200              		.loc 1 821 1
 2201 000c 00BF     		nop
 2202 000e 80BD     		pop	{r7, pc}
 2203              		.cfi_endproc
 2204              	.LFE356:
 2206              		.section	.text.JOY1_DOWN_EXTI_Callback,"ax",%progbits
 2207              		.align	1
 2208              		.syntax unified
 2209              		.thumb
 2210              		.thumb_func
 2211              		.fpu fpv5-d16
 2213              	JOY1_DOWN_EXTI_Callback:
 2214              	.LFB357:
 822:./BSP/ST/stm32h747i_discovery.c **** 
 823:./BSP/ST/stm32h747i_discovery.c **** /**
 824:./BSP/ST/stm32h747i_discovery.c ****   * @brief  JOY1 DOWN EXTI line detection callbacks.
 825:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 826:./BSP/ST/stm32h747i_discovery.c ****   */
 827:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_DOWN_EXTI_Callback(void)
 828:./BSP/ST/stm32h747i_discovery.c **** {
 2215              		.loc 1 828 1
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 0
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0000 80B5     		push	{r7, lr}
 2220              	.LCFI124:
 2221              		.cfi_def_cfa_offset 8
 2222              		.cfi_offset 7, -8
 2223              		.cfi_offset 14, -4
 2224 0002 00AF     		add	r7, sp, #0
 2225              	.LCFI125:
 2226              		.cfi_def_cfa_register 7
 829:./BSP/ST/stm32h747i_discovery.c ****   BSP_JOY_Callback(JOY1, JOY_DOWN);
 2227              		.loc 1 829 3
 2228 0004 0221     		movs	r1, #2
 2229 0006 0020     		movs	r0, #0
 2230 0008 FFF7FEFF 		bl	BSP_JOY_Callback
 830:./BSP/ST/stm32h747i_discovery.c **** }
 2231              		.loc 1 830 1
 2232 000c 00BF     		nop
 2233 000e 80BD     		pop	{r7, pc}
 2234              		.cfi_endproc
 2235              	.LFE357:
 2237              		.section	.text.JOY1_SEL_EXTI_Callback,"ax",%progbits
 2238              		.align	1
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2242              		.fpu fpv5-d16
 2244              	JOY1_SEL_EXTI_Callback:
ARM GAS  /tmp/ccddg22r.s 			page 73


 2245              	.LFB358:
 831:./BSP/ST/stm32h747i_discovery.c **** 
 832:./BSP/ST/stm32h747i_discovery.c **** /**
 833:./BSP/ST/stm32h747i_discovery.c ****   * @brief  JOY1 SEL EXTI line detection callbacks.
 834:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 835:./BSP/ST/stm32h747i_discovery.c ****   */
 836:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_SEL_EXTI_Callback(void)
 837:./BSP/ST/stm32h747i_discovery.c **** {
 2246              		.loc 1 837 1
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 0
 2249              		@ frame_needed = 1, uses_anonymous_args = 0
 2250 0000 80B5     		push	{r7, lr}
 2251              	.LCFI126:
 2252              		.cfi_def_cfa_offset 8
 2253              		.cfi_offset 7, -8
 2254              		.cfi_offset 14, -4
 2255 0002 00AF     		add	r7, sp, #0
 2256              	.LCFI127:
 2257              		.cfi_def_cfa_register 7
 838:./BSP/ST/stm32h747i_discovery.c ****   BSP_JOY_Callback(JOY1, JOY_SEL);
 2258              		.loc 1 838 3
 2259 0004 0121     		movs	r1, #1
 2260 0006 0020     		movs	r0, #0
 2261 0008 FFF7FEFF 		bl	BSP_JOY_Callback
 839:./BSP/ST/stm32h747i_discovery.c **** }
 2262              		.loc 1 839 1
 2263 000c 00BF     		nop
 2264 000e 80BD     		pop	{r7, pc}
 2265              		.cfi_endproc
 2266              	.LFE358:
 2268              		.section	.text.JOY1_LEFT_EXTI_Callback,"ax",%progbits
 2269              		.align	1
 2270              		.syntax unified
 2271              		.thumb
 2272              		.thumb_func
 2273              		.fpu fpv5-d16
 2275              	JOY1_LEFT_EXTI_Callback:
 2276              	.LFB359:
 840:./BSP/ST/stm32h747i_discovery.c **** 
 841:./BSP/ST/stm32h747i_discovery.c **** /**
 842:./BSP/ST/stm32h747i_discovery.c ****   * @brief  JOY1 LEFT EXTI line detection callbacks.
 843:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 844:./BSP/ST/stm32h747i_discovery.c ****   */
 845:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_LEFT_EXTI_Callback(void)
 846:./BSP/ST/stm32h747i_discovery.c **** {
 2277              		.loc 1 846 1
 2278              		.cfi_startproc
 2279              		@ args = 0, pretend = 0, frame = 0
 2280              		@ frame_needed = 1, uses_anonymous_args = 0
 2281 0000 80B5     		push	{r7, lr}
 2282              	.LCFI128:
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 7, -8
 2285              		.cfi_offset 14, -4
 2286 0002 00AF     		add	r7, sp, #0
 2287              	.LCFI129:
ARM GAS  /tmp/ccddg22r.s 			page 74


 2288              		.cfi_def_cfa_register 7
 847:./BSP/ST/stm32h747i_discovery.c ****   BSP_JOY_Callback(JOY1, JOY_LEFT);
 2289              		.loc 1 847 3
 2290 0004 0421     		movs	r1, #4
 2291 0006 0020     		movs	r0, #0
 2292 0008 FFF7FEFF 		bl	BSP_JOY_Callback
 848:./BSP/ST/stm32h747i_discovery.c **** }
 2293              		.loc 1 848 1
 2294 000c 00BF     		nop
 2295 000e 80BD     		pop	{r7, pc}
 2296              		.cfi_endproc
 2297              	.LFE359:
 2299              		.section	.text.JOY1_RIGHT_EXTI_Callback,"ax",%progbits
 2300              		.align	1
 2301              		.syntax unified
 2302              		.thumb
 2303              		.thumb_func
 2304              		.fpu fpv5-d16
 2306              	JOY1_RIGHT_EXTI_Callback:
 2307              	.LFB360:
 849:./BSP/ST/stm32h747i_discovery.c **** 
 850:./BSP/ST/stm32h747i_discovery.c **** /**
 851:./BSP/ST/stm32h747i_discovery.c ****   * @brief  JOY1 RIGHT EXTI line detection callbacks.
 852:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 853:./BSP/ST/stm32h747i_discovery.c ****   */
 854:./BSP/ST/stm32h747i_discovery.c **** static void JOY1_RIGHT_EXTI_Callback(void)
 855:./BSP/ST/stm32h747i_discovery.c **** {
 2308              		.loc 1 855 1
 2309              		.cfi_startproc
 2310              		@ args = 0, pretend = 0, frame = 0
 2311              		@ frame_needed = 1, uses_anonymous_args = 0
 2312 0000 80B5     		push	{r7, lr}
 2313              	.LCFI130:
 2314              		.cfi_def_cfa_offset 8
 2315              		.cfi_offset 7, -8
 2316              		.cfi_offset 14, -4
 2317 0002 00AF     		add	r7, sp, #0
 2318              	.LCFI131:
 2319              		.cfi_def_cfa_register 7
 856:./BSP/ST/stm32h747i_discovery.c ****   BSP_JOY_Callback(JOY1, JOY_RIGHT);
 2320              		.loc 1 856 3
 2321 0004 0821     		movs	r1, #8
 2322 0006 0020     		movs	r0, #0
 2323 0008 FFF7FEFF 		bl	BSP_JOY_Callback
 857:./BSP/ST/stm32h747i_discovery.c **** }
 2324              		.loc 1 857 1
 2325 000c 00BF     		nop
 2326 000e 80BD     		pop	{r7, pc}
 2327              		.cfi_endproc
 2328              	.LFE360:
 2330              		.section	.text.USART1_MspInit,"ax",%progbits
 2331              		.align	1
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv5-d16
 2337              	USART1_MspInit:
ARM GAS  /tmp/ccddg22r.s 			page 75


 2338              	.LFB361:
 858:./BSP/ST/stm32h747i_discovery.c **** 
 859:./BSP/ST/stm32h747i_discovery.c **** 
 860:./BSP/ST/stm32h747i_discovery.c **** 
 861:./BSP/ST/stm32h747i_discovery.c **** #if (USE_BSP_COM_FEATURE > 0)
 862:./BSP/ST/stm32h747i_discovery.c **** /**
 863:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Initializes UART MSP.
 864:./BSP/ST/stm32h747i_discovery.c ****   * @param  huart UART handle
 865:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 866:./BSP/ST/stm32h747i_discovery.c ****   */
 867:./BSP/ST/stm32h747i_discovery.c **** static void USART1_MspInit(UART_HandleTypeDef *huart)
 868:./BSP/ST/stm32h747i_discovery.c **** {
 2339              		.loc 1 868 1
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 40
 2342              		@ frame_needed = 1, uses_anonymous_args = 0
 2343 0000 80B5     		push	{r7, lr}
 2344              	.LCFI132:
 2345              		.cfi_def_cfa_offset 8
 2346              		.cfi_offset 7, -8
 2347              		.cfi_offset 14, -4
 2348 0002 8AB0     		sub	sp, sp, #40
 2349              	.LCFI133:
 2350              		.cfi_def_cfa_offset 48
 2351 0004 00AF     		add	r7, sp, #0
 2352              	.LCFI134:
 2353              		.cfi_def_cfa_register 7
 2354 0006 7860     		str	r0, [r7, #4]
 2355              	.LBB17:
 869:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef gpio_init_structure;
 870:./BSP/ST/stm32h747i_discovery.c **** 
 871:./BSP/ST/stm32h747i_discovery.c ****   /* Prevent unused argument(s) compilation warning */
 872:./BSP/ST/stm32h747i_discovery.c ****   UNUSED(huart);
 873:./BSP/ST/stm32h747i_discovery.c **** 
 874:./BSP/ST/stm32h747i_discovery.c ****   /* Enable GPIO clock */
 875:./BSP/ST/stm32h747i_discovery.c ****   COM1_TX_GPIO_CLK_ENABLE();
 2356              		.loc 1 875 3
 2357 0008 274B     		ldr	r3, .L132
 2358 000a D3F8E030 		ldr	r3, [r3, #224]
 2359 000e 264A     		ldr	r2, .L132
 2360 0010 43F00103 		orr	r3, r3, #1
 2361 0014 C2F8E030 		str	r3, [r2, #224]
 2362 0018 234B     		ldr	r3, .L132
 2363 001a D3F8E030 		ldr	r3, [r3, #224]
 2364 001e 03F00103 		and	r3, r3, #1
 2365 0022 3B61     		str	r3, [r7, #16]
 2366 0024 3B69     		ldr	r3, [r7, #16]
 2367              	.LBE17:
 2368              	.LBB18:
 876:./BSP/ST/stm32h747i_discovery.c ****   COM1_RX_GPIO_CLK_ENABLE();
 2369              		.loc 1 876 3
 2370 0026 204B     		ldr	r3, .L132
 2371 0028 D3F8E030 		ldr	r3, [r3, #224]
 2372 002c 1E4A     		ldr	r2, .L132
 2373 002e 43F00103 		orr	r3, r3, #1
 2374 0032 C2F8E030 		str	r3, [r2, #224]
 2375 0036 1C4B     		ldr	r3, .L132
ARM GAS  /tmp/ccddg22r.s 			page 76


 2376 0038 D3F8E030 		ldr	r3, [r3, #224]
 2377 003c 03F00103 		and	r3, r3, #1
 2378 0040 FB60     		str	r3, [r7, #12]
 2379 0042 FB68     		ldr	r3, [r7, #12]
 2380              	.LBE18:
 2381              	.LBB19:
 877:./BSP/ST/stm32h747i_discovery.c **** 
 878:./BSP/ST/stm32h747i_discovery.c ****   /* Enable USART clock */
 879:./BSP/ST/stm32h747i_discovery.c ****   COM1_CLK_ENABLE();
 2382              		.loc 1 879 3
 2383 0044 184B     		ldr	r3, .L132
 2384 0046 D3F8F030 		ldr	r3, [r3, #240]
 2385 004a 174A     		ldr	r2, .L132
 2386 004c 43F01003 		orr	r3, r3, #16
 2387 0050 C2F8F030 		str	r3, [r2, #240]
 2388 0054 144B     		ldr	r3, .L132
 2389 0056 D3F8F030 		ldr	r3, [r3, #240]
 2390 005a 03F01003 		and	r3, r3, #16
 2391 005e BB60     		str	r3, [r7, #8]
 2392 0060 BB68     		ldr	r3, [r7, #8]
 2393              	.LBE19:
 880:./BSP/ST/stm32h747i_discovery.c **** 
 881:./BSP/ST/stm32h747i_discovery.c ****   /* Configure USART Tx as alternate function */
 882:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin = COM1_TX_PIN;
 2394              		.loc 1 882 27
 2395 0062 4FF40073 		mov	r3, #512
 2396 0066 7B61     		str	r3, [r7, #20]
 883:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 2397              		.loc 1 883 28
 2398 0068 0223     		movs	r3, #2
 2399 006a BB61     		str	r3, [r7, #24]
 884:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 2400              		.loc 1 884 29
 2401 006c 0223     		movs	r3, #2
 2402 006e 3B62     		str	r3, [r7, #32]
 885:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pull = GPIO_PULLUP;
 2403              		.loc 1 885 28
 2404 0070 0123     		movs	r3, #1
 2405 0072 FB61     		str	r3, [r7, #28]
 886:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Alternate = COM1_TX_AF;
 2406              		.loc 1 886 33
 2407 0074 0723     		movs	r3, #7
 2408 0076 7B62     		str	r3, [r7, #36]
 887:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 2409              		.loc 1 887 3
 2410 0078 07F11403 		add	r3, r7, #20
 2411 007c 1946     		mov	r1, r3
 2412 007e 0B48     		ldr	r0, .L132+4
 2413 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 888:./BSP/ST/stm32h747i_discovery.c **** 
 889:./BSP/ST/stm32h747i_discovery.c ****   /* Configure USART Rx as alternate function */
 890:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin = COM1_RX_PIN;
 2414              		.loc 1 890 27
 2415 0084 4FF48063 		mov	r3, #1024
 2416 0088 7B61     		str	r3, [r7, #20]
 891:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 2417              		.loc 1 891 28
ARM GAS  /tmp/ccddg22r.s 			page 77


 2418 008a 0223     		movs	r3, #2
 2419 008c BB61     		str	r3, [r7, #24]
 892:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Alternate = COM1_RX_AF;
 2420              		.loc 1 892 33
 2421 008e 0723     		movs	r3, #7
 2422 0090 7B62     		str	r3, [r7, #36]
 893:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 2423              		.loc 1 893 3
 2424 0092 07F11403 		add	r3, r7, #20
 2425 0096 1946     		mov	r1, r3
 2426 0098 0448     		ldr	r0, .L132+4
 2427 009a FFF7FEFF 		bl	HAL_GPIO_Init
 894:./BSP/ST/stm32h747i_discovery.c **** }
 2428              		.loc 1 894 1
 2429 009e 00BF     		nop
 2430 00a0 2837     		adds	r7, r7, #40
 2431              	.LCFI135:
 2432              		.cfi_def_cfa_offset 8
 2433 00a2 BD46     		mov	sp, r7
 2434              	.LCFI136:
 2435              		.cfi_def_cfa_register 13
 2436              		@ sp needed
 2437 00a4 80BD     		pop	{r7, pc}
 2438              	.L133:
 2439 00a6 00BF     		.align	2
 2440              	.L132:
 2441 00a8 00440258 		.word	1476543488
 2442 00ac 00000258 		.word	1476526080
 2443              		.cfi_endproc
 2444              	.LFE361:
 2446              		.section	.text.USART1_MspDeInit,"ax",%progbits
 2447              		.align	1
 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2451              		.fpu fpv5-d16
 2453              	USART1_MspDeInit:
 2454              	.LFB362:
 895:./BSP/ST/stm32h747i_discovery.c **** 
 896:./BSP/ST/stm32h747i_discovery.c **** /**
 897:./BSP/ST/stm32h747i_discovery.c ****   * @brief  Initialize USART6 Msp part
 898:./BSP/ST/stm32h747i_discovery.c ****   * @param  huart UART handle
 899:./BSP/ST/stm32h747i_discovery.c ****   * @retval None
 900:./BSP/ST/stm32h747i_discovery.c ****   */
 901:./BSP/ST/stm32h747i_discovery.c **** static void USART1_MspDeInit(UART_HandleTypeDef *huart)
 902:./BSP/ST/stm32h747i_discovery.c **** {
 2455              		.loc 1 902 1
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 32
 2458              		@ frame_needed = 1, uses_anonymous_args = 0
 2459 0000 80B5     		push	{r7, lr}
 2460              	.LCFI137:
 2461              		.cfi_def_cfa_offset 8
 2462              		.cfi_offset 7, -8
 2463              		.cfi_offset 14, -4
 2464 0002 88B0     		sub	sp, sp, #32
 2465              	.LCFI138:
ARM GAS  /tmp/ccddg22r.s 			page 78


 2466              		.cfi_def_cfa_offset 40
 2467 0004 00AF     		add	r7, sp, #0
 2468              	.LCFI139:
 2469              		.cfi_def_cfa_register 7
 2470 0006 7860     		str	r0, [r7, #4]
 903:./BSP/ST/stm32h747i_discovery.c ****   GPIO_InitTypeDef          gpio_init_structure;
 904:./BSP/ST/stm32h747i_discovery.c **** 
 905:./BSP/ST/stm32h747i_discovery.c ****   /* Prevent unused argument(s) compilation warning */
 906:./BSP/ST/stm32h747i_discovery.c ****   UNUSED(huart);
 907:./BSP/ST/stm32h747i_discovery.c **** 
 908:./BSP/ST/stm32h747i_discovery.c ****   /* COM GPIO pin configuration */
 909:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin  = COM1_TX_PIN;
 2471              		.loc 1 909 28
 2472 0008 4FF40073 		mov	r3, #512
 2473 000c FB60     		str	r3, [r7, #12]
 910:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, gpio_init_structure.Pin);
 2474              		.loc 1 910 3
 2475 000e FB68     		ldr	r3, [r7, #12]
 2476 0010 1946     		mov	r1, r3
 2477 0012 0B48     		ldr	r0, .L135
 2478 0014 FFF7FEFF 		bl	HAL_GPIO_DeInit
 911:./BSP/ST/stm32h747i_discovery.c **** 
 912:./BSP/ST/stm32h747i_discovery.c ****   gpio_init_structure.Pin  = COM1_RX_PIN;
 2479              		.loc 1 912 28
 2480 0018 4FF48063 		mov	r3, #1024
 2481 001c FB60     		str	r3, [r7, #12]
 913:./BSP/ST/stm32h747i_discovery.c ****   HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, gpio_init_structure.Pin);
 2482              		.loc 1 913 3
 2483 001e FB68     		ldr	r3, [r7, #12]
 2484 0020 1946     		mov	r1, r3
 2485 0022 0748     		ldr	r0, .L135
 2486 0024 FFF7FEFF 		bl	HAL_GPIO_DeInit
 914:./BSP/ST/stm32h747i_discovery.c **** 
 915:./BSP/ST/stm32h747i_discovery.c ****   /* Disable USART clock */
 916:./BSP/ST/stm32h747i_discovery.c ****   COM1_CLK_DISABLE();
 2487              		.loc 1 916 3
 2488 0028 064B     		ldr	r3, .L135+4
 2489 002a D3F8F030 		ldr	r3, [r3, #240]
 2490 002e 054A     		ldr	r2, .L135+4
 2491 0030 23F01003 		bic	r3, r3, #16
 2492 0034 C2F8F030 		str	r3, [r2, #240]
 917:./BSP/ST/stm32h747i_discovery.c **** }
 2493              		.loc 1 917 1
 2494 0038 00BF     		nop
 2495 003a 2037     		adds	r7, r7, #32
 2496              	.LCFI140:
 2497              		.cfi_def_cfa_offset 8
 2498 003c BD46     		mov	sp, r7
 2499              	.LCFI141:
 2500              		.cfi_def_cfa_register 13
 2501              		@ sp needed
 2502 003e 80BD     		pop	{r7, pc}
 2503              	.L136:
 2504              		.align	2
 2505              	.L135:
 2506 0040 00000258 		.word	1476526080
 2507 0044 00440258 		.word	1476543488
ARM GAS  /tmp/ccddg22r.s 			page 79


 2508              		.cfi_endproc
 2509              	.LFE362:
 2511              		.section	.rodata.BUTTON_EXTI_LINE.12349,"a"
 2512              		.align	2
 2515              	BUTTON_EXTI_LINE.12349:
 2516 0000 0D007016 		.word	376438797
 2517              		.section	.data.ButtonCallback.12347,"aw"
 2518              		.align	2
 2521              	ButtonCallback.12347:
 2522 0000 00000000 		.word	BUTTON_WAKEUP_EXTI_Callback
 2523              		.section	.data.BSP_BUTTON_PRIO.12348,"aw"
 2524              		.align	2
 2527              	BSP_BUTTON_PRIO.12348:
 2528 0000 0F000000 		.word	15
 2529              		.section	.rodata.JOY_EXTI_LINE.12396,"a"
 2530              		.align	2
 2533              	JOY_EXTI_LINE.12396:
 2534 0000 02007016 		.word	376438786
 2535 0004 03007016 		.word	376438787
 2536 0008 04007016 		.word	376438788
 2537 000c 05007016 		.word	376438789
 2538 0010 06007016 		.word	376438790
 2539              		.section	.data.JoyCallback.12395,"aw"
 2540              		.align	2
 2543              	JoyCallback.12395:
 2544 0000 00000000 		.word	JOY1_SEL_EXTI_Callback
 2545 0004 00000000 		.word	JOY1_DOWN_EXTI_Callback
 2546 0008 00000000 		.word	JOY1_LEFT_EXTI_Callback
 2547 000c 00000000 		.word	JOY1_RIGHT_EXTI_Callback
 2548 0010 00000000 		.word	JOY1_UP_EXTI_Callback
 2549              		.section	.data.BSP_JOY_PRIO.12397,"aw"
 2550              		.align	2
 2553              	BSP_JOY_PRIO.12397:
 2554 0000 0F000000 		.word	15
 2555 0004 0F000000 		.word	15
 2556 0008 0F000000 		.word	15
 2557 000c 0F000000 		.word	15
 2558 0010 0F000000 		.word	15
 2559              		.text
 2560              	.Letext0:
 2561              		.file 3 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 2562              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2563              		.file 5 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 2564              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2565              		.file 7 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2566              		.file 8 "/usr/include/newlib/sys/_types.h"
 2567              		.file 9 "/usr/include/newlib/sys/reent.h"
 2568              		.file 10 "/usr/include/newlib/sys/lock.h"
 2569              		.file 11 "/usr/include/newlib/math.h"
 2570              		.file 12 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2571              		.file 13 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 2572              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 2573              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_exti.h"
 2574              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 2575              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 2576              		.file 18 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 2577              		.file 19 "./BSP/ST/stm32h747i_discovery.h"
ARM GAS  /tmp/ccddg22r.s 			page 80


ARM GAS  /tmp/ccddg22r.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h747i_discovery.c
                            *COM*:0000000000000008 hpb_exti
                            *COM*:0000000000000090 hcom_uart
     /tmp/ccddg22r.s:23     .data.COM_USART:0000000000000000 COM_USART
     /tmp/ccddg22r.s:20     .data.COM_USART:0000000000000000 $d
     /tmp/ccddg22r.s:26     .data.LED_PORT:0000000000000000 $d
     /tmp/ccddg22r.s:29     .data.LED_PORT:0000000000000000 LED_PORT
     /tmp/ccddg22r.s:35     .rodata.LED_PIN:0000000000000000 $d
     /tmp/ccddg22r.s:38     .rodata.LED_PIN:0000000000000000 LED_PIN
     /tmp/ccddg22r.s:44     .data.BUTTON_PORT:0000000000000000 $d
     /tmp/ccddg22r.s:47     .data.BUTTON_PORT:0000000000000000 BUTTON_PORT
     /tmp/ccddg22r.s:50     .rodata.BUTTON_PIN:0000000000000000 $d
     /tmp/ccddg22r.s:53     .rodata.BUTTON_PIN:0000000000000000 BUTTON_PIN
     /tmp/ccddg22r.s:56     .rodata.BUTTON_IRQn:0000000000000000 $d
     /tmp/ccddg22r.s:59     .rodata.BUTTON_IRQn:0000000000000000 BUTTON_IRQn
     /tmp/ccddg22r.s:64     .bss.COM_ActiveLogPort:0000000000000000 COM_ActiveLogPort
     /tmp/ccddg22r.s:65     .bss.COM_ActiveLogPort:0000000000000000 $d
     /tmp/ccddg22r.s:67     .bss.JoyPinsMask:0000000000000000 $d
     /tmp/ccddg22r.s:70     .bss.JoyPinsMask:0000000000000000 JoyPinsMask
     /tmp/ccddg22r.s:73     .data.JOY1_PORT:0000000000000000 $d
     /tmp/ccddg22r.s:76     .data.JOY1_PORT:0000000000000000 JOY1_PORT
     /tmp/ccddg22r.s:83     .rodata.JOY1_PIN:0000000000000000 $d
     /tmp/ccddg22r.s:86     .rodata.JOY1_PIN:0000000000000000 JOY1_PIN
     /tmp/ccddg22r.s:93     .rodata.JOY1_IRQn:0000000000000000 $d
     /tmp/ccddg22r.s:96     .rodata.JOY1_IRQn:0000000000000000 JOY1_IRQn
     /tmp/ccddg22r.s:103    .bss.hjoy_exti:0000000000000000 $d
     /tmp/ccddg22r.s:106    .bss.hjoy_exti:0000000000000000 hjoy_exti
     /tmp/ccddg22r.s:109    .text.BSP_GetVersion:0000000000000000 $t
     /tmp/ccddg22r.s:117    .text.BSP_GetVersion:0000000000000000 BSP_GetVersion
     /tmp/ccddg22r.s:148    .text.BSP_GetVersion:0000000000000010 $d
     /tmp/ccddg22r.s:153    .rodata:0000000000000000 $d
     /tmp/ccddg22r.s:157    .text.BSP_GetBoardName:0000000000000000 $t
     /tmp/ccddg22r.s:164    .text.BSP_GetBoardName:0000000000000000 BSP_GetBoardName
     /tmp/ccddg22r.s:194    .text.BSP_GetBoardName:0000000000000010 $d
     /tmp/ccddg22r.s:203    .text.BSP_GetBoardID:0000000000000000 $t
     /tmp/ccddg22r.s:210    .text.BSP_GetBoardID:0000000000000000 BSP_GetBoardID
     /tmp/ccddg22r.s:240    .text.BSP_GetBoardID:0000000000000010 $d
     /tmp/ccddg22r.s:245    .text.BSP_LED_Init:0000000000000000 $t
     /tmp/ccddg22r.s:252    .text.BSP_LED_Init:0000000000000000 BSP_LED_Init
     /tmp/ccddg22r.s:338    .text.BSP_LED_Init:000000000000007c $d
     /tmp/ccddg22r.s:345    .text.BSP_LED_DeInit:0000000000000000 $t
     /tmp/ccddg22r.s:352    .text.BSP_LED_DeInit:0000000000000000 BSP_LED_DeInit
     /tmp/ccddg22r.s:416    .text.BSP_LED_DeInit:0000000000000050 $d
     /tmp/ccddg22r.s:422    .text.BSP_LED_On:0000000000000000 $t
     /tmp/ccddg22r.s:429    .text.BSP_LED_On:0000000000000000 BSP_LED_On
     /tmp/ccddg22r.s:479    .text.BSP_LED_On:0000000000000034 $d
     /tmp/ccddg22r.s:485    .text.BSP_LED_Off:0000000000000000 $t
     /tmp/ccddg22r.s:492    .text.BSP_LED_Off:0000000000000000 BSP_LED_Off
     /tmp/ccddg22r.s:542    .text.BSP_LED_Off:0000000000000034 $d
     /tmp/ccddg22r.s:548    .text.BSP_LED_Toggle:0000000000000000 $t
     /tmp/ccddg22r.s:555    .text.BSP_LED_Toggle:0000000000000000 BSP_LED_Toggle
     /tmp/ccddg22r.s:605    .text.BSP_LED_Toggle:0000000000000034 $d
     /tmp/ccddg22r.s:611    .text.BSP_LED_GetState:0000000000000000 $t
     /tmp/ccddg22r.s:618    .text.BSP_LED_GetState:0000000000000000 BSP_LED_GetState
     /tmp/ccddg22r.s:671    .text.BSP_LED_GetState:0000000000000038 $d
     /tmp/ccddg22r.s:677    .text.BSP_PB_Init:0000000000000000 $t
ARM GAS  /tmp/ccddg22r.s 			page 82


     /tmp/ccddg22r.s:684    .text.BSP_PB_Init:0000000000000000 BSP_PB_Init
     /tmp/ccddg22r.s:809    .text.BSP_PB_Init:00000000000000c8 $d
     /tmp/ccddg22r.s:2515   .rodata.BUTTON_EXTI_LINE.12349:0000000000000000 BUTTON_EXTI_LINE.12349
     /tmp/ccddg22r.s:2521   .data.ButtonCallback.12347:0000000000000000 ButtonCallback.12347
     /tmp/ccddg22r.s:2527   .data.BSP_BUTTON_PRIO.12348:0000000000000000 BSP_BUTTON_PRIO.12348
     /tmp/ccddg22r.s:820    .text.BSP_PB_DeInit:0000000000000000 $t
     /tmp/ccddg22r.s:827    .text.BSP_PB_DeInit:0000000000000000 BSP_PB_DeInit
     /tmp/ccddg22r.s:878    .text.BSP_PB_DeInit:0000000000000034 $d
     /tmp/ccddg22r.s:883    .text.BSP_PB_GetState:0000000000000000 $t
     /tmp/ccddg22r.s:890    .text.BSP_PB_GetState:0000000000000000 BSP_PB_GetState
     /tmp/ccddg22r.s:931    .text.BSP_PB_GetState:0000000000000028 $d
     /tmp/ccddg22r.s:936    .text.BSP_PB_IRQHandler:0000000000000000 $t
     /tmp/ccddg22r.s:943    .text.BSP_PB_IRQHandler:0000000000000000 BSP_PB_IRQHandler
     /tmp/ccddg22r.s:983    .text.BSP_PB_IRQHandler:0000000000000020 $d
     /tmp/ccddg22r.s:988    .text.BUTTON_WAKEUP_EXTI_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:994    .text.BUTTON_WAKEUP_EXTI_Callback:0000000000000000 BUTTON_WAKEUP_EXTI_Callback
     /tmp/ccddg22r.s:1025   .text.BSP_PB_Callback:0000000000000000 BSP_PB_Callback
     /tmp/ccddg22r.s:1018   .text.BSP_PB_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:1062   .text.BSP_COM_Init:0000000000000000 $t
     /tmp/ccddg22r.s:1069   .text.BSP_COM_Init:0000000000000000 BSP_COM_Init
     /tmp/ccddg22r.s:2337   .text.USART1_MspInit:0000000000000000 USART1_MspInit
     /tmp/ccddg22r.s:1263   .text.MX_USART1_Init:0000000000000000 MX_USART1_Init
     /tmp/ccddg22r.s:1147   .text.BSP_COM_Init:0000000000000060 $d
     /tmp/ccddg22r.s:1152   .text.BSP_COM_DeInit:0000000000000000 $t
     /tmp/ccddg22r.s:1159   .text.BSP_COM_DeInit:0000000000000000 BSP_COM_DeInit
     /tmp/ccddg22r.s:2453   .text.USART1_MspDeInit:0000000000000000 USART1_MspDeInit
     /tmp/ccddg22r.s:1250   .text.BSP_COM_DeInit:0000000000000074 $d
     /tmp/ccddg22r.s:1256   .text.MX_USART1_Init:0000000000000000 $t
     /tmp/ccddg22r.s:1349   .text.MX_USART1_Init:0000000000000060 $d
     /tmp/ccddg22r.s:1354   .text.BSP_COM_SelectLogPort:0000000000000000 $t
     /tmp/ccddg22r.s:1361   .text.BSP_COM_SelectLogPort:0000000000000000 BSP_COM_SelectLogPort
     /tmp/ccddg22r.s:1411   .text.BSP_COM_SelectLogPort:0000000000000028 $d
     /tmp/ccddg22r.s:1416   .text.__io_putchar:0000000000000000 $t
     /tmp/ccddg22r.s:1423   .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccddg22r.s:1471   .text.__io_putchar:0000000000000030 $d
     /tmp/ccddg22r.s:1477   .text.BSP_JOY_Init:0000000000000000 $t
     /tmp/ccddg22r.s:1484   .text.BSP_JOY_Init:0000000000000000 BSP_JOY_Init
     /tmp/ccddg22r.s:1741   .text.BSP_JOY_Init:00000000000001bc $d
     /tmp/ccddg22r.s:2533   .rodata.JOY_EXTI_LINE.12396:0000000000000000 JOY_EXTI_LINE.12396
     /tmp/ccddg22r.s:2543   .data.JoyCallback.12395:0000000000000000 JoyCallback.12395
     /tmp/ccddg22r.s:2553   .data.BSP_JOY_PRIO.12397:0000000000000000 BSP_JOY_PRIO.12397
     /tmp/ccddg22r.s:1755   .text.BSP_JOY_DeInit:0000000000000000 $t
     /tmp/ccddg22r.s:1762   .text.BSP_JOY_DeInit:0000000000000000 BSP_JOY_DeInit
     /tmp/ccddg22r.s:1824   .text.BSP_JOY_DeInit:000000000000004c $d
     /tmp/ccddg22r.s:1840   .text.BSP_JOY_DeInit:000000000000008c $t
     /tmp/ccddg22r.s:1927   .text.BSP_JOY_DeInit:0000000000000118 $d
     /tmp/ccddg22r.s:1935   .text.BSP_JOY_GetState:0000000000000000 $t
     /tmp/ccddg22r.s:1942   .text.BSP_JOY_GetState:0000000000000000 BSP_JOY_GetState
     /tmp/ccddg22r.s:2029   .text.BSP_JOY_GetState:0000000000000068 $d
     /tmp/ccddg22r.s:2036   .text.BSP_JOY_IRQHandler:0000000000000000 $t
     /tmp/ccddg22r.s:2043   .text.BSP_JOY_IRQHandler:0000000000000000 BSP_JOY_IRQHandler
     /tmp/ccddg22r.s:2126   .text.BSP_JOY_IRQHandler:000000000000004c $d
     /tmp/ccddg22r.s:2131   .text.BSP_JOY_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:2138   .text.BSP_JOY_Callback:0000000000000000 BSP_JOY_Callback
     /tmp/ccddg22r.s:2176   .text.JOY1_UP_EXTI_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:2182   .text.JOY1_UP_EXTI_Callback:0000000000000000 JOY1_UP_EXTI_Callback
     /tmp/ccddg22r.s:2207   .text.JOY1_DOWN_EXTI_Callback:0000000000000000 $t
ARM GAS  /tmp/ccddg22r.s 			page 83


     /tmp/ccddg22r.s:2213   .text.JOY1_DOWN_EXTI_Callback:0000000000000000 JOY1_DOWN_EXTI_Callback
     /tmp/ccddg22r.s:2238   .text.JOY1_SEL_EXTI_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:2244   .text.JOY1_SEL_EXTI_Callback:0000000000000000 JOY1_SEL_EXTI_Callback
     /tmp/ccddg22r.s:2269   .text.JOY1_LEFT_EXTI_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:2275   .text.JOY1_LEFT_EXTI_Callback:0000000000000000 JOY1_LEFT_EXTI_Callback
     /tmp/ccddg22r.s:2300   .text.JOY1_RIGHT_EXTI_Callback:0000000000000000 $t
     /tmp/ccddg22r.s:2306   .text.JOY1_RIGHT_EXTI_Callback:0000000000000000 JOY1_RIGHT_EXTI_Callback
     /tmp/ccddg22r.s:2331   .text.USART1_MspInit:0000000000000000 $t
     /tmp/ccddg22r.s:2441   .text.USART1_MspInit:00000000000000a8 $d
     /tmp/ccddg22r.s:2447   .text.USART1_MspDeInit:0000000000000000 $t
     /tmp/ccddg22r.s:2506   .text.USART1_MspDeInit:0000000000000040 $d
     /tmp/ccddg22r.s:2512   .rodata.BUTTON_EXTI_LINE.12349:0000000000000000 $d
     /tmp/ccddg22r.s:2518   .data.ButtonCallback.12347:0000000000000000 $d
     /tmp/ccddg22r.s:2524   .data.BSP_BUTTON_PRIO.12348:0000000000000000 $d
     /tmp/ccddg22r.s:2530   .rodata.JOY_EXTI_LINE.12396:0000000000000000 $d
     /tmp/ccddg22r.s:2540   .data.JoyCallback.12395:0000000000000000 $d
     /tmp/ccddg22r.s:2550   .data.BSP_JOY_PRIO.12397:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_GPIO_WritePin
HAL_GPIO_DeInit
HAL_GPIO_TogglePin
HAL_GPIO_ReadPin
HAL_EXTI_GetHandle
HAL_EXTI_RegisterCallback
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_NVIC_DisableIRQ
HAL_EXTI_IRQHandler
HAL_UART_DeInit
HAL_UART_Init
HAL_UART_Transmit
