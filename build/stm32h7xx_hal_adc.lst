ARM GAS  /tmp/ccp7RHPZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_adc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.LL_ADC_SetCommonClock,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	LL_ADC_SetCommonClock:
  25              	.LFB145:
  26              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
   1:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @file    stm32h7xx_ll_adc.h
   4:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   7:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @attention
   8:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
   9:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  10:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  12:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  17:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
  18:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  19:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  20:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifndef STM32H7xx_LL_ADC_H
  22:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define STM32H7xx_LL_ADC_H
  23:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  24:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifdef __cplusplus
  25:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** extern "C" {
  26:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
  27:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  28:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #include "stm32h7xx.h"
  30:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  31:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @addtogroup STM32H7xx_LL_Driver
  32:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccp7RHPZ.s 			page 2


  33:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  34:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  35:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  36:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  37:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  39:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  40:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  41:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  44:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  47:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  48:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC calibration:                                         */
  50:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC calibration factors configuration */
  51:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  52:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_CALIB_OFFSET, LL_ADC_CALIB_LINEARITY, ...   */
  53:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
  54:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
  55:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration configuration: configuration before calibration start    */
  56:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration factors: register offset                                 */
  57:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_OFFSET_REGOFFSET    (0x00000000UL) /* Register CALFACT defined as referenc
  58:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_LINEARITY_REGOFFSET (0x00000001UL) /* Register CALFACT2 offset vs register
  59:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_REGOFFSET_MASK      (ADC_CALIB_FACTOR_OFFSET_REGOFFSET | ADC_CALIB_FACTOR_
  60:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_MASK                  (ADC_CR_ADCALLIN)
  61:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_BINARY_MASK           (ADC_CALIB_FACTOR_REGOFFSET_MASK) /* Mask to get binar
  62:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  64:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  65:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  66:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer register offset                                                */
  67:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  68:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  69:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  70:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  71:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  72:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  73:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  74:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  75:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  76:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  77:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  78:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  79:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  80:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  81:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  82:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR1_SQ1" po
  83:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR1_SQ2" po
  84:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR1_SQ3" po
  85:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR1_SQ4" po
  86:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_SQR2_SQ5" po
  87:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR2_SQ6" po
  88:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR2_SQ7" po
  89:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR2_SQ8" po
ARM GAS  /tmp/ccp7RHPZ.s 			page 3


  90:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR2_SQ9" po
  91:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR3_SQ10" p
  92:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR3_SQ11" p
  93:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL) /* Value equivalent to bitfield "ADC_SQR3_SQ12" p
  94:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL) /* Value equivalent to bitfield "ADC_SQR3_SQ13" p
  95:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL) /* Value equivalent to bitfield "ADC_SQR3_SQ14" p
  96:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR4_SQ15" p
  97:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR4_SQ16" p
  98:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  99:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
 102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
 103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - data register offset                                                     */
 104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
 105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
 107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
 109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
 110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
 111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
 112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger source                                                   */
 129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger edge                                                     */
 130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
ARM GAS  /tmp/ccp7RHPZ.s 			page 4


 147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR_EXTSEL"
 150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR_EXTEN" 
 151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger source                                                  */
 157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger edge                                                    */
 158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U 
 164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  ( 2UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTSEL
 178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   ( 6UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTEN"
 179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 5


 204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_BITFIELD            (ADC_AWD2CR_AWD2CH_19)
 259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
ARM GAS  /tmp/ccp7RHPZ.s 			page 6


 261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_SMP                 (ADC_SMPR2_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
 287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection on groups.                                                     */
 306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
ARM GAS  /tmp/ccp7RHPZ.s 			page 7


 318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 thresholds registers */
 338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_TRX_REGOFFSET to spare 32 bits space */
 339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_VAL      (0x00000022UL)
 341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Legacy literals */
 343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1_TR                      LL_ADC_AWD1
 344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2_TR                      LL_ADC_AWD2
 345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3_TR                      LL_ADC_AWD3
 346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits positions */
 357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS_ADC3    (ADC3_CFGR_RES_Pos)
 363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits groups */
 367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC internal channels related definitions */
 371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x8fff810UL))  /* Internal voltage referen
 374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Address related to STM32
ARM GAS  /tmp/ccp7RHPZ.s 			page 8


 375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FF1E860UL)) /* Internal voltage referen
 377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3300UL)                     /* Analog voltage reference
 379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Temperature sensor */
 380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x8fff814UL))  /* Internal temperature sen
 382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x8fff818UL))  /* Internal temperature sen
 383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Addresses related to STM
 384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FF1E820UL)) /* Internal temperature sen
 386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FF1E840UL)) /* Internal temperature sen
 387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3300UL)                     /* Analog voltage reference
 392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Registers addresses with ADC linearity calibration content (programmed during device production,
 394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_1_ADDR ((uint32_t*) (0x1FF1EC00UL))
 395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_2_ADDR ((uint32_t*) (0x1FF1EC04UL))
 396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_3_ADDR ((uint32_t*) (0x1FF1EC08UL))
 397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_4_ADDR ((uint32_t*) (0x1FF1EC0CUL))
 398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_5_ADDR ((uint32_t*) (0x1FF1EC10UL))
 399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_6_ADDR ((uint32_t*) (0x1FF1EC14UL))
 400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_COUNT  (6UL)
 401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a register from a register basis from which an offset
 414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is applied.
 415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Pointer to register address
 418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 9


 432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and multimode
 436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sharing the same ADC common instance):
 440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         disabled.
 442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, if ADC group injected is u
 448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC dual ADC mode DMA transfer data format: Each D
 459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
ARM GAS  /tmp/ccp7RHPZ.s 			page 10


 489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LeftBitShift;                /*!< Configures the left shifting applied to the final resu
 498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LEFT_B
 499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "REG").
 513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 11


 546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t DataTransferMode;            /*!< Set ADC group regular conversion data transfer mode: n
 555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DA
 556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              data preserved or overwritten.
 561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "INJ").
 573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
ARM GAS  /tmp/ccp7RHPZ.s 			page 12


 603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
ARM GAS  /tmp/ccp7RHPZ.s 			page 13


 660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* DMA transfer.                                                              */
 691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 14


 717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement paths all di
 729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_BOOST_MODE ADC instance - Boost mode
 737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_6MHZ25   (0x00000000UL)                                            /*!< B
 740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_12MHZ5   (                                        ADC_CR_BOOST_0)  /*!< B
 741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_20MHZ    (                       ADC_CR_BOOST_1                 )  /*!< B
 742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_25MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1                 )  /*!< B
 743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_50MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1 | ADC_CR_BOOST_0)  /*!< B
 744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_OFFSET_LINEARITY  ADC instance - Calibration mode for offset an
 749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET                (ADC_CALIB_FACTOR_OFFSET_REGOFFSET)                     
 752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY             (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET)                  
 753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET_LINEARITY      (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET | ADC_CR_ADCALLIN)
 754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_LINEARITY_WORD  ADC instance - Calibration linearity words
 759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD1       (ADC_CR_LINCALRDYW1)    /*!< ADC calibration linearity w
 762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD2       (ADC_CR_LINCALRDYW2)    /*!< ADC calibration linearity w
 763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD3       (ADC_CR_LINCALRDYW3)    /*!< ADC calibration linearity w
 764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD4       (ADC_CR_LINCALRDYW4)    /*!< ADC calibration linearity w
 765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD5       (ADC_CR_LINCALRDYW5)    /*!< ADC calibration linearity w
 766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD6       (ADC_CR_LINCALRDYW6)    /*!< ADC calibration linearity w
 767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 15


 774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_16B              (0x00000000UL)                                      /*!<
 775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B              (                                  ADC_CFGR_RES_0)  /*!<
 776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (                 ADC_CFGR_RES_1                 )  /*!<
 777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_1 | ADC_CFGR_RES_0)  /*!<
 778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_X)
 780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B_OPT          (ADC_CFGR_RES_2 |                  ADC_CFGR_RES_0)  /*!<
 781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B_OPT          (ADC_CFGR_RES_2 | ADC_CFGR_RES_1                 )  /*!<
 782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
 785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0) /*!< AD
 786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2                                ) /*!< AD
 788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                             /*!< Th
 789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC3_CFGR_RES_1 | ADC3_CFGR_RES_0)   /*!< ADC resolutio
 794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC3_CFGR_ALIGN)       /*!< ADC conversion data alignme
 805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LEFT_BIT_SHIFT   ADC left Shift
 812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_NONE  (0x00000000UL)                                                 
 815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_1     (ADC_CFGR2_LSHIFT_0)                                           
 816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_2     (ADC_CFGR2_LSHIFT_1)                                           
 817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_3     (ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0)                      
 818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_4     (ADC_CFGR2_LSHIFT_2)                                           
 819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_5     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0)                      
 820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_6     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1)                      
 821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_7     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_8     (ADC_CFGR2_LSHIFT_3)                                           
 823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_9     (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_0)                      
 824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_10    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1)                      
 825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_11    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_12    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2)                      
 827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_13    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0) 
 828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_14    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1) 
 829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_15    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 |
 830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 16


 831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGNED_SATURATION ADC instance - Offset signed saturation mode
 855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE   (0x00000000UL)   /*!< ADC offset signed saturatio
 858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE    (ADC_OFR1_SSATE) /*!< ADC offset signed saturatio
 859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_RSHIFT ADC instance - Offset right shift
 864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_DISABLE   (0x00000000UL)      /*!< ADC offset right shift is disabled 
 867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_ENABLE    (ADC_CFGR2_RSHIFT1) /*!< ADC offset right shift is enabled (
 868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)           /*!< ADC offset saturation is d
 876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC3_OFR1_SATEN)        /*!< ADC offset saturation is e
 877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC3_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among A
 886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccp7RHPZ.s 			page 17


 888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)        /*!< ADC offset is negative (among
 894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC3_OFR1_OFFSETPOS) /*!< ADC offset is positive (among
 895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_19                  (ADC_CHANNEL_19_NUMBER | ADC_CHANNEL_19_SMP | ADC_CHANNE
 935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
 936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
ARM GAS  /tmp/ccp7RHPZ.s 			page 18


 945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH1_ADC2        (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH2_ADC2        (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(DAC2)
 954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC2CH1_ADC2        (LL_ADC_CHANNEL_15 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE          (0x00000000UL)                                           
 965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                          
 966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2      (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3      (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2      (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11   (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1    (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM1_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM2_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM3_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM23)
 987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM23_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM23 */
 989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM24)
 990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM24_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM24 */
 992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
1000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
1001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
ARM GAS  /tmp/ccp7RHPZ.s 			page 19


1002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
1007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)        /*!< ADC conversions sa
1010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC3_CFGR2_BULB)     /*!< ADC conversions sa
1011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Note: First conver
1012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC3_CFGR2_SMPTRIG)  /*!< ADC conversions sa
1013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger rising edg
1014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger falling ed
1015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */ 
1018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
1021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
1024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
1025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DATA_TRANSFER_MODE  ADC group regular - Data transfer mode of ADC conve
1030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DR_TRANSFER             (0x00000000UL)                        /*!< ADC conversio
1033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR_DMNGT_0) /*!< ADC conversio
1034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMNGT_1 | ADC_CFGR_DMNGT_0) /*!< ADC conversio
1035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DFSDM_TRANSFER          (ADC_CFGR_DMNGT_1                   ) /*!< ADC conversio
1036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
1042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversi
1046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_LIMITED    (                  ADC3_CFGR_DMAEN)    /*!< ADC convers
1047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_UNLIMITED  (ADC3_CFGR_DMACFG | ADC3_CFGR_DMAEN)    /*!< ADC conver
1048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
1054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
1057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
1058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 20


1059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
1063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
1066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
1067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
1068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
1069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
1070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
1071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
1072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
1074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
1075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
1076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
1077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
1078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
ARM GAS  /tmp/ccp7RHPZ.s 			page 21


1116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM23_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM24_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 22


1173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                          
1219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_8CYCLES_5      (                    ADC_SMPR2_SMP10_1                  
1221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_16CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_32CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_64CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_387CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_810CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
ARM GAS  /tmp/ccp7RHPZ.s 			page 23


1230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_2CYCLES_5      (0x00000000UL)                                     
1234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_6CYCLES_5      (                                        ADC_SMPR2_
1235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_12CYCLES_5     (                    ADC_SMPR2_SMP10_1             
1236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_47CYCLES_5     (ADC_SMPR2_SMP10_2                                 
1238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_
1239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1             
1240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
ARM GAS  /tmp/ccp7RHPZ.s 			page 24


1287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK)              
1331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_INJ          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG_INJ      ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK)   
1337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK)   
1343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
ARM GAS  /tmp/ccp7RHPZ.s 			page 25


1344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK)   
1346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (0x1UL)                     /*!< ADC analog watchdog thr
1356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (0x0UL)                     /*!< ADC analog watchdog thr
1357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                          ADC3_TR1_AWDF
1366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                     ADC3_TR1_AWDFILT_1                
1367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                     ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC3_TR1_AWDFILT_2                                     
1369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC3_TR1_AWDFILT_2 |                      ADC3_TR1_AWDF
1370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1                
1371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 26


1401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                        ADC3_CFGR2_OVSR
1403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                    ADC3_CFGR2_OVSR_1                  
1404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                    ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC3_CFGR2_OVSR_2                                      
1406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC3_CFGR2_OVSR_2                     | ADC3_CFGR2_OVSR
1407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1                  
1408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_9           (ADC_CFGR2_OVSS_3                                       
1427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_10          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_11          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                      /*!< ADC multimode
1452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_32_10B      (ADC_CCR_DAMDF_1                  ) /*!< ADC multimode
1453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_8B          (ADC_CCR_DAMDF_1 | ADC_CCR_DAMDF_0) /*!< ADC multimode
1454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 27


1458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5           (0x00000000UL)                                
1462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5          (                                             
1463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5          (                                    ADC_CCR_D
1464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5          (                                    ADC_CCR_D
1465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS   (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5          (                  ADC_CCR_DELAY_2            
1467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES            (ADC_CCR_DELAY_3                              
1469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5          (                  ADC_CCR_DELAY_2            
1470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5          (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES            (ADC_CCR_DELAY_3                              
1473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES            (ADC_CCR_DELAY_3                              
1474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not timeout values.
1493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         above each literal definition.
1495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       not timeout values.                                                  */
1500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       STM32 series:                                                         */
1505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 16384/fADC.                   */
1506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         cycles                                                             */
1512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         configuration.                                                     */
1514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
ARM GAS  /tmp/ccp7RHPZ.s 			page 28


1515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "ts_vrefint").                                                   */
1525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (5UL)  /*!< Delay for internal voltage reference stabili
1527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tSTART_RUN").                                                   */
1531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    ( 26UL)  /*!< Delay for temperature sensor stabilization
1533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles            */
1536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Fixed timeout value for ADC linearity word bit set/clear delay.                         */
1544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Values defined to be higher than worst cases: low clock frequency,                      */
1545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* maximum prescalers.                                                                     */
1546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Ex of profile low frequency : f_ADC at 4,577 Khz (minimum value                         */
1547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* according to Data sheet), linearity set/clear bit delay MAX = 6 / f_ADC + 3 cycles AHB  */
1548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*           6 / 4577 = 1,311ms                                                            */
1549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* At maximum CPU speed (400 MHz), this means                                              */
1550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*    3.58 * 400 MHz = 524400 CPU cycles                                                   */
1551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEARITY_BIT_TOGGLE_TIMEOUT         (524400UL)      /*!< ADC linearity set/clear bit d
1552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 29


1572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Write a value in ADC register
1573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be written
1575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
1577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Read a value in ADC register
1582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be read
1584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Register value
1585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the resolution defines to STM32H73x/2x ADC3 registers values
1598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the ADC3 resolution according to the STM32H73x/2x RefMan.
1599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from ADC3 resolution (12b, 10b, 8b,6b)
1600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x00000000UL (value correspodning to ADC3 12 bits)
1607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_0 = 0x00000004  (value corresponding to ADC3 10 bits)
1608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_1 = 0x00000008 (value corresponding to ADC3 8 bits)
1609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x0000001C (value corresponding to ADC3 6 bits)
1610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This helper macro is applicable for STM32H73x/2x devices only
1611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC12_RESOLUTION_TO_ADC3(__ADC_RESOLUTION__)                      \
1613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (                                                                     \
1614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_12B)                     \
1615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             ?(0x00000000UL)                                                    \
1616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              :                                                                 \
1617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_10B)                   \
1618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ?(ADC_CFGR_RES_0)                                               \
1619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 :                                                              \
1620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_8B)                 \
1621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   ?(ADC_CFGR_RES_1)                                            \
1622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    :                                                           \
1623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_6B)              \
1624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      ?((ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0))       \
1625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                        :(0x00000000UL)                                         \
1626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          )
1627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
ARM GAS  /tmp/ccp7RHPZ.s 			page 30


1629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return decimal number "4".
1636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number is returned, either defined with number
1638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                    \
1675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                    \
1678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                    \
1679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from number in decimal format.
ARM GAS  /tmp/ccp7RHPZ.s 			page 31


1686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                            
1728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
1733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                            
1734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
ARM GAS  /tmp/ccp7RHPZ.s 			page 32


1743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC internal channel:
1745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
ARM GAS  /tmp/ccp7RHPZ.s 			page 33


1800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a value defined from parameter definition of
1804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC registers.
1807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
ARM GAS  /tmp/ccp7RHPZ.s 			page 34


1857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is
1872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
1886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
1890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2)                          \
1895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ||                                                                          \
1898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
1907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2) ||                       \
1912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
ARM GAS  /tmp/ccp7RHPZ.s 			page 35


1914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
1926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
1970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
ARM GAS  /tmp/ccp7RHPZ.s 			page 36


1971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
1973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
1974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
1976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
1977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
1979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
1980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
1982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
1983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
1985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
1986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
1988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
1989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
1991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
1992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
1994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
1995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
1997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
1998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
1999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
ARM GAS  /tmp/ccp7RHPZ.s 			page 37


2028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
2030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
2031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
2032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
2033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
2034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
2035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
2036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
2037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
2038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
2039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
2040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
2041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
2042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
2043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
2044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
2045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
2046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
2047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
2049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
2050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
2051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                 
2055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
2056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
2057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)             
2058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :                                                                                         
2059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD
2060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
2067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (< ADCx param >,
2071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_1
2072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 38


2085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           < threshold_value_18_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_16_BITS__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_16_BITS__) \
2106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD_16_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationOffsetFactor().
2112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential ended to 0x2A:
2114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetCalibrationOffsetFactor(
2115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1,
2116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 39


2142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance).
2144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         considered as master instances (do not depend to
2148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         any other ADC instance).
2149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     )?                                                                         \
2155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (ADC1)                                                                    \
2156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      :                                                                         \
2157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADCx__)                                                                \
2158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC common register instance
2169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC3_COMMON)                                                           \
2179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)   (ADC12_COMMON)
2183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance are disabled.
2188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are disabled.
ARM GAS  /tmp/ccp7RHPZ.s 			page 40


2199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
2201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3))                                                \
2212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                         (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (0xFFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: digital value of ADC conversion bit
2249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC3_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))
2252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a resolution to another resolution.
ARM GAS  /tmp/ccp7RHPZ.s 			page 41


2256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_X) || defined(ADC_VER_V5_V90)
2274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* defined(ADC_VER_V5_3) */
2302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
ARM GAS  /tmp/ccp7RHPZ.s 			page 42


2313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @brief  Helper macro to convert the ADC conversion data from
2333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         a resolution to another resolution.
2334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __DATA__ ADC conversion data to be converted
2335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @retval ADC conversion data to the requested resolution
2348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
2349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION_ADC3(__DATA__,\
2350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DATA__)                                                                 \
2353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))  \
2354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL))     \
2355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 16 bits)
2365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                       (unit: digital value).
2366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
ARM GAS  /tmp/ccp7RHPZ.s 			page 43


2370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_DATA__,\
2376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         reference VrefInt.
2385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         connected to pin Vref+.
2389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of internal voltage reference
2392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 16 bits,
2393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 16 bits)
2398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
2411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
2412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_16B)                  \
2413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
ARM GAS  /tmp/ccp7RHPZ.s 			page 44


2427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  parameters are correct (address and data).
2433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  less accurate than calibrated values),
2436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of temperature sensor
2443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to a resolution of 16 bits,
2444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor.
2446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_16B)         \
2467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to device datasheet).
2480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
ARM GAS  /tmp/ccp7RHPZ.s 			page 45


2484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: digital value)
2485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values.
2492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 16 bits
2502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 16 bits.
2504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "Avg_Slop
2506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "V30" (co
2508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((( (                                                                        \
2527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        -                                                                       \
2531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 46


2541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
2566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC register address
2585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t data_reg_addr;
2589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register DR */
2593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & (ADCx->DR);
2594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register CDR */
ARM GAS  /tmp/ccp7RHPZ.s 			page 47


2598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & ((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return data_reg_addr;
2602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, if ADC group injected is used, some
2615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must be respected.
2617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
2618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  27              		.loc 1 2647 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
ARM GAS  /tmp/ccp7RHPZ.s 			page 48


  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7]
2648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
  44              		.loc 1 2648 3
  45 000a 7B68     		ldr	r3, [r7, #4]
  46 000c 9B68     		ldr	r3, [r3, #8]
  47 000e 23F47C12 		bic	r2, r3, #4128768
  48 0012 3B68     		ldr	r3, [r7]
  49 0014 1A43     		orrs	r2, r2, r3
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 9A60     		str	r2, [r3, #8]
2649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
  52              		.loc 1 2649 1
  53 001a 00BF     		nop
  54 001c 0C37     		adds	r7, r7, #12
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 001e BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 0020 5DF8047B 		ldr	r7, [sp], #4
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 0024 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE145:
  69              		.section	.text.LL_ADC_SetCommonPathInternalCh,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv5-d16
  76              	LL_ADC_SetCommonPathInternalCh:
  77              	.LFB147:
2650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
ARM GAS  /tmp/ccp7RHPZ.s 			page 49


2663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
2704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
2705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  78              		.loc 1 2715 1
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 8
  81              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccp7RHPZ.s 			page 50


  82              		@ link register save eliminated.
  83 0000 80B4     		push	{r7}
  84              	.LCFI6:
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 7, -4
  87 0002 83B0     		sub	sp, sp, #12
  88              	.LCFI7:
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              	.LCFI8:
  92              		.cfi_def_cfa_register 7
  93 0006 7860     		str	r0, [r7, #4]
  94 0008 3960     		str	r1, [r7]
2716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
  95              		.loc 1 2716 3
  96 000a 7B68     		ldr	r3, [r7, #4]
  97 000c 9B68     		ldr	r3, [r3, #8]
  98 000e 23F0E072 		bic	r2, r3, #29360128
  99 0012 3B68     		ldr	r3, [r7]
 100 0014 1A43     		orrs	r2, r2, r3
 101 0016 7B68     		ldr	r3, [r7, #4]
 102 0018 9A60     		str	r2, [r3, #8]
2717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 103              		.loc 1 2717 1
 104 001a 00BF     		nop
 105 001c 0C37     		adds	r7, r7, #12
 106              	.LCFI9:
 107              		.cfi_def_cfa_offset 4
 108 001e BD46     		mov	sp, r7
 109              	.LCFI10:
 110              		.cfi_def_cfa_register 13
 111              		@ sp needed
 112 0020 5DF8047B 		ldr	r7, [sp], #4
 113              	.LCFI11:
 114              		.cfi_restore 7
 115              		.cfi_def_cfa_offset 0
 116 0024 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE147:
 120              		.section	.text.LL_ADC_GetCommonPathInternalCh,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu fpv5-d16
 127              	LL_ADC_GetCommonPathInternalCh:
 128              	.LFB148:
2718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
2727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
ARM GAS  /tmp/ccp7RHPZ.s 			page 51


2728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 129              		.loc 1 2737 1
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 8
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 80B4     		push	{r7}
 135              	.LCFI12:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 0002 83B0     		sub	sp, sp, #12
 139              	.LCFI13:
 140              		.cfi_def_cfa_offset 16
 141 0004 00AF     		add	r7, sp, #0
 142              	.LCFI14:
 143              		.cfi_def_cfa_register 7
 144 0006 7860     		str	r0, [r7, #4]
2738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 145              		.loc 1 2738 21
 146 0008 7B68     		ldr	r3, [r7, #4]
 147 000a 9B68     		ldr	r3, [r3, #8]
 148              		.loc 1 2738 10
 149 000c 03F0E073 		and	r3, r3, #29360128
2739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 150              		.loc 1 2739 1
 151 0010 1846     		mov	r0, r3
 152 0012 0C37     		adds	r7, r7, #12
 153              	.LCFI15:
 154              		.cfi_def_cfa_offset 4
 155 0014 BD46     		mov	sp, r7
 156              	.LCFI16:
 157              		.cfi_def_cfa_register 13
 158              		@ sp needed
 159 0016 5DF8047B 		ldr	r7, [sp], #4
 160              	.LCFI17:
 161              		.cfi_restore 7
 162              		.cfi_def_cfa_offset 0
 163 001a 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE148:
 167              		.section	.text.LL_ADC_SetOffset,"ax",%progbits
 168              		.align	1
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv5-d16
 174              	LL_ADC_SetOffset:
 175              	.LFB158:
ARM GAS  /tmp/ccp7RHPZ.s 			page 52


2740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
2761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor can be specified only once).
2764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         To perform this processing, use helper macro
2768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationOffsetFactor\n
2774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationOffsetFactor
2775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint
2784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
2786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT_RES13,
2787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 53


2797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationOffsetFactor\n
2807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationOffsetFactor
2808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT_RES13, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) 
2822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC Linear calibration factor in the mode single-ended.
2829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set linear calibration parameters
2830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor\n
2837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor
2838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, u
2850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
2853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/ccp7RHPZ.s 			page 54


2854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       timeout_cpu_cycles--;
2860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC Linear calibration factor in the mode single-ended.
2875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor\n
2878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor
2879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWor
2890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
2893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
2894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT));
2899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
2901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC resolution.
2905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /tmp/ccp7RHPZ.s 			page 55


2911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
2924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_RES, (((Resolution & 0x10UL) | 0x08UL | (Resolution & 0x04UL))
2931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else /* Rev.V */
2939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if (LL_ADC_RESOLUTION_8B == Resolution)
2941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
2945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
2956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (LL_ADC_RESOLUTION_8B == Resolution)
2958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
2962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X*/
ARM GAS  /tmp/ccp7RHPZ.s 			page 56


2968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC resolution.
2972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    *         @arg @ref LL_ADC_RESOLUTION_6B   **Value available for ADC3 on STM32H72x/3x devices on
2983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3)
2987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
2994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
2998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
3008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X */
ARM GAS  /tmp/ccp7RHPZ.s 			page 57


3025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC low power mode.
3029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
3072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
3074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
3079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
3081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 58


3082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC low power mode:
3085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected Channel.
3136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the pre-selection of channel configuration.
3137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Channel selections is dependent to ADC instance and IP version:
3138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For STM32H72x/3x This is applicable only for ADC1/ADC2
ARM GAS  /tmp/ccp7RHPZ.s 			page 59


3139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For Rest of STM32H7xxx This is applicable only all the ADCs instances.
3140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * 
3141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           
3144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           
3145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           
3146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           
3147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           
3148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           
3149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
3166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (ADCx != ADC3)
3169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       /* ADC channels preselection */
3171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
3174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* ADC channels preselection */
3175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or group injected)
3185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           converted data).
3187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /tmp/ccp7RHPZ.s 			page 60


3196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
3249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
ARM GAS  /tmp/ccp7RHPZ.s 			page 61


3253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 176              		.loc 1 3253 1
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 24
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 80B4     		push	{r7}
 182              	.LCFI18:
 183              		.cfi_def_cfa_offset 4
 184              		.cfi_offset 7, -4
 185 0002 87B0     		sub	sp, sp, #28
 186              	.LCFI19:
 187              		.cfi_def_cfa_offset 32
 188 0004 00AF     		add	r7, sp, #0
 189              	.LCFI20:
 190              		.cfi_def_cfa_register 7
 191 0006 F860     		str	r0, [r7, #12]
 192 0008 B960     		str	r1, [r7, #8]
 193 000a 7A60     		str	r2, [r7, #4]
 194 000c 3B60     		str	r3, [r7]
3254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 195              		.loc 1 3254 25
 196 000e FB68     		ldr	r3, [r7, #12]
 197 0010 6033     		adds	r3, r3, #96
 198 0012 1A46     		mov	r2, r3
 199 0014 BB68     		ldr	r3, [r7, #8]
 200 0016 9B00     		lsls	r3, r3, #2
 201 0018 1344     		add	r3, r3, r2
 202              		.loc 1 3254 18
 203 001a 7B61     		str	r3, [r7, #20]
3255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
 204              		.loc 1 3265 5
 205 001c 7B69     		ldr	r3, [r7, #20]
 206 001e 1B68     		ldr	r3, [r3]
 207 0020 03F00042 		and	r2, r3, #-2147483648
 208 0024 7B68     		ldr	r3, [r7, #4]
 209 0026 03F0F841 		and	r1, r3, #2080374784
 210 002a 3B68     		ldr	r3, [r7]
 211 002c 0B43     		orrs	r3, r3, r1
 212 002e 1A43     		orrs	r2, r2, r3
 213 0030 7B69     		ldr	r3, [r7, #20]
 214 0032 1A60     		str	r2, [r3]
3266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 215              		.loc 1 3269 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 62


 216 0034 00BF     		nop
 217 0036 1C37     		adds	r7, r7, #28
 218              	.LCFI21:
 219              		.cfi_def_cfa_offset 4
 220 0038 BD46     		mov	sp, r7
 221              	.LCFI22:
 222              		.cfi_def_cfa_register 13
 223              		@ sp needed
 224 003a 5DF8047B 		ldr	r7, [sp], #4
 225              	.LCFI23:
 226              		.cfi_restore 7
 227              		.cfi_def_cfa_offset 0
 228 003e 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE158:
 232              		.section	.text.LL_ADC_SetDataRightShift,"ax",%progbits
 233              		.align	1
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu fpv5-d16
 239              	LL_ADC_SetDataRightShift:
 240              	.LFB161:
3270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or group injected)
3276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
3284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
3286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
ARM GAS  /tmp/ccp7RHPZ.s 			page 63


3304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
3330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
3331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
3332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted data).
3345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
ARM GAS  /tmp/ccp7RHPZ.s 			page 64


3361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set data right shift for the ADC selected offset number 1, 2, 3 or 4:
3370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_SetDataRightShift\n
3372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  RigthShift This parameter can be one of the following values:
3379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthSh
3384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 241              		.loc 1 3384 1
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 16
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 80B4     		push	{r7}
 247              	.LCFI24:
 248              		.cfi_def_cfa_offset 4
 249              		.cfi_offset 7, -4
 250 0002 85B0     		sub	sp, sp, #20
 251              	.LCFI25:
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI26:
 255              		.cfi_def_cfa_register 7
 256 0006 F860     		str	r0, [r7, #12]
 257 0008 B960     		str	r1, [r7, #8]
 258 000a 7A60     		str	r2, [r7, #4]
3385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RS
 259              		.loc 1 3385 3
 260 000c FB68     		ldr	r3, [r7, #12]
 261 000e 1B69     		ldr	r3, [r3, #16]
 262 0010 23F4F042 		bic	r2, r3, #30720
 263 0014 BB68     		ldr	r3, [r7, #8]
 264 0016 03F01F03 		and	r3, r3, #31
 265 001a 7968     		ldr	r1, [r7, #4]
 266 001c 01FA03F3 		lsl	r3, r1, r3
 267 0020 1A43     		orrs	r2, r2, r3
 268 0022 FB68     		ldr	r3, [r7, #12]
 269 0024 1A61     		str	r2, [r3, #16]
3386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 270              		.loc 1 3386 1
 271 0026 00BF     		nop
ARM GAS  /tmp/ccp7RHPZ.s 			page 65


 272 0028 1437     		adds	r7, r7, #20
 273              	.LCFI27:
 274              		.cfi_def_cfa_offset 4
 275 002a BD46     		mov	sp, r7
 276              	.LCFI28:
 277              		.cfi_def_cfa_register 13
 278              		@ sp needed
 279 002c 5DF8047B 		ldr	r7, [sp], #4
 280              	.LCFI29:
 281              		.cfi_restore 7
 282              		.cfi_def_cfa_offset 0
 283 0030 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE161:
 287              		.section	.text.LL_ADC_SetOffsetSignedSaturation,"ax",%progbits
 288              		.align	1
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv5-d16
 294              	LL_ADC_SetOffsetSignedSaturation:
 295              	.LFB163:
3387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get data right shift for the ADC selected offset number 1, 2, 3 or 4:
3390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_GetDataRightShift\n
3392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
3403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 << (Offsety & 0x1FUL)))) >> (Offsety 
3405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_SetOffsetSignedSaturation
3414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSignedSaturation This parameter can be one of the following values:
3421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
ARM GAS  /tmp/ccp7RHPZ.s 			page 66


3422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t
3426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 296              		.loc 1 3426 1
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 24
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301 0000 80B4     		push	{r7}
 302              	.LCFI30:
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 87B0     		sub	sp, sp, #28
 306              	.LCFI31:
 307              		.cfi_def_cfa_offset 32
 308 0004 00AF     		add	r7, sp, #0
 309              	.LCFI32:
 310              		.cfi_def_cfa_register 7
 311 0006 F860     		str	r0, [r7, #12]
 312 0008 B960     		str	r1, [r7, #8]
 313 000a 7A60     		str	r2, [r7, #4]
 314              	.LBB50:
3427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 315              		.loc 1 3435 27
 316 000c FB68     		ldr	r3, [r7, #12]
 317 000e 6033     		adds	r3, r3, #96
 318 0010 1A46     		mov	r2, r3
 319 0012 BB68     		ldr	r3, [r7, #8]
 320 0014 9B00     		lsls	r3, r3, #2
 321 0016 1344     		add	r3, r3, r2
 322              		.loc 1 3435 20
 323 0018 7B61     		str	r3, [r7, #20]
3436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 324              		.loc 1 3436 5
 325 001a 7B69     		ldr	r3, [r7, #20]
 326 001c 1B68     		ldr	r3, [r3]
 327 001e 23F00042 		bic	r2, r3, #-2147483648
 328 0022 7B68     		ldr	r3, [r7, #4]
 329 0024 1A43     		orrs	r2, r2, r3
 330 0026 7B69     		ldr	r3, [r7, #20]
 331 0028 1A60     		str	r2, [r3]
 332              	.LBE50:
3437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 333              		.loc 1 3438 1
 334 002a 00BF     		nop
 335 002c 1C37     		adds	r7, r7, #28
ARM GAS  /tmp/ccp7RHPZ.s 			page 67


 336              	.LCFI33:
 337              		.cfi_def_cfa_offset 4
 338 002e BD46     		mov	sp, r7
 339              	.LCFI34:
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 0030 5DF8047B 		ldr	r7, [sp], #4
 343              	.LCFI35:
 344              		.cfi_restore 7
 345              		.cfi_def_cfa_offset 0
 346 0034 7047     		bx	lr
 347              		.cfi_endproc
 348              	.LFE163:
 350              		.section	.text.LL_ADC_REG_IsTriggerSourceSWStart,"ax",%progbits
 351              		.align	1
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu fpv5-d16
 357              	LL_ADC_REG_IsTriggerSourceSWStart:
 358              	.LFB167:
3439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_GetOffsetSignedSaturation
3447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 68


3475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset saturation mode.
3477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
3504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSaturation);
3505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_SATEN);
ARM GAS  /tmp/ccp7RHPZ.s 			page 69


3532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }else
3533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset sign.
3541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
3568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSign);
3569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset sign if positive or negative.
3575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 70


3589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSETPOS);
3596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
3599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         force offset state disable or enable
3606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
3636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
3642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 71


3646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset state disabled or enabled.
3649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSET1_EN);
3669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
3680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
3684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
3691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
ARM GAS  /tmp/ccp7RHPZ.s 			page 72


3703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
3743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
ARM GAS  /tmp/ccp7RHPZ.s 			page 73


3760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2U
3781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
3785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
3788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or external.
3793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 359              		.loc 1 3802 1
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              	.LCFI36:
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 7, -4
 368 0002 83B0     		sub	sp, sp, #12
 369              	.LCFI37:
 370              		.cfi_def_cfa_offset 16
 371 0004 00AF     		add	r7, sp, #0
 372              	.LCFI38:
ARM GAS  /tmp/ccp7RHPZ.s 			page 74


 373              		.cfi_def_cfa_register 7
 374 0006 7860     		str	r0, [r7, #4]
3803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
 375              		.loc 1 3803 12
 376 0008 7B68     		ldr	r3, [r7, #4]
 377 000a DB68     		ldr	r3, [r3, #12]
 378 000c 03F44063 		and	r3, r3, #3072
 379              		.loc 1 3803 103
 380 0010 002B     		cmp	r3, #0
 381 0012 01D1     		bne	.L9
 382              		.loc 1 3803 103 is_stmt 0 discriminator 1
 383 0014 0123     		movs	r3, #1
 384 0016 00E0     		b	.L11
 385              	.L9:
 386              		.loc 1 3803 103 discriminator 2
 387 0018 0023     		movs	r3, #0
 388              	.L11:
3804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 389              		.loc 1 3804 1 is_stmt 1 discriminator 5
 390 001a 1846     		mov	r0, r3
 391 001c 0C37     		adds	r7, r7, #12
 392              	.LCFI39:
 393              		.cfi_def_cfa_offset 4
 394 001e BD46     		mov	sp, r7
 395              	.LCFI40:
 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 0020 5DF8047B 		ldr	r7, [sp], #4
 399              	.LCFI41:
 400              		.cfi_restore 7
 401              		.cfi_def_cfa_offset 0
 402 0024 7047     		bx	lr
 403              		.cfi_endproc
 404              	.LFE167:
 406              		.section	.text.LL_ADC_REG_SetSequencerRanks,"ax",%progbits
 407              		.align	1
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv5-d16
 413              	LL_ADC_REG_SetSequencerRanks:
 414              	.LFB174:
3805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccp7RHPZ.s 			page 75


3820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Set sampling mode is applied to all conversion of regular group.
3847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
3863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, SamplingMode);
3869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
ARM GAS  /tmp/ccp7RHPZ.s 			page 76


3877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
ARM GAS  /tmp/ccp7RHPZ.s 			page 77


3934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
3990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
ARM GAS  /tmp/ccp7RHPZ.s 			page 78


3991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
4000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
4016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
4020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
4023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
4024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
4037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
4039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
4043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
4046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
4047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
ARM GAS  /tmp/ccp7RHPZ.s 			page 79


4048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
4062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
4063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
4064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
4065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
4066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
4067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
4068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
4069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
4070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
4071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
4072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
4073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
4074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
4075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
4076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
4077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  /tmp/ccp7RHPZ.s 			page 80


4105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 415              		.loc 1 4129 1
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 24
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              	.LCFI42:
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 87B0     		sub	sp, sp, #28
 425              	.LCFI43:
 426              		.cfi_def_cfa_offset 32
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI44:
 429              		.cfi_def_cfa_register 7
 430 0006 F860     		str	r0, [r7, #12]
 431 0008 B960     		str	r1, [r7, #8]
 432 000a 7A60     		str	r2, [r7, #4]
4130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
4132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> A
 433              		.loc 1 4134 25
 434 000c FB68     		ldr	r3, [r7, #12]
 435 000e 3033     		adds	r3, r3, #48
 436 0010 1A46     		mov	r2, r3
 437 0012 BB68     		ldr	r3, [r7, #8]
 438 0014 1B0A     		lsrs	r3, r3, #8
 439 0016 9B00     		lsls	r3, r3, #2
 440 0018 03F00C03 		and	r3, r3, #12
 441 001c 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccp7RHPZ.s 			page 81


 442              		.loc 1 4134 18
 443 001e 7B61     		str	r3, [r7, #20]
4135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 444              		.loc 1 4136 3
 445 0020 7B69     		ldr	r3, [r7, #20]
 446 0022 1A68     		ldr	r2, [r3]
 447 0024 BB68     		ldr	r3, [r7, #8]
 448 0026 03F01F03 		and	r3, r3, #31
 449 002a 1F21     		movs	r1, #31
 450 002c 01FA03F3 		lsl	r3, r1, r3
 451 0030 DB43     		mvns	r3, r3
 452 0032 1A40     		ands	r2, r2, r3
 453 0034 7B68     		ldr	r3, [r7, #4]
 454 0036 9B0E     		lsrs	r3, r3, #26
 455 0038 03F01F01 		and	r1, r3, #31
 456 003c BB68     		ldr	r3, [r7, #8]
 457 003e 03F01F03 		and	r3, r3, #31
 458 0042 01FA03F3 		lsl	r3, r1, r3
 459 0046 1A43     		orrs	r2, r2, r3
 460 0048 7B69     		ldr	r3, [r7, #20]
 461 004a 1A60     		str	r2, [r3]
4137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 462              		.loc 1 4139 1
 463 004c 00BF     		nop
 464 004e 1C37     		adds	r7, r7, #28
 465              	.LCFI45:
 466              		.cfi_def_cfa_offset 4
 467 0050 BD46     		mov	sp, r7
 468              	.LCFI46:
 469              		.cfi_def_cfa_register 13
 470              		@ sp needed
 471 0052 5DF8047B 		ldr	r7, [sp], #4
 472              	.LCFI47:
 473              		.cfi_restore 7
 474              		.cfi_def_cfa_offset 0
 475 0056 7047     		bx	lr
 476              		.cfi_endproc
 477              	.LFE174:
 479              		.section	.text.LL_ADC_REG_SetDataTransferMode,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv5-d16
 486              	LL_ADC_REG_SetDataTransferMode:
 487              	.LFB178:
4140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
4145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
ARM GAS  /tmp/ccp7RHPZ.s 			page 82


4148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  /tmp/ccp7RHPZ.s 			page 83


4205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK
4233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
ARM GAS  /tmp/ccp7RHPZ.s 			page 84


4262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC data transfer mode
4282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_SetDataTransferMode
4288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DataTransferMode Select Data Management configuration
4290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
4293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 488              		.loc 1 4293 1
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 8
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 80B4     		push	{r7}
 494              	.LCFI48:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 7, -4
 497 0002 83B0     		sub	sp, sp, #12
 498              	.LCFI49:
 499              		.cfi_def_cfa_offset 16
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI50:
 502              		.cfi_def_cfa_register 7
 503 0006 7860     		str	r0, [r7, #4]
 504 0008 3960     		str	r1, [r7]
4294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 505              		.loc 1 4294 3
 506 000a 7B68     		ldr	r3, [r7, #4]
 507 000c DB68     		ldr	r3, [r3, #12]
 508 000e 23F00302 		bic	r2, r3, #3
 509 0012 3B68     		ldr	r3, [r7]
 510 0014 1A43     		orrs	r2, r2, r3
 511 0016 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 85


 512 0018 DA60     		str	r2, [r3, #12]
4295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 513              		.loc 1 4295 1
 514 001a 00BF     		nop
 515 001c 0C37     		adds	r7, r7, #12
 516              	.LCFI51:
 517              		.cfi_def_cfa_offset 4
 518 001e BD46     		mov	sp, r7
 519              	.LCFI52:
 520              		.cfi_def_cfa_register 13
 521              		@ sp needed
 522 0020 5DF8047B 		ldr	r7, [sp], #4
 523              	.LCFI53:
 524              		.cfi_restore 7
 525              		.cfi_def_cfa_offset 0
 526 0024 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE178:
 530              		.section	.text.LL_ADC_INJ_IsTriggerSourceSWStart,"ax",%progbits
 531              		.align	1
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv5-d16
 537              	LL_ADC_INJ_IsTriggerSourceSWStart:
 538              	.LFB184:
4296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
4298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable DMA requests for ADC3.
4300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
4305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
4307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDMAReq(ADC_TypeDef *ADCx)
4310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT (ADCx->CFGR, ADC3_CFGR_DMAEN);
4312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabledDMAReq (ADC_TypeDef *ADCx)
4315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN) == (ADC3_CFGR_DMAEN)) ? 1UL : 0UL);
4317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
ARM GAS  /tmp/ccp7RHPZ.s 			page 86


4327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransferMode\n
4345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransferMode
4346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
4358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
ARM GAS  /tmp/ccp7RHPZ.s 			page 87


4384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransferMode(ADC_TypeDef *ADCx)
4392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG));
4396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    else
4398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
4399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
4400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
4404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC data transfer mode
4407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_GetDataTransferMode
4413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DR_TRANSFER
4416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
4419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
4421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMNGT));
4423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         other devices without this feature have a behavior
4431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         equivalent to data overwritten.
4432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 88


4441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
4467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
4471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
4478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
ARM GAS  /tmp/ccp7RHPZ.s 			page 89


4498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
4530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
ARM GAS  /tmp/ccp7RHPZ.s 			page 90


4555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFSET_POS - 
4568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
4572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
4575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             or external
4580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 539              		.loc 1 4589 1
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544 0000 80B4     		push	{r7}
 545              	.LCFI54:
 546              		.cfi_def_cfa_offset 4
 547              		.cfi_offset 7, -4
 548 0002 83B0     		sub	sp, sp, #12
 549              	.LCFI55:
 550              		.cfi_def_cfa_offset 16
 551 0004 00AF     		add	r7, sp, #0
 552              	.LCFI56:
 553              		.cfi_def_cfa_register 7
 554 0006 7860     		str	r0, [r7, #4]
4590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
 555              		.loc 1 4590 12
 556 0008 7B68     		ldr	r3, [r7, #4]
 557 000a DB6C     		ldr	r3, [r3, #76]
 558 000c 03F4C073 		and	r3, r3, #384
 559              		.loc 1 4590 105
ARM GAS  /tmp/ccp7RHPZ.s 			page 91


 560 0010 002B     		cmp	r3, #0
 561 0012 01D1     		bne	.L15
 562              		.loc 1 4590 105 is_stmt 0 discriminator 1
 563 0014 0123     		movs	r3, #1
 564 0016 00E0     		b	.L17
 565              	.L15:
 566              		.loc 1 4590 105 discriminator 2
 567 0018 0023     		movs	r3, #0
 568              	.L17:
4591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 569              		.loc 1 4591 1 is_stmt 1 discriminator 5
 570 001a 1846     		mov	r0, r3
 571 001c 0C37     		adds	r7, r7, #12
 572              	.LCFI57:
 573              		.cfi_def_cfa_offset 4
 574 001e BD46     		mov	sp, r7
 575              	.LCFI58:
 576              		.cfi_def_cfa_register 13
 577              		@ sp needed
 578 0020 5DF8047B 		ldr	r7, [sp], #4
 579              	.LCFI59:
 580              		.cfi_restore 7
 581              		.cfi_def_cfa_offset 0
 582 0024 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE184:
 586              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
 587              		.align	1
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu fpv5-d16
 593              	LL_ADC_SetChannelSamplingTime:
 594              	.LFB198:
4592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
ARM GAS  /tmp/ccp7RHPZ.s 			page 92


4615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function retrieves:
4657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccp7RHPZ.s 			page 93


4672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
ARM GAS  /tmp/ccp7RHPZ.s 			page 94


4729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
ARM GAS  /tmp/ccp7RHPZ.s 			page 95


4786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
4842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
ARM GAS  /tmp/ccp7RHPZ.s 			page 96


4843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group injected.
4855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent trigger.
4858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC group regular.
4863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
ARM GAS  /tmp/ccp7RHPZ.s 			page 97


4900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is disabled:
4902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - only 1 sequence can be configured
4903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and is active perpetually.
4904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is enabled:
4905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           into the queue).
4916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 98


4957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         contexts queue.
4959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         cannot be used):
4967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
5000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
5001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
5002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
5003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
5004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
5005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
5006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
5007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
5008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
5009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
5010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
5011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
5012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
5013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
ARM GAS  /tmp/ccp7RHPZ.s 			page 99


5014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
5015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
5016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
5017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
5018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
5020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
5021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
5022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
5023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
5024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
5025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
5026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
5027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
5058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
ARM GAS  /tmp/ccp7RHPZ.s 			page 100


5071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
ARM GAS  /tmp/ccp7RHPZ.s 			page 101


5128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1UL : 0UL);
5168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JL,
5176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)        |
5177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SequencerNbRanks
5183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             );
5184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 102


5185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted:
5201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         setting).
5204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TS_temp, ...).
5206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required.
5215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
5216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
ARM GAS  /tmp/ccp7RHPZ.s 			page 103


5242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 595              		.loc 1 5283 1
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 24
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600 0000 80B4     		push	{r7}
 601              	.LCFI60:
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 0002 87B0     		sub	sp, sp, #28
 605              	.LCFI61:
 606              		.cfi_def_cfa_offset 32
 607 0004 00AF     		add	r7, sp, #0
 608              	.LCFI62:
 609              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 104


 610 0006 F860     		str	r0, [r7, #12]
 611 0008 B960     		str	r1, [r7, #8]
 612 000a 7A60     		str	r2, [r7, #4]
5284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_M
 613              		.loc 1 5288 25
 614 000c FB68     		ldr	r3, [r7, #12]
 615 000e 1433     		adds	r3, r3, #20
 616 0010 1A46     		mov	r2, r3
 617 0012 BB68     		ldr	r3, [r7, #8]
 618 0014 5B0E     		lsrs	r3, r3, #25
 619 0016 9B00     		lsls	r3, r3, #2
 620 0018 03F00403 		and	r3, r3, #4
 621 001c 1344     		add	r3, r3, r2
 622              		.loc 1 5288 18
 623 001e 7B61     		str	r3, [r7, #20]
5289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 624              		.loc 1 5290 3
 625 0020 7B69     		ldr	r3, [r7, #20]
 626 0022 1A68     		ldr	r2, [r3]
 627 0024 BB68     		ldr	r3, [r7, #8]
 628 0026 1B0D     		lsrs	r3, r3, #20
 629 0028 03F01F03 		and	r3, r3, #31
 630 002c 0721     		movs	r1, #7
 631 002e 01FA03F3 		lsl	r3, r1, r3
 632 0032 DB43     		mvns	r3, r3
 633 0034 1A40     		ands	r2, r2, r3
 634 0036 BB68     		ldr	r3, [r7, #8]
 635 0038 1B0D     		lsrs	r3, r3, #20
 636 003a 03F01F03 		and	r3, r3, #31
 637 003e 7968     		ldr	r1, [r7, #4]
 638 0040 01FA03F3 		lsl	r3, r1, r3
 639 0044 1A43     		orrs	r2, r2, r3
 640 0046 7B69     		ldr	r3, [r7, #20]
 641 0048 1A60     		str	r2, [r3]
5291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 642              		.loc 1 5293 1
 643 004a 00BF     		nop
 644 004c 1C37     		adds	r7, r7, #28
 645              	.LCFI63:
 646              		.cfi_def_cfa_offset 4
 647 004e BD46     		mov	sp, r7
 648              	.LCFI64:
 649              		.cfi_def_cfa_register 13
 650              		@ sp needed
 651 0050 5DF8047B 		ldr	r7, [sp], #4
 652              	.LCFI65:
 653              		.cfi_restore 7
 654              		.cfi_def_cfa_offset 0
 655 0054 7047     		bx	lr
 656              		.cfi_endproc
ARM GAS  /tmp/ccp7RHPZ.s 			page 105


 657              	.LFE198:
 659              		.section	.text.LL_ADC_SetChannelSingleDiff,"ax",%progbits
 660              		.align	1
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv5-d16
 666              	LL_ADC_SetChannelSingleDiff:
 667              	.LFB200:
5294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
ARM GAS  /tmp/ccp7RHPZ.s 			page 106


5342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOF
5370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
5375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group regular or injected.
5382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
ARM GAS  /tmp/ccp7RHPZ.s 			page 107


5399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
5403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
5404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 668              		.loc 1 5429 1
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 16
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673 0000 80B4     		push	{r7}
 674              	.LCFI66:
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 0002 85B0     		sub	sp, sp, #20
 678              	.LCFI67:
 679              		.cfi_def_cfa_offset 24
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI68:
 682              		.cfi_def_cfa_register 7
 683 0006 F860     		str	r0, [r7, #12]
 684 0008 B960     		str	r1, [r7, #8]
 685 000a 7A60     		str	r2, [r7, #4]
5430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR2_DIFSEL,
5437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
ARM GAS  /tmp/ccp7RHPZ.s 			page 108


5438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->DIFSEL_RES12,
5443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
5447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
 686              		.loc 1 5450 3
 687 000c FB68     		ldr	r3, [r7, #12]
 688 000e D3F8C020 		ldr	r2, [r3, #192]
 689 0012 BB68     		ldr	r3, [r7, #8]
 690 0014 C3F31303 		ubfx	r3, r3, #0, #20
 691 0018 DB43     		mvns	r3, r3
 692 001a 1A40     		ands	r2, r2, r3
 693 001c 7B68     		ldr	r3, [r7, #4]
 694 001e 03F01803 		and	r3, r3, #24
 695 0022 0849     		ldr	r1, .L20
 696 0024 D940     		lsrs	r1, r1, r3
 697 0026 BB68     		ldr	r3, [r7, #8]
 698 0028 0B40     		ands	r3, r3, r1
 699 002a C3F31303 		ubfx	r3, r3, #0, #20
 700 002e 1A43     		orrs	r2, r2, r3
 701 0030 FB68     		ldr	r3, [r7, #12]
 702 0032 C3F8C020 		str	r2, [r3, #192]
5451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 703              		.loc 1 5454 1
 704 0036 00BF     		nop
 705 0038 1437     		adds	r7, r7, #20
 706              	.LCFI69:
 707              		.cfi_def_cfa_offset 4
 708 003a BD46     		mov	sp, r7
 709              	.LCFI70:
 710              		.cfi_def_cfa_register 13
 711              		@ sp needed
 712 003c 5DF8047B 		ldr	r7, [sp], #4
 713              	.LCFI71:
 714              		.cfi_restore 7
 715              		.cfi_def_cfa_offset 0
 716 0040 7047     		bx	lr
 717              	.L21:
 718 0042 00BF     		.align	2
 719              	.L20:
 720 0044 FFFF0F00 		.word	1048575
 721              		.cfi_endproc
 722              	.LFE200:
 724              		.section	.text.LL_ADC_SetAnalogWDMonitChannels,"ax",%progbits
 725              		.align	1
 726              		.syntax unified
ARM GAS  /tmp/ccp7RHPZ.s 			page 109


 727              		.thumb
 728              		.thumb_func
 729              		.fpu fpv5-d16
 731              	LL_ADC_SetAnalogWDMonitChannels:
 732              	.LFB202:
5455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
5502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL_RES12, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  
5504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 110


5507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
5522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
ARM GAS  /tmp/ccp7RHPZ.s 			page 111


5564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
ARM GAS  /tmp/ccp7RHPZ.s 			page 112


5621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
5627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
5628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
5629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
5630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
5631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
5632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
5633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
5634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
5635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
5636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
5637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
5638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
5639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
5640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
5641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
5643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
5645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 733              		.loc 1 5648 1
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 738 0000 80B4     		push	{r7}
 739              	.LCFI72:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 7, -4
 742 0002 87B0     		sub	sp, sp, #28
 743              	.LCFI73:
 744              		.cfi_def_cfa_offset 32
 745 0004 00AF     		add	r7, sp, #0
 746              	.LCFI74:
 747              		.cfi_def_cfa_register 7
 748 0006 F860     		str	r0, [r7, #12]
 749 0008 B960     		str	r1, [r7, #8]
 750 000a 7A60     		str	r2, [r7, #4]
5649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> AD
 751              		.loc 1 5653 25
 752 000c FB68     		ldr	r3, [r7, #12]
 753 000e 0C33     		adds	r3, r3, #12
 754 0010 1846     		mov	r0, r3
 755 0012 BB68     		ldr	r3, [r7, #8]
 756 0014 1B0D     		lsrs	r3, r3, #20
ARM GAS  /tmp/ccp7RHPZ.s 			page 113


 757 0016 03F00301 		and	r1, r3, #3
 758 001a BB68     		ldr	r3, [r7, #8]
 759 001c 03F00102 		and	r2, r3, #1
 760 0020 1346     		mov	r3, r2
 761 0022 DB00     		lsls	r3, r3, #3
 762 0024 1344     		add	r3, r3, r2
 763 0026 9B00     		lsls	r3, r3, #2
 764 0028 0B44     		add	r3, r3, r1
 765 002a 9B00     		lsls	r3, r3, #2
 766 002c 0344     		add	r3, r3, r0
 767              		.loc 1 5653 18
 768 002e 7B61     		str	r3, [r7, #20]
5654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 769              		.loc 1 5656 3
 770 0030 7B69     		ldr	r3, [r7, #20]
 771 0032 1A68     		ldr	r2, [r3]
 772 0034 B968     		ldr	r1, [r7, #8]
 773 0036 084B     		ldr	r3, .L23
 774 0038 0B40     		ands	r3, r3, r1
 775 003a DB43     		mvns	r3, r3
 776 003c 1A40     		ands	r2, r2, r3
 777 003e 7968     		ldr	r1, [r7, #4]
 778 0040 BB68     		ldr	r3, [r7, #8]
 779 0042 0B40     		ands	r3, r3, r1
 780 0044 1A43     		orrs	r2, r2, r3
 781 0046 7B69     		ldr	r3, [r7, #20]
 782 0048 1A60     		str	r2, [r3]
5657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 783              		.loc 1 5659 1
 784 004a 00BF     		nop
 785 004c 1C37     		adds	r7, r7, #28
 786              	.LCFI75:
 787              		.cfi_def_cfa_offset 4
 788 004e BD46     		mov	sp, r7
 789              	.LCFI76:
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 0050 5DF8047B 		ldr	r7, [sp], #4
 793              	.LCFI77:
 794              		.cfi_restore 7
 795              		.cfi_def_cfa_offset 0
 796 0054 7047     		bx	lr
 797              	.L24:
 798 0056 00BF     		.align	2
 799              	.L23:
 800 0058 FFFFCF7D 		.word	2110783487
 801              		.cfi_endproc
 802              	.LFE202:
 804              		.section	.text.LL_ADC_GetMultimode,"ax",%progbits
 805              		.align	1
 806              		.syntax unified
 807              		.thumb
 808              		.thumb_func
ARM GAS  /tmp/ccp7RHPZ.s 			page 114


 809              		.fpu fpv5-d16
 811              	LL_ADC_GetMultimode:
 812              	.LFB216:
5660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
5671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
5673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           one channel.
5676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
ARM GAS  /tmp/ccp7RHPZ.s 			page 115


5714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             by bitfield.
5718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
ARM GAS  /tmp/ccp7RHPZ.s 			page 116


5771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.
5785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)
5789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
5792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* or a single channel.                                                     */
5797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  )
5807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
5819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
ARM GAS  /tmp/ccp7RHPZ.s 			page 117


5828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return AnalogWDMonitChannels;
5840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high or low.
5845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done
5871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on oversampling intermediate computation (after ratio, before shift
5872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         application): intermediate register bitfield [32:7]
5873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (26 most significant bits).
5874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 118


5885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
5906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
5908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdsHighLow,
5909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_
5910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
5919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
5920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (AWDThresholdsHighLow));
5921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> A
5931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) * 
5932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + (AWDThresholdsHighLow));
5933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
5936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         concatenated.
ARM GAS  /tmp/ccp7RHPZ.s 			page 119


5942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
5960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
5961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_
5965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MA
5966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + (AWDThresholdsHighLow));
5967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + ((AWDy & ADC_AWD_TR12_REGOFFSE
5972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + (AWDThresholdsHighLow));
5973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high and low. Applicable for devices STM32H72xx and STM32H73xx.
5983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
ARM GAS  /tmp/ccp7RHPZ.s 			page 120


5999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
6000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
6001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
6002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
6003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
6004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
6005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
6006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
6007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
6008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
6009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
6010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
6011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
6012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
6013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
6014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
6015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
6021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
6022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
6025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
6027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
6028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDy".                                                                  */
6029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
6030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
6031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
6034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
6036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
6037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (AWDThresholdHighValue << ADC3_TR1_HT1_Pos) | AWDThresholdLowValue);
6038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
6042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
6043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (LL_ADC_AWD_THRESHOLD_LOW));
6044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
6046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + (LL_ADC_AWD_THRESHOLD_HIGH));
6047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
6049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
6050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
ARM GAS  /tmp/ccp7RHPZ.s 			page 121


6056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
6064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
6068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT, FilteringConfig);
6085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be:
6098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
ARM GAS  /tmp/ccp7RHPZ.s 			page 122


6113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT));
6114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance, return 0 */
6118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
6119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
6122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
ARM GAS  /tmp/ccp7RHPZ.s 			page 123


6170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
6197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, oversampling discontinuous mode
6198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 124


6227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling
6233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ratio
6236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - shift
6237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Ratio This parameter can be in the range from 1 to 1024.
6245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_
6263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Ratio This parameter can be in the from 1 to 1024.
6271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (((uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR)) + (1UL << ADC_CFGR2_OVSR_Pos)) >> ADC_
6275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
ARM GAS  /tmp/ccp7RHPZ.s 			page 125


6284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC boost mode.
6310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_SetBoostMode
6315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  BoostMode This parameter can be one of the following values:
6317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_6MHZ25
6318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_12MHZ5
6319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_20MHZ
6320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_25MHZ
6321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_50MHZ
6322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
6325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
6328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else   /* ADC_VER_V5_V90 */
6332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
6335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
ARM GAS  /tmp/ccp7RHPZ.s 			page 126


6341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC boost mode.
6346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_GetBoostMode
6351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: Boost disabled 1: Boost enabled
6353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
6355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)READ_BIT(ADCx->CR, ADC_CR_BOOST_0);
6359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return ((READ_BIT(ADCx->CR, ADC_CR_BOOST) == (ADC_CR_BOOST)) ? 1UL : 0UL);
6363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro
6377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 127


6398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 813              		.loc 1 6417 1
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 8
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818 0000 80B4     		push	{r7}
 819              	.LCFI78:
 820              		.cfi_def_cfa_offset 4
 821              		.cfi_offset 7, -4
 822 0002 83B0     		sub	sp, sp, #12
 823              	.LCFI79:
 824              		.cfi_def_cfa_offset 16
 825 0004 00AF     		add	r7, sp, #0
 826              	.LCFI80:
 827              		.cfi_def_cfa_register 7
 828 0006 7860     		str	r0, [r7, #4]
6418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 829              		.loc 1 6418 21
 830 0008 7B68     		ldr	r3, [r7, #4]
 831 000a 9B68     		ldr	r3, [r3, #8]
 832              		.loc 1 6418 10
 833 000c 03F01F03 		and	r3, r3, #31
6419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 834              		.loc 1 6419 1
 835 0010 1846     		mov	r0, r3
 836 0012 0C37     		adds	r7, r7, #12
 837              	.LCFI81:
 838              		.cfi_def_cfa_offset 4
 839 0014 BD46     		mov	sp, r7
 840              	.LCFI82:
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 0016 5DF8047B 		ldr	r7, [sp], #4
 844              	.LCFI83:
 845              		.cfi_restore 7
 846              		.cfi_def_cfa_offset 0
 847 001a 7047     		bx	lr
ARM GAS  /tmp/ccp7RHPZ.s 			page 128


 848              		.cfi_endproc
 849              	.LFE216:
 851              		.section	.text.LL_ADC_GetMultiDMATransfer,"ax",%progbits
 852              		.align	1
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 856              		.fpu fpv5-d16
 858              	LL_ADC_GetMultiDMATransfer:
 859              	.LFB218:
6420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DAMDF, MultiDMATransfer);
ARM GAS  /tmp/ccp7RHPZ.s 			page 129


6467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 860              		.loc 1 6508 1
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 8
 863              		@ frame_needed = 1, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865 0000 80B4     		push	{r7}
 866              	.LCFI84:
 867              		.cfi_def_cfa_offset 4
 868              		.cfi_offset 7, -4
 869 0002 83B0     		sub	sp, sp, #12
 870              	.LCFI85:
 871              		.cfi_def_cfa_offset 16
 872 0004 00AF     		add	r7, sp, #0
 873              	.LCFI86:
 874              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 130


 875 0006 7860     		str	r0, [r7, #4]
6509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 876              		.loc 1 6509 21
 877 0008 7B68     		ldr	r3, [r7, #4]
 878 000a 9B68     		ldr	r3, [r3, #8]
 879              		.loc 1 6509 10
 880 000c 03F44043 		and	r3, r3, #49152
6510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 881              		.loc 1 6510 1
 882 0010 1846     		mov	r0, r3
 883 0012 0C37     		adds	r7, r7, #12
 884              	.LCFI87:
 885              		.cfi_def_cfa_offset 4
 886 0014 BD46     		mov	sp, r7
 887              	.LCFI88:
 888              		.cfi_def_cfa_register 13
 889              		@ sp needed
 890 0016 5DF8047B 		ldr	r7, [sp], #4
 891              	.LCFI89:
 892              		.cfi_restore 7
 893              		.cfi_def_cfa_offset 0
 894 001a 7047     		bx	lr
 895              		.cfi_endproc
 896              	.LFE218:
 898              		.section	.text.LL_ADC_DisableDeepPowerDown,"ax",%progbits
 899              		.align	1
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv5-d16
 905              	LL_ADC_DisableDeepPowerDown:
 906              	.LFB222:
6511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
ARM GAS  /tmp/ccp7RHPZ.s 			page 131


6536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 132


6593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 907              		.loc 1 6634 1
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 8
 910              		@ frame_needed = 1, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 912 0000 80B4     		push	{r7}
 913              	.LCFI90:
 914              		.cfi_def_cfa_offset 4
 915              		.cfi_offset 7, -4
 916 0002 83B0     		sub	sp, sp, #12
 917              	.LCFI91:
 918              		.cfi_def_cfa_offset 16
 919 0004 00AF     		add	r7, sp, #0
 920              	.LCFI92:
 921              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 133


 922 0006 7860     		str	r0, [r7, #4]
6635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 923              		.loc 1 6638 3
 924 0008 7B68     		ldr	r3, [r7, #4]
 925 000a 9A68     		ldr	r2, [r3, #8]
 926 000c 044B     		ldr	r3, .L30
 927 000e 1340     		ands	r3, r3, r2
 928 0010 7A68     		ldr	r2, [r7, #4]
 929 0012 9360     		str	r3, [r2, #8]
6639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 930              		.loc 1 6639 1
 931 0014 00BF     		nop
 932 0016 0C37     		adds	r7, r7, #12
 933              	.LCFI93:
 934              		.cfi_def_cfa_offset 4
 935 0018 BD46     		mov	sp, r7
 936              	.LCFI94:
 937              		.cfi_def_cfa_register 13
 938              		@ sp needed
 939 001a 5DF8047B 		ldr	r7, [sp], #4
 940              	.LCFI95:
 941              		.cfi_restore 7
 942              		.cfi_def_cfa_offset 0
 943 001e 7047     		bx	lr
 944              	.L31:
 945              		.align	2
 946              	.L30:
 947 0020 C0FFFF5F 		.word	1610612672
 948              		.cfi_endproc
 949              	.LFE222:
 951              		.section	.text.LL_ADC_IsDeepPowerDownEnabled,"ax",%progbits
 952              		.align	1
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 956              		.fpu fpv5-d16
 958              	LL_ADC_IsDeepPowerDownEnabled:
 959              	.LFB223:
6640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 960              		.loc 1 6648 1
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 8
 963              		@ frame_needed = 1, uses_anonymous_args = 0
 964              		@ link register save eliminated.
 965 0000 80B4     		push	{r7}
 966              	.LCFI96:
ARM GAS  /tmp/ccp7RHPZ.s 			page 134


 967              		.cfi_def_cfa_offset 4
 968              		.cfi_offset 7, -4
 969 0002 83B0     		sub	sp, sp, #12
 970              	.LCFI97:
 971              		.cfi_def_cfa_offset 16
 972 0004 00AF     		add	r7, sp, #0
 973              	.LCFI98:
 974              		.cfi_def_cfa_register 7
 975 0006 7860     		str	r0, [r7, #4]
6649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 976              		.loc 1 6649 12
 977 0008 7B68     		ldr	r3, [r7, #4]
 978 000a 9B68     		ldr	r3, [r3, #8]
 979 000c 03F00053 		and	r3, r3, #536870912
 980              		.loc 1 6649 74
 981 0010 B3F1005F 		cmp	r3, #536870912
 982 0014 01D1     		bne	.L33
 983              		.loc 1 6649 74 is_stmt 0 discriminator 1
 984 0016 0123     		movs	r3, #1
 985 0018 00E0     		b	.L35
 986              	.L33:
 987              		.loc 1 6649 74 discriminator 2
 988 001a 0023     		movs	r3, #0
 989              	.L35:
6650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 990              		.loc 1 6650 1 is_stmt 1 discriminator 5
 991 001c 1846     		mov	r0, r3
 992 001e 0C37     		adds	r7, r7, #12
 993              	.LCFI99:
 994              		.cfi_def_cfa_offset 4
 995 0020 BD46     		mov	sp, r7
 996              	.LCFI100:
 997              		.cfi_def_cfa_register 13
 998              		@ sp needed
 999 0022 5DF8047B 		ldr	r7, [sp], #4
 1000              	.LCFI101:
 1001              		.cfi_restore 7
 1002              		.cfi_def_cfa_offset 0
 1003 0026 7047     		bx	lr
 1004              		.cfi_endproc
 1005              	.LFE223:
 1007              		.section	.text.LL_ADC_EnableInternalRegulator,"ax",%progbits
 1008              		.align	1
 1009              		.syntax unified
 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv5-d16
 1014              	LL_ADC_EnableInternalRegulator:
 1015              	.LFB224:
6651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC internal voltage regulator enable,
6655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
ARM GAS  /tmp/ccp7RHPZ.s 			page 135


6659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1016              		.loc 1 6667 1
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 8
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020              		@ link register save eliminated.
 1021 0000 80B4     		push	{r7}
 1022              	.LCFI102:
 1023              		.cfi_def_cfa_offset 4
 1024              		.cfi_offset 7, -4
 1025 0002 83B0     		sub	sp, sp, #12
 1026              	.LCFI103:
 1027              		.cfi_def_cfa_offset 16
 1028 0004 00AF     		add	r7, sp, #0
 1029              	.LCFI104:
 1030              		.cfi_def_cfa_register 7
 1031 0006 7860     		str	r0, [r7, #4]
6668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1032              		.loc 1 6671 3
 1033 0008 7B68     		ldr	r3, [r7, #4]
 1034 000a 9A68     		ldr	r2, [r3, #8]
 1035 000c 054B     		ldr	r3, .L37
 1036 000e 1340     		ands	r3, r3, r2
 1037 0010 43F08052 		orr	r2, r3, #268435456
 1038 0014 7B68     		ldr	r3, [r7, #4]
 1039 0016 9A60     		str	r2, [r3, #8]
6672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1040              		.loc 1 6674 1
 1041 0018 00BF     		nop
 1042 001a 0C37     		adds	r7, r7, #12
 1043              	.LCFI105:
 1044              		.cfi_def_cfa_offset 4
 1045 001c BD46     		mov	sp, r7
 1046              	.LCFI106:
 1047              		.cfi_def_cfa_register 13
 1048              		@ sp needed
 1049 001e 5DF8047B 		ldr	r7, [sp], #4
 1050              	.LCFI107:
 1051              		.cfi_restore 7
 1052              		.cfi_def_cfa_offset 0
 1053 0022 7047     		bx	lr
 1054              	.L38:
 1055              		.align	2
 1056              	.L37:
ARM GAS  /tmp/ccp7RHPZ.s 			page 136


 1057 0024 C0FFFF6F 		.word	1879048128
 1058              		.cfi_endproc
 1059              	.LFE224:
 1061              		.section	.text.LL_ADC_IsInternalRegulatorEnabled,"ax",%progbits
 1062              		.align	1
 1063              		.syntax unified
 1064              		.thumb
 1065              		.thumb_func
 1066              		.fpu fpv5-d16
 1068              	LL_ADC_IsInternalRegulatorEnabled:
 1069              	.LFB226:
6675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1070              		.loc 1 6697 1
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              	.LCFI108:
 1077              		.cfi_def_cfa_offset 4
 1078              		.cfi_offset 7, -4
 1079 0002 83B0     		sub	sp, sp, #12
 1080              	.LCFI109:
 1081              		.cfi_def_cfa_offset 16
 1082 0004 00AF     		add	r7, sp, #0
 1083              	.LCFI110:
 1084              		.cfi_def_cfa_register 7
 1085 0006 7860     		str	r0, [r7, #4]
6698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 1086              		.loc 1 6698 12
 1087 0008 7B68     		ldr	r3, [r7, #4]
 1088 000a 9B68     		ldr	r3, [r3, #8]
 1089 000c 03F08053 		and	r3, r3, #268435456
 1090              		.loc 1 6698 76
 1091 0010 B3F1805F 		cmp	r3, #268435456
ARM GAS  /tmp/ccp7RHPZ.s 			page 137


 1092 0014 01D1     		bne	.L40
 1093              		.loc 1 6698 76 is_stmt 0 discriminator 1
 1094 0016 0123     		movs	r3, #1
 1095 0018 00E0     		b	.L42
 1096              	.L40:
 1097              		.loc 1 6698 76 discriminator 2
 1098 001a 0023     		movs	r3, #0
 1099              	.L42:
6699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1100              		.loc 1 6699 1 is_stmt 1 discriminator 5
 1101 001c 1846     		mov	r0, r3
 1102 001e 0C37     		adds	r7, r7, #12
 1103              	.LCFI111:
 1104              		.cfi_def_cfa_offset 4
 1105 0020 BD46     		mov	sp, r7
 1106              	.LCFI112:
 1107              		.cfi_def_cfa_register 13
 1108              		@ sp needed
 1109 0022 5DF8047B 		ldr	r7, [sp], #4
 1110              	.LCFI113:
 1111              		.cfi_restore 7
 1112              		.cfi_def_cfa_offset 0
 1113 0026 7047     		bx	lr
 1114              		.cfi_endproc
 1115              	.LFE226:
 1117              		.section	.text.LL_ADC_Enable,"ax",%progbits
 1118              		.align	1
 1119              		.syntax unified
 1120              		.thumb
 1121              		.thumb_func
 1122              		.fpu fpv5-d16
 1124              	LL_ADC_Enable:
 1125              	.LFB227:
6700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for
6704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion start.
6706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1126              		.loc 1 6718 1
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
ARM GAS  /tmp/ccp7RHPZ.s 			page 138


 1131 0000 80B4     		push	{r7}
 1132              	.LCFI114:
 1133              		.cfi_def_cfa_offset 4
 1134              		.cfi_offset 7, -4
 1135 0002 83B0     		sub	sp, sp, #12
 1136              	.LCFI115:
 1137              		.cfi_def_cfa_offset 16
 1138 0004 00AF     		add	r7, sp, #0
 1139              	.LCFI116:
 1140              		.cfi_def_cfa_register 7
 1141 0006 7860     		str	r0, [r7, #4]
6719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1142              		.loc 1 6722 3
 1143 0008 7B68     		ldr	r3, [r7, #4]
 1144 000a 9A68     		ldr	r2, [r3, #8]
 1145 000c 054B     		ldr	r3, .L44
 1146 000e 1340     		ands	r3, r3, r2
 1147 0010 43F00102 		orr	r2, r3, #1
 1148 0014 7B68     		ldr	r3, [r7, #4]
 1149 0016 9A60     		str	r2, [r3, #8]
6723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADEN);
6725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1150              		.loc 1 6725 1
 1151 0018 00BF     		nop
 1152 001a 0C37     		adds	r7, r7, #12
 1153              	.LCFI117:
 1154              		.cfi_def_cfa_offset 4
 1155 001c BD46     		mov	sp, r7
 1156              	.LCFI118:
 1157              		.cfi_def_cfa_register 13
 1158              		@ sp needed
 1159 001e 5DF8047B 		ldr	r7, [sp], #4
 1160              	.LCFI119:
 1161              		.cfi_restore 7
 1162              		.cfi_def_cfa_offset 0
 1163 0022 7047     		bx	lr
 1164              	.L45:
 1165              		.align	2
 1166              	.L44:
 1167 0024 C0FFFF7F 		.word	2147483584
 1168              		.cfi_endproc
 1169              	.LFE227:
 1171              		.section	.text.LL_ADC_Disable,"ax",%progbits
 1172              		.align	1
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu fpv5-d16
 1178              	LL_ADC_Disable:
 1179              	.LFB228:
6726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
ARM GAS  /tmp/ccp7RHPZ.s 			page 139


6729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1180              		.loc 1 6738 1
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 8
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185 0000 80B4     		push	{r7}
 1186              	.LCFI120:
 1187              		.cfi_def_cfa_offset 4
 1188              		.cfi_offset 7, -4
 1189 0002 83B0     		sub	sp, sp, #12
 1190              	.LCFI121:
 1191              		.cfi_def_cfa_offset 16
 1192 0004 00AF     		add	r7, sp, #0
 1193              	.LCFI122:
 1194              		.cfi_def_cfa_register 7
 1195 0006 7860     		str	r0, [r7, #4]
6739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1196              		.loc 1 6742 3
 1197 0008 7B68     		ldr	r3, [r7, #4]
 1198 000a 9A68     		ldr	r2, [r3, #8]
 1199 000c 054B     		ldr	r3, .L47
 1200 000e 1340     		ands	r3, r3, r2
 1201 0010 43F00202 		orr	r2, r3, #2
 1202 0014 7B68     		ldr	r3, [r7, #4]
 1203 0016 9A60     		str	r2, [r3, #8]
6743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADDIS);
6745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1204              		.loc 1 6745 1
 1205 0018 00BF     		nop
 1206 001a 0C37     		adds	r7, r7, #12
 1207              	.LCFI123:
 1208              		.cfi_def_cfa_offset 4
 1209 001c BD46     		mov	sp, r7
 1210              	.LCFI124:
 1211              		.cfi_def_cfa_register 13
 1212              		@ sp needed
 1213 001e 5DF8047B 		ldr	r7, [sp], #4
 1214              	.LCFI125:
 1215              		.cfi_restore 7
 1216              		.cfi_def_cfa_offset 0
 1217 0022 7047     		bx	lr
 1218              	.L48:
 1219              		.align	2
ARM GAS  /tmp/ccp7RHPZ.s 			page 140


 1220              	.L47:
 1221 0024 C0FFFF7F 		.word	2147483584
 1222              		.cfi_endproc
 1223              	.LFE228:
 1225              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
 1226              		.align	1
 1227              		.syntax unified
 1228              		.thumb
 1229              		.thumb_func
 1230              		.fpu fpv5-d16
 1232              	LL_ADC_IsEnabled:
 1233              	.LFB229:
6746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1234              		.loc 1 6757 1
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 8
 1237              		@ frame_needed = 1, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239 0000 80B4     		push	{r7}
 1240              	.LCFI126:
 1241              		.cfi_def_cfa_offset 4
 1242              		.cfi_offset 7, -4
 1243 0002 83B0     		sub	sp, sp, #12
 1244              	.LCFI127:
 1245              		.cfi_def_cfa_offset 16
 1246 0004 00AF     		add	r7, sp, #0
 1247              	.LCFI128:
 1248              		.cfi_def_cfa_register 7
 1249 0006 7860     		str	r0, [r7, #4]
6758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 1250              		.loc 1 6758 12
 1251 0008 7B68     		ldr	r3, [r7, #4]
 1252 000a 9B68     		ldr	r3, [r3, #8]
 1253 000c 03F00103 		and	r3, r3, #1
 1254              		.loc 1 6758 68
 1255 0010 012B     		cmp	r3, #1
 1256 0012 01D1     		bne	.L50
 1257              		.loc 1 6758 68 is_stmt 0 discriminator 1
 1258 0014 0123     		movs	r3, #1
 1259 0016 00E0     		b	.L52
 1260              	.L50:
 1261              		.loc 1 6758 68 discriminator 2
 1262 0018 0023     		movs	r3, #0
 1263              	.L52:
6759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1264              		.loc 1 6759 1 is_stmt 1 discriminator 5
ARM GAS  /tmp/ccp7RHPZ.s 			page 141


 1265 001a 1846     		mov	r0, r3
 1266 001c 0C37     		adds	r7, r7, #12
 1267              	.LCFI129:
 1268              		.cfi_def_cfa_offset 4
 1269 001e BD46     		mov	sp, r7
 1270              	.LCFI130:
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 0020 5DF8047B 		ldr	r7, [sp], #4
 1274              	.LCFI131:
 1275              		.cfi_restore 7
 1276              		.cfi_def_cfa_offset 0
 1277 0024 7047     		bx	lr
 1278              		.cfi_endproc
 1279              	.LFE229:
 1281              		.section	.text.LL_ADC_IsDisableOngoing,"ax",%progbits
 1282              		.align	1
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1286              		.fpu fpv5-d16
 1288              	LL_ADC_IsDisableOngoing:
 1289              	.LFB230:
6760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1290              		.loc 1 6768 1
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 8
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 1295 0000 80B4     		push	{r7}
 1296              	.LCFI132:
 1297              		.cfi_def_cfa_offset 4
 1298              		.cfi_offset 7, -4
 1299 0002 83B0     		sub	sp, sp, #12
 1300              	.LCFI133:
 1301              		.cfi_def_cfa_offset 16
 1302 0004 00AF     		add	r7, sp, #0
 1303              	.LCFI134:
 1304              		.cfi_def_cfa_register 7
 1305 0006 7860     		str	r0, [r7, #4]
6769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 1306              		.loc 1 6769 12
 1307 0008 7B68     		ldr	r3, [r7, #4]
 1308 000a 9B68     		ldr	r3, [r3, #8]
 1309 000c 03F00203 		and	r3, r3, #2
 1310              		.loc 1 6769 70
 1311 0010 022B     		cmp	r3, #2
 1312 0012 01D1     		bne	.L54
 1313              		.loc 1 6769 70 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 142


 1314 0014 0123     		movs	r3, #1
 1315 0016 00E0     		b	.L56
 1316              	.L54:
 1317              		.loc 1 6769 70 discriminator 2
 1318 0018 0023     		movs	r3, #0
 1319              	.L56:
6770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1320              		.loc 1 6770 1 is_stmt 1 discriminator 5
 1321 001a 1846     		mov	r0, r3
 1322 001c 0C37     		adds	r7, r7, #12
 1323              	.LCFI135:
 1324              		.cfi_def_cfa_offset 4
 1325 001e BD46     		mov	sp, r7
 1326              	.LCFI136:
 1327              		.cfi_def_cfa_register 13
 1328              		@ sp needed
 1329 0020 5DF8047B 		ldr	r7, [sp], #4
 1330              	.LCFI137:
 1331              		.cfi_restore 7
 1332              		.cfi_def_cfa_offset 0
 1333 0024 7047     		bx	lr
 1334              		.cfi_endproc
 1335              	.LFE230:
 1337              		.section	.text.LL_ADC_REG_StartConversion,"ax",%progbits
 1338              		.align	1
 1339              		.syntax unified
 1340              		.thumb
 1341              		.thumb_func
 1342              		.fpu fpv5-d16
 1344              	LL_ADC_REG_StartConversion:
 1345              	.LFB233:
6771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, a minimum number of ADC clock cycles
6776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration duration:
6779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of offset: 520 ADC clock cycles
6780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of linearity: 131072 ADC clock cycles
6781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
6782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
6787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
6788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run can be performed only once).
6790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration\n
6795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALLIN       LL_ADC_StartCalibration
6796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 143


6797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationMode This parameter can be one of the following values:
6798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET
6799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET_LINEARITY
6800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t 
6806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_
6813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
6837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
6840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
6843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccp7RHPZ.s 			page 144


 1346              		.loc 1 6853 1
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 8
 1349              		@ frame_needed = 1, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351 0000 80B4     		push	{r7}
 1352              	.LCFI138:
 1353              		.cfi_def_cfa_offset 4
 1354              		.cfi_offset 7, -4
 1355 0002 83B0     		sub	sp, sp, #12
 1356              	.LCFI139:
 1357              		.cfi_def_cfa_offset 16
 1358 0004 00AF     		add	r7, sp, #0
 1359              	.LCFI140:
 1360              		.cfi_def_cfa_register 7
 1361 0006 7860     		str	r0, [r7, #4]
6854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1362              		.loc 1 6857 3
 1363 0008 7B68     		ldr	r3, [r7, #4]
 1364 000a 9A68     		ldr	r2, [r3, #8]
 1365 000c 054B     		ldr	r3, .L58
 1366 000e 1340     		ands	r3, r3, r2
 1367 0010 43F00402 		orr	r2, r3, #4
 1368 0014 7B68     		ldr	r3, [r7, #4]
 1369 0016 9A60     		str	r2, [r3, #8]
6858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTART);
6860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1370              		.loc 1 6860 1
 1371 0018 00BF     		nop
 1372 001a 0C37     		adds	r7, r7, #12
 1373              	.LCFI141:
 1374              		.cfi_def_cfa_offset 4
 1375 001c BD46     		mov	sp, r7
 1376              	.LCFI142:
 1377              		.cfi_def_cfa_register 13
 1378              		@ sp needed
 1379 001e 5DF8047B 		ldr	r7, [sp], #4
 1380              	.LCFI143:
 1381              		.cfi_restore 7
 1382              		.cfi_def_cfa_offset 0
 1383 0022 7047     		bx	lr
 1384              	.L59:
 1385              		.align	2
 1386              	.L58:
 1387 0024 C0FFFF7F 		.word	2147483584
 1388              		.cfi_endproc
 1389              	.LFE233:
 1391              		.section	.text.LL_ADC_REG_StopConversion,"ax",%progbits
 1392              		.align	1
 1393              		.syntax unified
 1394              		.thumb
 1395              		.thumb_func
 1396              		.fpu fpv5-d16
ARM GAS  /tmp/ccp7RHPZ.s 			page 145


 1398              	LL_ADC_REG_StopConversion:
 1399              	.LFB234:
6861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1400              		.loc 1 6873 1
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 8
 1403              		@ frame_needed = 1, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
 1405 0000 80B4     		push	{r7}
 1406              	.LCFI144:
 1407              		.cfi_def_cfa_offset 4
 1408              		.cfi_offset 7, -4
 1409 0002 83B0     		sub	sp, sp, #12
 1410              	.LCFI145:
 1411              		.cfi_def_cfa_offset 16
 1412 0004 00AF     		add	r7, sp, #0
 1413              	.LCFI146:
 1414              		.cfi_def_cfa_register 7
 1415 0006 7860     		str	r0, [r7, #4]
6874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1416              		.loc 1 6877 3
 1417 0008 7B68     		ldr	r3, [r7, #4]
 1418 000a 9A68     		ldr	r2, [r3, #8]
 1419 000c 054B     		ldr	r3, .L61
 1420 000e 1340     		ands	r3, r3, r2
 1421 0010 43F01002 		orr	r2, r3, #16
 1422 0014 7B68     		ldr	r3, [r7, #4]
 1423 0016 9A60     		str	r2, [r3, #8]
6878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTP);
6880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1424              		.loc 1 6880 1
 1425 0018 00BF     		nop
 1426 001a 0C37     		adds	r7, r7, #12
 1427              	.LCFI147:
 1428              		.cfi_def_cfa_offset 4
 1429 001c BD46     		mov	sp, r7
 1430              	.LCFI148:
 1431              		.cfi_def_cfa_register 13
 1432              		@ sp needed
 1433 001e 5DF8047B 		ldr	r7, [sp], #4
 1434              	.LCFI149:
ARM GAS  /tmp/ccp7RHPZ.s 			page 146


 1435              		.cfi_restore 7
 1436              		.cfi_def_cfa_offset 0
 1437 0022 7047     		bx	lr
 1438              	.L62:
 1439              		.align	2
 1440              	.L61:
 1441 0024 C0FFFF7F 		.word	2147483584
 1442              		.cfi_endproc
 1443              	.LFE234:
 1445              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
 1446              		.align	1
 1447              		.syntax unified
 1448              		.thumb
 1449              		.thumb_func
 1450              		.fpu fpv5-d16
 1452              	LL_ADC_REG_IsConversionOngoing:
 1453              	.LFB235:
6881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1454              		.loc 1 6889 1
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 8
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0000 80B4     		push	{r7}
 1460              	.LCFI150:
 1461              		.cfi_def_cfa_offset 4
 1462              		.cfi_offset 7, -4
 1463 0002 83B0     		sub	sp, sp, #12
 1464              	.LCFI151:
 1465              		.cfi_def_cfa_offset 16
 1466 0004 00AF     		add	r7, sp, #0
 1467              	.LCFI152:
 1468              		.cfi_def_cfa_register 7
 1469 0006 7860     		str	r0, [r7, #4]
6890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 1470              		.loc 1 6890 12
 1471 0008 7B68     		ldr	r3, [r7, #4]
 1472 000a 9B68     		ldr	r3, [r3, #8]
 1473 000c 03F00403 		and	r3, r3, #4
 1474              		.loc 1 6890 74
 1475 0010 042B     		cmp	r3, #4
 1476 0012 01D1     		bne	.L64
 1477              		.loc 1 6890 74 is_stmt 0 discriminator 1
 1478 0014 0123     		movs	r3, #1
 1479 0016 00E0     		b	.L66
 1480              	.L64:
 1481              		.loc 1 6890 74 discriminator 2
 1482 0018 0023     		movs	r3, #0
 1483              	.L66:
ARM GAS  /tmp/ccp7RHPZ.s 			page 147


6891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1484              		.loc 1 6891 1 is_stmt 1 discriminator 5
 1485 001a 1846     		mov	r0, r3
 1486 001c 0C37     		adds	r7, r7, #12
 1487              	.LCFI153:
 1488              		.cfi_def_cfa_offset 4
 1489 001e BD46     		mov	sp, r7
 1490              	.LCFI154:
 1491              		.cfi_def_cfa_register 13
 1492              		@ sp needed
 1493 0020 5DF8047B 		ldr	r7, [sp], #4
 1494              	.LCFI155:
 1495              		.cfi_restore 7
 1496              		.cfi_def_cfa_offset 0
 1497 0024 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE235:
 1501              		.section	.text.LL_ADC_INJ_StopConversion,"ax",%progbits
 1502              		.align	1
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1506              		.fpu fpv5-d16
 1508              	LL_ADC_INJ_StopConversion:
 1509              	.LFB245:
6892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
6909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
6921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
ARM GAS  /tmp/ccp7RHPZ.s 			page 148


6924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
6925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
6927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
6929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
6936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData14
6940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FF
6942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
6944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
6951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
6966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
ARM GAS  /tmp/ccp7RHPZ.s 			page 149


6981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
7000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
7001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
7002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         separately).
7003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
7004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
7005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
7008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
7009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
7010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
7011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
7014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
7016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ConversionData)
7017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
7018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
7026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
7031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
7032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
7033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
7034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
7035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
7036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
7037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
ARM GAS  /tmp/ccp7RHPZ.s 			page 150


7038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
7041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
7042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
7044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
7048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTART);
7055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
7059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
7062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
7064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
7068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1510              		.loc 1 7068 1
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 8
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515 0000 80B4     		push	{r7}
 1516              	.LCFI156:
 1517              		.cfi_def_cfa_offset 4
 1518              		.cfi_offset 7, -4
 1519 0002 83B0     		sub	sp, sp, #12
 1520              	.LCFI157:
 1521              		.cfi_def_cfa_offset 16
 1522 0004 00AF     		add	r7, sp, #0
 1523              	.LCFI158:
 1524              		.cfi_def_cfa_register 7
 1525 0006 7860     		str	r0, [r7, #4]
7069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1526              		.loc 1 7072 3
 1527 0008 7B68     		ldr	r3, [r7, #4]
 1528 000a 9A68     		ldr	r2, [r3, #8]
 1529 000c 054B     		ldr	r3, .L68
 1530 000e 1340     		ands	r3, r3, r2
 1531 0010 43F02002 		orr	r2, r3, #32
ARM GAS  /tmp/ccp7RHPZ.s 			page 151


 1532 0014 7B68     		ldr	r3, [r7, #4]
 1533 0016 9A60     		str	r2, [r3, #8]
7073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTP);
7075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1534              		.loc 1 7075 1
 1535 0018 00BF     		nop
 1536 001a 0C37     		adds	r7, r7, #12
 1537              	.LCFI159:
 1538              		.cfi_def_cfa_offset 4
 1539 001c BD46     		mov	sp, r7
 1540              	.LCFI160:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 001e 5DF8047B 		ldr	r7, [sp], #4
 1544              	.LCFI161:
 1545              		.cfi_restore 7
 1546              		.cfi_def_cfa_offset 0
 1547 0022 7047     		bx	lr
 1548              	.L69:
 1549              		.align	2
 1550              	.L68:
 1551 0024 C0FFFF7F 		.word	2147483584
 1552              		.cfi_endproc
 1553              	.LFE245:
 1555              		.section	.text.LL_ADC_INJ_IsConversionOngoing,"ax",%progbits
 1556              		.align	1
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1560              		.fpu fpv5-d16
 1562              	LL_ADC_INJ_IsConversionOngoing:
 1563              	.LFB246:
7076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
7079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
7080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
7082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
7084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1564              		.loc 1 7084 1
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 8
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568              		@ link register save eliminated.
 1569 0000 80B4     		push	{r7}
 1570              	.LCFI162:
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 7, -4
 1573 0002 83B0     		sub	sp, sp, #12
 1574              	.LCFI163:
 1575              		.cfi_def_cfa_offset 16
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI164:
 1578              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 152


 1579 0006 7860     		str	r0, [r7, #4]
7085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 1580              		.loc 1 7085 12
 1581 0008 7B68     		ldr	r3, [r7, #4]
 1582 000a 9B68     		ldr	r3, [r3, #8]
 1583 000c 03F00803 		and	r3, r3, #8
 1584              		.loc 1 7085 76
 1585 0010 082B     		cmp	r3, #8
 1586 0012 01D1     		bne	.L71
 1587              		.loc 1 7085 76 is_stmt 0 discriminator 1
 1588 0014 0123     		movs	r3, #1
 1589 0016 00E0     		b	.L73
 1590              	.L71:
 1591              		.loc 1 7085 76 discriminator 2
 1592 0018 0023     		movs	r3, #0
 1593              	.L73:
7086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1594              		.loc 1 7086 1 is_stmt 1 discriminator 5
 1595 001a 1846     		mov	r0, r3
 1596 001c 0C37     		adds	r7, r7, #12
 1597              	.LCFI165:
 1598              		.cfi_def_cfa_offset 4
 1599 001e BD46     		mov	sp, r7
 1600              	.LCFI166:
 1601              		.cfi_def_cfa_register 13
 1602              		@ sp needed
 1603 0020 5DF8047B 		ldr	r7, [sp], #4
 1604              	.LCFI167:
 1605              		.cfi_restore 7
 1606              		.cfi_def_cfa_offset 0
 1607 0024 7047     		bx	lr
 1608              		.cfi_endproc
 1609              	.LFE246:
 1611              		.section	.text.LL_ADC_ClearFlag_AWD1,"ax",%progbits
 1612              		.align	1
 1613              		.syntax unified
 1614              		.thumb
 1615              		.thumb_func
 1616              		.fpu fpv5-d16
 1618              	LL_ADC_ClearFlag_AWD1:
 1619              	.LFB273:
7087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected command of conversion stop state
7090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
7091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group injected.
7093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
7095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
7097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
7102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
ARM GAS  /tmp/ccp7RHPZ.s 			page 153


7103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
7104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
7105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
7106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
7107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
7108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
7117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
7121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
7128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData16\n
7132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData16\n
7133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData16\n
7134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData16
7135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFFF
7142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData16(ADC_TypeDef *ADCx, uint32_t Rank)
7144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
7155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData14\n
7159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData14\n
ARM GAS  /tmp/ccp7RHPZ.s 			page 154


7160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData14\n
7161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData14
7162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFF
7169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData14(ADC_TypeDef *ADCx, uint32_t Rank)
7171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
7182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
7186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
7187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
7188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
7189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
7198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
7209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData10\n
7213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData10\n
7214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData10\n
7215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData10
7216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 155


7217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
7225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
7236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData8\n
7240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData8\n
7241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData8\n
7242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData8
7243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
7252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   );
7258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
7265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC ready.
7270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
ARM GAS  /tmp/ccp7RHPZ.s 			page 156


7274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
7278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
7280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
7284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
7285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
7289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
7291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
7295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
7296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
7300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
7302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
7306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
7307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
7311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
7313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
7317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
7318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
7322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
7324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of unitary conversion.
7328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_IsActiveFlag_JEOC
7329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccp7RHPZ.s 			page 157


7331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
7333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
7335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
7339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
7340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
7344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
7346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected contexts queue overflow.
7350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_IsActiveFlag_JQOVF
7351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
7355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JQOVF) == (LL_ADC_FLAG_JQOVF)) ? 1UL : 0UL);
7357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
7361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
7362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
7366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
7368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
7372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
7373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
7377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
7379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
7383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
7384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 158


7388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
7390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
7394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
7398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
7402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
7404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
7408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
7409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
7413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
7415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
7419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
7420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
7424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
7426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
7430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
7431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
7435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
7437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
7441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
7442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 159


7445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
7446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
7448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of unitary conversion.
7452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
7453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
7457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
7459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of sequence conversions.
7463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_ClearFlag_JEOS
7464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
7468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
7470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected contexts queue overflow.
7474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_ClearFlag_JQOVF
7475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
7479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JQOVF);
7481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
7485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
7486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
7490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1620              		.loc 1 7490 1
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0000 80B4     		push	{r7}
 1626              	.LCFI168:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 83B0     		sub	sp, sp, #12
 1630              	.LCFI169:
ARM GAS  /tmp/ccp7RHPZ.s 			page 160


 1631              		.cfi_def_cfa_offset 16
 1632 0004 00AF     		add	r7, sp, #0
 1633              	.LCFI170:
 1634              		.cfi_def_cfa_register 7
 1635 0006 7860     		str	r0, [r7, #4]
7491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 1636              		.loc 1 7491 3
 1637 0008 7B68     		ldr	r3, [r7, #4]
 1638 000a 8022     		movs	r2, #128
 1639 000c 1A60     		str	r2, [r3]
7492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1640              		.loc 1 7492 1
 1641 000e 00BF     		nop
 1642 0010 0C37     		adds	r7, r7, #12
 1643              	.LCFI171:
 1644              		.cfi_def_cfa_offset 4
 1645 0012 BD46     		mov	sp, r7
 1646              	.LCFI172:
 1647              		.cfi_def_cfa_register 13
 1648              		@ sp needed
 1649 0014 5DF8047B 		ldr	r7, [sp], #4
 1650              	.LCFI173:
 1651              		.cfi_restore 7
 1652              		.cfi_def_cfa_offset 0
 1653 0018 7047     		bx	lr
 1654              		.cfi_endproc
 1655              	.LFE273:
 1657              		.section	.text.LL_ADC_ClearFlag_AWD2,"ax",%progbits
 1658              		.align	1
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv5-d16
 1664              	LL_ADC_ClearFlag_AWD2:
 1665              	.LFB274:
7493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
7496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
7497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
7501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1666              		.loc 1 7501 1
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 8
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 1671 0000 80B4     		push	{r7}
 1672              	.LCFI174:
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 7, -4
 1675 0002 83B0     		sub	sp, sp, #12
 1676              	.LCFI175:
 1677              		.cfi_def_cfa_offset 16
 1678 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 161


 1679              	.LCFI176:
 1680              		.cfi_def_cfa_register 7
 1681 0006 7860     		str	r0, [r7, #4]
7502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 1682              		.loc 1 7502 3
 1683 0008 7B68     		ldr	r3, [r7, #4]
 1684 000a 4FF48072 		mov	r2, #256
 1685 000e 1A60     		str	r2, [r3]
7503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1686              		.loc 1 7503 1
 1687 0010 00BF     		nop
 1688 0012 0C37     		adds	r7, r7, #12
 1689              	.LCFI177:
 1690              		.cfi_def_cfa_offset 4
 1691 0014 BD46     		mov	sp, r7
 1692              	.LCFI178:
 1693              		.cfi_def_cfa_register 13
 1694              		@ sp needed
 1695 0016 5DF8047B 		ldr	r7, [sp], #4
 1696              	.LCFI179:
 1697              		.cfi_restore 7
 1698              		.cfi_def_cfa_offset 0
 1699 001a 7047     		bx	lr
 1700              		.cfi_endproc
 1701              	.LFE274:
 1703              		.section	.text.LL_ADC_ClearFlag_AWD3,"ax",%progbits
 1704              		.align	1
 1705              		.syntax unified
 1706              		.thumb
 1707              		.thumb_func
 1708              		.fpu fpv5-d16
 1710              	LL_ADC_ClearFlag_AWD3:
 1711              	.LFB275:
7504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
7507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
7508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
7512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1712              		.loc 1 7512 1
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 8
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
 1716              		@ link register save eliminated.
 1717 0000 80B4     		push	{r7}
 1718              	.LCFI180:
 1719              		.cfi_def_cfa_offset 4
 1720              		.cfi_offset 7, -4
 1721 0002 83B0     		sub	sp, sp, #12
 1722              	.LCFI181:
 1723              		.cfi_def_cfa_offset 16
 1724 0004 00AF     		add	r7, sp, #0
 1725              	.LCFI182:
 1726              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 162


 1727 0006 7860     		str	r0, [r7, #4]
7513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 1728              		.loc 1 7513 3
 1729 0008 7B68     		ldr	r3, [r7, #4]
 1730 000a 4FF40072 		mov	r2, #512
 1731 000e 1A60     		str	r2, [r3]
7514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1732              		.loc 1 7514 1
 1733 0010 00BF     		nop
 1734 0012 0C37     		adds	r7, r7, #12
 1735              	.LCFI183:
 1736              		.cfi_def_cfa_offset 4
 1737 0014 BD46     		mov	sp, r7
 1738              	.LCFI184:
 1739              		.cfi_def_cfa_register 13
 1740              		@ sp needed
 1741 0016 5DF8047B 		ldr	r7, [sp], #4
 1742              	.LCFI185:
 1743              		.cfi_restore 7
 1744              		.cfi_def_cfa_offset 0
 1745 001a 7047     		bx	lr
 1746              		.cfi_endproc
 1747              	.LFE275:
 1749              		.section	.text.LL_ADC_EnableIT_AWD1,"ax",%progbits
 1750              		.align	1
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv5-d16
 1756              	LL_ADC_EnableIT_AWD1:
 1757              	.LFB306:
7515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC master.
7518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_MST      LL_ADC_IsActiveFlag_MST_ADRDY
7519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_MST) == (LL_ADC_FLAG_ADRDY_MST)) ? 1UL : 0
7526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC slave.
7530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_SLV      LL_ADC_IsActiveFlag_SLV_ADRDY
7531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_SLV) == (LL_ADC_FLAG_ADRDY_SLV)) ? 1UL : 0
7538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 163


7541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC master.
7542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_MST        LL_ADC_IsActiveFlag_MST_EOC
7543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC slave.
7554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_SLV        LL_ADC_IsActiveFlag_SLV_EOC
7555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC master.
7566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_MST        LL_ADC_IsActiveFlag_MST_EOS
7567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_MST) == (LL_ADC_FLAG_EOS_MST)) ? 1UL : 0UL);
7574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC slave.
7578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_SLV        LL_ADC_IsActiveFlag_SLV_EOS
7579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_SLV) == (LL_ADC_FLAG_EOS_SLV)) ? 1UL : 0UL);
7586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC master.
7590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_MST        LL_ADC_IsActiveFlag_MST_OVR
7591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_MST) == (LL_ADC_FLAG_OVR_MST)) ? 1UL : 0UL);
ARM GAS  /tmp/ccp7RHPZ.s 			page 164


7598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC slave.
7602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_SLV        LL_ADC_IsActiveFlag_SLV_OVR
7603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_SLV) == (LL_ADC_FLAG_OVR_SLV)) ? 1UL : 0UL);
7610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC master.
7614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_MST      LL_ADC_IsActiveFlag_MST_EOSMP
7615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_MST) == (LL_ADC_FLAG_EOSMP_MST)) ? 1UL : 0
7622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC slave.
7626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_SLV      LL_ADC_IsActiveFlag_SLV_EOSMP
7627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_SLV) == (LL_ADC_FLAG_EOSMP_SLV)) ? 1UL : 0
7634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC master.
7638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_MST       LL_ADC_IsActiveFlag_MST_JEOC
7639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_MST) == (LL_ADC_FLAG_JEOC_MST)) ? 1UL : 0UL
7646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC slave.
7650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_SLV       LL_ADC_IsActiveFlag_SLV_JEOC
7651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 165


7655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_SLV) == (LL_ADC_FLAG_JEOC_SLV)) ? 1UL : 0UL
7658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC master.
7662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_MST       LL_ADC_IsActiveFlag_MST_JEOS
7663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_MST) == (LL_ADC_FLAG_JEOS_MST)) ? 1UL : 0UL
7670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC slave.
7674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_SLV       LL_ADC_IsActiveFlag_SLV_JEOS
7675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_SLV) == (LL_ADC_FLAG_JEOS_SLV)) ? 1UL : 0UL
7682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC master.
7686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_MST      LL_ADC_IsActiveFlag_MST_JQOVF
7687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_MST) == (LL_ADC_FLAG_JQOVF_MST)) ? 1UL : 0
7694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC slave.
7698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_SLV      LL_ADC_IsActiveFlag_SLV_JQOVF
7699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_SLV) == (LL_ADC_FLAG_JQOVF_SLV)) ? 1UL : 0
7706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 1 of the ADC master.
7710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_MST       LL_ADC_IsActiveFlag_MST_AWD1
7711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
ARM GAS  /tmp/ccp7RHPZ.s 			page 166


7712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_MST) == (LL_ADC_FLAG_AWD1_MST)) ? 1UL : 0UL
7718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode analog watchdog 1 of the ADC slave.
7722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_SLV       LL_ADC_IsActiveFlag_SLV_AWD1
7723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_SLV) == (LL_ADC_FLAG_AWD1_SLV)) ? 1UL : 0UL
7730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC master.
7734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_MST       LL_ADC_IsActiveFlag_MST_AWD2
7735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_MST) == (LL_ADC_FLAG_AWD2_MST)) ? 1UL : 0UL
7742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC slave.
7746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_SLV       LL_ADC_IsActiveFlag_SLV_AWD2
7747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_SLV) == (LL_ADC_FLAG_AWD2_SLV)) ? 1UL : 0UL
7754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC master.
7758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_MST       LL_ADC_IsActiveFlag_MST_AWD3
7759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_MST) == (LL_ADC_FLAG_AWD3_MST)) ? 1UL : 0UL
7766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 167


7769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC slave.
7770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_SLV       LL_ADC_IsActiveFlag_SLV_AWD3
7771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_SLV) == (LL_ADC_FLAG_AWD3_SLV)) ? 1UL : 0UL
7778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
7785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC ready.
7790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
7791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
7795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
7801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
7802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
7806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
7808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
7812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
7813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
7817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
7819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
7823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
7824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccp7RHPZ.s 			page 168


7826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
7828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
7830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
7834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
7835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
7839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of unitary conversion.
7845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
7846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
7850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of sequence conversions.
7856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
7857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
7861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected context queue overflow.
7867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_EnableIT_JQOVF
7868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
7872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
7878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
7879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 169


7883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1758              		.loc 1 7883 1
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 8
 1761              		@ frame_needed = 1, uses_anonymous_args = 0
 1762              		@ link register save eliminated.
 1763 0000 80B4     		push	{r7}
 1764              	.LCFI186:
 1765              		.cfi_def_cfa_offset 4
 1766              		.cfi_offset 7, -4
 1767 0002 83B0     		sub	sp, sp, #12
 1768              	.LCFI187:
 1769              		.cfi_def_cfa_offset 16
 1770 0004 00AF     		add	r7, sp, #0
 1771              	.LCFI188:
 1772              		.cfi_def_cfa_register 7
 1773 0006 7860     		str	r0, [r7, #4]
7884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 1774              		.loc 1 7884 3
 1775 0008 7B68     		ldr	r3, [r7, #4]
 1776 000a 5B68     		ldr	r3, [r3, #4]
 1777 000c 43F08002 		orr	r2, r3, #128
 1778 0010 7B68     		ldr	r3, [r7, #4]
 1779 0012 5A60     		str	r2, [r3, #4]
7885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1780              		.loc 1 7885 1
 1781 0014 00BF     		nop
 1782 0016 0C37     		adds	r7, r7, #12
 1783              	.LCFI189:
 1784              		.cfi_def_cfa_offset 4
 1785 0018 BD46     		mov	sp, r7
 1786              	.LCFI190:
 1787              		.cfi_def_cfa_register 13
 1788              		@ sp needed
 1789 001a 5DF8047B 		ldr	r7, [sp], #4
 1790              	.LCFI191:
 1791              		.cfi_restore 7
 1792              		.cfi_def_cfa_offset 0
 1793 001e 7047     		bx	lr
 1794              		.cfi_endproc
 1795              	.LFE306:
 1797              		.section	.text.LL_ADC_EnableIT_AWD2,"ax",%progbits
 1798              		.align	1
 1799              		.syntax unified
 1800              		.thumb
 1801              		.thumb_func
 1802              		.fpu fpv5-d16
 1804              	LL_ADC_EnableIT_AWD2:
 1805              	.LFB307:
7886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
7889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
7890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 170


7894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1806              		.loc 1 7894 1
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 8
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
 1811 0000 80B4     		push	{r7}
 1812              	.LCFI192:
 1813              		.cfi_def_cfa_offset 4
 1814              		.cfi_offset 7, -4
 1815 0002 83B0     		sub	sp, sp, #12
 1816              	.LCFI193:
 1817              		.cfi_def_cfa_offset 16
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI194:
 1820              		.cfi_def_cfa_register 7
 1821 0006 7860     		str	r0, [r7, #4]
7895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 1822              		.loc 1 7895 3
 1823 0008 7B68     		ldr	r3, [r7, #4]
 1824 000a 5B68     		ldr	r3, [r3, #4]
 1825 000c 43F48072 		orr	r2, r3, #256
 1826 0010 7B68     		ldr	r3, [r7, #4]
 1827 0012 5A60     		str	r2, [r3, #4]
7896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1828              		.loc 1 7896 1
 1829 0014 00BF     		nop
 1830 0016 0C37     		adds	r7, r7, #12
 1831              	.LCFI195:
 1832              		.cfi_def_cfa_offset 4
 1833 0018 BD46     		mov	sp, r7
 1834              	.LCFI196:
 1835              		.cfi_def_cfa_register 13
 1836              		@ sp needed
 1837 001a 5DF8047B 		ldr	r7, [sp], #4
 1838              	.LCFI197:
 1839              		.cfi_restore 7
 1840              		.cfi_def_cfa_offset 0
 1841 001e 7047     		bx	lr
 1842              		.cfi_endproc
 1843              	.LFE307:
 1845              		.section	.text.LL_ADC_EnableIT_AWD3,"ax",%progbits
 1846              		.align	1
 1847              		.syntax unified
 1848              		.thumb
 1849              		.thumb_func
 1850              		.fpu fpv5-d16
 1852              	LL_ADC_EnableIT_AWD3:
 1853              	.LFB308:
7897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
7900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
7901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 171


7905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1854              		.loc 1 7905 1
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 8
 1857              		@ frame_needed = 1, uses_anonymous_args = 0
 1858              		@ link register save eliminated.
 1859 0000 80B4     		push	{r7}
 1860              	.LCFI198:
 1861              		.cfi_def_cfa_offset 4
 1862              		.cfi_offset 7, -4
 1863 0002 83B0     		sub	sp, sp, #12
 1864              	.LCFI199:
 1865              		.cfi_def_cfa_offset 16
 1866 0004 00AF     		add	r7, sp, #0
 1867              	.LCFI200:
 1868              		.cfi_def_cfa_register 7
 1869 0006 7860     		str	r0, [r7, #4]
7906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 1870              		.loc 1 7906 3
 1871 0008 7B68     		ldr	r3, [r7, #4]
 1872 000a 5B68     		ldr	r3, [r3, #4]
 1873 000c 43F40072 		orr	r2, r3, #512
 1874 0010 7B68     		ldr	r3, [r7, #4]
 1875 0012 5A60     		str	r2, [r3, #4]
7907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1876              		.loc 1 7907 1
 1877 0014 00BF     		nop
 1878 0016 0C37     		adds	r7, r7, #12
 1879              	.LCFI201:
 1880              		.cfi_def_cfa_offset 4
 1881 0018 BD46     		mov	sp, r7
 1882              	.LCFI202:
 1883              		.cfi_def_cfa_register 13
 1884              		@ sp needed
 1885 001a 5DF8047B 		ldr	r7, [sp], #4
 1886              	.LCFI203:
 1887              		.cfi_restore 7
 1888              		.cfi_def_cfa_offset 0
 1889 001e 7047     		bx	lr
 1890              		.cfi_endproc
 1891              	.LFE308:
 1893              		.section	.text.LL_ADC_DisableIT_AWD1,"ax",%progbits
 1894              		.align	1
 1895              		.syntax unified
 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv5-d16
 1900              	LL_ADC_DisableIT_AWD1:
 1901              	.LFB317:
7908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
7911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
7912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccp7RHPZ.s 			page 172


7916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
7923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
7927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
7929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
7933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
7934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
7938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
7940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
7944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
7945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
7949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
7951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
7955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
7956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
7960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
7967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
7971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
ARM GAS  /tmp/ccp7RHPZ.s 			page 173


7973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected end of sequence conversions.
7977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
7978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
7982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected context queue overflow.
7988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
7989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
7993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
7999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
8000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
8004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1902              		.loc 1 8004 1
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 8
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907 0000 80B4     		push	{r7}
 1908              	.LCFI204:
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0002 83B0     		sub	sp, sp, #12
 1912              	.LCFI205:
 1913              		.cfi_def_cfa_offset 16
 1914 0004 00AF     		add	r7, sp, #0
 1915              	.LCFI206:
 1916              		.cfi_def_cfa_register 7
 1917 0006 7860     		str	r0, [r7, #4]
8005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 1918              		.loc 1 8005 3
 1919 0008 7B68     		ldr	r3, [r7, #4]
 1920 000a 5B68     		ldr	r3, [r3, #4]
 1921 000c 23F08002 		bic	r2, r3, #128
 1922 0010 7B68     		ldr	r3, [r7, #4]
 1923 0012 5A60     		str	r2, [r3, #4]
8006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1924              		.loc 1 8006 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 174


 1925 0014 00BF     		nop
 1926 0016 0C37     		adds	r7, r7, #12
 1927              	.LCFI207:
 1928              		.cfi_def_cfa_offset 4
 1929 0018 BD46     		mov	sp, r7
 1930              	.LCFI208:
 1931              		.cfi_def_cfa_register 13
 1932              		@ sp needed
 1933 001a 5DF8047B 		ldr	r7, [sp], #4
 1934              	.LCFI209:
 1935              		.cfi_restore 7
 1936              		.cfi_def_cfa_offset 0
 1937 001e 7047     		bx	lr
 1938              		.cfi_endproc
 1939              	.LFE317:
 1941              		.section	.text.LL_ADC_DisableIT_AWD2,"ax",%progbits
 1942              		.align	1
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1946              		.fpu fpv5-d16
 1948              	LL_ADC_DisableIT_AWD2:
 1949              	.LFB318:
8007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
8010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
8011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
8015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1950              		.loc 1 8015 1
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 8
 1953              		@ frame_needed = 1, uses_anonymous_args = 0
 1954              		@ link register save eliminated.
 1955 0000 80B4     		push	{r7}
 1956              	.LCFI210:
 1957              		.cfi_def_cfa_offset 4
 1958              		.cfi_offset 7, -4
 1959 0002 83B0     		sub	sp, sp, #12
 1960              	.LCFI211:
 1961              		.cfi_def_cfa_offset 16
 1962 0004 00AF     		add	r7, sp, #0
 1963              	.LCFI212:
 1964              		.cfi_def_cfa_register 7
 1965 0006 7860     		str	r0, [r7, #4]
8016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 1966              		.loc 1 8016 3
 1967 0008 7B68     		ldr	r3, [r7, #4]
 1968 000a 5B68     		ldr	r3, [r3, #4]
 1969 000c 23F48072 		bic	r2, r3, #256
 1970 0010 7B68     		ldr	r3, [r7, #4]
 1971 0012 5A60     		str	r2, [r3, #4]
8017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1972              		.loc 1 8017 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 175


 1973 0014 00BF     		nop
 1974 0016 0C37     		adds	r7, r7, #12
 1975              	.LCFI213:
 1976              		.cfi_def_cfa_offset 4
 1977 0018 BD46     		mov	sp, r7
 1978              	.LCFI214:
 1979              		.cfi_def_cfa_register 13
 1980              		@ sp needed
 1981 001a 5DF8047B 		ldr	r7, [sp], #4
 1982              	.LCFI215:
 1983              		.cfi_restore 7
 1984              		.cfi_def_cfa_offset 0
 1985 001e 7047     		bx	lr
 1986              		.cfi_endproc
 1987              	.LFE318:
 1989              		.section	.text.LL_ADC_DisableIT_AWD3,"ax",%progbits
 1990              		.align	1
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv5-d16
 1996              	LL_ADC_DisableIT_AWD3:
 1997              	.LFB319:
8018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
8021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
8022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
8026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1998              		.loc 1 8026 1
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0000 80B4     		push	{r7}
 2004              	.LCFI216:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 0002 83B0     		sub	sp, sp, #12
 2008              	.LCFI217:
 2009              		.cfi_def_cfa_offset 16
 2010 0004 00AF     		add	r7, sp, #0
 2011              	.LCFI218:
 2012              		.cfi_def_cfa_register 7
 2013 0006 7860     		str	r0, [r7, #4]
8027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 2014              		.loc 1 8027 3
 2015 0008 7B68     		ldr	r3, [r7, #4]
 2016 000a 5B68     		ldr	r3, [r3, #4]
 2017 000c 23F40072 		bic	r2, r3, #512
 2018 0010 7B68     		ldr	r3, [r7, #4]
 2019 0012 5A60     		str	r2, [r3, #4]
8028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2020              		.loc 1 8028 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 176


 2021 0014 00BF     		nop
 2022 0016 0C37     		adds	r7, r7, #12
 2023              	.LCFI219:
 2024              		.cfi_def_cfa_offset 4
 2025 0018 BD46     		mov	sp, r7
 2026              	.LCFI220:
 2027              		.cfi_def_cfa_register 13
 2028              		@ sp needed
 2029 001a 5DF8047B 		ldr	r7, [sp], #4
 2030              	.LCFI221:
 2031              		.cfi_restore 7
 2032              		.cfi_def_cfa_offset 0
 2033 001e 7047     		bx	lr
 2034              		.cfi_endproc
 2035              	.LFE319:
 2037              		.section	.text.HAL_ADC_Init,"ax",%progbits
 2038              		.align	1
 2039              		.global	HAL_ADC_Init
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv5-d16
 2045              	HAL_ADC_Init:
 2046              	.LFB331:
 2047              		.file 2 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @file    stm32h7xx_hal_adc.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Converter (ADC)
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Operation functions
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Control functions
  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + State functions
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ ADC state machine management
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          "stm32h7xx_hal_adc_ex.c".
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @verbatim
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   [..]
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) 16-bit, 14-bit, 12-bit, 10-bit or 8-bit configurable resolution.
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        Note: On devices STM32H72xx and STM32H73xx, these resolution are applicable to instances ADC
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        ADC3 is featuring resolutions 12-bit, 10-bit, 8-bit, 6-bit.
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       analog watchdog or overrun events.
ARM GAS  /tmp/ccp7RHPZ.s 			page 177


  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode.
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC channels selectable single/differential input.
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC offset shared on 4 offset instances.
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC calibration
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC conversion of regular group.
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       Vdda or to an external voltage reference).
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### How to use this driver #####
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Enable the ADC interface
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from AHB clock
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    or asynchronous clock derived from system clock, the PLL2 or the PLL3 running up
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_PLL2 enable:                   (optional: if asynchronous clock sel
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_PLL2;
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 178


  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ADCx_IRQHandler().
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ================================================================
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         monitored, thresholds, ...)
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Execution of ADC conversions ***
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ====================================
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         conversion accuracy
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         transfer by DMA.
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by polling:
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start()
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
ARM GAS  /tmp/ccp7RHPZ.s 			page 179


 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by interruption:
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (this function must be implemented in user program)
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (these functions must be implemented in user program)
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 destination variable address.
 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Deinitialization of ADC ***
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Disable the ADC interface
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using macro __HAL_RCC_ADCx_FORCE_RESET(), __HAL_RCC_ADCx_RELEASE_RESET().
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock disable
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_DISABLE();                  (if not used anymore)
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_CLKP restore:                      (optional)
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_CLKP;
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
ARM GAS  /tmp/ccp7RHPZ.s 			page 180


 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Deinitialize the DMA
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     *** Callback registration ***
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     =============================================
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      to register an interrupt callback.
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and a pointer to the user callback function.
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      weak function.
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and the Callback ID.
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function allows to reset following callbacks:
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
ARM GAS  /tmp/ccp7RHPZ.s 			page 181


 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      are set to the corresponding weak functions.
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @endverbatim
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @attention
 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * All rights reserved.</center></h2>
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #include "stm32h7xx_hal.h"
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC ADC
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief ADC HAL module driver
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 182


 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR_FIELDS_1  ((uint32_t)(ADC_CFGR_RES    |\
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL)) /*!< ADC_CFGR fields of 
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                   when no regular c
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC3_CFGR_FIELDS_1  ((ADC3_CFGR_RES    | ADC3_CFGR_ALIGN   |\
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL))   /*!< ADC_CFGR fields of paramete
 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                         when no regular conversion 
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR2_FIELDS  ((uint32_t)(ADC_CFGR2_ROVSE | ADC_CFGR2_OVSR  |\
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_OVSS | ADC_CFGR2_TROVS |\
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_ROVSM))                     /*!< ADC_CFGR2 fields 
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                  (neither regular n
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout values for ADC operations (enable settling time,                   */
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   disable settling time, ...).                                             */
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   Values defined to be higher than worst cases: low clock frequency,       */
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   maximum prescalers.                                                      */
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)    /*!< ADC enable time-out value  */
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)    /*!< ADC disable time-out value */
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout to wait for current conversion on going to be completed.           */
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout fixed to worst case, for 1 channel.                                */
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - maximum sampling time (830.5 adc_clk)                                  */
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC resolution (Tsar 16 bits= 16.5 adc_clk)                            */
 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC clock with prescaler 256                                           */
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*     823 * 256 = 210688 clock cycles max                                    */
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Unit: cycles of CPU clock.                                                 */
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES (210688UL)  /*!< ADC conversion completion time-out valu
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
ARM GAS  /tmp/ccp7RHPZ.s 			page 183


 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) De-initialize the ADC.
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in header of this file).
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         before HAL_ADC_Init().
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Parameters related to common ADC registers (ADC clock mode) are set
 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs are disabled.
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, these common parameters setting are
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without  disabling the other ADCs.
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 2048              		.loc 2 417 1
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 32
 2051              		@ frame_needed = 1, uses_anonymous_args = 0
 2052 0000 90B5     		push	{r4, r7, lr}
 2053              	.LCFI222:
 2054              		.cfi_def_cfa_offset 12
 2055              		.cfi_offset 4, -12
 2056              		.cfi_offset 7, -8
 2057              		.cfi_offset 14, -4
 2058 0002 89B0     		sub	sp, sp, #36
 2059              	.LCFI223:
 2060              		.cfi_def_cfa_offset 48
 2061 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 184


 2062              	.LCFI224:
 2063              		.cfi_def_cfa_register 7
 2064 0006 7860     		str	r0, [r7, #4]
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2065              		.loc 2 418 21
 2066 0008 0023     		movs	r3, #0
 2067 000a FB77     		strb	r3, [r7, #31]
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpCFGR;
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 2068              		.loc 2 421 17
 2069 000c 0023     		movs	r3, #0
 2070 000e BB60     		str	r3, [r7, #8]
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 2071              		.loc 2 426 6
 2072 0010 7B68     		ldr	r3, [r7, #4]
 2073 0012 002B     		cmp	r3, #0
 2074 0014 01D1     		bne	.L84
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 2075              		.loc 2 428 12
 2076 0016 0123     		movs	r3, #1
 2077 0018 8EE1     		b	.L85
 2078              	.L84:
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 2079              		.loc 2 445 17
 2080 001a 7B68     		ldr	r3, [r7, #4]
 2081 001c DB68     		ldr	r3, [r3, #12]
 2082              		.loc 2 445 6
 2083 001e 002B     		cmp	r3, #0
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
ARM GAS  /tmp/ccp7RHPZ.s 			page 185


 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DISCEN and CONT bits cannot be set at the same time */
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 2084              		.loc 2 461 11
 2085 0020 7B68     		ldr	r3, [r7, #4]
 2086 0022 5B6D     		ldr	r3, [r3, #84]
 2087              		.loc 2 461 6
 2088 0024 002B     		cmp	r3, #0
 2089 0026 09D1     		bne	.L87
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the ADC Callback settings */
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak 
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 2090              		.loc 2 484 5
 2091 0028 7868     		ldr	r0, [r7, #4]
 2092 002a FFF7FEFF 		bl	HAL_ADC_MspInit
 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to none */
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 2093              		.loc 2 488 5
 2094 002e 7B68     		ldr	r3, [r7, #4]
 2095 0030 0022     		movs	r2, #0
 2096 0032 9A65     		str	r2, [r3, #88]
 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize Lock */
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 2097              		.loc 2 491 16
 2098 0034 7B68     		ldr	r3, [r7, #4]
 2099 0036 0022     		movs	r2, #0
 2100 0038 83F85020 		strb	r2, [r3, #80]
 2101              	.L87:
ARM GAS  /tmp/ccp7RHPZ.s 			page 186


 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 2102              		.loc 2 495 7
 2103 003c 7B68     		ldr	r3, [r7, #4]
 2104 003e 1B68     		ldr	r3, [r3]
 2105 0040 1846     		mov	r0, r3
 2106 0042 FFF7FEFF 		bl	LL_ADC_IsDeepPowerDownEnabled
 2107 0046 0346     		mov	r3, r0
 2108              		.loc 2 495 6
 2109 0048 002B     		cmp	r3, #0
 2110 004a 04D0     		beq	.L88
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC deep power down mode */
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_DisableDeepPowerDown(hadc->Instance);
 2111              		.loc 2 498 5
 2112 004c 7B68     		ldr	r3, [r7, #4]
 2113 004e 1B68     		ldr	r3, [r3]
 2114 0050 1846     		mov	r0, r3
 2115 0052 FFF7FEFF 		bl	LL_ADC_DisableDeepPowerDown
 2116              	.L88:
 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* System was in deep power down mode, calibration must
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      be relaunched or a previously saved calibration factor
 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      re-applied once the ADC voltage regulator is enabled */
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2117              		.loc 2 505 7
 2118 0056 7B68     		ldr	r3, [r7, #4]
 2119 0058 1B68     		ldr	r3, [r3]
 2120 005a 1846     		mov	r0, r3
 2121 005c FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2122 0060 0346     		mov	r3, r0
 2123              		.loc 2 505 6
 2124 0062 002B     		cmp	r3, #0
 2125 0064 14D1     		bne	.L89
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 2126              		.loc 2 508 5
 2127 0066 7B68     		ldr	r3, [r7, #4]
 2128 0068 1B68     		ldr	r3, [r3]
 2129 006a 1846     		mov	r0, r3
 2130 006c FFF7FEFF 		bl	LL_ADC_EnableInternalRegulator
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL
 2131              		.loc 2 513 89
 2132 0070 9A4B     		ldr	r3, .L112
 2133 0072 1B68     		ldr	r3, [r3]
 2134 0074 9B09     		lsrs	r3, r3, #6
 2135 0076 9A4A     		ldr	r2, .L112+4
 2136 0078 A2FB0323 		umull	r2, r3, r2, r3
ARM GAS  /tmp/ccp7RHPZ.s 			page 187


 2137 007c 9B09     		lsrs	r3, r3, #6
 2138              		.loc 2 513 69
 2139 007e 0133     		adds	r3, r3, #1
 2140              		.loc 2 513 21
 2141 0080 BB60     		str	r3, [r7, #8]
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2142              		.loc 2 514 11
 2143 0082 02E0     		b	.L90
 2144              	.L91:
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       wait_loop_index--;
 2145              		.loc 2 516 22
 2146 0084 BB68     		ldr	r3, [r7, #8]
 2147 0086 013B     		subs	r3, r3, #1
 2148 0088 BB60     		str	r3, [r7, #8]
 2149              	.L90:
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2150              		.loc 2 514 28
 2151 008a BB68     		ldr	r3, [r7, #8]
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2152              		.loc 2 514 11
 2153 008c 002B     		cmp	r3, #0
 2154 008e F9D1     		bne	.L91
 2155              	.L89:
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2156              		.loc 2 523 7
 2157 0090 7B68     		ldr	r3, [r7, #4]
 2158 0092 1B68     		ldr	r3, [r3]
 2159 0094 1846     		mov	r0, r3
 2160 0096 FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2161 009a 0346     		mov	r3, r0
 2162              		.loc 2 523 6
 2163 009c 002B     		cmp	r3, #0
 2164 009e 0DD1     		bne	.L92
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2165              		.loc 2 526 5
 2166 00a0 7B68     		ldr	r3, [r7, #4]
 2167 00a2 5B6D     		ldr	r3, [r3, #84]
 2168 00a4 43F01002 		orr	r2, r3, #16
 2169 00a8 7B68     		ldr	r3, [r7, #4]
 2170 00aa 5A65     		str	r2, [r3, #84]
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2171              		.loc 2 529 5
 2172 00ac 7B68     		ldr	r3, [r7, #4]
 2173 00ae 9B6D     		ldr	r3, [r3, #88]
 2174 00b0 43F00102 		orr	r2, r3, #1
 2175 00b4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 188


 2176 00b6 9A65     		str	r2, [r3, #88]
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2177              		.loc 2 531 20
 2178 00b8 0123     		movs	r3, #1
 2179 00ba FB77     		strb	r3, [r7, #31]
 2180              	.L92:
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2181              		.loc 2 538 40
 2182 00bc 7B68     		ldr	r3, [r7, #4]
 2183 00be 1B68     		ldr	r3, [r3]
 2184 00c0 1846     		mov	r0, r3
 2185 00c2 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2186 00c6 7861     		str	r0, [r7, #20]
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 2187              		.loc 2 540 13
 2188 00c8 7B68     		ldr	r3, [r7, #4]
 2189 00ca 5B6D     		ldr	r3, [r3, #84]
 2190              		.loc 2 540 21
 2191 00cc 03F01003 		and	r3, r3, #16
 2192              		.loc 2 540 6
 2193 00d0 002B     		cmp	r3, #0
 2194 00d2 40F02881 		bne	.L93
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 2195              		.loc 2 541 7
 2196 00d6 7B69     		ldr	r3, [r7, #20]
 2197 00d8 002B     		cmp	r3, #0
 2198 00da 40F02481 		bne	.L93
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 2199              		.loc 2 545 5
 2200 00de 7B68     		ldr	r3, [r7, #4]
 2201 00e0 5B6D     		ldr	r3, [r3, #84]
 2202 00e2 23F48173 		bic	r3, r3, #258
 2203 00e6 43F00202 		orr	r2, r3, #2
 2204 00ea 7B68     		ldr	r3, [r7, #4]
 2205 00ec 5A65     		str	r2, [r3, #84]
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - clock configuration                                                 */
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 2206              		.loc 2 554 9
 2207 00ee 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 189


 2208 00f0 1B68     		ldr	r3, [r3]
 2209 00f2 1846     		mov	r0, r3
 2210 00f4 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2211 00f8 0346     		mov	r3, r0
 2212              		.loc 2 554 8
 2213 00fa 002B     		cmp	r3, #0
 2214 00fc 36D1     		bne	.L94
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 2215              		.loc 2 556 11
 2216 00fe 7B68     		ldr	r3, [r7, #4]
 2217 0100 1B68     		ldr	r3, [r3]
 2218              		.loc 2 556 93
 2219 0102 784A     		ldr	r2, .L112+8
 2220 0104 9342     		cmp	r3, r2
 2221 0106 04D0     		beq	.L95
 2222              		.loc 2 556 11 discriminator 2
 2223 0108 7B68     		ldr	r3, [r7, #4]
 2224 010a 1B68     		ldr	r3, [r3]
 2225 010c 764A     		ldr	r2, .L112+12
 2226 010e 9342     		cmp	r3, r2
 2227 0110 0ED1     		bne	.L96
 2228              	.L95:
 2229              		.loc 2 556 11 is_stmt 0 discriminator 3
 2230 0112 7448     		ldr	r0, .L112+8
 2231 0114 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2232 0118 0446     		mov	r4, r0
 2233 011a 7348     		ldr	r0, .L112+12
 2234 011c FFF7FEFF 		bl	LL_ADC_IsEnabled
 2235 0120 0346     		mov	r3, r0
 2236 0122 2343     		orrs	r3, r3, r4
 2237              		.loc 2 556 93 is_stmt 1 discriminator 3
 2238 0124 002B     		cmp	r3, #0
 2239 0126 0CBF     		ite	eq
 2240 0128 0123     		moveq	r3, #1
 2241 012a 0023     		movne	r3, #0
 2242 012c DBB2     		uxtb	r3, r3
 2243 012e 08E0     		b	.L97
 2244              	.L96:
 2245              		.loc 2 556 11 discriminator 4
 2246 0130 6E48     		ldr	r0, .L112+16
 2247 0132 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2248 0136 0346     		mov	r3, r0
 2249              		.loc 2 556 93 discriminator 4
 2250 0138 002B     		cmp	r3, #0
 2251 013a 0CBF     		ite	eq
 2252 013c 0123     		moveq	r3, #1
 2253 013e 0023     		movne	r3, #0
 2254 0140 DBB2     		uxtb	r3, r3
 2255              	.L97:
 2256              		.loc 2 556 10 discriminator 6
 2257 0142 002B     		cmp	r3, #0
 2258 0144 12D0     		beq	.L94
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset configuration of ADC common register CCR:                      */
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - ADC clock mode and ACC prescaler (CKMODE and PRESC bits)are set  */
ARM GAS  /tmp/ccp7RHPZ.s 			page 190


 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     according to adc->Init.ClockPrescaler. It selects the clock      */
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*    source and sets the clock division factor.                        */
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Some parameters of this register are not reset, since they are set   */
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* by other functions and must be kept in case of usage of this         */
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* without needing to reconfigure all other ADC groups/channels         */
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* parameters):                                                         */
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - when multimode feature is available, multimode-related           */
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     (set into HAL_ADC_ConfigChannel() or                             */
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 2259              		.loc 2 575 31
 2260 0146 7B68     		ldr	r3, [r7, #4]
 2261 0148 1B68     		ldr	r3, [r3]
 2262              		.loc 2 575 9
 2263 014a 664A     		ldr	r2, .L112+8
 2264 014c 9342     		cmp	r3, r2
 2265 014e 04D0     		beq	.L98
 2266              		.loc 2 575 31 discriminator 2
 2267 0150 7B68     		ldr	r3, [r7, #4]
 2268 0152 1B68     		ldr	r3, [r3]
 2269 0154 644A     		ldr	r2, .L112+12
 2270 0156 9342     		cmp	r3, r2
 2271 0158 01D1     		bne	.L99
 2272              	.L98:
 2273              		.loc 2 575 9 discriminator 3
 2274 015a 654A     		ldr	r2, .L112+20
 2275 015c 00E0     		b	.L100
 2276              	.L99:
 2277              		.loc 2 575 9 is_stmt 0 discriminator 4
 2278 015e 654A     		ldr	r2, .L112+24
 2279              	.L100:
 2280              		.loc 2 575 9 discriminator 6
 2281 0160 7B68     		ldr	r3, [r7, #4]
 2282 0162 5B68     		ldr	r3, [r3, #4]
 2283 0164 1946     		mov	r1, r3
 2284 0166 1046     		mov	r0, r2
 2285 0168 FFF7FEFF 		bl	LL_ADC_SetCommonClock
 2286              	.L94:
 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - resolution                               Init.Resolution            */
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger to start conversion     Init.ExternalTrigConv      */
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - continuous conversion mode               Init.ContinuousConvMode    */
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - overrun                                  Init.Overrun               */
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode                       Init.DiscontinuousConvMode */
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3)
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
ARM GAS  /tmp/ccp7RHPZ.s 			page 191


 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Overrun                                                    |
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Resolution                                                 |
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #elif defined(ADC_VER_V5_V90)
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.DataAlign                                                   |
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_C
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 2287              		.loc 2 613 10 is_stmt 1
 2288 016c FFF7FEFF 		bl	HAL_GetREVID
 2289 0170 0346     		mov	r3, r0
 2290              		.loc 2 613 8
 2291 0172 41F20302 		movw	r2, #4099
 2292 0176 9342     		cmp	r3, r2
 2293 0178 14D9     		bls	.L101
 2294              		.loc 2 613 72 discriminator 1
 2295 017a 7B68     		ldr	r3, [r7, #4]
 2296 017c 9B68     		ldr	r3, [r3, #8]
 2297              		.loc 2 613 37 discriminator 1
 2298 017e 102B     		cmp	r3, #16
 2299 0180 10D1     		bne	.L101
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 2300              		.loc 2 616 19
 2301 0182 7B68     		ldr	r3, [r7, #4]
 2302 0184 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2303 0186 5A03     		lsls	r2, r3, #13
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2304              		.loc 2 617 29
 2305 0188 7B68     		ldr	r3, [r7, #4]
 2306 018a 1B6B     		ldr	r3, [r3, #48]
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2307              		.loc 2 616 89
 2308 018c 1A43     		orrs	r2, r2, r3
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 2309              		.loc 2 618 29
 2310 018e 7B68     		ldr	r3, [r7, #4]
 2311 0190 9B68     		ldr	r3, [r3, #8]
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2312              		.loc 2 617 89
ARM GAS  /tmp/ccp7RHPZ.s 			page 192


 2313 0192 1A43     		orrs	r2, r2, r3
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 2314              		.loc 2 619 19
 2315 0194 7B68     		ldr	r3, [r7, #4]
 2316 0196 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2317 0198 1B04     		lsls	r3, r3, #16
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 2318              		.loc 2 618 92
 2319 019a 1343     		orrs	r3, r3, r2
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2320              		.loc 2 616 16
 2321 019c 43F00C03 		orr	r3, r3, #12
 2322 01a0 BB61     		str	r3, [r7, #24]
 2323 01a2 0DE0     		b	.L102
 2324              	.L101:
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 2325              		.loc 2 624 19
 2326 01a4 7B68     		ldr	r3, [r7, #4]
 2327 01a6 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2328 01a8 5A03     		lsls	r2, r3, #13
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2329              		.loc 2 625 29
 2330 01aa 7B68     		ldr	r3, [r7, #4]
 2331 01ac 1B6B     		ldr	r3, [r3, #48]
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2332              		.loc 2 624 89
 2333 01ae 1A43     		orrs	r2, r2, r3
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 2334              		.loc 2 626 29
 2335 01b0 7B68     		ldr	r3, [r7, #4]
 2336 01b2 9B68     		ldr	r3, [r3, #8]
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2337              		.loc 2 625 89
 2338 01b4 1A43     		orrs	r2, r2, r3
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 2339              		.loc 2 627 19
 2340 01b6 7B68     		ldr	r3, [r7, #4]
 2341 01b8 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2342 01ba 1B04     		lsls	r3, r3, #16
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 2343              		.loc 2 624 16
 2344 01bc 1343     		orrs	r3, r3, r2
 2345 01be BB61     		str	r3, [r7, #24]
 2346              	.L102:
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 2347              		.loc 2 632 19
 2348 01c0 7B68     		ldr	r3, [r7, #4]
 2349 01c2 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2350              		.loc 2 632 8
ARM GAS  /tmp/ccp7RHPZ.s 			page 193


 2351 01c4 012B     		cmp	r3, #1
 2352 01c6 06D1     		bne	.L103
 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 2353              		.loc 2 634 18
 2354 01c8 7B68     		ldr	r3, [r7, #4]
 2355 01ca 1B6A     		ldr	r3, [r3, #32]
 2356 01cc 013B     		subs	r3, r3, #1
 2357 01ce 5B04     		lsls	r3, r3, #17
 2358              		.loc 2 634 15
 2359 01d0 BA69     		ldr	r2, [r7, #24]
 2360 01d2 1343     		orrs	r3, r3, r2
 2361 01d4 BB61     		str	r3, [r7, #24]
 2362              	.L103:
 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* start.                                                                 */
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       software start.                                                  */
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 2363              		.loc 2 642 19
 2364 01d6 7B68     		ldr	r3, [r7, #4]
 2365 01d8 5B6A     		ldr	r3, [r3, #36]
 2366              		.loc 2 642 8
 2367 01da 002B     		cmp	r3, #0
 2368 01dc 09D0     		beq	.L104
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 2369              		.loc 2 644 30
 2370 01de 7B68     		ldr	r3, [r7, #4]
 2371 01e0 5B6A     		ldr	r3, [r3, #36]
 2372              		.loc 2 644 48
 2373 01e2 03F47872 		and	r2, r3, #992
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2374              		.loc 2 645 31
 2375 01e6 7B68     		ldr	r3, [r7, #4]
 2376 01e8 9B6A     		ldr	r3, [r3, #40]
 2377              		.loc 2 645 19
 2378 01ea 1343     		orrs	r3, r3, r2
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2379              		.loc 2 644 15
 2380 01ec BA69     		ldr	r2, [r7, #24]
 2381 01ee 1343     		orrs	r3, r3, r2
 2382 01f0 BB61     		str	r3, [r7, #24]
 2383              	.L104:
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                  );
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of sampling mode */
ARM GAS  /tmp/ccp7RHPZ.s 			page 194


 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMo
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update Configuration Register CFGR */
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 2384              		.loc 2 665 5
 2385 01f2 7B68     		ldr	r3, [r7, #4]
 2386 01f4 1B68     		ldr	r3, [r3]
 2387 01f6 DA68     		ldr	r2, [r3, #12]
 2388 01f8 3F4B     		ldr	r3, .L112+28
 2389 01fa 1340     		ands	r3, r3, r2
 2390 01fc 7A68     		ldr	r2, [r7, #4]
 2391 01fe 1268     		ldr	r2, [r2]
 2392 0200 B969     		ldr	r1, [r7, #24]
 2393 0202 0B43     		orrs	r3, r3, r1
 2394 0204 D360     		str	r3, [r2, #12]
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular and injected groups:                    */
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Conversion data management      Init.ConversionDataManagement       */
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Oversampling parameters         Init.Oversampling                   */
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2395              		.loc 2 674 46
 2396 0206 7B68     		ldr	r3, [r7, #4]
 2397 0208 1B68     		ldr	r3, [r3]
 2398 020a 1846     		mov	r0, r3
 2399 020c FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2400 0210 3861     		str	r0, [r7, #16]
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2401              		.loc 2 675 47
 2402 0212 7B68     		ldr	r3, [r7, #4]
 2403 0214 1B68     		ldr	r3, [r3]
 2404 0216 1846     		mov	r0, r3
 2405 0218 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2406 021c F860     		str	r0, [r7, #12]
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2407              		.loc 2 676 8
 2408 021e 3B69     		ldr	r3, [r7, #16]
 2409 0220 002B     		cmp	r3, #0
 2410 0222 4AD1     		bne	.L105
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 2411              		.loc 2 677 9
 2412 0224 FB68     		ldr	r3, [r7, #12]
 2413 0226 002B     		cmp	r3, #0
 2414 0228 47D1     		bne	.L105
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
ARM GAS  /tmp/ccp7RHPZ.s 			page 195


 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR = (
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2415              		.loc 2 695 19
 2416 022a 7B68     		ldr	r3, [r7, #4]
 2417 022c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2418 022e 9A03     		lsls	r2, r3, #14
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 2419              		.loc 2 696 19
 2420 0230 7B68     		ldr	r3, [r7, #4]
 2421 0232 DB6A     		ldr	r3, [r3, #44]
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2422              		.loc 2 694 15
 2423 0234 1343     		orrs	r3, r3, r2
 2424 0236 BB61     		str	r3, [r7, #24]
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 2425              		.loc 2 699 7
 2426 0238 7B68     		ldr	r3, [r7, #4]
 2427 023a 1B68     		ldr	r3, [r3]
 2428 023c DA68     		ldr	r2, [r3, #12]
 2429 023e 2F4B     		ldr	r3, .L112+32
 2430 0240 1340     		ands	r3, r3, r2
 2431 0242 7A68     		ldr	r2, [r7, #4]
 2432 0244 1268     		ldr	r2, [r2]
 2433 0246 B969     		ldr	r1, [r7, #24]
 2434 0248 0B43     		orrs	r3, r3, r1
 2435 024a D360     		str	r3, [r2, #12]
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 2436              		.loc 2 701 21
 2437 024c 7B68     		ldr	r3, [r7, #4]
 2438 024e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2439              		.loc 2 701 10
 2440 0252 012B     		cmp	r3, #1
 2441 0254 1BD1     		bne	.L106
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO_ADC3(hadc->Init.Oversampling.Ratio));
 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
ARM GAS  /tmp/ccp7RHPZ.s 			page 196


 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 2442              		.loc 2 719 24
 2443 0256 7B68     		ldr	r3, [r7, #4]
 2444 0258 5B6A     		ldr	r3, [r3, #36]
 2445              		.loc 2 719 12
 2446 025a 002B     		cmp	r3, #0
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Multi trigger is not applicable to software-triggered conversions */
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER))
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                      */
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                              */
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                 */
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                  */
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                           */
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2,
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSR  |
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSS  |
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_TROVS |
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSM,
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.Ratio         |
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset
 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     );
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                       */
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                               */
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                  */
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Left bit shift                                                   */
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                   */
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                            */
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ((hadc->Init.Oversampling.Ratio - 1UL)  << ADC_CFGR2_OVSR_Pos) |
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset);
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
ARM GAS  /tmp/ccp7RHPZ.s 			page 197


 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of Oversampler:                                       */
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling Ratio                                               */
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Right bit shift                                                  */
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Left bit shift                                                   */
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Triggered mode                                                   */
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling mode (continued/resumed)                            */
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 2447              		.loc 2 769 9
 2448 025c 7B68     		ldr	r3, [r7, #4]
 2449 025e 1B68     		ldr	r3, [r3]
 2450 0260 1A69     		ldr	r2, [r3, #16]
 2451 0262 274B     		ldr	r3, .L112+36
 2452 0264 1340     		ands	r3, r3, r2
 2453 0266 7A68     		ldr	r2, [r7, #4]
 2454 0268 D26B     		ldr	r2, [r2, #60]
 2455 026a 013A     		subs	r2, r2, #1
 2456 026c 1104     		lsls	r1, r2, #16
 2457 026e 7A68     		ldr	r2, [r7, #4]
 2458 0270 126C     		ldr	r2, [r2, #64]
 2459 0272 1143     		orrs	r1, r1, r2
 2460 0274 7A68     		ldr	r2, [r7, #4]
 2461 0276 526C     		ldr	r2, [r2, #68]
 2462 0278 1143     		orrs	r1, r1, r2
 2463 027a 7A68     		ldr	r2, [r7, #4]
 2464 027c 926C     		ldr	r2, [r2, #72]
 2465 027e 0A43     		orrs	r2, r2, r1
 2466 0280 1A43     		orrs	r2, r2, r3
 2467 0282 7B68     		ldr	r3, [r7, #4]
 2468 0284 1B68     		ldr	r3, [r3]
 2469 0286 42F00102 		orr	r2, r2, #1
 2470 028a 1A61     		str	r2, [r3, #16]
 2471 028c 07E0     		b	.L108
 2472              	.L106:
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC_CFGR2_ROVSE                       |
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ((hadc->Init.Oversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) |
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.OversamplingStopReset);
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Disable ADC oversampling scope on ADC group regular */
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 2473              		.loc 2 781 9
 2474 028e 7B68     		ldr	r3, [r7, #4]
 2475 0290 1B68     		ldr	r3, [r3]
 2476 0292 1A69     		ldr	r2, [r3, #16]
 2477 0294 7B68     		ldr	r3, [r7, #4]
 2478 0296 1B68     		ldr	r3, [r3]
 2479 0298 22F00102 		bic	r2, r2, #1
 2480 029c 1A61     		str	r2, [r3, #16]
 2481              	.L108:
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the LeftShift parameter: it is applied to the final result with or without oversamplin
ARM GAS  /tmp/ccp7RHPZ.s 			page 198


 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 2482              		.loc 2 785 7
 2483 029e 7B68     		ldr	r3, [r7, #4]
 2484 02a0 1B68     		ldr	r3, [r3]
 2485 02a2 1B69     		ldr	r3, [r3, #16]
 2486 02a4 23F07041 		bic	r1, r3, #-268435456
 2487 02a8 7B68     		ldr	r3, [r7, #4]
 2488 02aa 5A6B     		ldr	r2, [r3, #52]
 2489 02ac 7B68     		ldr	r3, [r7, #4]
 2490 02ae 1B68     		ldr	r3, [r3]
 2491 02b0 0A43     		orrs	r2, r2, r1
 2492 02b2 1A61     		str	r2, [r3, #16]
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance != ADC3)
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure the BOOST Mode */
 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_ConfigureBoostMode(hadc);
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the BOOST Mode */
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_ConfigureBoostMode(hadc);
 2493              		.loc 2 794 7
 2494 02b4 7868     		ldr	r0, [r7, #4]
 2495 02b6 FFF7FEFF 		bl	ADC_ConfigureBoostMode
 2496              	.L105:
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 2497              		.loc 2 807 19
 2498 02ba 7B68     		ldr	r3, [r7, #4]
 2499 02bc DB68     		ldr	r3, [r3, #12]
 2500              		.loc 2 807 8
 2501 02be 012B     		cmp	r3, #1
 2502 02c0 20D1     		bne	.L109
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set number of ranks in regular group sequencer */
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 2503              		.loc 2 810 7
 2504 02c2 7B68     		ldr	r3, [r7, #4]
 2505 02c4 1B68     		ldr	r3, [r3]
 2506 02c6 1B6B     		ldr	r3, [r3, #48]
 2507 02c8 23F00F01 		bic	r1, r3, #15
 2508 02cc 7B68     		ldr	r3, [r7, #4]
 2509 02ce 9B69     		ldr	r3, [r3, #24]
 2510 02d0 5A1E     		subs	r2, r3, #1
 2511 02d2 7B68     		ldr	r3, [r7, #4]
 2512 02d4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 199


 2513 02d6 0A43     		orrs	r2, r2, r1
 2514 02d8 1A63     		str	r2, [r3, #48]
 2515 02da 1BE0     		b	.L110
 2516              	.L113:
 2517              		.align	2
 2518              	.L112:
 2519 02dc 00000000 		.word	SystemCoreClock
 2520 02e0 632D3E05 		.word	87960931
 2521 02e4 00200240 		.word	1073881088
 2522 02e8 00210240 		.word	1073881344
 2523 02ec 00600258 		.word	1476550656
 2524 02f0 00230240 		.word	1073881856
 2525 02f4 00630258 		.word	1476551424
 2526 02f8 03C0F0FF 		.word	-999421
 2527 02fc FCBFFFFF 		.word	-16388
 2528 0300 1EF800FC 		.word	-67045346
 2529              	.L109:
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 2530              		.loc 2 814 7
 2531 0304 7B68     		ldr	r3, [r7, #4]
 2532 0306 1B68     		ldr	r3, [r3]
 2533 0308 1A6B     		ldr	r2, [r3, #48]
 2534 030a 7B68     		ldr	r3, [r7, #4]
 2535 030c 1B68     		ldr	r3, [r3]
 2536 030e 22F00F02 		bic	r2, r2, #15
 2537 0312 1A63     		str	r2, [r3, #48]
 2538              	.L110:
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize the ADC state */
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 2539              		.loc 2 819 5
 2540 0314 7B68     		ldr	r3, [r7, #4]
 2541 0316 5B6D     		ldr	r3, [r3, #84]
 2542 0318 23F00303 		bic	r3, r3, #3
 2543 031c 43F00102 		orr	r2, r3, #1
 2544 0320 7B68     		ldr	r3, [r7, #4]
 2545 0322 5A65     		str	r2, [r3, #84]
 2546 0324 07E0     		b	.L111
 2547              	.L93:
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2548              		.loc 2 824 5
 2549 0326 7B68     		ldr	r3, [r7, #4]
 2550 0328 5B6D     		ldr	r3, [r3, #84]
 2551 032a 43F01002 		orr	r2, r3, #16
 2552 032e 7B68     		ldr	r3, [r7, #4]
 2553 0330 5A65     		str	r2, [r3, #84]
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
ARM GAS  /tmp/ccp7RHPZ.s 			page 200


 2554              		.loc 2 826 20
 2555 0332 0123     		movs	r3, #1
 2556 0334 FB77     		strb	r3, [r7, #31]
 2557              	.L111:
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 2558              		.loc 2 830 10
 2559 0336 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2560              	.L85:
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 2561              		.loc 2 831 1
 2562 0338 1846     		mov	r0, r3
 2563 033a 2437     		adds	r7, r7, #36
 2564              	.LCFI225:
 2565              		.cfi_def_cfa_offset 12
 2566 033c BD46     		mov	sp, r7
 2567              	.LCFI226:
 2568              		.cfi_def_cfa_register 13
 2569              		@ sp needed
 2570 033e 90BD     		pop	{r4, r7, pc}
 2571              		.cfi_endproc
 2572              	.LFE331:
 2574              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2575              		.align	1
 2576              		.global	HAL_ADC_DeInit
 2577              		.syntax unified
 2578              		.thumb
 2579              		.thumb_func
 2580              		.fpu fpv5-d16
 2582              	HAL_ADC_DeInit:
 2583              	.LFB332:
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         common group is still running.
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 2584              		.loc 2 852 1
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccp7RHPZ.s 			page 201


 2587              		@ frame_needed = 1, uses_anonymous_args = 0
 2588 0000 90B5     		push	{r4, r7, lr}
 2589              	.LCFI227:
 2590              		.cfi_def_cfa_offset 12
 2591              		.cfi_offset 4, -12
 2592              		.cfi_offset 7, -8
 2593              		.cfi_offset 14, -4
 2594 0002 85B0     		sub	sp, sp, #20
 2595              	.LCFI228:
 2596              		.cfi_def_cfa_offset 32
 2597 0004 00AF     		add	r7, sp, #0
 2598              	.LCFI229:
 2599              		.cfi_def_cfa_register 7
 2600 0006 7860     		str	r0, [r7, #4]
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 2601              		.loc 2 856 6
 2602 0008 7B68     		ldr	r3, [r7, #4]
 2603 000a 002B     		cmp	r3, #0
 2604 000c 01D1     		bne	.L115
 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 2605              		.loc 2 858 12
 2606 000e 0123     		movs	r3, #1
 2607 0010 6EE1     		b	.L116
 2608              	.L115:
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 2609              		.loc 2 865 3
 2610 0012 7B68     		ldr	r3, [r7, #4]
 2611 0014 5B6D     		ldr	r3, [r3, #84]
 2612 0016 43F00202 		orr	r2, r3, #2
 2613 001a 7B68     		ldr	r3, [r7, #4]
 2614 001c 5A65     		str	r2, [r3, #84]
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Stop potential conversion on going */
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 2615              		.loc 2 868 20
 2616 001e 0321     		movs	r1, #3
 2617 0020 7868     		ldr	r0, [r7, #4]
 2618 0022 FFF7FEFF 		bl	ADC_ConversionStop
 2619 0026 0346     		mov	r3, r0
 2620 0028 FB73     		strb	r3, [r7, #15]
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped            */
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Flush register JSQR: reset the queue sequencer when injected             */
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* queue sequencer is enabled and ADC disabled.                             */
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* The software and hardware triggers of the injected sequence are both     */
 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* internally disabled just after the completion of the last valid          */
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* injected sequence.                                                       */
ARM GAS  /tmp/ccp7RHPZ.s 			page 202


 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 2621              		.loc 2 876 3
 2622 002a 7B68     		ldr	r3, [r7, #4]
 2623 002c 1B68     		ldr	r3, [r3]
 2624 002e DA68     		ldr	r2, [r3, #12]
 2625 0030 7B68     		ldr	r3, [r7, #4]
 2626 0032 1B68     		ldr	r3, [r3]
 2627 0034 42F40012 		orr	r2, r2, #2097152
 2628 0038 DA60     		str	r2, [r3, #12]
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2629              		.loc 2 879 6
 2630 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2631 003c 002B     		cmp	r3, #0
 2632 003e 0AD1     		bne	.L117
 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the ADC peripheral */
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 2633              		.loc 2 882 22
 2634 0040 7868     		ldr	r0, [r7, #4]
 2635 0042 FFF7FEFF 		bl	ADC_Disable
 2636 0046 0346     		mov	r3, r0
 2637 0048 FB73     		strb	r3, [r7, #15]
 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 2638              		.loc 2 885 8
 2639 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2640 004c 002B     		cmp	r3, #0
 2641 004e 02D1     		bne	.L117
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state */
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 2642              		.loc 2 888 19
 2643 0050 7B68     		ldr	r3, [r7, #4]
 2644 0052 0122     		movs	r2, #1
 2645 0054 5A65     		str	r2, [r3, #84]
 2646              	.L117:
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register IER */
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 2647              		.loc 2 900 3
 2648 0056 7B68     		ldr	r3, [r7, #4]
 2649 0058 1B68     		ldr	r3, [r3]
 2650 005a 5968     		ldr	r1, [r3, #4]
 2651 005c 7B68     		ldr	r3, [r7, #4]
 2652 005e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 203


 2653 0060 8C4B     		ldr	r3, .L128
 2654 0062 0B40     		ands	r3, r3, r1
 2655 0064 5360     		str	r3, [r2, #4]
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JEOS  | ADC_IT_JEOC |
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register ISR */
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 2656              		.loc 2 907 3
 2657 0066 7B68     		ldr	r3, [r7, #4]
 2658 0068 1B68     		ldr	r3, [r3]
 2659 006a 40F2FF72 		movw	r2, #2047
 2660 006e 1A60     		str	r2, [r3]
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CR */
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      no direct reset applicable.
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Update CR register to reset value where doable by software */
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 2661              		.loc 2 918 3
 2662 0070 7B68     		ldr	r3, [r7, #4]
 2663 0072 1B68     		ldr	r3, [r3]
 2664 0074 9A68     		ldr	r2, [r3, #8]
 2665 0076 7B68     		ldr	r3, [r7, #4]
 2666 0078 1B68     		ldr	r3, [r3]
 2667 007a 22F0A042 		bic	r2, r2, #1342177280
 2668 007e 9A60     		str	r2, [r3, #8]
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 2669              		.loc 2 919 3
 2670 0080 7B68     		ldr	r3, [r7, #4]
 2671 0082 1B68     		ldr	r3, [r3]
 2672 0084 9A68     		ldr	r2, [r3, #8]
 2673 0086 7B68     		ldr	r3, [r7, #4]
 2674 0088 1B68     		ldr	r3, [r3]
 2675 008a 42F00052 		orr	r2, r2, #536870912
 2676 008e 9A60     		str	r2, [r3, #8]
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR */
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 2677              		.loc 2 922 3
 2678 0090 7B68     		ldr	r3, [r7, #4]
 2679 0092 1B68     		ldr	r3, [r3]
 2680 0094 DA68     		ldr	r2, [r3, #12]
 2681 0096 7B68     		ldr	r3, [r7, #4]
 2682 0098 1B68     		ldr	r3, [r3]
 2683 009a 02F08022 		and	r2, r2, #-2147450880
 2684 009e DA60     		str	r2, [r3, #12]
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
ARM GAS  /tmp/ccp7RHPZ.s 			page 204


 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_RES     | ADC_CFGR_DMNGT);
 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 2685              		.loc 2 928 3
 2686 00a0 7B68     		ldr	r3, [r7, #4]
 2687 00a2 1B68     		ldr	r3, [r3]
 2688 00a4 DA68     		ldr	r2, [r3, #12]
 2689 00a6 7B68     		ldr	r3, [r7, #4]
 2690 00a8 1B68     		ldr	r3, [r3]
 2691 00aa 42F00042 		orr	r2, r2, #-2147483648
 2692 00ae DA60     		str	r2, [r3, #12]
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR2 */
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 2693              		.loc 2 931 3
 2694 00b0 7B68     		ldr	r3, [r7, #4]
 2695 00b2 1B68     		ldr	r3, [r3]
 2696 00b4 1969     		ldr	r1, [r3, #16]
 2697 00b6 7B68     		ldr	r3, [r7, #4]
 2698 00b8 1A68     		ldr	r2, [r3]
 2699 00ba 774B     		ldr	r3, .L128+4
 2700 00bc 0B40     		ands	r3, r3, r1
 2701 00be 1361     		str	r3, [r2, #16]
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR1 */
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 2702              		.loc 2 935 3
 2703 00c0 7B68     		ldr	r3, [r7, #4]
 2704 00c2 1B68     		ldr	r3, [r3]
 2705 00c4 5A69     		ldr	r2, [r3, #20]
 2706 00c6 7B68     		ldr	r3, [r7, #4]
 2707 00c8 1B68     		ldr	r3, [r3]
 2708 00ca 02F04042 		and	r2, r2, #-1073741824
 2709 00ce 5A61     		str	r2, [r3, #20]
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR2 */
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 2710              		.loc 2 938 3
 2711 00d0 7B68     		ldr	r3, [r7, #4]
 2712 00d2 1B68     		ldr	r3, [r3]
 2713 00d4 9A69     		ldr	r2, [r3, #24]
 2714 00d6 7B68     		ldr	r3, [r7, #4]
 2715 00d8 1B68     		ldr	r3, [r3]
 2716 00da 02F07842 		and	r2, r2, #-134217728
 2717 00de 9A61     		str	r2, [r3, #24]
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR1 and HTR1 */
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC3_TR1_HT1 | ADC3_TR1_LT1);
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC3_TR2_HT2 | ADC3_TR2_LT2);
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
ARM GAS  /tmp/ccp7RHPZ.s 			page 205


 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->RES1_TR3, ADC3_TR3_HT3 | ADC3_TR3_LT3);
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC_LTR_LT);
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC_HTR_HT);
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR2 and HTR2*/
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_LTR_LT);
 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_HTR_HT);
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR1 and HTR1 */
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 2718              		.loc 2 967 3
 2719 00e0 7B68     		ldr	r3, [r7, #4]
 2720 00e2 1B68     		ldr	r3, [r3]
 2721 00e4 1A6A     		ldr	r2, [r3, #32]
 2722 00e6 7B68     		ldr	r3, [r7, #4]
 2723 00e8 1B68     		ldr	r3, [r3]
 2724 00ea 02F07C42 		and	r2, r2, #-67108864
 2725 00ee 1A62     		str	r2, [r3, #32]
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 2726              		.loc 2 968 3
 2727 00f0 7B68     		ldr	r3, [r7, #4]
 2728 00f2 1B68     		ldr	r3, [r3]
 2729 00f4 5A6A     		ldr	r2, [r3, #36]
 2730 00f6 7B68     		ldr	r3, [r7, #4]
 2731 00f8 1B68     		ldr	r3, [r3]
 2732 00fa 02F07C42 		and	r2, r2, #-67108864
 2733 00fe 5A62     		str	r2, [r3, #36]
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR2 and HTR2*/
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 2734              		.loc 2 971 3
 2735 0100 7B68     		ldr	r3, [r7, #4]
 2736 0102 1B68     		ldr	r3, [r3]
 2737 0104 D3F8B020 		ldr	r2, [r3, #176]
 2738 0108 7B68     		ldr	r3, [r7, #4]
 2739 010a 1B68     		ldr	r3, [r3]
 2740 010c 02F07C42 		and	r2, r2, #-67108864
 2741 0110 C3F8B020 		str	r2, [r3, #176]
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 2742              		.loc 2 972 3
 2743 0114 7B68     		ldr	r3, [r7, #4]
 2744 0116 1B68     		ldr	r3, [r3]
 2745 0118 D3F8B420 		ldr	r2, [r3, #180]
 2746 011c 7B68     		ldr	r3, [r7, #4]
 2747 011e 1B68     		ldr	r3, [r3]
 2748 0120 02F07C42 		and	r2, r2, #-67108864
 2749 0124 C3F8B420 		str	r2, [r3, #180]
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR3 and HTR3 */
ARM GAS  /tmp/ccp7RHPZ.s 			page 206


 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 2750              		.loc 2 975 3
 2751 0128 7B68     		ldr	r3, [r7, #4]
 2752 012a 1B68     		ldr	r3, [r3]
 2753 012c D3F8B820 		ldr	r2, [r3, #184]
 2754 0130 7B68     		ldr	r3, [r7, #4]
 2755 0132 1B68     		ldr	r3, [r3]
 2756 0134 02F07C42 		and	r2, r2, #-67108864
 2757 0138 C3F8B820 		str	r2, [r3, #184]
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 2758              		.loc 2 976 3
 2759 013c 7B68     		ldr	r3, [r7, #4]
 2760 013e 1B68     		ldr	r3, [r3]
 2761 0140 D3F8BC20 		ldr	r2, [r3, #188]
 2762 0144 7B68     		ldr	r3, [r7, #4]
 2763 0146 1B68     		ldr	r3, [r3]
 2764 0148 02F07C42 		and	r2, r2, #-67108864
 2765 014c C3F8BC20 		str	r2, [r3, #188]
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR1 */
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 2766              		.loc 2 981 3
 2767 0150 7B68     		ldr	r3, [r7, #4]
 2768 0152 1B68     		ldr	r3, [r3]
 2769 0154 196B     		ldr	r1, [r3, #48]
 2770 0156 7B68     		ldr	r3, [r7, #4]
 2771 0158 1A68     		ldr	r2, [r3]
 2772 015a 504B     		ldr	r3, .L128+8
 2773 015c 0B40     		ands	r3, r3, r1
 2774 015e 1363     		str	r3, [r2, #48]
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR2 */
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 2775              		.loc 2 985 3
 2776 0160 7B68     		ldr	r3, [r7, #4]
 2777 0162 1B68     		ldr	r3, [r3]
 2778 0164 596B     		ldr	r1, [r3, #52]
 2779 0166 7B68     		ldr	r3, [r7, #4]
 2780 0168 1A68     		ldr	r2, [r3]
 2781 016a 4D4B     		ldr	r3, .L128+12
 2782 016c 0B40     		ands	r3, r3, r1
 2783 016e 5363     		str	r3, [r2, #52]
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR3 */
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 2784              		.loc 2 989 3
 2785 0170 7B68     		ldr	r3, [r7, #4]
 2786 0172 1B68     		ldr	r3, [r3]
 2787 0174 996B     		ldr	r1, [r3, #56]
 2788 0176 7B68     		ldr	r3, [r7, #4]
 2789 0178 1A68     		ldr	r2, [r3]
 2790 017a 494B     		ldr	r3, .L128+12
 2791 017c 0B40     		ands	r3, r3, r1
ARM GAS  /tmp/ccp7RHPZ.s 			page 207


 2792 017e 9363     		str	r3, [r2, #56]
 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR4 */
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 2793              		.loc 2 993 3
 2794 0180 7B68     		ldr	r3, [r7, #4]
 2795 0182 1B68     		ldr	r3, [r3]
 2796 0184 D96B     		ldr	r1, [r3, #60]
 2797 0186 7B68     		ldr	r3, [r7, #4]
 2798 0188 1A68     		ldr	r2, [r3]
 2799 018a 464B     		ldr	r3, .L128+16
 2800 018c 0B40     		ands	r3, r3, r1
 2801 018e D363     		str	r3, [r2, #60]
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Register JSQR was reset when the ADC was disabled */
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DR */
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR1 */
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 2802              		.loc 2 1001 3
 2803 0190 7B68     		ldr	r3, [r7, #4]
 2804 0192 1B68     		ldr	r3, [r3]
 2805 0194 1B6E     		ldr	r3, [r3, #96]
 2806 0196 7B68     		ldr	r3, [r7, #4]
 2807 0198 1B68     		ldr	r3, [r3]
 2808 019a 0022     		movs	r2, #0
 2809 019c 1A66     		str	r2, [r3, #96]
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR2 */
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 2810              		.loc 2 1003 3
 2811 019e 7B68     		ldr	r3, [r7, #4]
 2812 01a0 1B68     		ldr	r3, [r3]
 2813 01a2 5B6E     		ldr	r3, [r3, #100]
 2814 01a4 7B68     		ldr	r3, [r7, #4]
 2815 01a6 1B68     		ldr	r3, [r3]
 2816 01a8 0022     		movs	r2, #0
 2817 01aa 5A66     		str	r2, [r3, #100]
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR3 */
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 2818              		.loc 2 1005 3
 2819 01ac 7B68     		ldr	r3, [r7, #4]
 2820 01ae 1B68     		ldr	r3, [r3]
 2821 01b0 9B6E     		ldr	r3, [r3, #104]
 2822 01b2 7B68     		ldr	r3, [r7, #4]
 2823 01b4 1B68     		ldr	r3, [r3]
 2824 01b6 0022     		movs	r2, #0
 2825 01b8 9A66     		str	r2, [r3, #104]
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR4 */
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 2826              		.loc 2 1007 3
 2827 01ba 7B68     		ldr	r3, [r7, #4]
 2828 01bc 1B68     		ldr	r3, [r3]
 2829 01be DB6E     		ldr	r3, [r3, #108]
 2830 01c0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 208


 2831 01c2 1B68     		ldr	r3, [r3]
 2832 01c4 0022     		movs	r2, #0
 2833 01c6 DA66     		str	r2, [r3, #108]
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset registers JDR1, JDR2, JDR3, JDR4 */
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD2CR */
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 2834              		.loc 2 1013 3
 2835 01c8 7B68     		ldr	r3, [r7, #4]
 2836 01ca 1B68     		ldr	r3, [r3]
 2837 01cc D3F8A010 		ldr	r1, [r3, #160]
 2838 01d0 7B68     		ldr	r3, [r7, #4]
 2839 01d2 1A68     		ldr	r2, [r3]
 2840 01d4 344B     		ldr	r3, .L128+20
 2841 01d6 0B40     		ands	r3, r3, r1
 2842 01d8 C2F8A030 		str	r3, [r2, #160]
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD3CR */
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 2843              		.loc 2 1016 3
 2844 01dc 7B68     		ldr	r3, [r7, #4]
 2845 01de 1B68     		ldr	r3, [r3]
 2846 01e0 D3F8A410 		ldr	r1, [r3, #164]
 2847 01e4 7B68     		ldr	r3, [r7, #4]
 2848 01e6 1A68     		ldr	r2, [r3]
 2849 01e8 2F4B     		ldr	r3, .L128+20
 2850 01ea 0B40     		ands	r3, r3, r1
 2851 01ec C2F8A430 		str	r3, [r2, #164]
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_DIFSEL_DIFSEL);
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register DIFSEL */
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->DIFSEL_RES12, ADC_DIFSEL_DIFSEL);
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register CALFACT */
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 2852              		.loc 2 1037 3
 2853 01f0 7B68     		ldr	r3, [r7, #4]
 2854 01f2 1B68     		ldr	r3, [r3]
 2855 01f4 D3F8C010 		ldr	r1, [r3, #192]
 2856 01f8 7B68     		ldr	r3, [r7, #4]
 2857 01fa 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 209


 2858 01fc 2A4B     		ldr	r3, .L128+20
 2859 01fe 0B40     		ands	r3, r3, r1
 2860 0200 C2F8C030 		str	r3, [r2, #192]
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 2861              		.loc 2 1040 3
 2862 0204 7B68     		ldr	r3, [r7, #4]
 2863 0206 1B68     		ldr	r3, [r3]
 2864 0208 D3F8C420 		ldr	r2, [r3, #196]
 2865 020c 7B68     		ldr	r3, [r7, #4]
 2866 020e 1B68     		ldr	r3, [r3]
 2867 0210 02F0F822 		and	r2, r2, #-134154240
 2868 0214 C3F8C420 		str	r2, [r3, #196]
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset common ADC registers ========== */
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Software is allowed to change common parameters only when all the other
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADCs are disabled.   */
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 2869              		.loc 2 1047 7
 2870 0218 7B68     		ldr	r3, [r7, #4]
 2871 021a 1B68     		ldr	r3, [r3]
 2872              		.loc 2 1047 89
 2873 021c 234A     		ldr	r2, .L128+24
 2874 021e 9342     		cmp	r3, r2
 2875 0220 04D0     		beq	.L118
 2876              		.loc 2 1047 7 discriminator 2
 2877 0222 7B68     		ldr	r3, [r7, #4]
 2878 0224 1B68     		ldr	r3, [r3]
 2879 0226 224A     		ldr	r2, .L128+28
 2880 0228 9342     		cmp	r3, r2
 2881 022a 0ED1     		bne	.L119
 2882              	.L118:
 2883              		.loc 2 1047 7 is_stmt 0 discriminator 3
 2884 022c 1F48     		ldr	r0, .L128+24
 2885 022e FFF7FEFF 		bl	LL_ADC_IsEnabled
 2886 0232 0446     		mov	r4, r0
 2887 0234 1E48     		ldr	r0, .L128+28
 2888 0236 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2889 023a 0346     		mov	r3, r0
 2890 023c 2343     		orrs	r3, r3, r4
 2891              		.loc 2 1047 89 is_stmt 1 discriminator 3
 2892 023e 002B     		cmp	r3, #0
 2893 0240 0CBF     		ite	eq
 2894 0242 0123     		moveq	r3, #1
 2895 0244 0023     		movne	r3, #0
 2896 0246 DBB2     		uxtb	r3, r3
 2897 0248 08E0     		b	.L120
 2898              	.L119:
 2899              		.loc 2 1047 7 discriminator 4
 2900 024a 1A48     		ldr	r0, .L128+32
 2901 024c FFF7FEFF 		bl	LL_ADC_IsEnabled
 2902 0250 0346     		mov	r3, r0
 2903              		.loc 2 1047 89 discriminator 4
 2904 0252 002B     		cmp	r3, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 210


 2905 0254 0CBF     		ite	eq
 2906 0256 0123     		moveq	r3, #1
 2907 0258 0023     		movne	r3, #0
 2908 025a DBB2     		uxtb	r3, r3
 2909              	.L120:
 2910              		.loc 2 1047 6 discriminator 6
 2911 025c 002B     		cmp	r3, #0
 2912 025e 36D0     		beq	.L121
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset configuration of ADC common register CCR:
1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - clock mode: CKMODE, PRESCEN
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - multimode related parameters(when this feature is available): DELAY, DUAL
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (set into  HAL_ADCEx_MultiModeConfigChannel() API)
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - internal measurement paths: Vbat, temperature sensor, Vref (set into
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     */
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 2913              		.loc 2 1056 5
 2914 0260 7B68     		ldr	r3, [r7, #4]
 2915 0262 1B68     		ldr	r3, [r3]
 2916 0264 114A     		ldr	r2, .L128+24
 2917 0266 9342     		cmp	r3, r2
 2918 0268 04D0     		beq	.L122
 2919              		.loc 2 1056 5 is_stmt 0 discriminator 2
 2920 026a 7B68     		ldr	r3, [r7, #4]
 2921 026c 1B68     		ldr	r3, [r3]
 2922 026e 104A     		ldr	r2, .L128+28
 2923 0270 9342     		cmp	r3, r2
 2924 0272 01D1     		bne	.L123
 2925              	.L122:
 2926              		.loc 2 1056 5 discriminator 3
 2927 0274 104B     		ldr	r3, .L128+36
 2928 0276 00E0     		b	.L124
 2929              	.L123:
 2930              		.loc 2 1056 5 discriminator 4
 2931 0278 104B     		ldr	r3, .L128+40
 2932              	.L124:
 2933              		.loc 2 1056 5 discriminator 6
 2934 027a 9968     		ldr	r1, [r3, #8]
 2935 027c 7B68     		ldr	r3, [r7, #4]
 2936 027e 1B68     		ldr	r3, [r3]
 2937 0280 0A4A     		ldr	r2, .L128+24
 2938 0282 9342     		cmp	r3, r2
 2939 0284 04D0     		beq	.L125
 2940              		.loc 2 1056 5 discriminator 8
 2941 0286 7B68     		ldr	r3, [r7, #4]
 2942 0288 1B68     		ldr	r3, [r3]
 2943 028a 094A     		ldr	r2, .L128+28
 2944 028c 9342     		cmp	r3, r2
 2945 028e 17D1     		bne	.L126
 2946              	.L125:
 2947              		.loc 2 1056 5 discriminator 9
 2948 0290 094A     		ldr	r2, .L128+36
 2949 0292 16E0     		b	.L127
 2950              	.L129:
 2951              		.align	2
 2952              	.L128:
ARM GAS  /tmp/ccp7RHPZ.s 			page 211


 2953 0294 00F8FFFF 		.word	-2048
 2954 0298 1CF800FC 		.word	-67045348
 2955 029c 300882E0 		.word	-528349136
 2956 02a0 200882E0 		.word	-528349152
 2957 02a4 20F8FFFF 		.word	-2016
 2958 02a8 0000F0FF 		.word	-1048576
 2959 02ac 00200240 		.word	1073881088
 2960 02b0 00210240 		.word	1073881344
 2961 02b4 00600258 		.word	1476550656
 2962 02b8 00230240 		.word	1073881856
 2963 02bc 00630258 		.word	1476551424
 2964              	.L126:
 2965              		.loc 2 1056 5 discriminator 10
 2966 02c0 0D4A     		ldr	r2, .L130
 2967              	.L127:
 2968              		.loc 2 1056 5 discriminator 12
 2969 02c2 0E4B     		ldr	r3, .L130+4
 2970 02c4 0B40     		ands	r3, r3, r1
 2971 02c6 9360     		str	r3, [r2, #8]
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripherals instances        */
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* sharing the same common ADC instance: ADC state is forced to           */
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* a similar state as after device power-on.                              */
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: A possible implementation is to add RCC bus reset of ADC         */
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (for example, using macro                                              */
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  __HAL_RCC_ADC..._FORCE_RESET()/..._RELEASE_RESET()/..._CLK_DISABLE()) */
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* in function "void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)":         */
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* DeInit the low level hardware: RCC clock, NVIC */
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* DeInit the low level hardware: RCC clock, NVIC */
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 2972              		.loc 2 1077 5 is_stmt 1 discriminator 12
 2973 02c8 7868     		ldr	r0, [r7, #4]
 2974 02ca FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2975              	.L121:
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to none */
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 2976              		.loc 2 1083 3
 2977 02ce 7B68     		ldr	r3, [r7, #4]
 2978 02d0 0022     		movs	r2, #0
 2979 02d2 9A65     		str	r2, [r3, #88]
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset injected channel configuration parameters */
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ContextQueue = 0;
ARM GAS  /tmp/ccp7RHPZ.s 			page 212


 2980              		.loc 2 1086 38
 2981 02d4 7B68     		ldr	r3, [r7, #4]
 2982 02d6 0022     		movs	r2, #0
 2983 02d8 DA65     		str	r2, [r3, #92]
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 2984              		.loc 2 1087 38
 2985 02da 7B68     		ldr	r3, [r7, #4]
 2986 02dc 0022     		movs	r2, #0
 2987 02de 1A66     		str	r2, [r3, #96]
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 2988              		.loc 2 1090 15
 2989 02e0 7B68     		ldr	r3, [r7, #4]
 2990 02e2 0022     		movs	r2, #0
 2991 02e4 5A65     		str	r2, [r3, #84]
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2992              		.loc 2 1093 3
 2993 02e6 7B68     		ldr	r3, [r7, #4]
 2994 02e8 0022     		movs	r2, #0
 2995 02ea 83F85020 		strb	r2, [r3, #80]
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 2996              		.loc 2 1096 10
 2997 02ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2998              	.L116:
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 2999              		.loc 2 1097 1
 3000 02f0 1846     		mov	r0, r3
 3001 02f2 1437     		adds	r7, r7, #20
 3002              	.LCFI230:
 3003              		.cfi_def_cfa_offset 12
 3004 02f4 BD46     		mov	sp, r7
 3005              	.LCFI231:
 3006              		.cfi_def_cfa_register 13
 3007              		@ sp needed
 3008 02f6 90BD     		pop	{r4, r7, pc}
 3009              	.L131:
 3010              		.align	2
 3011              	.L130:
 3012 02f8 00630258 		.word	1476551424
 3013 02fc E03000FE 		.word	-33541920
 3014              		.cfi_endproc
 3015              	.LFE332:
 3017              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 3018              		.align	1
 3019              		.weak	HAL_ADC_MspInit
 3020              		.syntax unified
 3021              		.thumb
 3022              		.thumb_func
 3023              		.fpu fpv5-d16
 3025              	HAL_ADC_MspInit:
 3026              	.LFB333:
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 213


1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3027              		.loc 2 1105 1
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 8
 3030              		@ frame_needed = 1, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
 3032 0000 80B4     		push	{r7}
 3033              	.LCFI232:
 3034              		.cfi_def_cfa_offset 4
 3035              		.cfi_offset 7, -4
 3036 0002 83B0     		sub	sp, sp, #12
 3037              	.LCFI233:
 3038              		.cfi_def_cfa_offset 16
 3039 0004 00AF     		add	r7, sp, #0
 3040              	.LCFI234:
 3041              		.cfi_def_cfa_register 7
 3042 0006 7860     		str	r0, [r7, #4]
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3043              		.loc 2 1112 1
 3044 0008 00BF     		nop
 3045 000a 0C37     		adds	r7, r7, #12
 3046              	.LCFI235:
 3047              		.cfi_def_cfa_offset 4
 3048 000c BD46     		mov	sp, r7
 3049              	.LCFI236:
 3050              		.cfi_def_cfa_register 13
 3051              		@ sp needed
 3052 000e 5DF8047B 		ldr	r7, [sp], #4
 3053              	.LCFI237:
 3054              		.cfi_restore 7
 3055              		.cfi_def_cfa_offset 0
 3056 0012 7047     		bx	lr
 3057              		.cfi_endproc
 3058              	.LFE333:
 3060              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 3061              		.align	1
 3062              		.weak	HAL_ADC_MspDeInit
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu fpv5-d16
 3068              	HAL_ADC_MspDeInit:
 3069              	.LFB334:
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 214


1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3070              		.loc 2 1122 1
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 8
 3073              		@ frame_needed = 1, uses_anonymous_args = 0
 3074              		@ link register save eliminated.
 3075 0000 80B4     		push	{r7}
 3076              	.LCFI238:
 3077              		.cfi_def_cfa_offset 4
 3078              		.cfi_offset 7, -4
 3079 0002 83B0     		sub	sp, sp, #12
 3080              	.LCFI239:
 3081              		.cfi_def_cfa_offset 16
 3082 0004 00AF     		add	r7, sp, #0
 3083              	.LCFI240:
 3084              		.cfi_def_cfa_register 7
 3085 0006 7860     		str	r0, [r7, #4]
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3086              		.loc 2 1129 1
 3087 0008 00BF     		nop
 3088 000a 0C37     		adds	r7, r7, #12
 3089              	.LCFI241:
 3090              		.cfi_def_cfa_offset 4
 3091 000c BD46     		mov	sp, r7
 3092              	.LCFI242:
 3093              		.cfi_def_cfa_register 13
 3094              		@ sp needed
 3095 000e 5DF8047B 		ldr	r7, [sp], #4
 3096              	.LCFI243:
 3097              		.cfi_restore 7
 3098              		.cfi_def_cfa_offset 0
 3099 0012 7047     		bx	lr
 3100              		.cfi_endproc
 3101              	.LFE334:
 3103              		.section	.text.HAL_ADC_Start,"ax",%progbits
 3104              		.align	1
 3105              		.global	HAL_ADC_Start
 3106              		.syntax unified
 3107              		.thumb
 3108              		.thumb_func
 3109              		.fpu fpv5-d16
 3111              	HAL_ADC_Start:
 3112              	.LFB335:
1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 215


1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Register a User ADC Callback
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (pCallback == NULL)
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
1175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
1183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
1187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
ARM GAS  /tmp/ccp7RHPZ.s 			page 216


1188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = pCallback;
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
1195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
1203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
ARM GAS  /tmp/ccp7RHPZ.s 			page 217


1245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
ARM GAS  /tmp/ccp7RHPZ.s 			page 218


1302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;
1305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
ARM GAS  /tmp/ccp7RHPZ.s 			page 219


1359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC IO operation functions
1377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
1378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
1379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       ##### IO operation functions #####
1381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group.
1384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group.
1385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion event.
1387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Handle ADC interrupt request
1391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
1394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
1395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is Slave, ADC is enabled but conversion is not started,
1402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is master, ADC is enabled and multimode conversion is started.
1403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3113              		.loc 2 1407 1
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 24
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0000 80B5     		push	{r7, lr}
 3118              	.LCFI244:
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 7, -8
ARM GAS  /tmp/ccp7RHPZ.s 			page 220


 3121              		.cfi_offset 14, -4
 3122 0002 86B0     		sub	sp, sp, #24
 3123              	.LCFI245:
 3124              		.cfi_def_cfa_offset 32
 3125 0004 00AF     		add	r7, sp, #0
 3126              	.LCFI246:
 3127              		.cfi_def_cfa_register 7
 3128 0006 7860     		str	r0, [r7, #4]
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3129              		.loc 2 1410 55
 3130 0008 7B68     		ldr	r3, [r7, #4]
 3131 000a 1B68     		ldr	r3, [r3]
 3132              		.loc 2 1410 35
 3133 000c 5C4A     		ldr	r2, .L157
 3134 000e 9342     		cmp	r3, r2
 3135 0010 04D0     		beq	.L135
 3136              		.loc 2 1410 55 discriminator 2
 3137 0012 7B68     		ldr	r3, [r7, #4]
 3138 0014 1B68     		ldr	r3, [r3]
 3139 0016 5B4A     		ldr	r2, .L157+4
 3140 0018 9342     		cmp	r3, r2
 3141 001a 01D1     		bne	.L136
 3142              	.L135:
 3143              		.loc 2 1410 35 discriminator 3
 3144 001c 5A4B     		ldr	r3, .L157+8
 3145 001e 00E0     		b	.L137
 3146              	.L136:
 3147              		.loc 2 1410 35 is_stmt 0 discriminator 4
 3148 0020 5A4B     		ldr	r3, .L157+12
 3149              	.L137:
 3150              		.loc 2 1410 35 discriminator 6
 3151 0022 1846     		mov	r0, r3
 3152 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3153 0028 3861     		str	r0, [r7, #16]
1411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3154              		.loc 2 1416 7 is_stmt 1 discriminator 6
 3155 002a 7B68     		ldr	r3, [r7, #4]
 3156 002c 1B68     		ldr	r3, [r3]
 3157 002e 1846     		mov	r0, r3
 3158 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3159 0034 0346     		mov	r3, r0
 3160              		.loc 2 1416 6 discriminator 6
 3161 0036 002B     		cmp	r3, #0
 3162 0038 40F09A80 		bne	.L138
1417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
1419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 3163              		.loc 2 1419 5
 3164 003c 7B68     		ldr	r3, [r7, #4]
 3165 003e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
ARM GAS  /tmp/ccp7RHPZ.s 			page 221


 3166 0042 012B     		cmp	r3, #1
 3167 0044 01D1     		bne	.L139
 3168              		.loc 2 1419 5 is_stmt 0 discriminator 1
 3169 0046 0223     		movs	r3, #2
 3170 0048 95E0     		b	.L140
 3171              	.L139:
 3172              		.loc 2 1419 5 discriminator 2
 3173 004a 7B68     		ldr	r3, [r7, #4]
 3174 004c 0122     		movs	r2, #1
 3175 004e 83F85020 		strb	r2, [r3, #80]
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 3176              		.loc 2 1422 22 is_stmt 1 discriminator 2
 3177 0052 7868     		ldr	r0, [r7, #4]
 3178 0054 FFF7FEFF 		bl	ADC_Enable
 3179 0058 0346     		mov	r3, r0
 3180 005a FB75     		strb	r3, [r7, #23]
1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3181              		.loc 2 1425 8 discriminator 2
 3182 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3183 005e 002B     		cmp	r3, #0
 3184 0060 40F08180 		bne	.L141
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3185              		.loc 2 1430 7
 3186 0064 7B68     		ldr	r3, [r7, #4]
 3187 0066 5A6D     		ldr	r2, [r3, #84]
 3188 0068 494B     		ldr	r3, .L157+16
 3189 006a 1340     		ands	r3, r3, r2
 3190 006c 43F48072 		orr	r2, r3, #256
 3191 0070 7B68     		ldr	r3, [r7, #4]
 3192 0072 5A65     		str	r2, [r3, #84]
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3193              		.loc 2 1437 12
 3194 0074 7B68     		ldr	r3, [r7, #4]
 3195 0076 1B68     		ldr	r3, [r3]
 3196 0078 424A     		ldr	r2, .L157+4
 3197 007a 9342     		cmp	r3, r2
 3198 007c 02D0     		beq	.L142
 3199              		.loc 2 1437 12 is_stmt 0 discriminator 1
 3200 007e 7B68     		ldr	r3, [r7, #4]
 3201 0080 1B68     		ldr	r3, [r3]
 3202 0082 00E0     		b	.L143
 3203              	.L142:
 3204              		.loc 2 1437 12 discriminator 2
ARM GAS  /tmp/ccp7RHPZ.s 			page 222


 3205 0084 3E4B     		ldr	r3, .L157
 3206              	.L143:
 3207              		.loc 2 1437 66 is_stmt 1 discriminator 4
 3208 0086 7A68     		ldr	r2, [r7, #4]
 3209 0088 1268     		ldr	r2, [r2]
 3210              		.loc 2 1437 10 discriminator 4
 3211 008a 9342     		cmp	r3, r2
 3212 008c 02D0     		beq	.L144
1438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3213              		.loc 2 1438 11
 3214 008e 3B69     		ldr	r3, [r7, #16]
 3215 0090 002B     		cmp	r3, #0
 3216 0092 05D1     		bne	.L145
 3217              	.L144:
1439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3218              		.loc 2 1441 9
 3219 0094 7B68     		ldr	r3, [r7, #4]
 3220 0096 5B6D     		ldr	r3, [r3, #84]
 3221 0098 23F48012 		bic	r2, r3, #1048576
 3222 009c 7B68     		ldr	r3, [r7, #4]
 3223 009e 5A65     		str	r2, [r3, #84]
 3224              	.L145:
1442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3225              		.loc 2 1446 11
 3226 00a0 7B68     		ldr	r3, [r7, #4]
 3227 00a2 5B6D     		ldr	r3, [r3, #84]
 3228 00a4 03F48053 		and	r3, r3, #4096
 3229              		.loc 2 1446 10
 3230 00a8 B3F5805F 		cmp	r3, #4096
 3231 00ac 06D1     		bne	.L146
1447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 3232              		.loc 2 1449 9
 3233 00ae 7B68     		ldr	r3, [r7, #4]
 3234 00b0 9B6D     		ldr	r3, [r3, #88]
 3235 00b2 23F00602 		bic	r2, r3, #6
 3236 00b6 7B68     		ldr	r3, [r7, #4]
 3237 00b8 9A65     		str	r2, [r3, #88]
 3238 00ba 02E0     		b	.L147
 3239              	.L146:
1450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 3240              		.loc 2 1454 9
 3241 00bc 7B68     		ldr	r3, [r7, #4]
 3242 00be 0022     		movs	r2, #0
 3243 00c0 9A65     		str	r2, [r3, #88]
 3244              	.L147:
ARM GAS  /tmp/ccp7RHPZ.s 			page 223


1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 3245              		.loc 2 1459 7
 3246 00c2 7B68     		ldr	r3, [r7, #4]
 3247 00c4 1B68     		ldr	r3, [r3]
 3248 00c6 1C22     		movs	r2, #28
 3249 00c8 1A60     		str	r2, [r3]
1460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3250              		.loc 2 1464 7
 3251 00ca 7B68     		ldr	r3, [r7, #4]
 3252 00cc 0022     		movs	r2, #0
 3253 00ce 83F85020 		strb	r2, [r3, #80]
1465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3254              		.loc 2 1474 12
 3255 00d2 7B68     		ldr	r3, [r7, #4]
 3256 00d4 1B68     		ldr	r3, [r3]
 3257 00d6 2B4A     		ldr	r2, .L157+4
 3258 00d8 9342     		cmp	r3, r2
 3259 00da 02D0     		beq	.L148
 3260              		.loc 2 1474 12 is_stmt 0 discriminator 1
 3261 00dc 7B68     		ldr	r3, [r7, #4]
 3262 00de 1B68     		ldr	r3, [r3]
 3263 00e0 00E0     		b	.L149
 3264              	.L148:
 3265              		.loc 2 1474 12 discriminator 2
 3266 00e2 274B     		ldr	r3, .L157
 3267              	.L149:
 3268              		.loc 2 1474 66 is_stmt 1 discriminator 4
 3269 00e4 7A68     		ldr	r2, [r7, #4]
 3270 00e6 1268     		ldr	r2, [r2]
 3271              		.loc 2 1474 10 discriminator 4
 3272 00e8 9342     		cmp	r3, r2
 3273 00ea 08D0     		beq	.L150
1475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3274              		.loc 2 1475 11
 3275 00ec 3B69     		ldr	r3, [r7, #16]
 3276 00ee 002B     		cmp	r3, #0
 3277 00f0 05D0     		beq	.L150
1476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3278              		.loc 2 1476 11
 3279 00f2 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccp7RHPZ.s 			page 224


 3280 00f4 052B     		cmp	r3, #5
 3281 00f6 02D0     		beq	.L150
1477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3282              		.loc 2 1477 11
 3283 00f8 3B69     		ldr	r3, [r7, #16]
 3284 00fa 092B     		cmp	r3, #9
 3285 00fc 14D1     		bne	.L151
 3286              	.L150:
1478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3287              		.loc 2 1481 13
 3288 00fe 7B68     		ldr	r3, [r7, #4]
 3289 0100 1B68     		ldr	r3, [r3]
 3290 0102 DB68     		ldr	r3, [r3, #12]
 3291 0104 03F00073 		and	r3, r3, #33554432
 3292              		.loc 2 1481 12
 3293 0108 002B     		cmp	r3, #0
 3294 010a 07D0     		beq	.L152
1482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 3295              		.loc 2 1483 11
 3296 010c 7B68     		ldr	r3, [r7, #4]
 3297 010e 5B6D     		ldr	r3, [r3, #84]
 3298 0110 23F44053 		bic	r3, r3, #12288
 3299 0114 43F48052 		orr	r2, r3, #4096
 3300 0118 7B68     		ldr	r3, [r7, #4]
 3301 011a 5A65     		str	r2, [r3, #84]
 3302              	.L152:
1484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
1487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 3303              		.loc 2 1487 9
 3304 011c 7B68     		ldr	r3, [r7, #4]
 3305 011e 1B68     		ldr	r3, [r3]
 3306 0120 1846     		mov	r0, r3
 3307 0122 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 3308 0126 25E0     		b	.L156
 3309              	.L151:
1488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3310              		.loc 2 1492 9
 3311 0128 7B68     		ldr	r3, [r7, #4]
 3312 012a 5B6D     		ldr	r3, [r3, #84]
 3313 012c 43F48012 		orr	r2, r3, #1048576
 3314 0130 7B68     		ldr	r3, [r7, #4]
 3315 0132 5A65     		str	r2, [r3, #84]
1493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
1494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
1495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3316              		.loc 2 1495 25
 3317 0134 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 225


 3318 0136 1B68     		ldr	r3, [r3]
 3319 0138 124A     		ldr	r2, .L157+4
 3320 013a 9342     		cmp	r3, r2
 3321 013c 02D0     		beq	.L154
 3322              		.loc 2 1495 25 is_stmt 0 discriminator 1
 3323 013e 7B68     		ldr	r3, [r7, #4]
 3324 0140 1B68     		ldr	r3, [r3]
 3325 0142 00E0     		b	.L155
 3326              	.L154:
 3327              		.loc 2 1495 25 discriminator 2
 3328 0144 0E4B     		ldr	r3, .L157
 3329              	.L155:
 3330              		.loc 2 1495 23 is_stmt 1 discriminator 4
 3331 0146 FB60     		str	r3, [r7, #12]
1496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3332              		.loc 2 1496 13 discriminator 4
 3333 0148 FB68     		ldr	r3, [r7, #12]
 3334 014a DB68     		ldr	r3, [r3, #12]
 3335 014c 03F00073 		and	r3, r3, #33554432
 3336              		.loc 2 1496 12 discriminator 4
 3337 0150 002B     		cmp	r3, #0
 3338 0152 0FD0     		beq	.L156
1497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 3339              		.loc 2 1498 11
 3340 0154 7B68     		ldr	r3, [r7, #4]
 3341 0156 5B6D     		ldr	r3, [r3, #84]
 3342 0158 23F44053 		bic	r3, r3, #12288
 3343 015c 43F48052 		orr	r2, r3, #4096
 3344 0160 7B68     		ldr	r3, [r7, #4]
 3345 0162 5A65     		str	r2, [r3, #84]
 3346 0164 06E0     		b	.L156
 3347              	.L141:
1499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3348              		.loc 2 1506 7
 3349 0166 7B68     		ldr	r3, [r7, #4]
 3350 0168 0022     		movs	r2, #0
 3351 016a 83F85020 		strb	r2, [r3, #80]
 3352 016e 01E0     		b	.L156
 3353              	.L138:
1507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 3354              		.loc 2 1511 20
 3355 0170 0223     		movs	r3, #2
 3356 0172 FB75     		strb	r3, [r7, #23]
 3357              	.L156:
1512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
ARM GAS  /tmp/ccp7RHPZ.s 			page 226


1513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 3358              		.loc 2 1515 10
 3359 0174 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3360              	.L140:
1516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3361              		.loc 2 1516 1
 3362 0176 1846     		mov	r0, r3
 3363 0178 1837     		adds	r7, r7, #24
 3364              	.LCFI247:
 3365              		.cfi_def_cfa_offset 8
 3366 017a BD46     		mov	sp, r7
 3367              	.LCFI248:
 3368              		.cfi_def_cfa_register 13
 3369              		@ sp needed
 3370 017c 80BD     		pop	{r7, pc}
 3371              	.L158:
 3372 017e 00BF     		.align	2
 3373              	.L157:
 3374 0180 00200240 		.word	1073881088
 3375 0184 00210240 		.word	1073881344
 3376 0188 00230240 		.word	1073881856
 3377 018c 00630258 		.word	1476551424
 3378 0190 FEF0FFFF 		.word	-3842
 3379              		.cfi_endproc
 3380              	.LFE335:
 3382              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 3383              		.align	1
 3384              		.global	HAL_ADC_Stop
 3385              		.syntax unified
 3386              		.thumb
 3387              		.thumb_func
 3388              		.fpu fpv5-d16
 3390              	HAL_ADC_Stop:
 3391              	.LFB336:
1517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
1526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3392              		.loc 2 1528 1
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 16
 3395              		@ frame_needed = 1, uses_anonymous_args = 0
 3396 0000 80B5     		push	{r7, lr}
 3397              	.LCFI249:
 3398              		.cfi_def_cfa_offset 8
 3399              		.cfi_offset 7, -8
 3400              		.cfi_offset 14, -4
ARM GAS  /tmp/ccp7RHPZ.s 			page 227


 3401 0002 84B0     		sub	sp, sp, #16
 3402              	.LCFI250:
 3403              		.cfi_def_cfa_offset 24
 3404 0004 00AF     		add	r7, sp, #0
 3405              	.LCFI251:
 3406              		.cfi_def_cfa_register 7
 3407 0006 7860     		str	r0, [r7, #4]
1529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
1535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 3408              		.loc 2 1535 3
 3409 0008 7B68     		ldr	r3, [r7, #4]
 3410 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3411 000e 012B     		cmp	r3, #1
 3412 0010 01D1     		bne	.L160
 3413              		.loc 2 1535 3 is_stmt 0 discriminator 1
 3414 0012 0223     		movs	r3, #2
 3415 0014 21E0     		b	.L161
 3416              	.L160:
 3417              		.loc 2 1535 3 discriminator 2
 3418 0016 7B68     		ldr	r3, [r7, #4]
 3419 0018 0122     		movs	r2, #1
 3420 001a 83F85020 		strb	r2, [r3, #80]
1536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 3421              		.loc 2 1538 20 is_stmt 1 discriminator 2
 3422 001e 0321     		movs	r1, #3
 3423 0020 7868     		ldr	r0, [r7, #4]
 3424 0022 FFF7FEFF 		bl	ADC_ConversionStop
 3425 0026 0346     		mov	r3, r0
 3426 0028 FB73     		strb	r3, [r7, #15]
1539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 3427              		.loc 2 1541 6 discriminator 2
 3428 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3429 002c 002B     		cmp	r3, #0
 3430 002e 0FD1     		bne	.L162
1542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 3431              		.loc 2 1544 22
 3432 0030 7868     		ldr	r0, [r7, #4]
 3433 0032 FFF7FEFF 		bl	ADC_Disable
 3434 0036 0346     		mov	r3, r0
 3435 0038 FB73     		strb	r3, [r7, #15]
1545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3436              		.loc 2 1547 8
 3437 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3438 003c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 228


 3439 003e 07D1     		bne	.L162
1548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3440              		.loc 2 1550 7
 3441 0040 7B68     		ldr	r3, [r7, #4]
 3442 0042 5A6D     		ldr	r2, [r3, #84]
 3443 0044 074B     		ldr	r3, .L163
 3444 0046 1340     		ands	r3, r3, r2
 3445 0048 43F00102 		orr	r2, r3, #1
 3446 004c 7B68     		ldr	r3, [r7, #4]
 3447 004e 5A65     		str	r2, [r3, #84]
 3448              	.L162:
1551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3449              		.loc 2 1557 3
 3450 0050 7B68     		ldr	r3, [r7, #4]
 3451 0052 0022     		movs	r2, #0
 3452 0054 83F85020 		strb	r2, [r3, #80]
1558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 3453              		.loc 2 1560 10
 3454 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3455              	.L161:
1561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3456              		.loc 2 1561 1
 3457 005a 1846     		mov	r0, r3
 3458 005c 1037     		adds	r7, r7, #16
 3459              	.LCFI252:
 3460              		.cfi_def_cfa_offset 8
 3461 005e BD46     		mov	sp, r7
 3462              	.LCFI253:
 3463              		.cfi_def_cfa_register 13
 3464              		@ sp needed
 3465 0060 80BD     		pop	{r7, pc}
 3466              	.L164:
 3467 0062 00BF     		.align	2
 3468              	.L163:
 3469 0064 FEEEFFFF 		.word	-4354
 3470              		.cfi_endproc
 3471              	.LFE336:
 3473              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 3474              		.align	1
 3475              		.global	HAL_ADC_PollForConversion
 3476              		.syntax unified
 3477              		.thumb
 3478              		.thumb_func
 3479              		.fpu fpv5-d16
 3481              	HAL_ADC_PollForConversion:
 3482              	.LFB337:
1562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 229


1563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3483              		.loc 2 1582 1
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 32
 3486              		@ frame_needed = 1, uses_anonymous_args = 0
 3487 0000 80B5     		push	{r7, lr}
 3488              	.LCFI254:
 3489              		.cfi_def_cfa_offset 8
 3490              		.cfi_offset 7, -8
 3491              		.cfi_offset 14, -4
 3492 0002 88B0     		sub	sp, sp, #32
 3493              	.LCFI255:
 3494              		.cfi_def_cfa_offset 40
 3495 0004 00AF     		add	r7, sp, #0
 3496              	.LCFI256:
 3497              		.cfi_def_cfa_register 7
 3498 0006 7860     		str	r0, [r7, #4]
 3499 0008 3960     		str	r1, [r7]
1583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_Flag_End;
1585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
1586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3500              		.loc 2 1587 55
 3501 000a 7B68     		ldr	r3, [r7, #4]
 3502 000c 1B68     		ldr	r3, [r3]
 3503              		.loc 2 1587 35
 3504 000e 724A     		ldr	r2, .L192
 3505 0010 9342     		cmp	r3, r2
 3506 0012 04D0     		beq	.L166
 3507              		.loc 2 1587 55 discriminator 2
 3508 0014 7B68     		ldr	r3, [r7, #4]
 3509 0016 1B68     		ldr	r3, [r3]
 3510 0018 704A     		ldr	r2, .L192+4
 3511 001a 9342     		cmp	r3, r2
 3512 001c 01D1     		bne	.L167
 3513              	.L166:
 3514              		.loc 2 1587 35 discriminator 3
ARM GAS  /tmp/ccp7RHPZ.s 			page 230


 3515 001e 704B     		ldr	r3, .L192+8
 3516 0020 00E0     		b	.L168
 3517              	.L167:
 3518              		.loc 2 1587 35 is_stmt 0 discriminator 4
 3519 0022 704B     		ldr	r3, .L192+12
 3520              	.L168:
 3521              		.loc 2 1587 35 discriminator 6
 3522 0024 1846     		mov	r0, r3
 3523 0026 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3524 002a 7861     		str	r0, [r7, #20]
1588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 3525              		.loc 2 1593 17 is_stmt 1 discriminator 6
 3526 002c 7B68     		ldr	r3, [r7, #4]
 3527 002e 1B69     		ldr	r3, [r3, #16]
 3528              		.loc 2 1593 6 discriminator 6
 3529 0030 082B     		cmp	r3, #8
 3530 0032 02D1     		bne	.L169
1594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
 3531              		.loc 2 1595 18
 3532 0034 0823     		movs	r3, #8
 3533 0036 FB61     		str	r3, [r7, #28]
 3534 0038 37E0     		b	.L170
 3535              	.L169:
1596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* each conversion:                                                       */
1602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3536              		.loc 2 1606 8
 3537 003a 7B69     		ldr	r3, [r7, #20]
 3538 003c 002B     		cmp	r3, #0
 3539 003e 05D0     		beq	.L171
1607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3540              		.loc 2 1607 9
 3541 0040 7B69     		ldr	r3, [r7, #20]
 3542 0042 052B     		cmp	r3, #5
 3543 0044 02D0     		beq	.L171
1608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3544              		.loc 2 1608 9
 3545 0046 7B69     		ldr	r3, [r7, #20]
 3546 0048 092B     		cmp	r3, #9
 3547 004a 11D1     		bne	.L172
 3548              	.L171:
1609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
1610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccp7RHPZ.s 			page 231


1611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMNGT bit in handle ADC CFGR register */
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 3549              		.loc 2 1612 11
 3550 004c 7B68     		ldr	r3, [r7, #4]
 3551 004e 1B68     		ldr	r3, [r3]
 3552 0050 DB68     		ldr	r3, [r3, #12]
 3553 0052 03F00103 		and	r3, r3, #1
 3554              		.loc 2 1612 10
 3555 0056 002B     		cmp	r3, #0
 3556 0058 07D0     		beq	.L173
1613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3557              		.loc 2 1614 9
 3558 005a 7B68     		ldr	r3, [r7, #4]
 3559 005c 5B6D     		ldr	r3, [r3, #84]
 3560 005e 43F02002 		orr	r2, r3, #32
 3561 0062 7B68     		ldr	r3, [r7, #4]
 3562 0064 5A65     		str	r2, [r3, #84]
1615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 3563              		.loc 2 1615 16
 3564 0066 0123     		movs	r3, #1
 3565 0068 B1E0     		b	.L174
 3566              	.L173:
1616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3567              		.loc 2 1619 22
 3568 006a 0423     		movs	r3, #4
 3569 006c FB61     		str	r3, [r7, #28]
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3570              		.loc 2 1612 10
 3571 006e 1CE0     		b	.L170
 3572              	.L172:
1620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check ADC DMA mode in multimode on ADC group regular */
1625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_
 3573              		.loc 2 1625 38
 3574 0070 7B68     		ldr	r3, [r7, #4]
 3575 0072 1B68     		ldr	r3, [r3]
 3576              		.loc 2 1625 11
 3577 0074 584A     		ldr	r2, .L192
 3578 0076 9342     		cmp	r3, r2
 3579 0078 04D0     		beq	.L175
 3580              		.loc 2 1625 38 discriminator 2
 3581 007a 7B68     		ldr	r3, [r7, #4]
 3582 007c 1B68     		ldr	r3, [r3]
 3583 007e 574A     		ldr	r2, .L192+4
 3584 0080 9342     		cmp	r3, r2
 3585 0082 01D1     		bne	.L176
 3586              	.L175:
 3587              		.loc 2 1625 11 discriminator 3
 3588 0084 564B     		ldr	r3, .L192+8
 3589 0086 00E0     		b	.L177
ARM GAS  /tmp/ccp7RHPZ.s 			page 232


 3590              	.L176:
 3591              		.loc 2 1625 11 is_stmt 0 discriminator 4
 3592 0088 564B     		ldr	r3, .L192+12
 3593              	.L177:
 3594              		.loc 2 1625 11 discriminator 6
 3595 008a 1846     		mov	r0, r3
 3596 008c FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 3597 0090 0346     		mov	r3, r0
 3598              		.loc 2 1625 10 is_stmt 1 discriminator 6
 3599 0092 002B     		cmp	r3, #0
 3600 0094 07D0     		beq	.L178
1626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3601              		.loc 2 1627 9
 3602 0096 7B68     		ldr	r3, [r7, #4]
 3603 0098 5B6D     		ldr	r3, [r3, #84]
 3604 009a 43F02002 		orr	r2, r3, #32
 3605 009e 7B68     		ldr	r3, [r7, #4]
 3606 00a0 5A65     		str	r2, [r3, #84]
1628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 3607              		.loc 2 1628 16
 3608 00a2 0123     		movs	r3, #1
 3609 00a4 93E0     		b	.L174
 3610              	.L178:
1629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3611              		.loc 2 1632 22
 3612 00a6 0423     		movs	r3, #4
 3613 00a8 FB61     		str	r3, [r7, #28]
 3614              	.L170:
1633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 3615              		.loc 2 1638 15
 3616 00aa FFF7FEFF 		bl	HAL_GetTick
 3617 00ae 3861     		str	r0, [r7, #16]
1639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 3618              		.loc 2 1641 9
 3619 00b0 21E0     		b	.L179
 3620              	.L181:
1642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 3621              		.loc 2 1644 8
 3622 00b2 3B68     		ldr	r3, [r7]
 3623 00b4 B3F1FF3F 		cmp	r3, #-1
 3624 00b8 1DD0     		beq	.L179
1645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 3625              		.loc 2 1646 13
ARM GAS  /tmp/ccp7RHPZ.s 			page 233


 3626 00ba FFF7FEFF 		bl	HAL_GetTick
 3627 00be 0246     		mov	r2, r0
 3628              		.loc 2 1646 27
 3629 00c0 3B69     		ldr	r3, [r7, #16]
 3630 00c2 D31A     		subs	r3, r2, r3
 3631              		.loc 2 1646 10
 3632 00c4 3A68     		ldr	r2, [r7]
 3633 00c6 9A42     		cmp	r2, r3
 3634 00c8 02D3     		bcc	.L180
 3635              		.loc 2 1646 51 discriminator 1
 3636 00ca 3B68     		ldr	r3, [r7]
 3637 00cc 002B     		cmp	r3, #0
 3638 00ce 12D1     		bne	.L179
 3639              	.L180:
1647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 3640              		.loc 2 1649 17
 3641 00d0 7B68     		ldr	r3, [r7, #4]
 3642 00d2 1B68     		ldr	r3, [r3]
 3643              		.loc 2 1649 27
 3644 00d4 1A68     		ldr	r2, [r3]
 3645              		.loc 2 1649 33
 3646 00d6 FB69     		ldr	r3, [r7, #28]
 3647 00d8 1340     		ands	r3, r3, r2
 3648              		.loc 2 1649 11
 3649 00da 002B     		cmp	r3, #0
 3650 00dc 0BD1     		bne	.L179
1650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3651              		.loc 2 1652 11
 3652 00de 7B68     		ldr	r3, [r7, #4]
 3653 00e0 5B6D     		ldr	r3, [r3, #84]
 3654 00e2 43F00402 		orr	r2, r3, #4
 3655 00e6 7B68     		ldr	r3, [r7, #4]
 3656 00e8 5A65     		str	r2, [r3, #84]
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Process unlocked */
1655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3657              		.loc 2 1655 11
 3658 00ea 7B68     		ldr	r3, [r7, #4]
 3659 00ec 0022     		movs	r2, #0
 3660 00ee 83F85020 		strb	r2, [r3, #80]
1656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_TIMEOUT;
 3661              		.loc 2 1657 18
 3662 00f2 0323     		movs	r3, #3
 3663 00f4 6BE0     		b	.L174
 3664              	.L179:
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3665              		.loc 2 1641 15
 3666 00f6 7B68     		ldr	r3, [r7, #4]
 3667 00f8 1B68     		ldr	r3, [r3]
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3668              		.loc 2 1641 25
 3669 00fa 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 234


1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3670              		.loc 2 1641 31
 3671 00fc FB69     		ldr	r3, [r7, #28]
 3672 00fe 1340     		ands	r3, r3, r2
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3673              		.loc 2 1641 9
 3674 0100 002B     		cmp	r3, #0
 3675 0102 D6D0     		beq	.L181
1658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update ADC state machine */
1664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3676              		.loc 2 1664 3
 3677 0104 7B68     		ldr	r3, [r7, #4]
 3678 0106 5B6D     		ldr	r3, [r3, #84]
 3679 0108 43F40072 		orr	r2, r3, #512
 3680 010c 7B68     		ldr	r3, [r7, #4]
 3681 010e 5A65     		str	r2, [r3, #84]
1665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 3682              		.loc 2 1668 8
 3683 0110 7B68     		ldr	r3, [r7, #4]
 3684 0112 1B68     		ldr	r3, [r3]
 3685 0114 1846     		mov	r0, r3
 3686 0116 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 3687 011a 0346     		mov	r3, r0
 3688              		.loc 2 1668 6
 3689 011c 002B     		cmp	r3, #0
 3690 011e 1CD0     		beq	.L182
1669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 3691              		.loc 2 1669 21
 3692 0120 7B68     		ldr	r3, [r7, #4]
 3693 0122 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 3694              		.loc 2 1669 7
 3695 0124 002B     		cmp	r3, #0
 3696 0126 18D1     		bne	.L182
1670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 3697              		.loc 2 1673 9
 3698 0128 7B68     		ldr	r3, [r7, #4]
 3699 012a 1B68     		ldr	r3, [r3]
 3700 012c 1B68     		ldr	r3, [r3]
 3701 012e 03F00803 		and	r3, r3, #8
 3702              		.loc 2 1673 8
 3703 0132 082B     		cmp	r3, #8
 3704 0134 11D1     		bne	.L182
1674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 3705              		.loc 2 1676 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 235


 3706 0136 7B68     		ldr	r3, [r7, #4]
 3707 0138 5B6D     		ldr	r3, [r3, #84]
 3708 013a 23F48072 		bic	r2, r3, #256
 3709 013e 7B68     		ldr	r3, [r7, #4]
 3710 0140 5A65     		str	r2, [r3, #84]
1677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 3711              		.loc 2 1678 16
 3712 0142 7B68     		ldr	r3, [r7, #4]
 3713 0144 5B6D     		ldr	r3, [r3, #84]
 3714              		.loc 2 1678 24
 3715 0146 03F48053 		and	r3, r3, #4096
 3716              		.loc 2 1678 10
 3717 014a 002B     		cmp	r3, #0
 3718 014c 05D1     		bne	.L182
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3719              		.loc 2 1680 9
 3720 014e 7B68     		ldr	r3, [r7, #4]
 3721 0150 5B6D     		ldr	r3, [r3, #84]
 3722 0152 43F00102 		orr	r2, r3, #1
 3723 0156 7B68     		ldr	r3, [r7, #4]
 3724 0158 5A65     		str	r2, [r3, #84]
 3725              	.L182:
1681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave        */
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* in function of multimode state (for devices with multimode               */
1687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* available).                                                              */
1688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3726              		.loc 2 1688 8
 3727 015a 7B68     		ldr	r3, [r7, #4]
 3728 015c 1B68     		ldr	r3, [r3]
 3729 015e 1F4A     		ldr	r2, .L192+4
 3730 0160 9342     		cmp	r3, r2
 3731 0162 02D0     		beq	.L183
 3732              		.loc 2 1688 8 is_stmt 0 discriminator 1
 3733 0164 7B68     		ldr	r3, [r7, #4]
 3734 0166 1B68     		ldr	r3, [r3]
 3735 0168 00E0     		b	.L184
 3736              	.L183:
 3737              		.loc 2 1688 8 discriminator 2
 3738 016a 1B4B     		ldr	r3, .L192
 3739              	.L184:
 3740              		.loc 2 1688 62 is_stmt 1 discriminator 4
 3741 016c 7A68     		ldr	r2, [r7, #4]
 3742 016e 1268     		ldr	r2, [r2]
 3743              		.loc 2 1688 6 discriminator 4
 3744 0170 9342     		cmp	r3, r2
 3745 0172 08D0     		beq	.L185
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3746              		.loc 2 1689 7
 3747 0174 7B69     		ldr	r3, [r7, #20]
 3748 0176 002B     		cmp	r3, #0
 3749 0178 05D0     		beq	.L185
ARM GAS  /tmp/ccp7RHPZ.s 			page 236


1690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3750              		.loc 2 1690 7
 3751 017a 7B69     		ldr	r3, [r7, #20]
 3752 017c 052B     		cmp	r3, #5
 3753 017e 02D0     		beq	.L185
1691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3754              		.loc 2 1691 7
 3755 0180 7B69     		ldr	r3, [r7, #20]
 3756 0182 092B     		cmp	r3, #9
 3757 0184 04D1     		bne	.L186
 3758              	.L185:
1692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve handle ADC CFGR register */
1695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 3759              		.loc 2 1695 16
 3760 0186 7B68     		ldr	r3, [r7, #4]
 3761 0188 1B68     		ldr	r3, [r3]
 3762              		.loc 2 1695 14
 3763 018a DB68     		ldr	r3, [r3, #12]
 3764 018c BB61     		str	r3, [r7, #24]
 3765 018e 0CE0     		b	.L187
 3766              	.L186:
1696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve Master ADC CFGR register */
1700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3767              		.loc 2 1700 21
 3768 0190 7B68     		ldr	r3, [r7, #4]
 3769 0192 1B68     		ldr	r3, [r3]
 3770 0194 114A     		ldr	r2, .L192+4
 3771 0196 9342     		cmp	r3, r2
 3772 0198 02D0     		beq	.L188
 3773              		.loc 2 1700 21 is_stmt 0 discriminator 1
 3774 019a 7B68     		ldr	r3, [r7, #4]
 3775 019c 1B68     		ldr	r3, [r3]
 3776 019e 00E0     		b	.L189
 3777              	.L188:
 3778              		.loc 2 1700 21 discriminator 2
 3779 01a0 0D4B     		ldr	r3, .L192
 3780              	.L189:
 3781              		.loc 2 1700 19 is_stmt 1 discriminator 4
 3782 01a2 FB60     		str	r3, [r7, #12]
1701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 3783              		.loc 2 1701 14 discriminator 4
 3784 01a4 FB68     		ldr	r3, [r7, #12]
 3785 01a6 DB68     		ldr	r3, [r3, #12]
 3786 01a8 BB61     		str	r3, [r7, #24]
 3787              	.L187:
1702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Clear polled flag */
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_Flag_End == ADC_FLAG_EOS)
 3788              		.loc 2 1705 6
 3789 01aa FB69     		ldr	r3, [r7, #28]
 3790 01ac 082B     		cmp	r3, #8
ARM GAS  /tmp/ccp7RHPZ.s 			page 237


 3791 01ae 04D1     		bne	.L190
1706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 3792              		.loc 2 1707 5
 3793 01b0 7B68     		ldr	r3, [r7, #4]
 3794 01b2 1B68     		ldr	r3, [r3]
 3795 01b4 0822     		movs	r2, #8
 3796 01b6 1A60     		str	r2, [r3]
 3797 01b8 08E0     		b	.L191
 3798              	.L190:
1708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear end of conversion EOC flag of regular group if low power feature */
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
1713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* until data register is read using function HAL_ADC_GetValue().         */
1714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 3799              		.loc 2 1714 9
 3800 01ba BB69     		ldr	r3, [r7, #24]
 3801 01bc 03F48043 		and	r3, r3, #16384
 3802              		.loc 2 1714 8
 3803 01c0 002B     		cmp	r3, #0
 3804 01c2 03D1     		bne	.L191
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 3805              		.loc 2 1716 7
 3806 01c4 7B68     		ldr	r3, [r7, #4]
 3807 01c6 1B68     		ldr	r3, [r3]
 3808 01c8 0C22     		movs	r2, #12
 3809 01ca 1A60     		str	r2, [r3]
 3810              	.L191:
1717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 3811              		.loc 2 1721 10
 3812 01cc 0023     		movs	r3, #0
 3813              	.L174:
1722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3814              		.loc 2 1722 1
 3815 01ce 1846     		mov	r0, r3
 3816 01d0 2037     		adds	r7, r7, #32
 3817              	.LCFI257:
 3818              		.cfi_def_cfa_offset 8
 3819 01d2 BD46     		mov	sp, r7
 3820              	.LCFI258:
 3821              		.cfi_def_cfa_register 13
 3822              		@ sp needed
 3823 01d4 80BD     		pop	{r7, pc}
 3824              	.L193:
 3825 01d6 00BF     		.align	2
 3826              	.L192:
 3827 01d8 00200240 		.word	1073881088
 3828 01dc 00210240 		.word	1073881344
 3829 01e0 00230240 		.word	1073881856
 3830 01e4 00630258 		.word	1476551424
ARM GAS  /tmp/ccp7RHPZ.s 			page 238


 3831              		.cfi_endproc
 3832              	.LFE337:
 3834              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 3835              		.align	1
 3836              		.global	HAL_ADC_PollForEvent
 3837              		.syntax unified
 3838              		.thumb
 3839              		.thumb_func
 3840              		.fpu fpv5-d16
 3842              	HAL_ADC_PollForEvent:
 3843              	.LFB338:
1723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Poll for ADC event.
1726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param EventType the ADC event type.
1728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
1729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_JQOVF_EVENT  ADC Injected context queue overflow event
1735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 3844              		.loc 2 1745 1
 3845              		.cfi_startproc
 3846              		@ args = 0, pretend = 0, frame = 24
 3847              		@ frame_needed = 1, uses_anonymous_args = 0
 3848 0000 80B5     		push	{r7, lr}
 3849              	.LCFI259:
 3850              		.cfi_def_cfa_offset 8
 3851              		.cfi_offset 7, -8
 3852              		.cfi_offset 14, -4
 3853 0002 86B0     		sub	sp, sp, #24
 3854              	.LCFI260:
 3855              		.cfi_def_cfa_offset 32
 3856 0004 00AF     		add	r7, sp, #0
 3857              	.LCFI261:
 3858              		.cfi_def_cfa_register 7
 3859 0006 F860     		str	r0, [r7, #12]
 3860 0008 B960     		str	r1, [r7, #8]
 3861 000a 7A60     		str	r2, [r7, #4]
1746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
ARM GAS  /tmp/ccp7RHPZ.s 			page 239


1751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 3862              		.loc 2 1753 15
 3863 000c FFF7FEFF 		bl	HAL_GetTick
 3864 0010 7861     		str	r0, [r7, #20]
1754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check selected event flag */
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 3865              		.loc 2 1756 9
 3866 0012 22E0     		b	.L195
 3867              	.L198:
1757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 3868              		.loc 2 1759 8
 3869 0014 7B68     		ldr	r3, [r7, #4]
 3870 0016 B3F1FF3F 		cmp	r3, #-1
 3871 001a 1ED0     		beq	.L195
1760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 3872              		.loc 2 1761 13
 3873 001c FFF7FEFF 		bl	HAL_GetTick
 3874 0020 0246     		mov	r2, r0
 3875              		.loc 2 1761 27
 3876 0022 7B69     		ldr	r3, [r7, #20]
 3877 0024 D31A     		subs	r3, r2, r3
 3878              		.loc 2 1761 10
 3879 0026 7A68     		ldr	r2, [r7, #4]
 3880 0028 9A42     		cmp	r2, r3
 3881 002a 02D3     		bcc	.L196
 3882              		.loc 2 1761 51 discriminator 1
 3883 002c 7B68     		ldr	r3, [r7, #4]
 3884 002e 002B     		cmp	r3, #0
 3885 0030 13D1     		bne	.L195
 3886              	.L196:
1762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 3887              		.loc 2 1764 12
 3888 0032 FB68     		ldr	r3, [r7, #12]
 3889 0034 1B68     		ldr	r3, [r3]
 3890 0036 1A68     		ldr	r2, [r3]
 3891 0038 BB68     		ldr	r3, [r7, #8]
 3892 003a 1340     		ands	r3, r3, r2
 3893              		.loc 2 1764 11
 3894 003c BA68     		ldr	r2, [r7, #8]
 3895 003e 9A42     		cmp	r2, r3
 3896 0040 0BD0     		beq	.L195
1765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3897              		.loc 2 1767 11
 3898 0042 FB68     		ldr	r3, [r7, #12]
 3899 0044 5B6D     		ldr	r3, [r3, #84]
 3900 0046 43F00402 		orr	r2, r3, #4
 3901 004a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccp7RHPZ.s 			page 240


 3902 004c 5A65     		str	r2, [r3, #84]
1768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Process unlocked */
1770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3903              		.loc 2 1770 11
 3904 004e FB68     		ldr	r3, [r7, #12]
 3905 0050 0022     		movs	r2, #0
 3906 0052 83F85020 		strb	r2, [r3, #80]
1771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_TIMEOUT;
 3907              		.loc 2 1772 18
 3908 0056 0323     		movs	r3, #3
 3909 0058 7DE0     		b	.L197
 3910              	.L195:
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3911              		.loc 2 1756 10
 3912 005a FB68     		ldr	r3, [r7, #12]
 3913 005c 1B68     		ldr	r3, [r3]
 3914 005e 1A68     		ldr	r2, [r3]
 3915 0060 BB68     		ldr	r3, [r7, #8]
 3916 0062 1340     		ands	r3, r3, r2
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3917              		.loc 2 1756 9
 3918 0064 BA68     		ldr	r2, [r7, #8]
 3919 0066 9A42     		cmp	r2, r3
 3920 0068 D4D1     		bne	.L198
1773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   switch (EventType)
 3921              		.loc 2 1778 3
 3922 006a BB68     		ldr	r3, [r7, #8]
 3923 006c B3F5806F 		cmp	r3, #1024
 3924 0070 48D0     		beq	.L199
 3925 0072 BB68     		ldr	r3, [r7, #8]
 3926 0074 B3F5806F 		cmp	r3, #1024
 3927 0078 56D8     		bhi	.L200
 3928 007a BB68     		ldr	r3, [r7, #8]
 3929 007c B3F5007F 		cmp	r3, #512
 3930 0080 34D0     		beq	.L201
 3931 0082 BB68     		ldr	r3, [r7, #8]
 3932 0084 B3F5007F 		cmp	r3, #512
 3933 0088 4ED8     		bhi	.L200
 3934 008a BB68     		ldr	r3, [r7, #8]
 3935 008c B3F5807F 		cmp	r3, #256
 3936 0090 20D0     		beq	.L202
 3937 0092 BB68     		ldr	r3, [r7, #8]
 3938 0094 B3F5807F 		cmp	r3, #256
 3939 0098 46D8     		bhi	.L200
 3940 009a BB68     		ldr	r3, [r7, #8]
 3941 009c 022B     		cmp	r3, #2
 3942 009e 03D0     		beq	.L203
 3943 00a0 BB68     		ldr	r3, [r7, #8]
 3944 00a2 802B     		cmp	r3, #128
 3945 00a4 0BD0     		beq	.L204
ARM GAS  /tmp/ccp7RHPZ.s 			page 241


 3946 00a6 3FE0     		b	.L200
 3947              	.L203:
1779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling event */
1781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 3948              		.loc 2 1783 7
 3949 00a8 FB68     		ldr	r3, [r7, #12]
 3950 00aa 5B6D     		ldr	r3, [r3, #84]
 3951 00ac 43F40062 		orr	r2, r3, #2048
 3952 00b0 FB68     		ldr	r3, [r7, #12]
 3953 00b2 5A65     		str	r2, [r3, #84]
1784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 3954              		.loc 2 1786 7
 3955 00b4 FB68     		ldr	r3, [r7, #12]
 3956 00b6 1B68     		ldr	r3, [r3]
 3957 00b8 0222     		movs	r2, #2
 3958 00ba 1A60     		str	r2, [r3]
1787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3959              		.loc 2 1788 7
 3960 00bc 4AE0     		b	.L205
 3961              	.L204:
1789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For example:                                                             */
1795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD_EVENT:
1801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 3962              		.loc 2 1802 7
 3963 00be FB68     		ldr	r3, [r7, #12]
 3964 00c0 5B6D     		ldr	r3, [r3, #84]
 3965 00c2 43F48032 		orr	r2, r3, #65536
 3966 00c6 FB68     		ldr	r3, [r7, #12]
 3967 00c8 5A65     		str	r2, [r3, #84]
1803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 3968              		.loc 2 1805 7
 3969 00ca FB68     		ldr	r3, [r7, #12]
 3970 00cc 1B68     		ldr	r3, [r3]
 3971 00ce 8022     		movs	r2, #128
 3972 00d0 1A60     		str	r2, [r3]
1806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3973              		.loc 2 1807 7
ARM GAS  /tmp/ccp7RHPZ.s 			page 242


 3974 00d2 3FE0     		b	.L205
 3975              	.L202:
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 3976              		.loc 2 1812 7
 3977 00d4 FB68     		ldr	r3, [r7, #12]
 3978 00d6 5B6D     		ldr	r3, [r3, #84]
 3979 00d8 43F40032 		orr	r2, r3, #131072
 3980 00dc FB68     		ldr	r3, [r7, #12]
 3981 00de 5A65     		str	r2, [r3, #84]
1813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 3982              		.loc 2 1815 7
 3983 00e0 FB68     		ldr	r3, [r7, #12]
 3984 00e2 1B68     		ldr	r3, [r3]
 3985 00e4 4FF48072 		mov	r2, #256
 3986 00e8 1A60     		str	r2, [r3]
1816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 3987              		.loc 2 1817 7
 3988 00ea 33E0     		b	.L205
 3989              	.L201:
1818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 3990              		.loc 2 1822 7
 3991 00ec FB68     		ldr	r3, [r7, #12]
 3992 00ee 5B6D     		ldr	r3, [r3, #84]
 3993 00f0 43F48022 		orr	r2, r3, #262144
 3994 00f4 FB68     		ldr	r3, [r7, #12]
 3995 00f6 5A65     		str	r2, [r3, #84]
1823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 3996              		.loc 2 1825 7
 3997 00f8 FB68     		ldr	r3, [r7, #12]
 3998 00fa 1B68     		ldr	r3, [r3]
 3999 00fc 4FF40072 		mov	r2, #512
 4000 0100 1A60     		str	r2, [r3]
1826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 4001              		.loc 2 1827 7
 4002 0102 27E0     		b	.L205
 4003              	.L199:
1828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow event */
1830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_JQOVF_EVENT:
1831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 4004              		.loc 2 1832 7
 4005 0104 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccp7RHPZ.s 			page 243


 4006 0106 5B6D     		ldr	r3, [r3, #84]
 4007 0108 43F48042 		orr	r2, r3, #16384
 4008 010c FB68     		ldr	r3, [r7, #12]
 4009 010e 5A65     		str	r2, [r3, #84]
1833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to Injected context queue overflow */
1835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 4010              		.loc 2 1835 7
 4011 0110 FB68     		ldr	r3, [r7, #12]
 4012 0112 9B6D     		ldr	r3, [r3, #88]
 4013 0114 43F00802 		orr	r2, r3, #8
 4014 0118 FB68     		ldr	r3, [r7, #12]
 4015 011a 9A65     		str	r2, [r3, #88]
1836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC Injected context queue overflow flag */
1838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 4016              		.loc 2 1838 7
 4017 011c FB68     		ldr	r3, [r7, #12]
 4018 011e 1B68     		ldr	r3, [r3]
 4019 0120 4FF48062 		mov	r2, #1024
 4020 0124 1A60     		str	r2, [r3]
1839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 4021              		.loc 2 1840 7
 4022 0126 15E0     		b	.L205
 4023              	.L200:
1841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Overrun event */
1843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* considered as an error.                                                */
1846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* overrun ")                                                             */
1848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4024              		.loc 2 1848 21
 4025 0128 FB68     		ldr	r3, [r7, #12]
 4026 012a 1B6B     		ldr	r3, [r3, #48]
 4027              		.loc 2 1848 10
 4028 012c 002B     		cmp	r3, #0
 4029 012e 0CD1     		bne	.L206
1849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state */
1851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 4030              		.loc 2 1851 9
 4031 0130 FB68     		ldr	r3, [r7, #12]
 4032 0132 5B6D     		ldr	r3, [r3, #84]
 4033 0134 43F48062 		orr	r2, r3, #1024
 4034 0138 FB68     		ldr	r3, [r7, #12]
 4035 013a 5A65     		str	r2, [r3, #84]
1852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC error code to overrun */
1854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 4036              		.loc 2 1854 9
 4037 013c FB68     		ldr	r3, [r7, #12]
 4038 013e 9B6D     		ldr	r3, [r3, #88]
 4039 0140 43F00202 		orr	r2, r3, #2
 4040 0144 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccp7RHPZ.s 			page 244


 4041 0146 9A65     		str	r2, [r3, #88]
1855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            as OVR is cleared. */
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
 4042              		.loc 2 1863 7
 4043 0148 03E0     		b	.L208
 4044              	.L206:
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4045              		.loc 2 1861 9
 4046 014a FB68     		ldr	r3, [r7, #12]
 4047 014c 1B68     		ldr	r3, [r3]
 4048 014e 1022     		movs	r2, #16
 4049 0150 1A60     		str	r2, [r3]
 4050              	.L208:
 4051              		.loc 2 1863 7
 4052 0152 00BF     		nop
 4053              	.L205:
1864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 4054              		.loc 2 1867 10
 4055 0154 0023     		movs	r3, #0
 4056              	.L197:
1868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4057              		.loc 2 1868 1
 4058 0156 1846     		mov	r0, r3
 4059 0158 1837     		adds	r7, r7, #24
 4060              	.LCFI262:
 4061              		.cfi_def_cfa_offset 8
 4062 015a BD46     		mov	sp, r7
 4063              	.LCFI263:
 4064              		.cfi_def_cfa_register 13
 4065              		@ sp needed
 4066 015c 80BD     		pop	{r7, pc}
 4067              		.cfi_endproc
 4068              	.LFE338:
 4070              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 4071              		.align	1
 4072              		.global	HAL_ADC_Start_IT
 4073              		.syntax unified
 4074              		.thumb
 4075              		.thumb_func
 4076              		.fpu fpv5-d16
 4078              	HAL_ADC_Start_IT:
 4079              	.LFB339:
1869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
ARM GAS  /tmp/ccp7RHPZ.s 			page 245


1874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         OVR overrun.
1875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Start_IT() must be called for ADC Slave first, then for
1878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC Master.
1879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Slave, ADC is enabled only (conversion is not started).
1880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Master, ADC is enabled and multimode conversion is started.
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         mode), the user must:
1887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4080              		.loc 2 1894 1
 4081              		.cfi_startproc
 4082              		@ args = 0, pretend = 0, frame = 24
 4083              		@ frame_needed = 1, uses_anonymous_args = 0
 4084 0000 80B5     		push	{r7, lr}
 4085              	.LCFI264:
 4086              		.cfi_def_cfa_offset 8
 4087              		.cfi_offset 7, -8
 4088              		.cfi_offset 14, -4
 4089 0002 86B0     		sub	sp, sp, #24
 4090              	.LCFI265:
 4091              		.cfi_def_cfa_offset 32
 4092 0004 00AF     		add	r7, sp, #0
 4093              	.LCFI266:
 4094              		.cfi_def_cfa_register 7
 4095 0006 7860     		str	r0, [r7, #4]
1895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4096              		.loc 2 1897 55
 4097 0008 7B68     		ldr	r3, [r7, #4]
 4098 000a 1B68     		ldr	r3, [r3]
 4099              		.loc 2 1897 35
 4100 000c 974A     		ldr	r2, .L239
 4101 000e 9342     		cmp	r3, r2
 4102 0010 04D0     		beq	.L210
 4103              		.loc 2 1897 55 discriminator 2
 4104 0012 7B68     		ldr	r3, [r7, #4]
 4105 0014 1B68     		ldr	r3, [r3]
 4106 0016 964A     		ldr	r2, .L239+4
 4107 0018 9342     		cmp	r3, r2
 4108 001a 01D1     		bne	.L211
 4109              	.L210:
 4110              		.loc 2 1897 35 discriminator 3
 4111 001c 954B     		ldr	r3, .L239+8
 4112 001e 00E0     		b	.L212
ARM GAS  /tmp/ccp7RHPZ.s 			page 246


 4113              	.L211:
 4114              		.loc 2 1897 35 is_stmt 0 discriminator 4
 4115 0020 954B     		ldr	r3, .L239+12
 4116              	.L212:
 4117              		.loc 2 1897 35 discriminator 6
 4118 0022 1846     		mov	r0, r3
 4119 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4120 0028 3861     		str	r0, [r7, #16]
1898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4121              		.loc 2 1903 7 is_stmt 1 discriminator 6
 4122 002a 7B68     		ldr	r3, [r7, #4]
 4123 002c 1B68     		ldr	r3, [r3]
 4124 002e 1846     		mov	r0, r3
 4125 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4126 0034 0346     		mov	r3, r0
 4127              		.loc 2 1903 6 discriminator 6
 4128 0036 002B     		cmp	r3, #0
 4129 0038 40F00F81 		bne	.L213
1904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
1906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4130              		.loc 2 1906 5
 4131 003c 7B68     		ldr	r3, [r7, #4]
 4132 003e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4133 0042 012B     		cmp	r3, #1
 4134 0044 01D1     		bne	.L214
 4135              		.loc 2 1906 5 is_stmt 0 discriminator 1
 4136 0046 0223     		movs	r3, #2
 4137 0048 0CE1     		b	.L215
 4138              	.L214:
 4139              		.loc 2 1906 5 discriminator 2
 4140 004a 7B68     		ldr	r3, [r7, #4]
 4141 004c 0122     		movs	r2, #1
 4142 004e 83F85020 		strb	r2, [r3, #80]
1907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 4143              		.loc 2 1909 22 is_stmt 1 discriminator 2
 4144 0052 7868     		ldr	r0, [r7, #4]
 4145 0054 FFF7FEFF 		bl	ADC_Enable
 4146 0058 0346     		mov	r3, r0
 4147 005a FB75     		strb	r3, [r7, #23]
1910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4148              		.loc 2 1912 8 discriminator 2
 4149 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4150 005e 002B     		cmp	r3, #0
 4151 0060 40F0F680 		bne	.L216
1913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
ARM GAS  /tmp/ccp7RHPZ.s 			page 247


1916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4152              		.loc 2 1917 7
 4153 0064 7B68     		ldr	r3, [r7, #4]
 4154 0066 5A6D     		ldr	r2, [r3, #84]
 4155 0068 844B     		ldr	r3, .L239+16
 4156 006a 1340     		ands	r3, r3, r2
 4157 006c 43F48072 		orr	r2, r3, #256
 4158 0070 7B68     		ldr	r3, [r7, #4]
 4159 0072 5A65     		str	r2, [r3, #84]
1918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4160              		.loc 2 1924 12
 4161 0074 7B68     		ldr	r3, [r7, #4]
 4162 0076 1B68     		ldr	r3, [r3]
 4163 0078 7D4A     		ldr	r2, .L239+4
 4164 007a 9342     		cmp	r3, r2
 4165 007c 02D0     		beq	.L217
 4166              		.loc 2 1924 12 is_stmt 0 discriminator 1
 4167 007e 7B68     		ldr	r3, [r7, #4]
 4168 0080 1B68     		ldr	r3, [r3]
 4169 0082 00E0     		b	.L218
 4170              	.L217:
 4171              		.loc 2 1924 12 discriminator 2
 4172 0084 794B     		ldr	r3, .L239
 4173              	.L218:
 4174              		.loc 2 1924 66 is_stmt 1 discriminator 4
 4175 0086 7A68     		ldr	r2, [r7, #4]
 4176 0088 1268     		ldr	r2, [r2]
 4177              		.loc 2 1924 10 discriminator 4
 4178 008a 9342     		cmp	r3, r2
 4179 008c 02D0     		beq	.L219
1925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4180              		.loc 2 1925 11
 4181 008e 3B69     		ldr	r3, [r7, #16]
 4182 0090 002B     		cmp	r3, #0
 4183 0092 05D1     		bne	.L220
 4184              	.L219:
1926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4185              		.loc 2 1928 9
 4186 0094 7B68     		ldr	r3, [r7, #4]
 4187 0096 5B6D     		ldr	r3, [r3, #84]
 4188 0098 23F48012 		bic	r2, r3, #1048576
 4189 009c 7B68     		ldr	r3, [r7, #4]
 4190 009e 5A65     		str	r2, [r3, #84]
 4191              	.L220:
1929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
ARM GAS  /tmp/ccp7RHPZ.s 			page 248


1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4192              		.loc 2 1933 16
 4193 00a0 7B68     		ldr	r3, [r7, #4]
 4194 00a2 5B6D     		ldr	r3, [r3, #84]
 4195              		.loc 2 1933 24
 4196 00a4 03F48053 		and	r3, r3, #4096
 4197              		.loc 2 1933 10
 4198 00a8 002B     		cmp	r3, #0
 4199 00aa 06D0     		beq	.L221
1934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4200              		.loc 2 1936 9
 4201 00ac 7B68     		ldr	r3, [r7, #4]
 4202 00ae 9B6D     		ldr	r3, [r3, #88]
 4203 00b0 23F00602 		bic	r2, r3, #6
 4204 00b4 7B68     		ldr	r3, [r7, #4]
 4205 00b6 9A65     		str	r2, [r3, #88]
 4206 00b8 02E0     		b	.L222
 4207              	.L221:
1937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 4208              		.loc 2 1941 9
 4209 00ba 7B68     		ldr	r3, [r7, #4]
 4210 00bc 0022     		movs	r2, #0
 4211 00be 9A65     		str	r2, [r3, #88]
 4212              	.L222:
1942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4213              		.loc 2 1946 7
 4214 00c0 7B68     		ldr	r3, [r7, #4]
 4215 00c2 1B68     		ldr	r3, [r3]
 4216 00c4 1C22     		movs	r2, #28
 4217 00c6 1A60     		str	r2, [r3]
1947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4218              		.loc 2 1951 7
 4219 00c8 7B68     		ldr	r3, [r7, #4]
 4220 00ca 0022     		movs	r2, #0
 4221 00cc 83F85020 		strb	r2, [r3, #80]
1952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4222              		.loc 2 1954 7
 4223 00d0 7B68     		ldr	r3, [r7, #4]
 4224 00d2 1B68     		ldr	r3, [r3]
 4225 00d4 5A68     		ldr	r2, [r3, #4]
 4226 00d6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 249


 4227 00d8 1B68     		ldr	r3, [r3]
 4228 00da 22F01C02 		bic	r2, r2, #28
 4229 00de 5A60     		str	r2, [r3, #4]
1955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
 4230              		.loc 2 1957 25
 4231 00e0 7B68     		ldr	r3, [r7, #4]
 4232 00e2 1B69     		ldr	r3, [r3, #16]
 4233              		.loc 2 1957 7
 4234 00e4 082B     		cmp	r3, #8
 4235 00e6 08D1     		bne	.L223
1958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 4236              		.loc 2 1960 11
 4237 00e8 7B68     		ldr	r3, [r7, #4]
 4238 00ea 1B68     		ldr	r3, [r3]
 4239 00ec 5A68     		ldr	r2, [r3, #4]
 4240 00ee 7B68     		ldr	r3, [r7, #4]
 4241 00f0 1B68     		ldr	r3, [r3]
 4242 00f2 42F00802 		orr	r2, r2, #8
 4243 00f6 5A60     		str	r2, [r3, #4]
1961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4244              		.loc 2 1961 11
 4245 00f8 08E0     		b	.L224
 4246              	.L223:
1962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default:
1964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 4247              		.loc 2 1964 11
 4248 00fa 7B68     		ldr	r3, [r7, #4]
 4249 00fc 1B68     		ldr	r3, [r3]
 4250 00fe 5A68     		ldr	r2, [r3, #4]
 4251 0100 7B68     		ldr	r3, [r7, #4]
 4252 0102 1B68     		ldr	r3, [r3]
 4253 0104 42F00402 		orr	r2, r2, #4
 4254 0108 5A60     		str	r2, [r3, #4]
1965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4255              		.loc 2 1965 11
 4256 010a 00BF     		nop
 4257              	.L224:
1966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4258              		.loc 2 1972 21
 4259 010c 7B68     		ldr	r3, [r7, #4]
 4260 010e 1B6B     		ldr	r3, [r3, #48]
 4261              		.loc 2 1972 10
 4262 0110 002B     		cmp	r3, #0
 4263 0112 07D1     		bne	.L225
1973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
ARM GAS  /tmp/ccp7RHPZ.s 			page 250


 4264              		.loc 2 1974 9
 4265 0114 7B68     		ldr	r3, [r7, #4]
 4266 0116 1B68     		ldr	r3, [r3]
 4267 0118 5A68     		ldr	r2, [r3, #4]
 4268 011a 7B68     		ldr	r3, [r7, #4]
 4269 011c 1B68     		ldr	r3, [r3]
 4270 011e 42F01002 		orr	r2, r2, #16
 4271 0122 5A60     		str	r2, [r3, #4]
 4272              	.L225:
1975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4273              		.loc 2 1985 12
 4274 0124 7B68     		ldr	r3, [r7, #4]
 4275 0126 1B68     		ldr	r3, [r3]
 4276 0128 514A     		ldr	r2, .L239+4
 4277 012a 9342     		cmp	r3, r2
 4278 012c 02D0     		beq	.L226
 4279              		.loc 2 1985 12 is_stmt 0 discriminator 1
 4280 012e 7B68     		ldr	r3, [r7, #4]
 4281 0130 1B68     		ldr	r3, [r3]
 4282 0132 00E0     		b	.L227
 4283              	.L226:
 4284              		.loc 2 1985 12 discriminator 2
 4285 0134 4D4B     		ldr	r3, .L239
 4286              	.L227:
 4287              		.loc 2 1985 66 is_stmt 1 discriminator 4
 4288 0136 7A68     		ldr	r2, [r7, #4]
 4289 0138 1268     		ldr	r2, [r2]
 4290              		.loc 2 1985 10 discriminator 4
 4291 013a 9342     		cmp	r3, r2
 4292 013c 08D0     		beq	.L228
1986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4293              		.loc 2 1986 11
 4294 013e 3B69     		ldr	r3, [r7, #16]
 4295 0140 002B     		cmp	r3, #0
 4296 0142 05D0     		beq	.L228
1987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4297              		.loc 2 1987 11
 4298 0144 3B69     		ldr	r3, [r7, #16]
 4299 0146 052B     		cmp	r3, #5
 4300 0148 02D0     		beq	.L228
1988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4301              		.loc 2 1988 11
 4302 014a 3B69     		ldr	r3, [r7, #16]
 4303 014c 092B     		cmp	r3, #9
 4304 014e 3BD1     		bne	.L229
 4305              	.L228:
1989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
ARM GAS  /tmp/ccp7RHPZ.s 			page 251


1990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4306              		.loc 2 1992 13
 4307 0150 7B68     		ldr	r3, [r7, #4]
 4308 0152 1B68     		ldr	r3, [r3]
 4309 0154 DB68     		ldr	r3, [r3, #12]
 4310 0156 03F00073 		and	r3, r3, #33554432
 4311              		.loc 2 1992 12
 4312 015a 002B     		cmp	r3, #0
 4313 015c 2DD0     		beq	.L237
1993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4314              		.loc 2 1994 11
 4315 015e 7B68     		ldr	r3, [r7, #4]
 4316 0160 5B6D     		ldr	r3, [r3, #84]
 4317 0162 23F44053 		bic	r3, r3, #12288
 4318 0166 43F48052 		orr	r2, r3, #4096
 4319 016a 7B68     		ldr	r3, [r7, #4]
 4320 016c 5A65     		str	r2, [r3, #84]
1995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Enable as well injected interruptions in case
1997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            allows to start regular and injected conversions when JAUTO is
1999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            set with a single call to HAL_ADC_Start_IT() */
2000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4321              		.loc 2 2000 29
 4322 016e 7B68     		ldr	r3, [r7, #4]
 4323 0170 1B69     		ldr	r3, [r3, #16]
 4324              		.loc 2 2000 11
 4325 0172 082B     		cmp	r3, #8
 4326 0174 10D1     		bne	.L231
2001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
2003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4327              		.loc 2 2003 15
 4328 0176 7B68     		ldr	r3, [r7, #4]
 4329 0178 1B68     		ldr	r3, [r3]
 4330 017a 5A68     		ldr	r2, [r3, #4]
 4331 017c 7B68     		ldr	r3, [r7, #4]
 4332 017e 1B68     		ldr	r3, [r3]
 4333 0180 22F02002 		bic	r2, r2, #32
 4334 0184 5A60     		str	r2, [r3, #4]
2004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4335              		.loc 2 2004 15
 4336 0186 7B68     		ldr	r3, [r7, #4]
 4337 0188 1B68     		ldr	r3, [r3]
 4338 018a 5A68     		ldr	r2, [r3, #4]
 4339 018c 7B68     		ldr	r3, [r7, #4]
 4340 018e 1B68     		ldr	r3, [r3]
 4341 0190 42F04002 		orr	r2, r2, #64
 4342 0194 5A60     		str	r2, [r3, #4]
2005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4343              		.loc 2 2005 15
 4344 0196 11E0     		b	.L230
 4345              	.L231:
2006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
ARM GAS  /tmp/ccp7RHPZ.s 			page 252


2007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
2008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4346              		.loc 2 2008 15
 4347 0198 7B68     		ldr	r3, [r7, #4]
 4348 019a 1B68     		ldr	r3, [r3]
 4349 019c 5A68     		ldr	r2, [r3, #4]
 4350 019e 7B68     		ldr	r3, [r7, #4]
 4351 01a0 1B68     		ldr	r3, [r3]
 4352 01a2 22F04002 		bic	r2, r2, #64
 4353 01a6 5A60     		str	r2, [r3, #4]
2009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4354              		.loc 2 2009 15
 4355 01a8 7B68     		ldr	r3, [r7, #4]
 4356 01aa 1B68     		ldr	r3, [r3]
 4357 01ac 5A68     		ldr	r2, [r3, #4]
 4358 01ae 7B68     		ldr	r3, [r7, #4]
 4359 01b0 1B68     		ldr	r3, [r3]
 4360 01b2 42F02002 		orr	r2, r2, #32
 4361 01b6 5A60     		str	r2, [r3, #4]
2010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4362              		.loc 2 2010 15
 4363 01b8 00E0     		b	.L230
 4364              	.L237:
2011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4365              		.loc 2 2012 9
 4366 01ba 00BF     		nop
 4367              	.L230:
2013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
2015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 4368              		.loc 2 2015 9
 4369 01bc 7B68     		ldr	r3, [r7, #4]
 4370 01be 1B68     		ldr	r3, [r3]
 4371 01c0 1846     		mov	r0, r3
 4372 01c2 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 4373 01c6 4CE0     		b	.L236
 4374              	.L229:
2016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
2020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4375              		.loc 2 2020 9
 4376 01c8 7B68     		ldr	r3, [r7, #4]
 4377 01ca 5B6D     		ldr	r3, [r3, #84]
 4378 01cc 43F48012 		orr	r2, r3, #1048576
 4379 01d0 7B68     		ldr	r3, [r7, #4]
 4380 01d2 5A65     		str	r2, [r3, #84]
2021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
2022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            are enabled nevertheless (for same reason as above) */
2023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 4381              		.loc 2 2023 25
 4382 01d4 7B68     		ldr	r3, [r7, #4]
 4383 01d6 1B68     		ldr	r3, [r3]
 4384 01d8 254A     		ldr	r2, .L239+4
 4385 01da 9342     		cmp	r3, r2
ARM GAS  /tmp/ccp7RHPZ.s 			page 253


 4386 01dc 02D0     		beq	.L233
 4387              		.loc 2 2023 25 is_stmt 0 discriminator 1
 4388 01de 7B68     		ldr	r3, [r7, #4]
 4389 01e0 1B68     		ldr	r3, [r3]
 4390 01e2 00E0     		b	.L234
 4391              	.L233:
 4392              		.loc 2 2023 25 discriminator 2
 4393 01e4 214B     		ldr	r3, .L239
 4394              	.L234:
 4395              		.loc 2 2023 23 is_stmt 1 discriminator 4
 4396 01e6 FB60     		str	r3, [r7, #12]
2024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4397              		.loc 2 2024 13 discriminator 4
 4398 01e8 FB68     		ldr	r3, [r7, #12]
 4399 01ea DB68     		ldr	r3, [r3, #12]
 4400 01ec 03F00073 		and	r3, r3, #33554432
 4401              		.loc 2 2024 12 discriminator 4
 4402 01f0 002B     		cmp	r3, #0
 4403 01f2 35D0     		beq	.L238
2025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
2027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              and in resetting HAL_ADC_STATE_INJ_EOC bit */
2028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4404              		.loc 2 2028 11
 4405 01f4 7B68     		ldr	r3, [r7, #4]
 4406 01f6 5B6D     		ldr	r3, [r3, #84]
 4407 01f8 23F44053 		bic	r3, r3, #12288
 4408 01fc 43F48052 		orr	r2, r3, #4096
 4409 0200 7B68     		ldr	r3, [r7, #4]
 4410 0202 5A65     		str	r2, [r3, #84]
2029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
2030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4411              		.loc 2 2030 29
 4412 0204 7B68     		ldr	r3, [r7, #4]
 4413 0206 1B69     		ldr	r3, [r3, #16]
 4414              		.loc 2 2030 11
 4415 0208 082B     		cmp	r3, #8
 4416 020a 10D1     		bne	.L235
2031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
2033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4417              		.loc 2 2033 15
 4418 020c 7B68     		ldr	r3, [r7, #4]
 4419 020e 1B68     		ldr	r3, [r3]
 4420 0210 5A68     		ldr	r2, [r3, #4]
 4421 0212 7B68     		ldr	r3, [r7, #4]
 4422 0214 1B68     		ldr	r3, [r3]
 4423 0216 22F02002 		bic	r2, r2, #32
 4424 021a 5A60     		str	r2, [r3, #4]
2034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4425              		.loc 2 2034 15
 4426 021c 7B68     		ldr	r3, [r7, #4]
 4427 021e 1B68     		ldr	r3, [r3]
 4428 0220 5A68     		ldr	r2, [r3, #4]
 4429 0222 7B68     		ldr	r3, [r7, #4]
 4430 0224 1B68     		ldr	r3, [r3]
 4431 0226 42F04002 		orr	r2, r2, #64
ARM GAS  /tmp/ccp7RHPZ.s 			page 254


 4432 022a 5A60     		str	r2, [r3, #4]
2035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4433              		.loc 2 2035 15
 4434 022c 19E0     		b	.L236
 4435              	.L235:
2036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
2037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
2038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4436              		.loc 2 2038 15
 4437 022e 7B68     		ldr	r3, [r7, #4]
 4438 0230 1B68     		ldr	r3, [r3]
 4439 0232 5A68     		ldr	r2, [r3, #4]
 4440 0234 7B68     		ldr	r3, [r7, #4]
 4441 0236 1B68     		ldr	r3, [r3]
 4442 0238 22F04002 		bic	r2, r2, #64
 4443 023c 5A60     		str	r2, [r3, #4]
2039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4444              		.loc 2 2039 15
 4445 023e 7B68     		ldr	r3, [r7, #4]
 4446 0240 1B68     		ldr	r3, [r3]
 4447 0242 5A68     		ldr	r2, [r3, #4]
 4448 0244 7B68     		ldr	r3, [r7, #4]
 4449 0246 1B68     		ldr	r3, [r3]
 4450 0248 42F02002 		orr	r2, r2, #32
 4451 024c 5A60     		str	r2, [r3, #4]
2040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4452              		.loc 2 2040 15
 4453 024e 08E0     		b	.L236
 4454              	.L216:
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4455              		.loc 2 2048 7
 4456 0250 7B68     		ldr	r3, [r7, #4]
 4457 0252 0022     		movs	r2, #0
 4458 0254 83F85020 		strb	r2, [r3, #80]
 4459 0258 03E0     		b	.L236
 4460              	.L213:
2049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 4461              		.loc 2 2054 20
 4462 025a 0223     		movs	r3, #2
 4463 025c FB75     		strb	r3, [r7, #23]
 4464 025e 00E0     		b	.L236
 4465              	.L238:
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4466              		.loc 2 2042 9
 4467 0260 00BF     		nop
ARM GAS  /tmp/ccp7RHPZ.s 			page 255


 4468              	.L236:
2055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4469              		.loc 2 2058 10
 4470 0262 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4471              	.L215:
2059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4472              		.loc 2 2059 1
 4473 0264 1846     		mov	r0, r3
 4474 0266 1837     		adds	r7, r7, #24
 4475              	.LCFI267:
 4476              		.cfi_def_cfa_offset 8
 4477 0268 BD46     		mov	sp, r7
 4478              	.LCFI268:
 4479              		.cfi_def_cfa_register 13
 4480              		@ sp needed
 4481 026a 80BD     		pop	{r7, pc}
 4482              	.L240:
 4483              		.align	2
 4484              	.L239:
 4485 026c 00200240 		.word	1073881088
 4486 0270 00210240 		.word	1073881344
 4487 0274 00230240 		.word	1073881856
 4488 0278 00630258 		.word	1476551424
 4489 027c FEF0FFFF 		.word	-3842
 4490              		.cfi_endproc
 4491              	.LFE339:
 4493              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 4494              		.align	1
 4495              		.global	HAL_ADC_Stop_IT
 4496              		.syntax unified
 4497              		.thumb
 4498              		.thumb_func
 4499              		.fpu fpv5-d16
 4501              	HAL_ADC_Stop_IT:
 4502              	.LFB340:
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
2064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
2065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
2069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4503              		.loc 2 2069 1
 4504              		.cfi_startproc
 4505              		@ args = 0, pretend = 0, frame = 16
 4506              		@ frame_needed = 1, uses_anonymous_args = 0
 4507 0000 80B5     		push	{r7, lr}
 4508              	.LCFI269:
 4509              		.cfi_def_cfa_offset 8
 4510              		.cfi_offset 7, -8
 4511              		.cfi_offset 14, -4
ARM GAS  /tmp/ccp7RHPZ.s 			page 256


 4512 0002 84B0     		sub	sp, sp, #16
 4513              	.LCFI270:
 4514              		.cfi_def_cfa_offset 24
 4515 0004 00AF     		add	r7, sp, #0
 4516              	.LCFI271:
 4517              		.cfi_def_cfa_register 7
 4518 0006 7860     		str	r0, [r7, #4]
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 4519              		.loc 2 2076 3
 4520 0008 7B68     		ldr	r3, [r7, #4]
 4521 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4522 000e 012B     		cmp	r3, #1
 4523 0010 01D1     		bne	.L242
 4524              		.loc 2 2076 3 is_stmt 0 discriminator 1
 4525 0012 0223     		movs	r3, #2
 4526 0014 29E0     		b	.L243
 4527              	.L242:
 4528              		.loc 2 2076 3 discriminator 2
 4529 0016 7B68     		ldr	r3, [r7, #4]
 4530 0018 0122     		movs	r2, #1
 4531 001a 83F85020 		strb	r2, [r3, #80]
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
2079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 4532              		.loc 2 2079 20 is_stmt 1 discriminator 2
 4533 001e 0321     		movs	r1, #3
 4534 0020 7868     		ldr	r0, [r7, #4]
 4535 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4536 0026 0346     		mov	r3, r0
 4537 0028 FB73     		strb	r3, [r7, #15]
2080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 4538              		.loc 2 2082 6 discriminator 2
 4539 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4540 002c 002B     		cmp	r3, #0
 4541 002e 17D1     		bne	.L244
2083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
2085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4542              		.loc 2 2086 5
 4543 0030 7B68     		ldr	r3, [r7, #4]
 4544 0032 1B68     		ldr	r3, [r3]
 4545 0034 5A68     		ldr	r2, [r3, #4]
 4546 0036 7B68     		ldr	r3, [r7, #4]
 4547 0038 1B68     		ldr	r3, [r3]
 4548 003a 22F01C02 		bic	r2, r2, #28
 4549 003e 5A60     		str	r2, [r3, #4]
2087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
ARM GAS  /tmp/ccp7RHPZ.s 			page 257


2089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 4550              		.loc 2 2089 22
 4551 0040 7868     		ldr	r0, [r7, #4]
 4552 0042 FFF7FEFF 		bl	ADC_Disable
 4553 0046 0346     		mov	r3, r0
 4554 0048 FB73     		strb	r3, [r7, #15]
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4555              		.loc 2 2092 8
 4556 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4557 004c 002B     		cmp	r3, #0
 4558 004e 07D1     		bne	.L244
2093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4559              		.loc 2 2095 7
 4560 0050 7B68     		ldr	r3, [r7, #4]
 4561 0052 5A6D     		ldr	r2, [r3, #84]
 4562 0054 074B     		ldr	r3, .L245
 4563 0056 1340     		ands	r3, r3, r2
 4564 0058 43F00102 		orr	r2, r3, #1
 4565 005c 7B68     		ldr	r3, [r7, #4]
 4566 005e 5A65     		str	r2, [r3, #84]
 4567              	.L244:
2096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 4568              		.loc 2 2102 3
 4569 0060 7B68     		ldr	r3, [r7, #4]
 4570 0062 0022     		movs	r2, #0
 4571 0064 83F85020 		strb	r2, [r3, #80]
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4572              		.loc 2 2105 10
 4573 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4574              	.L243:
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4575              		.loc 2 2106 1
 4576 006a 1846     		mov	r0, r3
 4577 006c 1037     		adds	r7, r7, #16
 4578              	.LCFI272:
 4579              		.cfi_def_cfa_offset 8
 4580 006e BD46     		mov	sp, r7
 4581              	.LCFI273:
 4582              		.cfi_def_cfa_register 13
 4583              		@ sp needed
 4584 0070 80BD     		pop	{r7, pc}
 4585              	.L246:
 4586 0072 00BF     		.align	2
 4587              	.L245:
 4588 0074 FEEEFFFF 		.word	-4354
ARM GAS  /tmp/ccp7RHPZ.s 			page 258


 4589              		.cfi_endproc
 4590              	.LFE340:
 4592              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4593              		.align	1
 4594              		.global	HAL_ADC_Start_DMA
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv5-d16
 4600              	HAL_ADC_Start_DMA:
 4601              	.LFB341:
2107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
2110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
2111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
2112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
2113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available): HAL_ADC_Start_DMA()
2114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is designed for single-ADC mode only. For multimode, the dedicated
2115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADCEx_MultiModeStart_DMA() function must be used.
2116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param pData Destination Buffer address.
2118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
2119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
2122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4602              		.loc 2 2122 1
 4603              		.cfi_startproc
 4604              		@ args = 0, pretend = 0, frame = 24
 4605              		@ frame_needed = 1, uses_anonymous_args = 0
 4606 0000 80B5     		push	{r7, lr}
 4607              	.LCFI274:
 4608              		.cfi_def_cfa_offset 8
 4609              		.cfi_offset 7, -8
 4610              		.cfi_offset 14, -4
 4611 0002 86B0     		sub	sp, sp, #24
 4612              	.LCFI275:
 4613              		.cfi_def_cfa_offset 32
 4614 0004 00AF     		add	r7, sp, #0
 4615              	.LCFI276:
 4616              		.cfi_def_cfa_register 7
 4617 0006 F860     		str	r0, [r7, #12]
 4618 0008 B960     		str	r1, [r7, #8]
 4619 000a 7A60     		str	r2, [r7, #4]
2123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4620              		.loc 2 2124 55
 4621 000c FB68     		ldr	r3, [r7, #12]
 4622 000e 1B68     		ldr	r3, [r3]
 4623              		.loc 2 2124 35
 4624 0010 554A     		ldr	r2, .L266
 4625 0012 9342     		cmp	r3, r2
 4626 0014 04D0     		beq	.L248
 4627              		.loc 2 2124 55 discriminator 2
 4628 0016 FB68     		ldr	r3, [r7, #12]
 4629 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 259


 4630 001a 544A     		ldr	r2, .L266+4
 4631 001c 9342     		cmp	r3, r2
 4632 001e 01D1     		bne	.L249
 4633              	.L248:
 4634              		.loc 2 2124 35 discriminator 3
 4635 0020 534B     		ldr	r3, .L266+8
 4636 0022 00E0     		b	.L250
 4637              	.L249:
 4638              		.loc 2 2124 35 is_stmt 0 discriminator 4
 4639 0024 534B     		ldr	r3, .L266+12
 4640              	.L250:
 4641              		.loc 2 2124 35 discriminator 6
 4642 0026 1846     		mov	r0, r3
 4643 0028 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4644 002c 3861     		str	r0, [r7, #16]
2125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4645              		.loc 2 2130 7 is_stmt 1 discriminator 6
 4646 002e FB68     		ldr	r3, [r7, #12]
 4647 0030 1B68     		ldr	r3, [r3]
 4648 0032 1846     		mov	r0, r3
 4649 0034 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4650 0038 0346     		mov	r3, r0
 4651              		.loc 2 2130 6 discriminator 6
 4652 003a 002B     		cmp	r3, #0
 4653 003c 40F08C80 		bne	.L251
2131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
2133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4654              		.loc 2 2133 5
 4655 0040 FB68     		ldr	r3, [r7, #12]
 4656 0042 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4657 0046 012B     		cmp	r3, #1
 4658 0048 01D1     		bne	.L252
 4659              		.loc 2 2133 5 is_stmt 0 discriminator 1
 4660 004a 0223     		movs	r3, #2
 4661 004c 87E0     		b	.L253
 4662              	.L252:
 4663              		.loc 2 2133 5 discriminator 2
 4664 004e FB68     		ldr	r3, [r7, #12]
 4665 0050 0122     		movs	r2, #1
 4666 0052 83F85020 		strb	r2, [r3, #80]
2134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Ensure that multimode regular conversions are not enabled.   */
2136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
2137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4667              		.loc 2 2137 8 is_stmt 1 discriminator 2
 4668 0056 3B69     		ldr	r3, [r7, #16]
 4669 0058 002B     		cmp	r3, #0
 4670 005a 05D0     		beq	.L254
2138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4671              		.loc 2 2138 9
 4672 005c 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccp7RHPZ.s 			page 260


 4673 005e 052B     		cmp	r3, #5
 4674 0060 02D0     		beq	.L254
2139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4675              		.loc 2 2139 9
 4676 0062 3B69     		ldr	r3, [r7, #16]
 4677 0064 092B     		cmp	r3, #9
 4678 0066 70D1     		bne	.L255
 4679              	.L254:
2140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable the ADC peripheral */
2143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 4680              		.loc 2 2143 24
 4681 0068 F868     		ldr	r0, [r7, #12]
 4682 006a FFF7FEFF 		bl	ADC_Enable
 4683 006e 0346     		mov	r3, r0
 4684 0070 FB75     		strb	r3, [r7, #23]
2144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Start conversion if ADC is effectively enabled */
2146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 4685              		.loc 2 2146 10
 4686 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4687 0074 002B     		cmp	r3, #0
 4688 0076 63D1     		bne	.L256
2147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state                                                        */
2149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Clear state bitfield related to regular group conversion results   */
2150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Set state bitfield related to regular operation                    */
2151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 4689              		.loc 2 2151 9
 4690 0078 FB68     		ldr	r3, [r7, #12]
 4691 007a 5A6D     		ldr	r2, [r3, #84]
 4692 007c 3E4B     		ldr	r3, .L266+16
 4693 007e 1340     		ands	r3, r3, r2
 4694 0080 43F48072 		orr	r2, r3, #256
 4695 0084 FB68     		ldr	r3, [r7, #12]
 4696 0086 5A65     		str	r2, [r3, #84]
2152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY);
2154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
2156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if ADC instance is master or if multimode feature is not available
2157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if multimode setting is disabled (ADC instance slave in independent mode) */
2158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4697              		.loc 2 2158 14
 4698 0088 FB68     		ldr	r3, [r7, #12]
 4699 008a 1B68     		ldr	r3, [r3]
 4700 008c 374A     		ldr	r2, .L266+4
 4701 008e 9342     		cmp	r3, r2
 4702 0090 02D0     		beq	.L257
 4703              		.loc 2 2158 14 is_stmt 0 discriminator 1
 4704 0092 FB68     		ldr	r3, [r7, #12]
 4705 0094 1B68     		ldr	r3, [r3]
 4706 0096 00E0     		b	.L258
 4707              	.L257:
 4708              		.loc 2 2158 14 discriminator 2
 4709 0098 334B     		ldr	r3, .L266
ARM GAS  /tmp/ccp7RHPZ.s 			page 261


 4710              	.L258:
 4711              		.loc 2 2158 68 is_stmt 1 discriminator 4
 4712 009a FA68     		ldr	r2, [r7, #12]
 4713 009c 1268     		ldr	r2, [r2]
 4714              		.loc 2 2158 12 discriminator 4
 4715 009e 9342     		cmp	r3, r2
 4716 00a0 02D0     		beq	.L259
2159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4717              		.loc 2 2159 13
 4718 00a2 3B69     		ldr	r3, [r7, #16]
 4719 00a4 002B     		cmp	r3, #0
 4720 00a6 05D1     		bne	.L260
 4721              	.L259:
2160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            )
2161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4722              		.loc 2 2162 11
 4723 00a8 FB68     		ldr	r3, [r7, #12]
 4724 00aa 5B6D     		ldr	r3, [r3, #84]
 4725 00ac 23F48012 		bic	r2, r3, #1048576
 4726 00b0 FB68     		ldr	r3, [r7, #12]
 4727 00b2 5A65     		str	r2, [r3, #84]
 4728              	.L260:
2163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Check if a conversion is on going on ADC group injected */
2166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4729              		.loc 2 2166 18
 4730 00b4 FB68     		ldr	r3, [r7, #12]
 4731 00b6 5B6D     		ldr	r3, [r3, #84]
 4732              		.loc 2 2166 26
 4733 00b8 03F48053 		and	r3, r3, #4096
 4734              		.loc 2 2166 12
 4735 00bc 002B     		cmp	r3, #0
 4736 00be 06D0     		beq	.L261
2167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset ADC error code fields related to regular conversions only */
2169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4737              		.loc 2 2169 11
 4738 00c0 FB68     		ldr	r3, [r7, #12]
 4739 00c2 9B6D     		ldr	r3, [r3, #88]
 4740 00c4 23F00602 		bic	r2, r3, #6
 4741 00c8 FB68     		ldr	r3, [r7, #12]
 4742 00ca 9A65     		str	r2, [r3, #88]
 4743 00cc 02E0     		b	.L262
 4744              	.L261:
2170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset all ADC error code fields */
2174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_CLEAR_ERRORCODE(hadc);
 4745              		.loc 2 2174 11
 4746 00ce FB68     		ldr	r3, [r7, #12]
 4747 00d0 0022     		movs	r2, #0
 4748 00d2 9A65     		str	r2, [r3, #88]
 4749              	.L262:
2175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
ARM GAS  /tmp/ccp7RHPZ.s 			page 262


2176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA transfer complete callback */
2178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 4750              		.loc 2 2178 13
 4751 00d4 FB68     		ldr	r3, [r7, #12]
 4752 00d6 DB6C     		ldr	r3, [r3, #76]
 4753              		.loc 2 2178 44
 4754 00d8 284A     		ldr	r2, .L266+20
 4755 00da DA63     		str	r2, [r3, #60]
2179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA half transfer complete callback */
2181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 4756              		.loc 2 2181 13
 4757 00dc FB68     		ldr	r3, [r7, #12]
 4758 00de DB6C     		ldr	r3, [r3, #76]
 4759              		.loc 2 2181 48
 4760 00e0 274A     		ldr	r2, .L266+24
 4761 00e2 1A64     		str	r2, [r3, #64]
2182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA error callback */
2184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 4762              		.loc 2 2184 13
 4763 00e4 FB68     		ldr	r3, [r7, #12]
 4764 00e6 DB6C     		ldr	r3, [r3, #76]
 4765              		.loc 2 2184 45
 4766 00e8 264A     		ldr	r2, .L266+28
 4767 00ea DA64     		str	r2, [r3, #76]
2185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start,     */
2188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC start (in case of SW start):                                   */
2189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear regular group conversion flag and overrun flag               */
2191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* operations)                                                        */
2193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4768              		.loc 2 2193 9
 4769 00ec FB68     		ldr	r3, [r7, #12]
 4770 00ee 1B68     		ldr	r3, [r3]
 4771 00f0 1C22     		movs	r2, #28
 4772 00f2 1A60     		str	r2, [r3]
2194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4773              		.loc 2 2198 9
 4774 00f4 FB68     		ldr	r3, [r7, #12]
 4775 00f6 0022     		movs	r2, #0
 4776 00f8 83F85020 		strb	r2, [r3, #80]
2199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* With DMA, overrun event is always considered as an error even if
2201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
2202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            ADC_IT_OVR is enabled. */
2203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 4777              		.loc 2 2203 9
 4778 00fc FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccp7RHPZ.s 			page 263


 4779 00fe 1B68     		ldr	r3, [r3]
 4780 0100 5A68     		ldr	r2, [r3, #4]
 4781 0102 FB68     		ldr	r3, [r7, #12]
 4782 0104 1B68     		ldr	r3, [r3]
 4783 0106 42F01002 		orr	r2, r2, #16
 4784 010a 5A60     		str	r2, [r3, #4]
2204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable ADC DMA  mode*/
2206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.D
2210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableDMAReq(hadc->Instance);
2211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.C
2215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagemen
 4785              		.loc 2 2218 9
 4786 010c FB68     		ldr	r3, [r7, #12]
 4787 010e 1A68     		ldr	r2, [r3]
 4788              		.loc 2 2218 76
 4789 0110 FB68     		ldr	r3, [r7, #12]
 4790 0112 DB6A     		ldr	r3, [r3, #44]
 4791              		.loc 2 2218 9
 4792 0114 1946     		mov	r1, r3
 4793 0116 1046     		mov	r0, r2
 4794 0118 FFF7FEFF 		bl	LL_ADC_REG_SetDataTransferMode
2219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start the DMA channel */
2223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_
 4795              		.loc 2 2223 26
 4796 011c FB68     		ldr	r3, [r7, #12]
 4797 011e D86C     		ldr	r0, [r3, #76]
 4798              		.loc 2 2223 76
 4799 0120 FB68     		ldr	r3, [r7, #12]
 4800 0122 1B68     		ldr	r3, [r3]
 4801              		.loc 2 2223 71
 4802 0124 4033     		adds	r3, r3, #64
 4803              		.loc 2 2223 26
 4804 0126 1946     		mov	r1, r3
 4805 0128 BA68     		ldr	r2, [r7, #8]
 4806 012a 7B68     		ldr	r3, [r7, #4]
 4807 012c FFF7FEFF 		bl	HAL_DMA_Start_IT
 4808 0130 0346     		mov	r3, r0
 4809 0132 FB75     		strb	r3, [r7, #23]
2224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable conversion of regular group.                                  */
2226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If software start has been selected, conversion starts immediately.  */
2227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If external trigger has been selected, conversion will start at next */
2228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* trigger event.                                                       */
2229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
ARM GAS  /tmp/ccp7RHPZ.s 			page 264


2230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 4810              		.loc 2 2230 9
 4811 0134 FB68     		ldr	r3, [r7, #12]
 4812 0136 1B68     		ldr	r3, [r3]
 4813 0138 1846     		mov	r0, r3
 4814 013a FFF7FEFF 		bl	LL_ADC_REG_StartConversion
2146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4815              		.loc 2 2146 10
 4816 013e 0DE0     		b	.L265
 4817              	.L256:
2231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4818              		.loc 2 2235 9
 4819 0140 FB68     		ldr	r3, [r7, #12]
 4820 0142 0022     		movs	r2, #0
 4821 0144 83F85020 		strb	r2, [r3, #80]
2146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4822              		.loc 2 2146 10
 4823 0148 08E0     		b	.L265
 4824              	.L255:
2236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 4825              		.loc 2 2241 22
 4826 014a 0123     		movs	r3, #1
 4827 014c FB75     		strb	r3, [r7, #23]
2242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4828              		.loc 2 2243 7
 4829 014e FB68     		ldr	r3, [r7, #12]
 4830 0150 0022     		movs	r2, #0
 4831 0152 83F85020 		strb	r2, [r3, #80]
 4832 0156 01E0     		b	.L265
 4833              	.L251:
2244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 4834              		.loc 2 2248 20
 4835 0158 0223     		movs	r3, #2
 4836 015a FB75     		strb	r3, [r7, #23]
 4837              	.L265:
2249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4838              		.loc 2 2252 10
 4839 015c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4840              	.L253:
2253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 265


 4841              		.loc 2 2253 1
 4842 015e 1846     		mov	r0, r3
 4843 0160 1837     		adds	r7, r7, #24
 4844              	.LCFI277:
 4845              		.cfi_def_cfa_offset 8
 4846 0162 BD46     		mov	sp, r7
 4847              	.LCFI278:
 4848              		.cfi_def_cfa_register 13
 4849              		@ sp needed
 4850 0164 80BD     		pop	{r7, pc}
 4851              	.L267:
 4852 0166 00BF     		.align	2
 4853              	.L266:
 4854 0168 00200240 		.word	1073881088
 4855 016c 00210240 		.word	1073881344
 4856 0170 00230240 		.word	1073881856
 4857 0174 00630258 		.word	1476551424
 4858 0178 FEF0FFFF 		.word	-3842
 4859 017c 00000000 		.word	ADC_DMAConvCplt
 4860 0180 00000000 		.word	ADC_DMAHalfConvCplt
 4861 0184 00000000 		.word	ADC_DMAError
 4862              		.cfi_endproc
 4863              	.LFE341:
 4865              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 4866              		.align	1
 4867              		.global	HAL_ADC_Stop_DMA
 4868              		.syntax unified
 4869              		.thumb
 4870              		.thumb_func
 4871              		.fpu fpv5-d16
 4873              	HAL_ADC_Stop_DMA:
 4874              	.LFB342:
2254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
2258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC peripheral.
2259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
2260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on ADC group injected. If ADC group injected is under use, it
2261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
2263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Stop_DMA() function is dedicated to single-ADC mode only.
2264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
2265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
2269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 4875              		.loc 2 2269 1
 4876              		.cfi_startproc
 4877              		@ args = 0, pretend = 0, frame = 16
 4878              		@ frame_needed = 1, uses_anonymous_args = 0
 4879 0000 80B5     		push	{r7, lr}
 4880              	.LCFI279:
 4881              		.cfi_def_cfa_offset 8
 4882              		.cfi_offset 7, -8
 4883              		.cfi_offset 14, -4
ARM GAS  /tmp/ccp7RHPZ.s 			page 266


 4884 0002 84B0     		sub	sp, sp, #16
 4885              	.LCFI280:
 4886              		.cfi_def_cfa_offset 24
 4887 0004 00AF     		add	r7, sp, #0
 4888              	.LCFI281:
 4889              		.cfi_def_cfa_register 7
 4890 0006 7860     		str	r0, [r7, #4]
2270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 4891              		.loc 2 2276 3
 4892 0008 7B68     		ldr	r3, [r7, #4]
 4893 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4894 000e 012B     		cmp	r3, #1
 4895 0010 01D1     		bne	.L269
 4896              		.loc 2 2276 3 is_stmt 0 discriminator 1
 4897 0012 0223     		movs	r3, #2
 4898 0014 4FE0     		b	.L270
 4899              	.L269:
 4900              		.loc 2 2276 3 discriminator 2
 4901 0016 7B68     		ldr	r3, [r7, #4]
 4902 0018 0122     		movs	r2, #1
 4903 001a 83F85020 		strb	r2, [r3, #80]
2277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
2279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 4904              		.loc 2 2279 20 is_stmt 1 discriminator 2
 4905 001e 0321     		movs	r1, #3
 4906 0020 7868     		ldr	r0, [r7, #4]
 4907 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4908 0026 0346     		mov	r3, r0
 4909 0028 FB73     		strb	r3, [r7, #15]
2280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 4910              		.loc 2 2282 6 discriminator 2
 4911 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4912 002c 002B     		cmp	r3, #0
 4913 002e 3DD1     		bne	.L271
2283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
2285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 4914              		.loc 2 2285 5
 4915 0030 7B68     		ldr	r3, [r7, #4]
 4916 0032 1B68     		ldr	r3, [r3]
 4917 0034 DA68     		ldr	r2, [r3, #12]
 4918 0036 7B68     		ldr	r3, [r7, #4]
 4919 0038 1B68     		ldr	r3, [r3]
 4920 003a 22F00302 		bic	r2, r2, #3
 4921 003e DA60     		str	r2, [r3, #12]
2286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
2288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
ARM GAS  /tmp/ccp7RHPZ.s 			page 267


2289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 4922              		.loc 2 2289 13
 4923 0040 7B68     		ldr	r3, [r7, #4]
 4924 0042 DB6C     		ldr	r3, [r3, #76]
 4925              		.loc 2 2289 25
 4926 0044 93F83530 		ldrb	r3, [r3, #53]
 4927 0048 DBB2     		uxtb	r3, r3
 4928              		.loc 2 2289 8
 4929 004a 022B     		cmp	r3, #2
 4930 004c 0FD1     		bne	.L272
2290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 4931              		.loc 2 2291 24
 4932 004e 7B68     		ldr	r3, [r7, #4]
 4933 0050 DB6C     		ldr	r3, [r3, #76]
 4934 0052 1846     		mov	r0, r3
 4935 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 4936 0058 0346     		mov	r3, r0
 4937 005a FB73     		strb	r3, [r7, #15]
2292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
2294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
 4938              		.loc 2 2294 10
 4939 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4940 005e 002B     		cmp	r3, #0
 4941 0060 05D0     		beq	.L272
2295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to error */
2297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4942              		.loc 2 2297 9
 4943 0062 7B68     		ldr	r3, [r7, #4]
 4944 0064 5B6D     		ldr	r3, [r3, #84]
 4945 0066 43F04002 		orr	r2, r3, #64
 4946 006a 7B68     		ldr	r3, [r7, #4]
 4947 006c 5A65     		str	r2, [r3, #84]
 4948              	.L272:
2298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4949              		.loc 2 2302 5
 4950 006e 7B68     		ldr	r3, [r7, #4]
 4951 0070 1B68     		ldr	r3, [r3]
 4952 0072 5A68     		ldr	r2, [r3, #4]
 4953 0074 7B68     		ldr	r3, [r7, #4]
 4954 0076 1B68     		ldr	r3, [r3]
 4955 0078 22F01002 		bic	r2, r2, #16
 4956 007c 5A60     		str	r2, [r3, #4]
2303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
2307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4957              		.loc 2 2307 8
 4958 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4959 0080 002B     		cmp	r3, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 268


 4960 0082 05D1     		bne	.L273
2308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 4961              		.loc 2 2309 24
 4962 0084 7868     		ldr	r0, [r7, #4]
 4963 0086 FFF7FEFF 		bl	ADC_Disable
 4964 008a 0346     		mov	r3, r0
 4965 008c FB73     		strb	r3, [r7, #15]
 4966 008e 02E0     		b	.L274
 4967              	.L273:
2310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (void)ADC_Disable(hadc);
 4968              		.loc 2 2313 13
 4969 0090 7868     		ldr	r0, [r7, #4]
 4970 0092 FFF7FEFF 		bl	ADC_Disable
 4971              	.L274:
2314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4972              		.loc 2 2317 8
 4973 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4974 0098 002B     		cmp	r3, #0
 4975 009a 07D1     		bne	.L271
2318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4976              		.loc 2 2320 7
 4977 009c 7B68     		ldr	r3, [r7, #4]
 4978 009e 5A6D     		ldr	r2, [r3, #84]
 4979 00a0 074B     		ldr	r3, .L275
 4980 00a2 1340     		ands	r3, r3, r2
 4981 00a4 43F00102 		orr	r2, r3, #1
 4982 00a8 7B68     		ldr	r3, [r7, #4]
 4983 00aa 5A65     		str	r2, [r3, #84]
 4984              	.L271:
2321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 4985              		.loc 2 2328 3
 4986 00ac 7B68     		ldr	r3, [r7, #4]
 4987 00ae 0022     		movs	r2, #0
 4988 00b0 83F85020 		strb	r2, [r3, #80]
2329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 4989              		.loc 2 2331 10
 4990 00b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4991              	.L270:
2332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 269


 4992              		.loc 2 2332 1
 4993 00b6 1846     		mov	r0, r3
 4994 00b8 1037     		adds	r7, r7, #16
 4995              	.LCFI282:
 4996              		.cfi_def_cfa_offset 8
 4997 00ba BD46     		mov	sp, r7
 4998              	.LCFI283:
 4999              		.cfi_def_cfa_register 13
 5000              		@ sp needed
 5001 00bc 80BD     		pop	{r7, pc}
 5002              	.L276:
 5003 00be 00BF     		.align	2
 5004              	.L275:
 5005 00c0 FEEEFFFF 		.word	-4354
 5006              		.cfi_endproc
 5007              	.LFE342:
 5009              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 5010              		.align	1
 5011              		.global	HAL_ADC_GetValue
 5012              		.syntax unified
 5013              		.thumb
 5014              		.thumb_func
 5015              		.fpu fpv5-d16
 5017              	HAL_ADC_GetValue:
 5018              	.LFB343:
2333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
2336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
2338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
2339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
2340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
2341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            to flag EOC.
2343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
2344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
2346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To clear this flag, either use function:
2347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
2349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC group regular conversion data
2352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
2354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5019              		.loc 2 2354 1
 5020              		.cfi_startproc
 5021              		@ args = 0, pretend = 0, frame = 8
 5022              		@ frame_needed = 1, uses_anonymous_args = 0
 5023              		@ link register save eliminated.
 5024 0000 80B4     		push	{r7}
 5025              	.LCFI284:
 5026              		.cfi_def_cfa_offset 4
 5027              		.cfi_offset 7, -4
 5028 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccp7RHPZ.s 			page 270


 5029              	.LCFI285:
 5030              		.cfi_def_cfa_offset 16
 5031 0004 00AF     		add	r7, sp, #0
 5032              	.LCFI286:
 5033              		.cfi_def_cfa_register 7
 5034 0006 7860     		str	r0, [r7, #4]
2355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
2360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC converted value */
2362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->Instance->DR;
 5035              		.loc 2 2362 14
 5036 0008 7B68     		ldr	r3, [r7, #4]
 5037 000a 1B68     		ldr	r3, [r3]
 5038              		.loc 2 2362 24
 5039 000c 1B6C     		ldr	r3, [r3, #64]
2363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5040              		.loc 2 2363 1
 5041 000e 1846     		mov	r0, r3
 5042 0010 0C37     		adds	r7, r7, #12
 5043              	.LCFI287:
 5044              		.cfi_def_cfa_offset 4
 5045 0012 BD46     		mov	sp, r7
 5046              	.LCFI288:
 5047              		.cfi_def_cfa_register 13
 5048              		@ sp needed
 5049 0014 5DF8047B 		ldr	r7, [sp], #4
 5050              	.LCFI289:
 5051              		.cfi_restore 7
 5052              		.cfi_def_cfa_offset 0
 5053 0018 7047     		bx	lr
 5054              		.cfi_endproc
 5055              	.LFE343:
 5057              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 5058              		.align	1
 5059              		.global	HAL_ADC_IRQHandler
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5063              		.fpu fpv5-d16
 5065              	HAL_ADC_IRQHandler:
 5066              	.LFB344:
2364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
2367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
2371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5067              		.loc 2 2371 1
 5068              		.cfi_startproc
 5069              		@ args = 0, pretend = 0, frame = 40
 5070              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccp7RHPZ.s 			page 271


 5071 0000 80B5     		push	{r7, lr}
 5072              	.LCFI290:
 5073              		.cfi_def_cfa_offset 8
 5074              		.cfi_offset 7, -8
 5075              		.cfi_offset 14, -4
 5076 0002 8AB0     		sub	sp, sp, #40
 5077              	.LCFI291:
 5078              		.cfi_def_cfa_offset 48
 5079 0004 00AF     		add	r7, sp, #0
 5080              	.LCFI292:
 5081              		.cfi_def_cfa_register 7
 5082 0006 7860     		str	r0, [r7, #4]
2372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 5083              		.loc 2 2372 12
 5084 0008 0023     		movs	r3, #0
 5085 000a 7B62     		str	r3, [r7, #36]
2373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 5086              		.loc 2 2373 26
 5087 000c 7B68     		ldr	r3, [r7, #4]
 5088 000e 1B68     		ldr	r3, [r3]
 5089              		.loc 2 2373 12
 5090 0010 1B68     		ldr	r3, [r3]
 5091 0012 FB61     		str	r3, [r7, #28]
2374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 5092              		.loc 2 2374 26
 5093 0014 7B68     		ldr	r3, [r7, #4]
 5094 0016 1B68     		ldr	r3, [r3]
 5095              		.loc 2 2374 12
 5096 0018 5B68     		ldr	r3, [r3, #4]
 5097 001a BB61     		str	r3, [r7, #24]
2375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
2376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
2377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
2378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
2379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 5098              		.loc 2 2379 55
 5099 001c 7B68     		ldr	r3, [r7, #4]
 5100 001e 1B68     		ldr	r3, [r3]
 5101              		.loc 2 2379 35
 5102 0020 874A     		ldr	r2, .L325
 5103 0022 9342     		cmp	r3, r2
 5104 0024 04D0     		beq	.L280
 5105              		.loc 2 2379 55 discriminator 2
 5106 0026 7B68     		ldr	r3, [r7, #4]
 5107 0028 1B68     		ldr	r3, [r3]
 5108 002a 864A     		ldr	r2, .L325+4
 5109 002c 9342     		cmp	r3, r2
 5110 002e 01D1     		bne	.L281
 5111              	.L280:
 5112              		.loc 2 2379 35 discriminator 3
 5113 0030 854B     		ldr	r3, .L325+8
 5114 0032 00E0     		b	.L282
 5115              	.L281:
 5116              		.loc 2 2379 35 is_stmt 0 discriminator 4
 5117 0034 854B     		ldr	r3, .L325+12
 5118              	.L282:
 5119              		.loc 2 2379 35 discriminator 6
ARM GAS  /tmp/ccp7RHPZ.s 			page 272


 5120 0036 1846     		mov	r0, r3
 5121 0038 FFF7FEFF 		bl	LL_ADC_GetMultimode
 5122 003c 7861     		str	r0, [r7, #20]
2380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
2386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 5123              		.loc 2 2386 17 is_stmt 1 discriminator 6
 5124 003e FB69     		ldr	r3, [r7, #28]
 5125 0040 03F00203 		and	r3, r3, #2
 5126              		.loc 2 2386 6 discriminator 6
 5127 0044 002B     		cmp	r3, #0
 5128 0046 17D0     		beq	.L283
 5129              		.loc 2 2386 67 discriminator 1
 5130 0048 BB69     		ldr	r3, [r7, #24]
 5131 004a 03F00203 		and	r3, r3, #2
 5132              		.loc 2 2386 54 discriminator 1
 5133 004e 002B     		cmp	r3, #0
 5134 0050 12D0     		beq	.L283
2387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
2389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5135              		.loc 2 2389 14
 5136 0052 7B68     		ldr	r3, [r7, #4]
 5137 0054 5B6D     		ldr	r3, [r3, #84]
 5138              		.loc 2 2389 22
 5139 0056 03F01003 		and	r3, r3, #16
 5140              		.loc 2 2389 8
 5141 005a 002B     		cmp	r3, #0
 5142 005c 05D1     		bne	.L284
2390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 5143              		.loc 2 2392 7
 5144 005e 7B68     		ldr	r3, [r7, #4]
 5145 0060 5B6D     		ldr	r3, [r3, #84]
 5146 0062 43F40062 		orr	r2, r3, #2048
 5147 0066 7B68     		ldr	r3, [r7, #4]
 5148 0068 5A65     		str	r2, [r3, #84]
 5149              	.L284:
2393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling callback */
2396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
2398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
 5150              		.loc 2 2399 5
 5151 006a 7868     		ldr	r0, [r7, #4]
 5152 006c FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
2400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
2403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
ARM GAS  /tmp/ccp7RHPZ.s 			page 273


 5153              		.loc 2 2403 5
 5154 0070 7B68     		ldr	r3, [r7, #4]
 5155 0072 1B68     		ldr	r3, [r3]
 5156 0074 0222     		movs	r2, #2
 5157 0076 1A60     		str	r2, [r3]
 5158              	.L283:
2404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
2407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 5159              		.loc 2 2407 18
 5160 0078 FB69     		ldr	r3, [r7, #28]
 5161 007a 03F00403 		and	r3, r3, #4
 5162              		.loc 2 2407 6
 5163 007e 002B     		cmp	r3, #0
 5164 0080 04D0     		beq	.L285
 5165              		.loc 2 2407 64 discriminator 1
 5166 0082 BB69     		ldr	r3, [r7, #24]
 5167 0084 03F00403 		and	r3, r3, #4
 5168              		.loc 2 2407 51 discriminator 1
 5169 0088 002B     		cmp	r3, #0
 5170 008a 0AD1     		bne	.L286
 5171              	.L285:
2408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5172              		.loc 2 2408 18 discriminator 3
 5173 008c FB69     		ldr	r3, [r7, #28]
 5174 008e 03F00803 		and	r3, r3, #8
2407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5175              		.loc 2 2407 94 discriminator 3
 5176 0092 002B     		cmp	r3, #0
 5177 0094 00F08380 		beq	.L287
 5178              		.loc 2 2408 64
 5179 0098 BB69     		ldr	r3, [r7, #24]
 5180 009a 03F00803 		and	r3, r3, #8
 5181              		.loc 2 2408 51
 5182 009e 002B     		cmp	r3, #0
 5183 00a0 7DD0     		beq	.L287
 5184              	.L286:
2409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5185              		.loc 2 2411 14
 5186 00a2 7B68     		ldr	r3, [r7, #4]
 5187 00a4 5B6D     		ldr	r3, [r3, #84]
 5188              		.loc 2 2411 22
 5189 00a6 03F01003 		and	r3, r3, #16
 5190              		.loc 2 2411 8
 5191 00aa 002B     		cmp	r3, #0
 5192 00ac 05D1     		bne	.L288
2412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 5193              		.loc 2 2414 7
 5194 00ae 7B68     		ldr	r3, [r7, #4]
 5195 00b0 5B6D     		ldr	r3, [r3, #84]
 5196 00b2 43F40072 		orr	r2, r3, #512
 5197 00b6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 274


 5198 00b8 5A65     		str	r2, [r3, #84]
 5199              	.L288:
2415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
2420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 5200              		.loc 2 2420 9
 5201 00ba 7B68     		ldr	r3, [r7, #4]
 5202 00bc 1B68     		ldr	r3, [r3]
 5203 00be 1846     		mov	r0, r3
 5204 00c0 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5205 00c4 0346     		mov	r3, r0
 5206              		.loc 2 2420 8
 5207 00c6 002B     		cmp	r3, #0
 5208 00c8 62D0     		beq	.L289
2421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* in function of multimode state (for devices with multimode           */
2424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* available).                                                          */
2425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5209              		.loc 2 2425 12
 5210 00ca 7B68     		ldr	r3, [r7, #4]
 5211 00cc 1B68     		ldr	r3, [r3]
 5212 00ce 5D4A     		ldr	r2, .L325+4
 5213 00d0 9342     		cmp	r3, r2
 5214 00d2 02D0     		beq	.L290
 5215              		.loc 2 2425 12 is_stmt 0 discriminator 1
 5216 00d4 7B68     		ldr	r3, [r7, #4]
 5217 00d6 1B68     		ldr	r3, [r3]
 5218 00d8 00E0     		b	.L291
 5219              	.L290:
 5220              		.loc 2 2425 12 discriminator 2
 5221 00da 594B     		ldr	r3, .L325
 5222              	.L291:
 5223              		.loc 2 2425 66 is_stmt 1 discriminator 4
 5224 00dc 7A68     		ldr	r2, [r7, #4]
 5225 00de 1268     		ldr	r2, [r2]
 5226              		.loc 2 2425 10 discriminator 4
 5227 00e0 9342     		cmp	r3, r2
 5228 00e2 08D0     		beq	.L292
2426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5229              		.loc 2 2426 11
 5230 00e4 7B69     		ldr	r3, [r7, #20]
 5231 00e6 002B     		cmp	r3, #0
 5232 00e8 05D0     		beq	.L292
2427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 5233              		.loc 2 2427 11
 5234 00ea 7B69     		ldr	r3, [r7, #20]
 5235 00ec 052B     		cmp	r3, #5
 5236 00ee 02D0     		beq	.L292
2428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 5237              		.loc 2 2428 11
 5238 00f0 7B69     		ldr	r3, [r7, #20]
 5239 00f2 092B     		cmp	r3, #9
 5240 00f4 04D1     		bne	.L293
ARM GAS  /tmp/ccp7RHPZ.s 			page 275


 5241              	.L292:
2429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
2430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* check CONT bit directly in handle ADC CFGR register */
2432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5242              		.loc 2 2432 20
 5243 00f6 7B68     		ldr	r3, [r7, #4]
 5244 00f8 1B68     		ldr	r3, [r3]
 5245              		.loc 2 2432 18
 5246 00fa DB68     		ldr	r3, [r3, #12]
 5247 00fc 3B62     		str	r3, [r7, #32]
 5248 00fe 0CE0     		b	.L294
 5249              	.L293:
2433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* else need to check Master ADC CONT bit */
2437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5250              		.loc 2 2437 25
 5251 0100 7B68     		ldr	r3, [r7, #4]
 5252 0102 1B68     		ldr	r3, [r3]
 5253 0104 4F4A     		ldr	r2, .L325+4
 5254 0106 9342     		cmp	r3, r2
 5255 0108 02D0     		beq	.L295
 5256              		.loc 2 2437 25 is_stmt 0 discriminator 1
 5257 010a 7B68     		ldr	r3, [r7, #4]
 5258 010c 1B68     		ldr	r3, [r3]
 5259 010e 00E0     		b	.L296
 5260              	.L295:
 5261              		.loc 2 2437 25 discriminator 2
 5262 0110 4B4B     		ldr	r3, .L325
 5263              	.L296:
 5264              		.loc 2 2437 23 is_stmt 1 discriminator 4
 5265 0112 3B61     		str	r3, [r7, #16]
2438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5266              		.loc 2 2438 18 discriminator 4
 5267 0114 3B69     		ldr	r3, [r7, #16]
 5268 0116 DB68     		ldr	r3, [r3, #12]
 5269 0118 3B62     		str	r3, [r7, #32]
 5270              	.L294:
2439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Carry on if continuous mode is disabled */
2442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 5271              		.loc 2 2442 11
 5272 011a 3B6A     		ldr	r3, [r7, #32]
 5273 011c 03F40053 		and	r3, r3, #8192
 5274              		.loc 2 2442 10
 5275 0120 002B     		cmp	r3, #0
 5276 0122 35D1     		bne	.L289
2443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 5277              		.loc 2 2445 13
 5278 0124 7B68     		ldr	r3, [r7, #4]
 5279 0126 1B68     		ldr	r3, [r3]
 5280 0128 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 276


 5281 012a 03F00803 		and	r3, r3, #8
 5282              		.loc 2 2445 12
 5283 012e 082B     		cmp	r3, #8
 5284 0130 2ED1     		bne	.L289
2446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
2448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* ADSTART==0 (no conversion on going)                              */
2449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 5285              		.loc 2 2449 15
 5286 0132 7B68     		ldr	r3, [r7, #4]
 5287 0134 1B68     		ldr	r3, [r3]
 5288 0136 1846     		mov	r0, r3
 5289 0138 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 5290 013c 0346     		mov	r3, r0
 5291              		.loc 2 2449 14
 5292 013e 002B     		cmp	r3, #0
 5293 0140 1AD1     		bne	.L297
2450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt */
2452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Note: Overrun interrupt was enabled with EOC interrupt in      */
2453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* HAL_Start_IT(), but is not disabled here because can be used   */
2454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* by overrun IRQ process below.                                  */
2455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 5294              		.loc 2 2455 13
 5295 0142 7B68     		ldr	r3, [r7, #4]
 5296 0144 1B68     		ldr	r3, [r3]
 5297 0146 5A68     		ldr	r2, [r3, #4]
 5298 0148 7B68     		ldr	r3, [r7, #4]
 5299 014a 1B68     		ldr	r3, [r3]
 5300 014c 22F00C02 		bic	r2, r2, #12
 5301 0150 5A60     		str	r2, [r3, #4]
2456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC state */
2458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 5302              		.loc 2 2458 13
 5303 0152 7B68     		ldr	r3, [r7, #4]
 5304 0154 5B6D     		ldr	r3, [r3, #84]
 5305 0156 23F48072 		bic	r2, r3, #256
 5306 015a 7B68     		ldr	r3, [r7, #4]
 5307 015c 5A65     		str	r2, [r3, #84]
2459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 5308              		.loc 2 2460 22
 5309 015e 7B68     		ldr	r3, [r7, #4]
 5310 0160 5B6D     		ldr	r3, [r3, #84]
 5311              		.loc 2 2460 30
 5312 0162 03F48053 		and	r3, r3, #4096
 5313              		.loc 2 2460 16
 5314 0166 002B     		cmp	r3, #0
 5315 0168 12D1     		bne	.L289
2461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5316              		.loc 2 2462 15
 5317 016a 7B68     		ldr	r3, [r7, #4]
 5318 016c 5B6D     		ldr	r3, [r3, #84]
 5319 016e 43F00102 		orr	r2, r3, #1
 5320 0172 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 277


 5321 0174 5A65     		str	r2, [r3, #84]
 5322 0176 0BE0     		b	.L289
 5323              	.L297:
2463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
2466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Change ADC state to error state */
2468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5324              		.loc 2 2468 13
 5325 0178 7B68     		ldr	r3, [r7, #4]
 5326 017a 5B6D     		ldr	r3, [r3, #84]
 5327 017c 43F01002 		orr	r2, r3, #16
 5328 0180 7B68     		ldr	r3, [r7, #4]
 5329 0182 5A65     		str	r2, [r3, #84]
2469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5330              		.loc 2 2471 13
 5331 0184 7B68     		ldr	r3, [r7, #4]
 5332 0186 9B6D     		ldr	r3, [r3, #88]
 5333 0188 43F00102 		orr	r2, r3, #1
 5334 018c 7B68     		ldr	r3, [r7, #4]
 5335 018e 9A65     		str	r2, [r3, #88]
 5336              	.L289:
2472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
2478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
2479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
2480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       possibility to use:                                              */
2481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 5337              		.loc 2 2485 5
 5338 0190 7868     		ldr	r0, [r7, #4]
 5339 0192 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
2489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
2491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 5340              		.loc 2 2493 5
 5341 0196 7B68     		ldr	r3, [r7, #4]
 5342 0198 1B68     		ldr	r3, [r3]
 5343 019a 0C22     		movs	r2, #12
 5344 019c 1A60     		str	r2, [r3]
 5345              	.L287:
2494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
ARM GAS  /tmp/ccp7RHPZ.s 			page 278


2495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
2497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 5346              		.loc 2 2497 18
 5347 019e FB69     		ldr	r3, [r7, #28]
 5348 01a0 03F02003 		and	r3, r3, #32
 5349              		.loc 2 2497 6
 5350 01a4 002B     		cmp	r3, #0
 5351 01a6 04D0     		beq	.L298
 5352              		.loc 2 2497 66 discriminator 1
 5353 01a8 BB69     		ldr	r3, [r7, #24]
 5354 01aa 03F02003 		and	r3, r3, #32
 5355              		.loc 2 2497 53 discriminator 1
 5356 01ae 002B     		cmp	r3, #0
 5357 01b0 0BD1     		bne	.L299
 5358              	.L298:
2498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5359              		.loc 2 2498 18 discriminator 3
 5360 01b2 FB69     		ldr	r3, [r7, #28]
 5361 01b4 03F04003 		and	r3, r3, #64
2497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5362              		.loc 2 2497 98 discriminator 3
 5363 01b8 002B     		cmp	r3, #0
 5364 01ba 00F0A080 		beq	.L300
 5365              		.loc 2 2498 66
 5366 01be BB69     		ldr	r3, [r7, #24]
 5367 01c0 03F04003 		and	r3, r3, #64
 5368              		.loc 2 2498 53
 5369 01c4 002B     		cmp	r3, #0
 5370 01c6 00F09A80 		beq	.L300
 5371              	.L299:
2499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5372              		.loc 2 2501 14
 5373 01ca 7B68     		ldr	r3, [r7, #4]
 5374 01cc 5B6D     		ldr	r3, [r3, #84]
 5375              		.loc 2 2501 22
 5376 01ce 03F01003 		and	r3, r3, #16
 5377              		.loc 2 2501 8
 5378 01d2 002B     		cmp	r3, #0
 5379 01d4 05D1     		bne	.L301
2502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 5380              		.loc 2 2504 7
 5381 01d6 7B68     		ldr	r3, [r7, #4]
 5382 01d8 5B6D     		ldr	r3, [r3, #84]
 5383 01da 43F40052 		orr	r2, r3, #8192
 5384 01de 7B68     		ldr	r3, [r7, #4]
 5385 01e0 5A65     		str	r2, [r3, #84]
 5386              	.L301:
2505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve ADC configuration */
2508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 5387              		.loc 2 2508 46
ARM GAS  /tmp/ccp7RHPZ.s 			page 279


 5388 01e2 7B68     		ldr	r3, [r7, #4]
 5389 01e4 1B68     		ldr	r3, [r3]
 5390 01e6 1846     		mov	r0, r3
 5391 01e8 FFF7FEFF 		bl	LL_ADC_INJ_IsTriggerSourceSWStart
 5392 01ec F860     		str	r0, [r7, #12]
2509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 5393              		.loc 2 2509 46
 5394 01ee 7B68     		ldr	r3, [r7, #4]
 5395 01f0 1B68     		ldr	r3, [r3]
 5396 01f2 1846     		mov	r0, r3
 5397 01f4 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5398 01f8 B860     		str	r0, [r7, #8]
2510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* in function of multimode state (for devices with multimode         */
2512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* available).                                                        */
2513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5399              		.loc 2 2513 10
 5400 01fa 7B68     		ldr	r3, [r7, #4]
 5401 01fc 1B68     		ldr	r3, [r3]
 5402 01fe 114A     		ldr	r2, .L325+4
 5403 0200 9342     		cmp	r3, r2
 5404 0202 02D0     		beq	.L302
 5405              		.loc 2 2513 10 is_stmt 0 discriminator 1
 5406 0204 7B68     		ldr	r3, [r7, #4]
 5407 0206 1B68     		ldr	r3, [r3]
 5408 0208 00E0     		b	.L303
 5409              	.L302:
 5410              		.loc 2 2513 10 discriminator 2
 5411 020a 0D4B     		ldr	r3, .L325
 5412              	.L303:
 5413              		.loc 2 2513 64 is_stmt 1 discriminator 4
 5414 020c 7A68     		ldr	r2, [r7, #4]
 5415 020e 1268     		ldr	r2, [r2]
 5416              		.loc 2 2513 8 discriminator 4
 5417 0210 9342     		cmp	r3, r2
 5418 0212 08D0     		beq	.L304
2514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5419              		.loc 2 2514 9
 5420 0214 7B69     		ldr	r3, [r7, #20]
 5421 0216 002B     		cmp	r3, #0
 5422 0218 05D0     		beq	.L304
2515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 5423              		.loc 2 2515 9
 5424 021a 7B69     		ldr	r3, [r7, #20]
 5425 021c 062B     		cmp	r3, #6
 5426 021e 02D0     		beq	.L304
2516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 5427              		.loc 2 2516 9
 5428 0220 7B69     		ldr	r3, [r7, #20]
 5429 0222 072B     		cmp	r3, #7
 5430 0224 04D1     		bne	.L305
 5431              	.L304:
2517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5432              		.loc 2 2519 18
 5433 0226 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 280


 5434 0228 1B68     		ldr	r3, [r3]
 5435              		.loc 2 2519 16
 5436 022a DB68     		ldr	r3, [r3, #12]
 5437 022c 3B62     		str	r3, [r7, #32]
 5438 022e 14E0     		b	.L306
 5439              	.L305:
2520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5440              		.loc 2 2523 23
 5441 0230 7B68     		ldr	r3, [r7, #4]
 5442 0232 1B68     		ldr	r3, [r3]
 5443 0234 034A     		ldr	r2, .L325+4
 5444 0236 9342     		cmp	r3, r2
 5445 0238 0AD0     		beq	.L307
 5446              		.loc 2 2523 23 is_stmt 0 discriminator 1
 5447 023a 7B68     		ldr	r3, [r7, #4]
 5448 023c 1B68     		ldr	r3, [r3]
 5449 023e 08E0     		b	.L308
 5450              	.L326:
 5451              		.align	2
 5452              	.L325:
 5453 0240 00200240 		.word	1073881088
 5454 0244 00210240 		.word	1073881344
 5455 0248 00230240 		.word	1073881856
 5456 024c 00630258 		.word	1476551424
 5457              	.L307:
 5458              		.loc 2 2523 23 discriminator 2
 5459 0250 844B     		ldr	r3, .L327
 5460              	.L308:
 5461              		.loc 2 2523 21 is_stmt 1 discriminator 4
 5462 0252 3B61     		str	r3, [r7, #16]
2524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5463              		.loc 2 2524 16 discriminator 4
 5464 0254 3B69     		ldr	r3, [r7, #16]
 5465 0256 DB68     		ldr	r3, [r3, #12]
 5466 0258 3B62     		str	r3, [r7, #32]
 5467              	.L306:
2525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* external trigger or by automatic injected conversion with regular      */
2529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* group having no further conversion upcoming (same conditions as        */
2530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* regular group interruption disabling above),                           */
2531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* and if injected scan sequence is completed.                            */
2532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 5468              		.loc 2 2532 8
 5469 025a FB68     		ldr	r3, [r7, #12]
 5470 025c 002B     		cmp	r3, #0
 5471 025e 0CD1     		bne	.L309
2533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 5472              		.loc 2 2533 11 discriminator 1
 5473 0260 3B6A     		ldr	r3, [r7, #32]
 5474 0262 03F00073 		and	r3, r3, #33554432
2532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 5475              		.loc 2 2532 68 discriminator 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 281


 5476 0266 002B     		cmp	r3, #0
 5477 0268 42D1     		bne	.L310
 5478              		.loc 2 2533 59
 5479 026a BB68     		ldr	r3, [r7, #8]
 5480 026c 002B     		cmp	r3, #0
 5481 026e 3FD0     		beq	.L310
2534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
2535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 5482              		.loc 2 2535 12
 5483 0270 3B6A     		ldr	r3, [r7, #32]
 5484 0272 03F40053 		and	r3, r3, #8192
2534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 5485              		.loc 2 2534 60
 5486 0276 002B     		cmp	r3, #0
 5487 0278 3AD1     		bne	.L310
 5488              	.L309:
2536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 5489              		.loc 2 2538 11
 5490 027a 7B68     		ldr	r3, [r7, #4]
 5491 027c 1B68     		ldr	r3, [r3]
 5492 027e 1B68     		ldr	r3, [r3]
 5493 0280 03F04003 		and	r3, r3, #64
 5494              		.loc 2 2538 10
 5495 0284 402B     		cmp	r3, #64
 5496 0286 33D1     		bne	.L310
2539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Particular case if injected contexts queue is enabled:             */
2541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* when the last context has been fully processed, JSQR is reset      */
2542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* by the hardware. Even if no injected conversion is planned to come */
2543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (queue empty, triggers are ignored), it can start again            */
2544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* immediately after setting a new context (JADSTART is still set).   */
2545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Therefore, state of HAL ADC injected group is kept to busy.        */
2546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 5497              		.loc 2 2546 13
 5498 0288 3B6A     		ldr	r3, [r7, #32]
 5499 028a 03F40013 		and	r3, r3, #2097152
 5500              		.loc 2 2546 12
 5501 028e 002B     		cmp	r3, #0
 5502 0290 2ED1     		bne	.L310
2547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* JADSTART==0 (no conversion on going)                             */
2550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 5503              		.loc 2 2550 15
 5504 0292 7B68     		ldr	r3, [r7, #4]
 5505 0294 1B68     		ldr	r3, [r3]
 5506 0296 1846     		mov	r0, r3
 5507 0298 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5508 029c 0346     		mov	r3, r0
 5509              		.loc 2 2550 14
 5510 029e 002B     		cmp	r3, #0
 5511 02a0 1AD1     		bne	.L311
2551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt  */
2553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
ARM GAS  /tmp/ccp7RHPZ.s 			page 282


 5512              		.loc 2 2553 13
 5513 02a2 7B68     		ldr	r3, [r7, #4]
 5514 02a4 1B68     		ldr	r3, [r3]
 5515 02a6 5A68     		ldr	r2, [r3, #4]
 5516 02a8 7B68     		ldr	r3, [r7, #4]
 5517 02aa 1B68     		ldr	r3, [r3]
 5518 02ac 22F06002 		bic	r2, r2, #96
 5519 02b0 5A60     		str	r2, [r3, #4]
2554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC state */
2556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 5520              		.loc 2 2556 13
 5521 02b2 7B68     		ldr	r3, [r7, #4]
 5522 02b4 5B6D     		ldr	r3, [r3, #84]
 5523 02b6 23F48052 		bic	r2, r3, #4096
 5524 02ba 7B68     		ldr	r3, [r7, #4]
 5525 02bc 5A65     		str	r2, [r3, #84]
2557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 5526              		.loc 2 2558 22
 5527 02be 7B68     		ldr	r3, [r7, #4]
 5528 02c0 5B6D     		ldr	r3, [r3, #84]
 5529              		.loc 2 2558 30
 5530 02c2 03F48073 		and	r3, r3, #256
 5531              		.loc 2 2558 16
 5532 02c6 002B     		cmp	r3, #0
 5533 02c8 12D1     		bne	.L310
2559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5534              		.loc 2 2560 15
 5535 02ca 7B68     		ldr	r3, [r7, #4]
 5536 02cc 5B6D     		ldr	r3, [r3, #84]
 5537 02ce 43F00102 		orr	r2, r3, #1
 5538 02d2 7B68     		ldr	r3, [r7, #4]
 5539 02d4 5A65     		str	r2, [r3, #84]
 5540 02d6 0BE0     		b	.L310
 5541              	.L311:
2561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
2564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update ADC state machine to error */
2566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5542              		.loc 2 2566 13
 5543 02d8 7B68     		ldr	r3, [r7, #4]
 5544 02da 5B6D     		ldr	r3, [r3, #84]
 5545 02dc 43F01002 		orr	r2, r3, #16
 5546 02e0 7B68     		ldr	r3, [r7, #4]
 5547 02e2 5A65     		str	r2, [r3, #84]
2567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5548              		.loc 2 2569 13
 5549 02e4 7B68     		ldr	r3, [r7, #4]
 5550 02e6 9B6D     		ldr	r3, [r3, #88]
 5551 02e8 43F00102 		orr	r2, r3, #1
 5552 02ec 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 283


 5553 02ee 9A65     		str	r2, [r3, #88]
 5554              	.L310:
2570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected Conversion complete callback */
2576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
2577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
2578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
2579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               interruption has been triggered by end of conversion or end of
2580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               sequence.    */
2581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback(hadc);
2583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 5555              		.loc 2 2584 5
 5556 02f0 7868     		ldr	r0, [r7, #4]
 5557 02f2 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
2585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear injected group conversion flag */
2588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 5558              		.loc 2 2588 5
 5559 02f6 7B68     		ldr	r3, [r7, #4]
 5560 02f8 1B68     		ldr	r3, [r3]
 5561 02fa 6022     		movs	r2, #96
 5562 02fc 1A60     		str	r2, [r3]
 5563              	.L300:
2589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 5564              		.loc 2 2592 17
 5565 02fe FB69     		ldr	r3, [r7, #28]
 5566 0300 03F08003 		and	r3, r3, #128
 5567              		.loc 2 2592 6
 5568 0304 002B     		cmp	r3, #0
 5569 0306 11D0     		beq	.L312
 5570              		.loc 2 2592 65 discriminator 1
 5571 0308 BB69     		ldr	r3, [r7, #24]
 5572 030a 03F08003 		and	r3, r3, #128
 5573              		.loc 2 2592 52 discriminator 1
 5574 030e 002B     		cmp	r3, #0
 5575 0310 0CD0     		beq	.L312
2593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 5576              		.loc 2 2595 5
 5577 0312 7B68     		ldr	r3, [r7, #4]
 5578 0314 5B6D     		ldr	r3, [r3, #84]
 5579 0316 43F48032 		orr	r2, r3, #65536
 5580 031a 7B68     		ldr	r3, [r7, #4]
 5581 031c 5A65     		str	r2, [r3, #84]
2596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 1 callback */
ARM GAS  /tmp/ccp7RHPZ.s 			page 284


2598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 5582              		.loc 2 2601 5
 5583 031e 7868     		ldr	r0, [r7, #4]
 5584 0320 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
2602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 5585              		.loc 2 2605 5
 5586 0324 7B68     		ldr	r3, [r7, #4]
 5587 0326 1B68     		ldr	r3, [r3]
 5588 0328 8022     		movs	r2, #128
 5589 032a 1A60     		str	r2, [r3]
 5590              	.L312:
2606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 5591              		.loc 2 2609 17
 5592 032c FB69     		ldr	r3, [r7, #28]
 5593 032e 03F48073 		and	r3, r3, #256
 5594              		.loc 2 2609 6
 5595 0332 002B     		cmp	r3, #0
 5596 0334 12D0     		beq	.L313
 5597              		.loc 2 2609 65 discriminator 1
 5598 0336 BB69     		ldr	r3, [r7, #24]
 5599 0338 03F48073 		and	r3, r3, #256
 5600              		.loc 2 2609 52 discriminator 1
 5601 033c 002B     		cmp	r3, #0
 5602 033e 0DD0     		beq	.L313
2610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 5603              		.loc 2 2612 5
 5604 0340 7B68     		ldr	r3, [r7, #4]
 5605 0342 5B6D     		ldr	r3, [r3, #84]
 5606 0344 43F40032 		orr	r2, r3, #131072
 5607 0348 7B68     		ldr	r3, [r7, #4]
 5608 034a 5A65     		str	r2, [r3, #84]
2613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 2 callback */
2615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 5609              		.loc 2 2618 5
 5610 034c 7868     		ldr	r0, [r7, #4]
 5611 034e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
2619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 5612              		.loc 2 2622 5
 5613 0352 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 285


 5614 0354 1B68     		ldr	r3, [r3]
 5615 0356 4FF48072 		mov	r2, #256
 5616 035a 1A60     		str	r2, [r3]
 5617              	.L313:
2623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 5618              		.loc 2 2626 17
 5619 035c FB69     		ldr	r3, [r7, #28]
 5620 035e 03F40073 		and	r3, r3, #512
 5621              		.loc 2 2626 6
 5622 0362 002B     		cmp	r3, #0
 5623 0364 12D0     		beq	.L314
 5624              		.loc 2 2626 65 discriminator 1
 5625 0366 BB69     		ldr	r3, [r7, #24]
 5626 0368 03F40073 		and	r3, r3, #512
 5627              		.loc 2 2626 52 discriminator 1
 5628 036c 002B     		cmp	r3, #0
 5629 036e 0DD0     		beq	.L314
2627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 5630              		.loc 2 2629 5
 5631 0370 7B68     		ldr	r3, [r7, #4]
 5632 0372 5B6D     		ldr	r3, [r3, #84]
 5633 0374 43F48022 		orr	r2, r3, #262144
 5634 0378 7B68     		ldr	r3, [r7, #4]
 5635 037a 5A65     		str	r2, [r3, #84]
2630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 3 callback */
2632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 5636              		.loc 2 2635 5
 5637 037c 7868     		ldr	r0, [r7, #4]
 5638 037e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
2636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 5639              		.loc 2 2639 5
 5640 0382 7B68     		ldr	r3, [r7, #4]
 5641 0384 1B68     		ldr	r3, [r3]
 5642 0386 4FF40072 		mov	r2, #512
 5643 038a 1A60     		str	r2, [r3]
 5644              	.L314:
2640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 5645              		.loc 2 2643 17
 5646 038c FB69     		ldr	r3, [r7, #28]
 5647 038e 03F01003 		and	r3, r3, #16
 5648              		.loc 2 2643 6
 5649 0392 002B     		cmp	r3, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 286


 5650 0394 43D0     		beq	.L315
 5651              		.loc 2 2643 63 discriminator 1
 5652 0396 BB69     		ldr	r3, [r7, #24]
 5653 0398 03F01003 		and	r3, r3, #16
 5654              		.loc 2 2643 50 discriminator 1
 5655 039c 002B     		cmp	r3, #0
 5656 039e 3ED0     		beq	.L315
2644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun ")                                                             */
2649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* error.                                                                 */
2651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 5657              		.loc 2 2651 19
 5658 03a0 7B68     		ldr	r3, [r7, #4]
 5659 03a2 1B6B     		ldr	r3, [r3, #48]
 5660              		.loc 2 2651 8
 5661 03a4 002B     		cmp	r3, #0
 5662 03a6 02D1     		bne	.L316
2652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       overrun_error = 1UL;
 5663              		.loc 2 2653 21
 5664 03a8 0123     		movs	r3, #1
 5665 03aa 7B62     		str	r3, [r7, #36]
 5666 03ac 21E0     		b	.L317
 5667              	.L316:
2654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMA configuration */
2658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 5668              		.loc 2 2658 10
 5669 03ae 7B69     		ldr	r3, [r7, #20]
 5670 03b0 002B     		cmp	r3, #0
 5671 03b2 15D0     		beq	.L318
2659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode (when feature is available) is enabled,
2661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            Common Control Register MDMA bits must be checked. */
2662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_RE
 5672              		.loc 2 2662 40
 5673 03b4 7B68     		ldr	r3, [r7, #4]
 5674 03b6 1B68     		ldr	r3, [r3]
 5675              		.loc 2 2662 13
 5676 03b8 2A4A     		ldr	r2, .L327
 5677 03ba 9342     		cmp	r3, r2
 5678 03bc 04D0     		beq	.L319
 5679              		.loc 2 2662 40 discriminator 2
 5680 03be 7B68     		ldr	r3, [r7, #4]
 5681 03c0 1B68     		ldr	r3, [r3]
 5682 03c2 294A     		ldr	r2, .L327+4
 5683 03c4 9342     		cmp	r3, r2
 5684 03c6 01D1     		bne	.L320
 5685              	.L319:
 5686              		.loc 2 2662 13 discriminator 3
 5687 03c8 284B     		ldr	r3, .L327+8
ARM GAS  /tmp/ccp7RHPZ.s 			page 287


 5688 03ca 00E0     		b	.L321
 5689              	.L320:
 5690              		.loc 2 2662 13 is_stmt 0 discriminator 4
 5691 03cc 284B     		ldr	r3, .L327+12
 5692              	.L321:
 5693              		.loc 2 2662 13 discriminator 6
 5694 03ce 1846     		mov	r0, r3
 5695 03d0 FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 5696 03d4 0346     		mov	r3, r0
 5697              		.loc 2 2662 12 is_stmt 1 discriminator 6
 5698 03d6 002B     		cmp	r3, #0
 5699 03d8 0BD0     		beq	.L317
2663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
 5700              		.loc 2 2664 25
 5701 03da 0123     		movs	r3, #1
 5702 03dc 7B62     		str	r3, [r7, #36]
 5703 03de 08E0     		b	.L317
 5704              	.L318:
2665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode not set or feature not available or ADC independent */
2670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 5705              		.loc 2 2670 18
 5706 03e0 7B68     		ldr	r3, [r7, #4]
 5707 03e2 1B68     		ldr	r3, [r3]
 5708              		.loc 2 2670 28
 5709 03e4 DB68     		ldr	r3, [r3, #12]
 5710              		.loc 2 2670 35
 5711 03e6 03F00303 		and	r3, r3, #3
 5712              		.loc 2 2670 12
 5713 03ea 002B     		cmp	r3, #0
 5714 03ec 01D0     		beq	.L317
2671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
 5715              		.loc 2 2672 25
 5716 03ee 0123     		movs	r3, #1
 5717 03f0 7B62     		str	r3, [r7, #36]
 5718              	.L317:
2673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (overrun_error == 1UL)
 5719              		.loc 2 2677 8
 5720 03f2 7B6A     		ldr	r3, [r7, #36]
 5721 03f4 012B     		cmp	r3, #1
 5722 03f6 0ED1     		bne	.L322
2678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state to error state */
2680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 5723              		.loc 2 2680 7
 5724 03f8 7B68     		ldr	r3, [r7, #4]
 5725 03fa 5B6D     		ldr	r3, [r3, #84]
 5726 03fc 43F48062 		orr	r2, r3, #1024
ARM GAS  /tmp/ccp7RHPZ.s 			page 288


 5727 0400 7B68     		ldr	r3, [r7, #4]
 5728 0402 5A65     		str	r2, [r3, #84]
2681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to overrun */
2683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 5729              		.loc 2 2683 7
 5730 0404 7B68     		ldr	r3, [r7, #4]
 5731 0406 9B6D     		ldr	r3, [r3, #88]
 5732 0408 43F00202 		orr	r2, r3, #2
 5733 040c 7B68     		ldr	r3, [r7, #4]
 5734 040e 9A65     		str	r2, [r3, #88]
2684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Error callback */
2686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 5735              		.loc 2 2693 7
 5736 0410 7868     		ldr	r0, [r7, #4]
 5737 0412 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 5738              	.L322:
2694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC overrun flag */
2698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 5739              		.loc 2 2698 5
 5740 0416 7B68     		ldr	r3, [r7, #4]
 5741 0418 1B68     		ldr	r3, [r3]
 5742 041a 1022     		movs	r2, #16
 5743 041c 1A60     		str	r2, [r3]
 5744              	.L315:
2699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Injected context queue overflow flag ========== */
2702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 5745              		.loc 2 2702 17
 5746 041e FB69     		ldr	r3, [r7, #28]
 5747 0420 03F48063 		and	r3, r3, #1024
 5748              		.loc 2 2702 6
 5749 0424 002B     		cmp	r3, #0
 5750 0426 18D0     		beq	.L324
 5751              		.loc 2 2702 67 discriminator 1
 5752 0428 BB69     		ldr	r3, [r7, #24]
 5753 042a 03F48063 		and	r3, r3, #1024
 5754              		.loc 2 2702 54 discriminator 1
 5755 042e 002B     		cmp	r3, #0
 5756 0430 13D0     		beq	.L324
2703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Change ADC state to overrun state */
2705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 5757              		.loc 2 2705 5
 5758 0432 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 289


 5759 0434 5B6D     		ldr	r3, [r3, #84]
 5760 0436 43F48042 		orr	r2, r3, #16384
 5761 043a 7B68     		ldr	r3, [r7, #4]
 5762 043c 5A65     		str	r2, [r3, #84]
2706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to Injected context queue overflow */
2708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 5763              		.loc 2 2708 5
 5764 043e 7B68     		ldr	r3, [r7, #4]
 5765 0440 9B6D     		ldr	r3, [r3, #88]
 5766 0442 43F00802 		orr	r2, r3, #8
 5767 0446 7B68     		ldr	r3, [r7, #4]
 5768 0448 9A65     		str	r2, [r3, #88]
2709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear the Injected context queue overflow flag */
2711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 5769              		.loc 2 2711 5
 5770 044a 7B68     		ldr	r3, [r7, #4]
 5771 044c 1B68     		ldr	r3, [r3]
 5772 044e 4FF48062 		mov	r2, #1024
 5773 0452 1A60     		str	r2, [r3]
2712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow callback */
2714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback(hadc);
2716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 5774              		.loc 2 2717 5
 5775 0454 7868     		ldr	r0, [r7, #4]
 5776 0456 FFF7FEFF 		bl	HAL_ADCEx_InjectedQueueOverflowCallback
 5777              	.L324:
2718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5778              		.loc 2 2721 1
 5779 045a 00BF     		nop
 5780 045c 2837     		adds	r7, r7, #40
 5781              	.LCFI293:
 5782              		.cfi_def_cfa_offset 8
 5783 045e BD46     		mov	sp, r7
 5784              	.LCFI294:
 5785              		.cfi_def_cfa_register 13
 5786              		@ sp needed
 5787 0460 80BD     		pop	{r7, pc}
 5788              	.L328:
 5789 0462 00BF     		.align	2
 5790              	.L327:
 5791 0464 00200240 		.word	1073881088
 5792 0468 00210240 		.word	1073881344
 5793 046c 00230240 		.word	1073881856
 5794 0470 00630258 		.word	1476551424
 5795              		.cfi_endproc
 5796              	.LFE344:
 5798              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 5799              		.align	1
 5800              		.weak	HAL_ADC_ConvCpltCallback
ARM GAS  /tmp/ccp7RHPZ.s 			page 290


 5801              		.syntax unified
 5802              		.thumb
 5803              		.thumb_func
 5804              		.fpu fpv5-d16
 5806              	HAL_ADC_ConvCpltCallback:
 5807              	.LFB345:
2722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5808              		.loc 2 2729 1
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 8
 5811              		@ frame_needed = 1, uses_anonymous_args = 0
 5812              		@ link register save eliminated.
 5813 0000 80B4     		push	{r7}
 5814              	.LCFI295:
 5815              		.cfi_def_cfa_offset 4
 5816              		.cfi_offset 7, -4
 5817 0002 83B0     		sub	sp, sp, #12
 5818              	.LCFI296:
 5819              		.cfi_def_cfa_offset 16
 5820 0004 00AF     		add	r7, sp, #0
 5821              	.LCFI297:
 5822              		.cfi_def_cfa_register 7
 5823 0006 7860     		str	r0, [r7, #4]
2730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
2736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5824              		.loc 2 2736 1
 5825 0008 00BF     		nop
 5826 000a 0C37     		adds	r7, r7, #12
 5827              	.LCFI298:
 5828              		.cfi_def_cfa_offset 4
 5829 000c BD46     		mov	sp, r7
 5830              	.LCFI299:
 5831              		.cfi_def_cfa_register 13
 5832              		@ sp needed
 5833 000e 5DF8047B 		ldr	r7, [sp], #4
 5834              	.LCFI300:
 5835              		.cfi_restore 7
 5836              		.cfi_def_cfa_offset 0
 5837 0012 7047     		bx	lr
 5838              		.cfi_endproc
 5839              	.LFE345:
 5841              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 5842              		.align	1
 5843              		.weak	HAL_ADC_ConvHalfCpltCallback
 5844              		.syntax unified
ARM GAS  /tmp/ccp7RHPZ.s 			page 291


 5845              		.thumb
 5846              		.thumb_func
 5847              		.fpu fpv5-d16
 5849              	HAL_ADC_ConvHalfCpltCallback:
 5850              	.LFB346:
2737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5851              		.loc 2 2744 1
 5852              		.cfi_startproc
 5853              		@ args = 0, pretend = 0, frame = 8
 5854              		@ frame_needed = 1, uses_anonymous_args = 0
 5855              		@ link register save eliminated.
 5856 0000 80B4     		push	{r7}
 5857              	.LCFI301:
 5858              		.cfi_def_cfa_offset 4
 5859              		.cfi_offset 7, -4
 5860 0002 83B0     		sub	sp, sp, #12
 5861              	.LCFI302:
 5862              		.cfi_def_cfa_offset 16
 5863 0004 00AF     		add	r7, sp, #0
 5864              	.LCFI303:
 5865              		.cfi_def_cfa_register 7
 5866 0006 7860     		str	r0, [r7, #4]
2745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5867              		.loc 2 2751 1
 5868 0008 00BF     		nop
 5869 000a 0C37     		adds	r7, r7, #12
 5870              	.LCFI304:
 5871              		.cfi_def_cfa_offset 4
 5872 000c BD46     		mov	sp, r7
 5873              	.LCFI305:
 5874              		.cfi_def_cfa_register 13
 5875              		@ sp needed
 5876 000e 5DF8047B 		ldr	r7, [sp], #4
 5877              	.LCFI306:
 5878              		.cfi_restore 7
 5879              		.cfi_def_cfa_offset 0
 5880 0012 7047     		bx	lr
 5881              		.cfi_endproc
 5882              	.LFE346:
 5884              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 5885              		.align	1
 5886              		.weak	HAL_ADC_LevelOutOfWindowCallback
 5887              		.syntax unified
 5888              		.thumb
ARM GAS  /tmp/ccp7RHPZ.s 			page 292


 5889              		.thumb_func
 5890              		.fpu fpv5-d16
 5892              	HAL_ADC_LevelOutOfWindowCallback:
 5893              	.LFB347:
2752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5894              		.loc 2 2759 1
 5895              		.cfi_startproc
 5896              		@ args = 0, pretend = 0, frame = 8
 5897              		@ frame_needed = 1, uses_anonymous_args = 0
 5898              		@ link register save eliminated.
 5899 0000 80B4     		push	{r7}
 5900              	.LCFI307:
 5901              		.cfi_def_cfa_offset 4
 5902              		.cfi_offset 7, -4
 5903 0002 83B0     		sub	sp, sp, #12
 5904              	.LCFI308:
 5905              		.cfi_def_cfa_offset 16
 5906 0004 00AF     		add	r7, sp, #0
 5907              	.LCFI309:
 5908              		.cfi_def_cfa_register 7
 5909 0006 7860     		str	r0, [r7, #4]
2760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5910              		.loc 2 2766 1
 5911 0008 00BF     		nop
 5912 000a 0C37     		adds	r7, r7, #12
 5913              	.LCFI310:
 5914              		.cfi_def_cfa_offset 4
 5915 000c BD46     		mov	sp, r7
 5916              	.LCFI311:
 5917              		.cfi_def_cfa_register 13
 5918              		@ sp needed
 5919 000e 5DF8047B 		ldr	r7, [sp], #4
 5920              	.LCFI312:
 5921              		.cfi_restore 7
 5922              		.cfi_def_cfa_offset 0
 5923 0012 7047     		bx	lr
 5924              		.cfi_endproc
 5925              	.LFE347:
 5927              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 5928              		.align	1
 5929              		.weak	HAL_ADC_ErrorCallback
 5930              		.syntax unified
 5931              		.thumb
 5932              		.thumb_func
ARM GAS  /tmp/ccp7RHPZ.s 			page 293


 5933              		.fpu fpv5-d16
 5935              	HAL_ADC_ErrorCallback:
 5936              	.LFB348:
2767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5937              		.loc 2 2781 1
 5938              		.cfi_startproc
 5939              		@ args = 0, pretend = 0, frame = 8
 5940              		@ frame_needed = 1, uses_anonymous_args = 0
 5941              		@ link register save eliminated.
 5942 0000 80B4     		push	{r7}
 5943              	.LCFI313:
 5944              		.cfi_def_cfa_offset 4
 5945              		.cfi_offset 7, -4
 5946 0002 83B0     		sub	sp, sp, #12
 5947              	.LCFI314:
 5948              		.cfi_def_cfa_offset 16
 5949 0004 00AF     		add	r7, sp, #0
 5950              	.LCFI315:
 5951              		.cfi_def_cfa_register 7
 5952 0006 7860     		str	r0, [r7, #4]
2782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5953              		.loc 2 2788 1
 5954 0008 00BF     		nop
 5955 000a 0C37     		adds	r7, r7, #12
 5956              	.LCFI316:
 5957              		.cfi_def_cfa_offset 4
 5958 000c BD46     		mov	sp, r7
 5959              	.LCFI317:
 5960              		.cfi_def_cfa_register 13
 5961              		@ sp needed
 5962 000e 5DF8047B 		ldr	r7, [sp], #4
 5963              	.LCFI318:
 5964              		.cfi_restore 7
 5965              		.cfi_def_cfa_offset 0
 5966 0012 7047     		bx	lr
 5967              		.cfi_endproc
 5968              	.LFE348:
ARM GAS  /tmp/ccp7RHPZ.s 			page 294


 5970              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 5971              		.align	1
 5972              		.global	HAL_ADC_ConfigChannel
 5973              		.syntax unified
 5974              		.thumb
 5975              		.thumb_func
 5976              		.fpu fpv5-d16
 5978              	HAL_ADC_ConfigChannel:
 5979              	.LFB349:
2789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
2792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    Peripheral Control functions
2796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
2797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
2798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              ##### Peripheral Control functions #####
2800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure channels on regular group
2803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure the analog watchdog
2804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
2806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
2807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         These internal paths can be disabled using function
2814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without resetting the ADC.
2820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
2825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5980              		.loc 2 2827 1
 5981              		.cfi_startproc
 5982              		@ args = 0, pretend = 0, frame = 128
 5983              		@ frame_needed = 1, uses_anonymous_args = 0
 5984 0000 90B5     		push	{r4, r7, lr}
 5985              	.LCFI319:
 5986              		.cfi_def_cfa_offset 12
 5987              		.cfi_offset 4, -12
 5988              		.cfi_offset 7, -8
ARM GAS  /tmp/ccp7RHPZ.s 			page 295


 5989              		.cfi_offset 14, -4
 5990 0002 A1B0     		sub	sp, sp, #132
 5991              	.LCFI320:
 5992              		.cfi_def_cfa_offset 144
 5993 0004 00AF     		add	r7, sp, #0
 5994              	.LCFI321:
 5995              		.cfi_def_cfa_register 7
 5996 0006 7860     		str	r0, [r7, #4]
 5997 0008 3960     		str	r1, [r7]
2828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5998              		.loc 2 2828 21
 5999 000a 0023     		movs	r3, #0
 6000 000c 87F87F30 		strb	r3, [r7, #127]
2829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
2830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 6001              		.loc 2 2831 17
 6002 0010 0023     		movs	r3, #0
 6003 0012 BB60     		str	r3, [r7, #8]
2832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
2840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
2841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check offset range according to oversampling setting */
2842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
2843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.
2845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
2861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ignored (considered as reset) */
2862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENAB
2863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification of channel number */
2865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 6004              		.loc 2 2865 14
 6005 0014 3B68     		ldr	r3, [r7]
 6006 0016 DB68     		ldr	r3, [r3, #12]
 6007              		.loc 2 2865 6
ARM GAS  /tmp/ccp7RHPZ.s 			page 296


 6008 0018 9D4A     		ldr	r2, .L418
 6009 001a 9342     		cmp	r3, r2
2866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC1)
2872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
2874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC2)
2876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
2878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC3)
2880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC3 is not available on some STM32H7 products */
2881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
2884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 6010              		.loc 2 2889 3
 6011 001c 7B68     		ldr	r3, [r7, #4]
 6012 001e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 6013 0022 012B     		cmp	r3, #1
 6014 0024 01D1     		bne	.L335
 6015              		.loc 2 2889 3 is_stmt 0 discriminator 1
 6016 0026 0223     		movs	r3, #2
 6017 0028 21E3     		b	.L336
 6018              	.L335:
 6019              		.loc 2 2889 3 discriminator 2
 6020 002a 7B68     		ldr	r3, [r7, #4]
 6021 002c 0122     		movs	r2, #1
 6022 002e 83F85020 		strb	r2, [r3, #80]
2890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel number                                                        */
2895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel rank                                                          */
2896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 6023              		.loc 2 2896 7 is_stmt 1 discriminator 2
 6024 0032 7B68     		ldr	r3, [r7, #4]
 6025 0034 1B68     		ldr	r3, [r3]
 6026 0036 1846     		mov	r0, r3
 6027 0038 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6028 003c 0346     		mov	r3, r0
 6029              		.loc 2 2896 6 discriminator 2
 6030 003e 002B     		cmp	r3, #0
 6031 0040 40F00683 		bne	.L337
2897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 297


2899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance != ADC3)
2901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* ADC channels preselection */
2903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Chan
2904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC channels preselection */
2907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 
 6032              		.loc 2 2907 39
 6033 0044 3B68     		ldr	r3, [r7]
 6034 0046 1B68     		ldr	r3, [r3]
 6035 0048 C3F31303 		ubfx	r3, r3, #0, #20
 6036              		.loc 2 2907 35
 6037 004c 002B     		cmp	r3, #0
 6038 004e 08D1     		bne	.L338
 6039              		.loc 2 2907 39 discriminator 1
 6040 0050 3B68     		ldr	r3, [r7]
 6041 0052 1B68     		ldr	r3, [r3]
 6042 0054 9B0E     		lsrs	r3, r3, #26
 6043 0056 03F01F03 		and	r3, r3, #31
 6044              		.loc 2 2907 35 discriminator 1
 6045 005a 0122     		movs	r2, #1
 6046 005c 02FA03F3 		lsl	r3, r2, r3
 6047 0060 16E0     		b	.L339
 6048              	.L338:
 6049              		.loc 2 2907 39 discriminator 2
 6050 0062 3B68     		ldr	r3, [r7]
 6051 0064 1B68     		ldr	r3, [r3]
 6052 0066 7B66     		str	r3, [r7, #100]
 6053              	.LBB51:
 6054              	.LBB52:
 6055              		.file 3 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 298


  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccp7RHPZ.s 			page 299


  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
ARM GAS  /tmp/ccp7RHPZ.s 			page 300


 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccp7RHPZ.s 			page 301


 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 302


 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccp7RHPZ.s 			page 303


 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
ARM GAS  /tmp/ccp7RHPZ.s 			page 304


 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
ARM GAS  /tmp/ccp7RHPZ.s 			page 305


 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccp7RHPZ.s 			page 306


 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccp7RHPZ.s 			page 307


 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
ARM GAS  /tmp/ccp7RHPZ.s 			page 308


 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  /tmp/ccp7RHPZ.s 			page 309


 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/ccp7RHPZ.s 			page 310


 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 311


 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccp7RHPZ.s 			page 312


 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 313


 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccp7RHPZ.s 			page 314


 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 315


 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccp7RHPZ.s 			page 316


1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 6056              		.loc 3 1055 4 discriminator 2
 6057 0068 7B6E     		ldr	r3, [r7, #100]
 6058              		.syntax unified
 6059              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6060 006a 93FAA3F3 		rbit r3, r3
 6061              	@ 0 "" 2
 6062              		.thumb
 6063              		.syntax unified
 6064 006e 3B66     		str	r3, [r7, #96]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 6065              		.loc 3 1068 10 discriminator 2
 6066 0070 3B6E     		ldr	r3, [r7, #96]
 6067 0072 BB66     		str	r3, [r7, #104]
 6068              	.LBE52:
 6069              	.LBE51:
 6070              	.LBB53:
 6071              	.LBB54:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 6072              		.loc 3 1089 6 discriminator 2
 6073 0074 BB6E     		ldr	r3, [r7, #104]
ARM GAS  /tmp/ccp7RHPZ.s 			page 317


 6074 0076 002B     		cmp	r3, #0
 6075 0078 01D1     		bne	.L341
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
 6076              		.loc 3 1091 12
 6077 007a 2023     		movs	r3, #32
 6078 007c 03E0     		b	.L342
 6079              	.L341:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 6080              		.loc 3 1093 10
 6081 007e BB6E     		ldr	r3, [r7, #104]
 6082 0080 B3FA83F3 		clz	r3, r3
 6083 0084 DBB2     		uxtb	r3, r3
 6084              	.L342:
 6085              	.LBE54:
 6086              	.LBE53:
 6087              		.loc 2 2907 98
 6088 0086 03F01F03 		and	r3, r3, #31
 6089              		.loc 2 2907 35
 6090 008a 0122     		movs	r2, #1
 6091 008c 02FA03F3 		lsl	r3, r2, r3
 6092              	.L339:
 6093              		.loc 2 2907 9 discriminator 4
 6094 0090 7A68     		ldr	r2, [r7, #4]
 6095 0092 1268     		ldr	r2, [r2]
 6096              		.loc 2 2907 27 discriminator 4
 6097 0094 D169     		ldr	r1, [r2, #28]
 6098              		.loc 2 2907 9 discriminator 4
 6099 0096 7A68     		ldr	r2, [r7, #4]
 6100 0098 1268     		ldr	r2, [r2]
 6101              		.loc 2 2907 27 discriminator 4
 6102 009a 0B43     		orrs	r3, r3, r1
 6103 009c D361     		str	r3, [r2, #28]
2908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC group regular sequence: channel on the selected scan sequence rank */
2911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 6104              		.loc 2 2911 5 discriminator 4
 6105 009e 7B68     		ldr	r3, [r7, #4]
 6106 00a0 1868     		ldr	r0, [r3]
 6107 00a2 3B68     		ldr	r3, [r7]
 6108 00a4 5968     		ldr	r1, [r3, #4]
 6109 00a6 3B68     		ldr	r3, [r7]
 6110 00a8 1B68     		ldr	r3, [r3]
 6111 00aa 1A46     		mov	r2, r3
 6112 00ac FFF7FEFF 		bl	LL_ADC_REG_SetSequencerRanks
2912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without   */
2915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular group:                                    */
2916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel sampling time                                                 */
2917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel offset                                                        */
2918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 6113              		.loc 2 2918 46 discriminator 4
 6114 00b0 7B68     		ldr	r3, [r7, #4]
 6115 00b2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 318


 6116 00b4 1846     		mov	r0, r3
 6117 00b6 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6118 00ba B867     		str	r0, [r7, #120]
2919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 6119              		.loc 2 2919 47 discriminator 4
 6120 00bc 7B68     		ldr	r3, [r7, #4]
 6121 00be 1B68     		ldr	r3, [r3]
 6122 00c0 1846     		mov	r0, r3
 6123 00c2 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 6124 00c6 7867     		str	r0, [r7, #116]
2920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 6125              		.loc 2 2920 8 discriminator 4
 6126 00c8 BB6F     		ldr	r3, [r7, #120]
 6127 00ca 002B     		cmp	r3, #0
 6128 00cc 40F0B380 		bne	.L343
2921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 6129              		.loc 2 2921 9
 6130 00d0 7B6F     		ldr	r3, [r7, #116]
 6131 00d2 002B     		cmp	r3, #0
 6132 00d4 40F0AF80 		bne	.L343
2922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set sampling time of the selected ADC channel */
2925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 6133              		.loc 2 2925 7
 6134 00d8 7B68     		ldr	r3, [r7, #4]
 6135 00da 1868     		ldr	r0, [r3]
 6136 00dc 3B68     		ldr	r3, [r7]
 6137 00de 1968     		ldr	r1, [r3]
 6138 00e0 3B68     		ldr	r3, [r7]
 6139 00e2 9B68     		ldr	r3, [r3, #8]
 6140 00e4 1A46     		mov	r2, r3
 6141 00e6 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
2926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the offset: offset enable/disable, channel, offset value */
2928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset with respect to the selected ADC resolution. */
2930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
2933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 6142              		.loc 2 2939 28
 6143 00ea 6A4B     		ldr	r3, .L418+4
 6144 00ec 1B68     		ldr	r3, [r3]
 6145 00ee 03F07043 		and	r3, r3, #-268435456
 6146 00f2 B3F1805F 		cmp	r3, #268435456
 6147 00f6 0BD1     		bne	.L344
 6148              		.loc 2 2939 28 is_stmt 0 discriminator 1
 6149 00f8 3B68     		ldr	r3, [r7]
 6150 00fa 5A69     		ldr	r2, [r3, #20]
 6151 00fc 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 319


 6152 00fe 1B68     		ldr	r3, [r3]
 6153 0100 DB68     		ldr	r3, [r3, #12]
 6154 0102 9B08     		lsrs	r3, r3, #2
 6155 0104 03F00703 		and	r3, r3, #7
 6156 0108 5B00     		lsls	r3, r3, #1
 6157 010a 02FA03F3 		lsl	r3, r2, r3
 6158 010e 1DE0     		b	.L345
 6159              	.L344:
 6160              		.loc 2 2939 28 discriminator 2
 6161 0110 7B68     		ldr	r3, [r7, #4]
 6162 0112 1B68     		ldr	r3, [r3]
 6163 0114 DB68     		ldr	r3, [r3, #12]
 6164 0116 03F01003 		and	r3, r3, #16
 6165 011a 002B     		cmp	r3, #0
 6166 011c 0BD1     		bne	.L346
 6167              		.loc 2 2939 28 discriminator 4
 6168 011e 3B68     		ldr	r3, [r7]
 6169 0120 5A69     		ldr	r2, [r3, #20]
 6170 0122 7B68     		ldr	r3, [r7, #4]
 6171 0124 1B68     		ldr	r3, [r3]
 6172 0126 DB68     		ldr	r3, [r3, #12]
 6173 0128 9B08     		lsrs	r3, r3, #2
 6174 012a 03F00703 		and	r3, r3, #7
 6175 012e 5B00     		lsls	r3, r3, #1
 6176 0130 02FA03F3 		lsl	r3, r2, r3
 6177 0134 0AE0     		b	.L345
 6178              	.L346:
 6179              		.loc 2 2939 28 discriminator 5
 6180 0136 3B68     		ldr	r3, [r7]
 6181 0138 5A69     		ldr	r2, [r3, #20]
 6182 013a 7B68     		ldr	r3, [r7, #4]
 6183 013c 1B68     		ldr	r3, [r3]
 6184 013e DB68     		ldr	r3, [r3, #12]
 6185 0140 9B08     		lsrs	r3, r3, #2
 6186 0142 03F00403 		and	r3, r3, #4
 6187 0146 5B00     		lsls	r3, r3, #1
 6188 0148 02FA03F3 		lsl	r3, r2, r3
 6189              	.L345:
 6190              		.loc 2 2939 26 is_stmt 1 discriminator 8
 6191 014c 3B67     		str	r3, [r7, #112]
2940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       
2942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 6192              		.loc 2 2942 18 discriminator 8
 6193 014e 3B68     		ldr	r3, [r7]
 6194 0150 1B69     		ldr	r3, [r3, #16]
 6195              		.loc 2 2942 10 discriminator 8
 6196 0152 042B     		cmp	r3, #4
 6197 0154 27D0     		beq	.L348
2943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC selected offset number */
2945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted)
 6198              		.loc 2 2945 9
 6199 0156 7B68     		ldr	r3, [r7, #4]
 6200 0158 1868     		ldr	r0, [r3]
 6201 015a 3B68     		ldr	r3, [r7]
 6202 015c 1969     		ldr	r1, [r3, #16]
ARM GAS  /tmp/ccp7RHPZ.s 			page 320


 6203 015e 3B68     		ldr	r3, [r7]
 6204 0160 1A68     		ldr	r2, [r3]
 6205 0162 3B6F     		ldr	r3, [r7, #112]
 6206 0164 FFF7FEFF 		bl	LL_ADC_SetOffset
2946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
2951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
2952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset sign & saturation */
2953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
2954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturat
2955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
2960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset signed saturation */
2961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetS
 6207              		.loc 2 2961 11
 6208 0168 7B68     		ldr	r3, [r7, #4]
 6209 016a 1868     		ldr	r0, [r3]
 6210 016c 3B68     		ldr	r3, [r7]
 6211 016e 1969     		ldr	r1, [r3, #16]
 6212              		.loc 2 2961 91
 6213 0170 3B68     		ldr	r3, [r7]
 6214 0172 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 6215              		.loc 2 2961 11
 6216 0174 012B     		cmp	r3, #1
 6217 0176 02D1     		bne	.L349
 6218              		.loc 2 2961 11 is_stmt 0 discriminator 1
 6219 0178 4FF00043 		mov	r3, #-2147483648
 6220 017c 00E0     		b	.L350
 6221              	.L349:
 6222              		.loc 2 2961 11 discriminator 2
 6223 017e 0023     		movs	r3, #0
 6224              	.L350:
 6225              		.loc 2 2961 11 discriminator 4
 6226 0180 1A46     		mov	r2, r3
 6227 0182 FFF7FEFF 		bl	LL_ADC_SetOffsetSignedSaturation
2962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
2964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset right shift */
2965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShif
 6228              		.loc 2 2965 11 is_stmt 1 discriminator 4
 6229 0186 7B68     		ldr	r3, [r7, #4]
 6230 0188 1868     		ldr	r0, [r3]
 6231 018a 3B68     		ldr	r3, [r7]
 6232 018c 1969     		ldr	r1, [r3, #16]
 6233              		.loc 2 2965 83 discriminator 4
 6234 018e 3B68     		ldr	r3, [r7]
 6235 0190 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 6236              		.loc 2 2965 11 discriminator 4
 6237 0192 012B     		cmp	r3, #1
 6238 0194 02D1     		bne	.L351
 6239              		.loc 2 2965 11 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccp7RHPZ.s 			page 321


 6240 0196 4FF40063 		mov	r3, #2048
 6241 019a 00E0     		b	.L352
 6242              	.L351:
 6243              		.loc 2 2965 11 discriminator 2
 6244 019c 0023     		movs	r3, #0
 6245              	.L352:
 6246              		.loc 2 2965 11 discriminator 4
 6247 019e 1A46     		mov	r2, r3
 6248 01a0 FFF7FEFF 		bl	LL_ADC_SetDataRightShift
 6249 01a4 47E0     		b	.L343
 6250              	.L348:
2966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
2972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           If this is the case, offset OFRx is disabled since
2973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
2974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6251              		.loc 2 2997 21 is_stmt 1
 6252 01a6 7B68     		ldr	r3, [r7, #4]
 6253 01a8 1B68     		ldr	r3, [r3]
 6254              		.loc 2 2997 31
 6255 01aa 1B6E     		ldr	r3, [r3, #96]
 6256              		.loc 2 2997 39
 6257 01ac 03F0F842 		and	r2, r3, #2080374784
 6258              		.loc 2 2997 65
 6259 01b0 3B68     		ldr	r3, [r7]
 6260 01b2 1B68     		ldr	r3, [r3]
 6261 01b4 9B06     		lsls	r3, r3, #26
 6262              		.loc 2 2997 14
 6263 01b6 9A42     		cmp	r2, r3
 6264 01b8 07D1     		bne	.L353
ARM GAS  /tmp/ccp7RHPZ.s 			page 322


2998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 6265              		.loc 2 2999 13
 6266 01ba 7B68     		ldr	r3, [r7, #4]
 6267 01bc 1B68     		ldr	r3, [r3]
 6268 01be 1A6E     		ldr	r2, [r3, #96]
 6269 01c0 7B68     		ldr	r3, [r7, #4]
 6270 01c2 1B68     		ldr	r3, [r3]
 6271 01c4 22F00042 		bic	r2, r2, #-2147483648
 6272 01c8 1A66     		str	r2, [r3, #96]
 6273              	.L353:
3000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6274              		.loc 2 3001 21
 6275 01ca 7B68     		ldr	r3, [r7, #4]
 6276 01cc 1B68     		ldr	r3, [r3]
 6277              		.loc 2 3001 31
 6278 01ce 5B6E     		ldr	r3, [r3, #100]
 6279              		.loc 2 3001 39
 6280 01d0 03F0F842 		and	r2, r3, #2080374784
 6281              		.loc 2 3001 65
 6282 01d4 3B68     		ldr	r3, [r7]
 6283 01d6 1B68     		ldr	r3, [r3]
 6284 01d8 9B06     		lsls	r3, r3, #26
 6285              		.loc 2 3001 14
 6286 01da 9A42     		cmp	r2, r3
 6287 01dc 07D1     		bne	.L354
3002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 6288              		.loc 2 3003 13
 6289 01de 7B68     		ldr	r3, [r7, #4]
 6290 01e0 1B68     		ldr	r3, [r3]
 6291 01e2 5A6E     		ldr	r2, [r3, #100]
 6292 01e4 7B68     		ldr	r3, [r7, #4]
 6293 01e6 1B68     		ldr	r3, [r3]
 6294 01e8 22F00042 		bic	r2, r2, #-2147483648
 6295 01ec 5A66     		str	r2, [r3, #100]
 6296              	.L354:
3004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6297              		.loc 2 3005 21
 6298 01ee 7B68     		ldr	r3, [r7, #4]
 6299 01f0 1B68     		ldr	r3, [r3]
 6300              		.loc 2 3005 31
 6301 01f2 9B6E     		ldr	r3, [r3, #104]
 6302              		.loc 2 3005 39
 6303 01f4 03F0F842 		and	r2, r3, #2080374784
 6304              		.loc 2 3005 65
 6305 01f8 3B68     		ldr	r3, [r7]
 6306 01fa 1B68     		ldr	r3, [r3]
 6307 01fc 9B06     		lsls	r3, r3, #26
 6308              		.loc 2 3005 14
 6309 01fe 9A42     		cmp	r2, r3
 6310 0200 07D1     		bne	.L355
3006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 6311              		.loc 2 3007 13
ARM GAS  /tmp/ccp7RHPZ.s 			page 323


 6312 0202 7B68     		ldr	r3, [r7, #4]
 6313 0204 1B68     		ldr	r3, [r3]
 6314 0206 9A6E     		ldr	r2, [r3, #104]
 6315 0208 7B68     		ldr	r3, [r7, #4]
 6316 020a 1B68     		ldr	r3, [r3]
 6317 020c 22F00042 		bic	r2, r2, #-2147483648
 6318 0210 9A66     		str	r2, [r3, #104]
 6319              	.L355:
3008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 6320              		.loc 2 3009 21
 6321 0212 7B68     		ldr	r3, [r7, #4]
 6322 0214 1B68     		ldr	r3, [r3]
 6323              		.loc 2 3009 31
 6324 0216 DB6E     		ldr	r3, [r3, #108]
 6325              		.loc 2 3009 39
 6326 0218 03F0F842 		and	r2, r3, #2080374784
 6327              		.loc 2 3009 65
 6328 021c 3B68     		ldr	r3, [r7]
 6329 021e 1B68     		ldr	r3, [r3]
 6330 0220 9B06     		lsls	r3, r3, #26
 6331              		.loc 2 3009 14
 6332 0222 9A42     		cmp	r2, r3
 6333 0224 07D1     		bne	.L343
3010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 6334              		.loc 2 3011 13
 6335 0226 7B68     		ldr	r3, [r7, #4]
 6336 0228 1B68     		ldr	r3, [r3]
 6337 022a DA6E     		ldr	r2, [r3, #108]
 6338 022c 7B68     		ldr	r3, [r7, #4]
 6339 022e 1B68     		ldr	r3, [r3]
 6340 0230 22F00042 		bic	r2, r2, #-2147483648
 6341 0234 DA66     		str	r2, [r3, #108]
 6342              	.L343:
3012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         
3015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      }
3016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
3019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:                */
3020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Single or differential mode                                           */
3021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
3022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 6343              		.loc 2 3022 9
 6344 0236 7B68     		ldr	r3, [r7, #4]
 6345 0238 1B68     		ldr	r3, [r3]
 6346 023a 1846     		mov	r0, r3
 6347 023c FFF7FEFF 		bl	LL_ADC_IsEnabled
 6348 0240 0346     		mov	r3, r0
 6349              		.loc 2 3022 8
 6350 0242 002B     		cmp	r3, #0
 6351 0244 40F00D82 		bne	.L356
3023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set mode single-ended or differential input of the selected ADC channel */
ARM GAS  /tmp/ccp7RHPZ.s 			page 324


3025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 6352              		.loc 2 3025 7
 6353 0248 7B68     		ldr	r3, [r7, #4]
 6354 024a 1868     		ldr	r0, [r3]
 6355 024c 3B68     		ldr	r3, [r7]
 6356 024e 1968     		ldr	r1, [r3]
 6357 0250 3B68     		ldr	r3, [r7]
 6358 0252 DB68     		ldr	r3, [r3, #12]
 6359 0254 1A46     		mov	r2, r3
 6360 0256 FFF7FEFF 		bl	LL_ADC_SetChannelSingleDiff
3026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of differential mode */
3028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 6361              		.loc 2 3028 18
 6362 025a 3B68     		ldr	r3, [r7]
 6363 025c DB68     		ldr	r3, [r3, #12]
 6364              		.loc 2 3028 10
 6365 025e 0C4A     		ldr	r2, .L418
 6366 0260 9342     		cmp	r3, r2
 6367 0262 40F03381 		bne	.L357
3029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
3031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits r
3032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance,
 6368              		.loc 2 3032 9
 6369 0266 7B68     		ldr	r3, [r7, #4]
 6370 0268 1868     		ldr	r0, [r3]
3033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6371              		.loc 2 3033 50
 6372 026a 3B68     		ldr	r3, [r7]
 6373 026c 1B68     		ldr	r3, [r3]
 6374 026e C3F31303 		ubfx	r3, r3, #0, #20
 6375 0272 002B     		cmp	r3, #0
 6376 0274 10D1     		bne	.L358
 6377              		.loc 2 3033 50 is_stmt 0 discriminator 1
 6378 0276 3B68     		ldr	r3, [r7]
 6379 0278 1B68     		ldr	r3, [r3]
 6380 027a 9B0E     		lsrs	r3, r3, #26
 6381 027c 0133     		adds	r3, r3, #1
 6382 027e 03F01F03 		and	r3, r3, #31
 6383 0282 092B     		cmp	r3, #9
 6384 0284 94BF     		ite	ls
 6385 0286 0123     		movls	r3, #1
 6386 0288 0023     		movhi	r3, #0
 6387 028a DBB2     		uxtb	r3, r3
 6388 028c 1EE0     		b	.L359
 6389              	.L419:
 6390 028e 00BF     		.align	2
 6391              	.L418:
 6392 0290 0000FF47 		.word	1207894016
 6393 0294 0010005C 		.word	1543507968
 6394              	.L358:
 6395              		.loc 2 3033 50 discriminator 2
 6396 0298 3B68     		ldr	r3, [r7]
 6397 029a 1B68     		ldr	r3, [r3]
 6398 029c BB65     		str	r3, [r7, #88]
 6399              	.LBB55:
ARM GAS  /tmp/ccp7RHPZ.s 			page 325


 6400              	.LBB56:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6401              		.loc 3 1055 4 is_stmt 1 discriminator 2
 6402 029e BB6D     		ldr	r3, [r7, #88]
 6403              		.syntax unified
 6404              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6405 02a0 93FAA3F3 		rbit r3, r3
 6406              	@ 0 "" 2
 6407              		.thumb
 6408              		.syntax unified
 6409 02a4 7B65     		str	r3, [r7, #84]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6410              		.loc 3 1068 10 discriminator 2
 6411 02a6 7B6D     		ldr	r3, [r7, #84]
 6412 02a8 FB65     		str	r3, [r7, #92]
 6413              	.LBE56:
 6414              	.LBE55:
 6415              	.LBB57:
 6416              	.LBB58:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6417              		.loc 3 1089 6 discriminator 2
 6418 02aa FB6D     		ldr	r3, [r7, #92]
 6419 02ac 002B     		cmp	r3, #0
 6420 02ae 01D1     		bne	.L361
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6421              		.loc 3 1091 12
 6422 02b0 2023     		movs	r3, #32
 6423 02b2 03E0     		b	.L362
 6424              	.L361:
 6425              		.loc 3 1093 10
 6426 02b4 FB6D     		ldr	r3, [r7, #92]
 6427 02b6 B3FA83F3 		clz	r3, r3
 6428 02ba DBB2     		uxtb	r3, r3
 6429              	.L362:
 6430              	.LBE58:
 6431              	.LBE57:
 6432              		.loc 2 3033 50
 6433 02bc 0133     		adds	r3, r3, #1
 6434 02be 03F01F03 		and	r3, r3, #31
 6435 02c2 092B     		cmp	r3, #9
 6436 02c4 94BF     		ite	ls
 6437 02c6 0123     		movls	r3, #1
 6438 02c8 0023     		movhi	r3, #0
 6439 02ca DBB2     		uxtb	r3, r3
 6440              	.L359:
3032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6441              		.loc 2 3032 9
 6442 02cc 002B     		cmp	r3, #0
 6443 02ce 79D0     		beq	.L363
 6444              		.loc 2 3033 50
 6445 02d0 3B68     		ldr	r3, [r7]
 6446 02d2 1B68     		ldr	r3, [r3]
 6447 02d4 C3F31303 		ubfx	r3, r3, #0, #20
 6448 02d8 002B     		cmp	r3, #0
 6449 02da 07D1     		bne	.L364
 6450              		.loc 2 3033 50 is_stmt 0 discriminator 3
 6451 02dc 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccp7RHPZ.s 			page 326


 6452 02de 1B68     		ldr	r3, [r3]
 6453 02e0 9B0E     		lsrs	r3, r3, #26
 6454 02e2 0133     		adds	r3, r3, #1
 6455 02e4 9B06     		lsls	r3, r3, #26
 6456 02e6 03F0F842 		and	r2, r3, #2080374784
 6457 02ea 15E0     		b	.L365
 6458              	.L364:
 6459              		.loc 2 3033 50 discriminator 4
 6460 02ec 3B68     		ldr	r3, [r7]
 6461 02ee 1B68     		ldr	r3, [r3]
 6462 02f0 FB64     		str	r3, [r7, #76]
 6463              	.LBB59:
 6464              	.LBB60:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6465              		.loc 3 1055 4 is_stmt 1 discriminator 4
 6466 02f2 FB6C     		ldr	r3, [r7, #76]
 6467              		.syntax unified
 6468              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6469 02f4 93FAA3F3 		rbit r3, r3
 6470              	@ 0 "" 2
 6471              		.thumb
 6472              		.syntax unified
 6473 02f8 BB64     		str	r3, [r7, #72]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6474              		.loc 3 1068 10 discriminator 4
 6475 02fa BB6C     		ldr	r3, [r7, #72]
 6476 02fc 3B65     		str	r3, [r7, #80]
 6477              	.LBE60:
 6478              	.LBE59:
 6479              	.LBB61:
 6480              	.LBB62:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6481              		.loc 3 1089 6 discriminator 4
 6482 02fe 3B6D     		ldr	r3, [r7, #80]
 6483 0300 002B     		cmp	r3, #0
 6484 0302 01D1     		bne	.L367
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6485              		.loc 3 1091 12
 6486 0304 2023     		movs	r3, #32
 6487 0306 03E0     		b	.L368
 6488              	.L367:
 6489              		.loc 3 1093 10
 6490 0308 3B6D     		ldr	r3, [r7, #80]
 6491 030a B3FA83F3 		clz	r3, r3
 6492 030e DBB2     		uxtb	r3, r3
 6493              	.L368:
 6494              	.LBE62:
 6495              	.LBE61:
 6496              		.loc 2 3033 50
 6497 0310 0133     		adds	r3, r3, #1
 6498 0312 9B06     		lsls	r3, r3, #26
 6499 0314 03F0F842 		and	r2, r3, #2080374784
 6500              	.L365:
 6501              		.loc 2 3033 50 is_stmt 0 discriminator 6
 6502 0318 3B68     		ldr	r3, [r7]
 6503 031a 1B68     		ldr	r3, [r3]
 6504 031c C3F31303 		ubfx	r3, r3, #0, #20
ARM GAS  /tmp/ccp7RHPZ.s 			page 327


 6505 0320 002B     		cmp	r3, #0
 6506 0322 09D1     		bne	.L369
 6507              		.loc 2 3033 50 discriminator 7
 6508 0324 3B68     		ldr	r3, [r7]
 6509 0326 1B68     		ldr	r3, [r3]
 6510 0328 9B0E     		lsrs	r3, r3, #26
 6511 032a 0133     		adds	r3, r3, #1
 6512 032c 03F01F03 		and	r3, r3, #31
 6513 0330 0121     		movs	r1, #1
 6514 0332 01FA03F3 		lsl	r3, r1, r3
 6515 0336 17E0     		b	.L370
 6516              	.L369:
 6517              		.loc 2 3033 50 discriminator 8
 6518 0338 3B68     		ldr	r3, [r7]
 6519 033a 1B68     		ldr	r3, [r3]
 6520 033c 3B64     		str	r3, [r7, #64]
 6521              	.LBB63:
 6522              	.LBB64:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6523              		.loc 3 1055 4 is_stmt 1 discriminator 8
 6524 033e 3B6C     		ldr	r3, [r7, #64]
 6525              		.syntax unified
 6526              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6527 0340 93FAA3F3 		rbit r3, r3
 6528              	@ 0 "" 2
 6529              		.thumb
 6530              		.syntax unified
 6531 0344 FB63     		str	r3, [r7, #60]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6532              		.loc 3 1068 10 discriminator 8
 6533 0346 FB6B     		ldr	r3, [r7, #60]
 6534 0348 7B64     		str	r3, [r7, #68]
 6535              	.LBE64:
 6536              	.LBE63:
 6537              	.LBB65:
 6538              	.LBB66:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6539              		.loc 3 1089 6 discriminator 8
 6540 034a 7B6C     		ldr	r3, [r7, #68]
 6541 034c 002B     		cmp	r3, #0
 6542 034e 01D1     		bne	.L372
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6543              		.loc 3 1091 12
 6544 0350 2023     		movs	r3, #32
 6545 0352 03E0     		b	.L373
 6546              	.L372:
 6547              		.loc 3 1093 10
 6548 0354 7B6C     		ldr	r3, [r7, #68]
 6549 0356 B3FA83F3 		clz	r3, r3
 6550 035a DBB2     		uxtb	r3, r3
 6551              	.L373:
 6552              	.LBE66:
 6553              	.LBE65:
 6554              		.loc 2 3033 50
 6555 035c 0133     		adds	r3, r3, #1
 6556 035e 03F01F03 		and	r3, r3, #31
 6557 0362 0121     		movs	r1, #1
ARM GAS  /tmp/ccp7RHPZ.s 			page 328


 6558 0364 01FA03F3 		lsl	r3, r1, r3
 6559              	.L370:
 6560              		.loc 2 3033 50 is_stmt 0 discriminator 10
 6561 0368 42EA0301 		orr	r1, r2, r3
 6562 036c 3B68     		ldr	r3, [r7]
 6563 036e 1B68     		ldr	r3, [r3]
 6564 0370 C3F31303 		ubfx	r3, r3, #0, #20
 6565 0374 002B     		cmp	r3, #0
 6566 0376 0AD1     		bne	.L374
 6567              		.loc 2 3033 50 discriminator 11
 6568 0378 3B68     		ldr	r3, [r7]
 6569 037a 1B68     		ldr	r3, [r3]
 6570 037c 9B0E     		lsrs	r3, r3, #26
 6571 037e 0133     		adds	r3, r3, #1
 6572 0380 03F01F02 		and	r2, r3, #31
 6573 0384 1346     		mov	r3, r2
 6574 0386 5B00     		lsls	r3, r3, #1
 6575 0388 1344     		add	r3, r3, r2
 6576 038a 1B05     		lsls	r3, r3, #20
 6577 038c 18E0     		b	.L375
 6578              	.L374:
 6579              		.loc 2 3033 50 discriminator 12
 6580 038e 3B68     		ldr	r3, [r7]
 6581 0390 1B68     		ldr	r3, [r3]
 6582 0392 7B63     		str	r3, [r7, #52]
 6583              	.LBB67:
 6584              	.LBB68:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6585              		.loc 3 1055 4 is_stmt 1 discriminator 12
 6586 0394 7B6B     		ldr	r3, [r7, #52]
 6587              		.syntax unified
 6588              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6589 0396 93FAA3F3 		rbit r3, r3
 6590              	@ 0 "" 2
 6591              		.thumb
 6592              		.syntax unified
 6593 039a 3B63     		str	r3, [r7, #48]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6594              		.loc 3 1068 10 discriminator 12
 6595 039c 3B6B     		ldr	r3, [r7, #48]
 6596 039e BB63     		str	r3, [r7, #56]
 6597              	.LBE68:
 6598              	.LBE67:
 6599              	.LBB69:
 6600              	.LBB70:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6601              		.loc 3 1089 6 discriminator 12
 6602 03a0 BB6B     		ldr	r3, [r7, #56]
 6603 03a2 002B     		cmp	r3, #0
 6604 03a4 01D1     		bne	.L377
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6605              		.loc 3 1091 12
 6606 03a6 2023     		movs	r3, #32
 6607 03a8 03E0     		b	.L378
 6608              	.L377:
 6609              		.loc 3 1093 10
 6610 03aa BB6B     		ldr	r3, [r7, #56]
ARM GAS  /tmp/ccp7RHPZ.s 			page 329


 6611 03ac B3FA83F3 		clz	r3, r3
 6612 03b0 DBB2     		uxtb	r3, r3
 6613              	.L378:
 6614              	.LBE70:
 6615              	.LBE69:
 6616              		.loc 2 3033 50
 6617 03b2 0133     		adds	r3, r3, #1
 6618 03b4 03F01F02 		and	r2, r3, #31
 6619 03b8 1346     		mov	r3, r2
 6620 03ba 5B00     		lsls	r3, r3, #1
 6621 03bc 1344     		add	r3, r3, r2
 6622 03be 1B05     		lsls	r3, r3, #20
 6623              	.L375:
3032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6624              		.loc 2 3032 9
 6625 03c0 0B43     		orrs	r3, r3, r1
 6626 03c2 7EE0     		b	.L379
 6627              	.L363:
 6628              		.loc 2 3033 50
 6629 03c4 3B68     		ldr	r3, [r7]
 6630 03c6 1B68     		ldr	r3, [r3]
 6631 03c8 C3F31303 		ubfx	r3, r3, #0, #20
 6632 03cc 002B     		cmp	r3, #0
 6633 03ce 07D1     		bne	.L380
 6634              		.loc 2 3033 50 is_stmt 0 discriminator 13
 6635 03d0 3B68     		ldr	r3, [r7]
 6636 03d2 1B68     		ldr	r3, [r3]
 6637 03d4 9B0E     		lsrs	r3, r3, #26
 6638 03d6 0133     		adds	r3, r3, #1
 6639 03d8 9B06     		lsls	r3, r3, #26
 6640 03da 03F0F842 		and	r2, r3, #2080374784
 6641 03de 15E0     		b	.L381
 6642              	.L380:
 6643              		.loc 2 3033 50 discriminator 14
 6644 03e0 3B68     		ldr	r3, [r7]
 6645 03e2 1B68     		ldr	r3, [r3]
 6646 03e4 BB62     		str	r3, [r7, #40]
 6647              	.LBB71:
 6648              	.LBB72:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6649              		.loc 3 1055 4 is_stmt 1 discriminator 14
 6650 03e6 BB6A     		ldr	r3, [r7, #40]
 6651              		.syntax unified
 6652              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6653 03e8 93FAA3F3 		rbit r3, r3
 6654              	@ 0 "" 2
 6655              		.thumb
 6656              		.syntax unified
 6657 03ec 7B62     		str	r3, [r7, #36]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6658              		.loc 3 1068 10 discriminator 14
 6659 03ee 7B6A     		ldr	r3, [r7, #36]
 6660 03f0 FB62     		str	r3, [r7, #44]
 6661              	.LBE72:
 6662              	.LBE71:
 6663              	.LBB73:
 6664              	.LBB74:
ARM GAS  /tmp/ccp7RHPZ.s 			page 330


1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6665              		.loc 3 1089 6 discriminator 14
 6666 03f2 FB6A     		ldr	r3, [r7, #44]
 6667 03f4 002B     		cmp	r3, #0
 6668 03f6 01D1     		bne	.L383
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6669              		.loc 3 1091 12
 6670 03f8 2023     		movs	r3, #32
 6671 03fa 03E0     		b	.L384
 6672              	.L383:
 6673              		.loc 3 1093 10
 6674 03fc FB6A     		ldr	r3, [r7, #44]
 6675 03fe B3FA83F3 		clz	r3, r3
 6676 0402 DBB2     		uxtb	r3, r3
 6677              	.L384:
 6678              	.LBE74:
 6679              	.LBE73:
 6680              		.loc 2 3033 50
 6681 0404 0133     		adds	r3, r3, #1
 6682 0406 9B06     		lsls	r3, r3, #26
 6683 0408 03F0F842 		and	r2, r3, #2080374784
 6684              	.L381:
 6685              		.loc 2 3033 50 is_stmt 0 discriminator 16
 6686 040c 3B68     		ldr	r3, [r7]
 6687 040e 1B68     		ldr	r3, [r3]
 6688 0410 C3F31303 		ubfx	r3, r3, #0, #20
 6689 0414 002B     		cmp	r3, #0
 6690 0416 09D1     		bne	.L385
 6691              		.loc 2 3033 50 discriminator 17
 6692 0418 3B68     		ldr	r3, [r7]
 6693 041a 1B68     		ldr	r3, [r3]
 6694 041c 9B0E     		lsrs	r3, r3, #26
 6695 041e 0133     		adds	r3, r3, #1
 6696 0420 03F01F03 		and	r3, r3, #31
 6697 0424 0121     		movs	r1, #1
 6698 0426 01FA03F3 		lsl	r3, r1, r3
 6699 042a 17E0     		b	.L386
 6700              	.L385:
 6701              		.loc 2 3033 50 discriminator 18
 6702 042c 3B68     		ldr	r3, [r7]
 6703 042e 1B68     		ldr	r3, [r3]
 6704 0430 FB61     		str	r3, [r7, #28]
 6705              	.LBB75:
 6706              	.LBB76:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6707              		.loc 3 1055 4 is_stmt 1 discriminator 18
 6708 0432 FB69     		ldr	r3, [r7, #28]
 6709              		.syntax unified
 6710              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6711 0434 93FAA3F3 		rbit r3, r3
 6712              	@ 0 "" 2
 6713              		.thumb
 6714              		.syntax unified
 6715 0438 BB61     		str	r3, [r7, #24]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6716              		.loc 3 1068 10 discriminator 18
 6717 043a BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccp7RHPZ.s 			page 331


 6718 043c 3B62     		str	r3, [r7, #32]
 6719              	.LBE76:
 6720              	.LBE75:
 6721              	.LBB77:
 6722              	.LBB78:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6723              		.loc 3 1089 6 discriminator 18
 6724 043e 3B6A     		ldr	r3, [r7, #32]
 6725 0440 002B     		cmp	r3, #0
 6726 0442 01D1     		bne	.L388
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6727              		.loc 3 1091 12
 6728 0444 2023     		movs	r3, #32
 6729 0446 03E0     		b	.L389
 6730              	.L388:
 6731              		.loc 3 1093 10
 6732 0448 3B6A     		ldr	r3, [r7, #32]
 6733 044a B3FA83F3 		clz	r3, r3
 6734 044e DBB2     		uxtb	r3, r3
 6735              	.L389:
 6736              	.LBE78:
 6737              	.LBE77:
 6738              		.loc 2 3033 50
 6739 0450 0133     		adds	r3, r3, #1
 6740 0452 03F01F03 		and	r3, r3, #31
 6741 0456 0121     		movs	r1, #1
 6742 0458 01FA03F3 		lsl	r3, r1, r3
 6743              	.L386:
 6744              		.loc 2 3033 50 is_stmt 0 discriminator 20
 6745 045c 42EA0301 		orr	r1, r2, r3
 6746 0460 3B68     		ldr	r3, [r7]
 6747 0462 1B68     		ldr	r3, [r3]
 6748 0464 C3F31303 		ubfx	r3, r3, #0, #20
 6749 0468 002B     		cmp	r3, #0
 6750 046a 0DD1     		bne	.L390
 6751              		.loc 2 3033 50 discriminator 21
 6752 046c 3B68     		ldr	r3, [r7]
 6753 046e 1B68     		ldr	r3, [r3]
 6754 0470 9B0E     		lsrs	r3, r3, #26
 6755 0472 0133     		adds	r3, r3, #1
 6756 0474 03F01F02 		and	r2, r3, #31
 6757 0478 1346     		mov	r3, r2
 6758 047a 5B00     		lsls	r3, r3, #1
 6759 047c 1344     		add	r3, r3, r2
 6760 047e 1E3B     		subs	r3, r3, #30
 6761 0480 1B05     		lsls	r3, r3, #20
 6762 0482 43F00073 		orr	r3, r3, #33554432
 6763 0486 1BE0     		b	.L391
 6764              	.L390:
 6765              		.loc 2 3033 50 discriminator 22
 6766 0488 3B68     		ldr	r3, [r7]
 6767 048a 1B68     		ldr	r3, [r3]
 6768 048c 3B61     		str	r3, [r7, #16]
 6769              	.LBB79:
 6770              	.LBB80:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6771              		.loc 3 1055 4 is_stmt 1 discriminator 22
ARM GAS  /tmp/ccp7RHPZ.s 			page 332


 6772 048e 3B69     		ldr	r3, [r7, #16]
 6773              		.syntax unified
 6774              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6775 0490 93FAA3F3 		rbit r3, r3
 6776              	@ 0 "" 2
 6777              		.thumb
 6778              		.syntax unified
 6779 0494 FB60     		str	r3, [r7, #12]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6780              		.loc 3 1068 10 discriminator 22
 6781 0496 FB68     		ldr	r3, [r7, #12]
 6782 0498 7B61     		str	r3, [r7, #20]
 6783              	.LBE80:
 6784              	.LBE79:
 6785              	.LBB81:
 6786              	.LBB82:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6787              		.loc 3 1089 6 discriminator 22
 6788 049a 7B69     		ldr	r3, [r7, #20]
 6789 049c 002B     		cmp	r3, #0
 6790 049e 01D1     		bne	.L393
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6791              		.loc 3 1091 12
 6792 04a0 2023     		movs	r3, #32
 6793 04a2 03E0     		b	.L394
 6794              	.L393:
 6795              		.loc 3 1093 10
 6796 04a4 7B69     		ldr	r3, [r7, #20]
 6797 04a6 B3FA83F3 		clz	r3, r3
 6798 04aa DBB2     		uxtb	r3, r3
 6799              	.L394:
 6800              	.LBE82:
 6801              	.LBE81:
 6802              		.loc 2 3033 50
 6803 04ac 0133     		adds	r3, r3, #1
 6804 04ae 03F01F02 		and	r2, r3, #31
 6805 04b2 1346     		mov	r3, r2
 6806 04b4 5B00     		lsls	r3, r3, #1
 6807 04b6 1344     		add	r3, r3, r2
 6808 04b8 1E3B     		subs	r3, r3, #30
 6809 04ba 1B05     		lsls	r3, r3, #20
 6810 04bc 43F00073 		orr	r3, r3, #33554432
 6811              	.L391:
3032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6812              		.loc 2 3032 9 discriminator 2
 6813 04c0 0B43     		orrs	r3, r3, r1
 6814              	.L379:
3032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6815              		.loc 2 3032 9 is_stmt 0 discriminator 1
 6816 04c2 3A68     		ldr	r2, [r7]
 6817 04c4 9268     		ldr	r2, [r2, #8]
 6818 04c6 1946     		mov	r1, r3
 6819 04c8 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 6820              	.L357:
3034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
3035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 333


3037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
3038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If internal channel selected, enable dedicated internal buffers and    */
3039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* paths.                                                                 */
3040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using           */
3041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* HAL_ADC_DeInit().                                                      */
3042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 6821              		.loc 2 3043 11 is_stmt 1
 6822 04cc 3B68     		ldr	r3, [r7]
 6823 04ce 1B68     		ldr	r3, [r3]
 6824              		.loc 2 3043 10
 6825 04d0 002B     		cmp	r3, #0
 6826 04d2 80F2C680 		bge	.L356
3044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of common ADC parameters                                 */
3046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
 6827              		.loc 2 3047 70
 6828 04d6 7B68     		ldr	r3, [r7, #4]
 6829 04d8 1B68     		ldr	r3, [r3]
 6830              		.loc 2 3047 39
 6831 04da 674A     		ldr	r2, .L420
 6832 04dc 9342     		cmp	r3, r2
 6833 04de 04D0     		beq	.L395
 6834              		.loc 2 3047 70 discriminator 2
 6835 04e0 7B68     		ldr	r3, [r7, #4]
 6836 04e2 1B68     		ldr	r3, [r3]
 6837 04e4 654A     		ldr	r2, .L420+4
 6838 04e6 9342     		cmp	r3, r2
 6839 04e8 01D1     		bne	.L396
 6840              	.L395:
 6841              		.loc 2 3047 39 discriminator 3
 6842 04ea 654B     		ldr	r3, .L420+8
 6843 04ec 00E0     		b	.L397
 6844              	.L396:
 6845              		.loc 2 3047 39 is_stmt 0 discriminator 4
 6846 04ee 654B     		ldr	r3, .L420+12
 6847              	.L397:
 6848              		.loc 2 3047 39 discriminator 6
 6849 04f0 1846     		mov	r0, r3
 6850 04f2 FFF7FEFF 		bl	LL_ADC_GetCommonPathInternalCh
 6851 04f6 F866     		str	r0, [r7, #108]
3048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Software is allowed to change common parameters only when all ADCs   */
3050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* of the common group are disabled.                                    */
3051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0U
 6852              		.loc 2 3051 13 is_stmt 1 discriminator 6
 6853 04f8 7B68     		ldr	r3, [r7, #4]
 6854 04fa 1B68     		ldr	r3, [r3]
 6855              		.loc 2 3051 95 discriminator 6
 6856 04fc 5E4A     		ldr	r2, .L420
 6857 04fe 9342     		cmp	r3, r2
 6858 0500 04D0     		beq	.L398
 6859              		.loc 2 3051 13 discriminator 2
 6860 0502 7B68     		ldr	r3, [r7, #4]
 6861 0504 1B68     		ldr	r3, [r3]
 6862 0506 5D4A     		ldr	r2, .L420+4
ARM GAS  /tmp/ccp7RHPZ.s 			page 334


 6863 0508 9342     		cmp	r3, r2
 6864 050a 0ED1     		bne	.L399
 6865              	.L398:
 6866              		.loc 2 3051 13 is_stmt 0 discriminator 3
 6867 050c 5A48     		ldr	r0, .L420
 6868 050e FFF7FEFF 		bl	LL_ADC_IsEnabled
 6869 0512 0446     		mov	r4, r0
 6870 0514 5948     		ldr	r0, .L420+4
 6871 0516 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6872 051a 0346     		mov	r3, r0
 6873 051c 2343     		orrs	r3, r3, r4
 6874              		.loc 2 3051 95 is_stmt 1 discriminator 3
 6875 051e 002B     		cmp	r3, #0
 6876 0520 0CBF     		ite	eq
 6877 0522 0123     		moveq	r3, #1
 6878 0524 0023     		movne	r3, #0
 6879 0526 DBB2     		uxtb	r3, r3
 6880 0528 08E0     		b	.L400
 6881              	.L399:
 6882              		.loc 2 3051 13 discriminator 4
 6883 052a 5748     		ldr	r0, .L420+16
 6884 052c FFF7FEFF 		bl	LL_ADC_IsEnabled
 6885 0530 0346     		mov	r3, r0
 6886              		.loc 2 3051 95 discriminator 4
 6887 0532 002B     		cmp	r3, #0
 6888 0534 0CBF     		ite	eq
 6889 0536 0123     		moveq	r3, #1
 6890 0538 0023     		movne	r3, #0
 6891 053a DBB2     		uxtb	r3, r3
 6892              	.L400:
 6893              		.loc 2 3051 12 discriminator 6
 6894 053c 002B     		cmp	r3, #0
 6895 053e 7DD0     		beq	.L401
3052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* If the requested internal measurement path has already been enabled, */
3054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* bypass the configuration processing.                                 */
3055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_AD
 6896              		.loc 2 3055 23
 6897 0540 3B68     		ldr	r3, [r7]
 6898 0542 1B68     		ldr	r3, [r3]
 6899              		.loc 2 3055 14
 6900 0544 514A     		ldr	r2, .L420+20
 6901 0546 9342     		cmp	r3, r2
 6902 0548 30D1     		bne	.L402
 6903              		.loc 2 3055 93 discriminator 1
 6904 054a FB6E     		ldr	r3, [r7, #108]
 6905 054c 03F40003 		and	r3, r3, #8388608
 6906              		.loc 2 3055 60 discriminator 1
 6907 0550 002B     		cmp	r3, #0
 6908 0552 2BD1     		bne	.L402
3056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 6909              		.loc 2 3057 17
 6910 0554 7B68     		ldr	r3, [r7, #4]
 6911 0556 1B68     		ldr	r3, [r3]
 6912              		.loc 2 3057 16
 6913 0558 4B4A     		ldr	r2, .L420+16
ARM GAS  /tmp/ccp7RHPZ.s 			page 335


 6914 055a 9342     		cmp	r3, r2
 6915 055c 40F08180 		bne	.L356
3058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 6916              		.loc 2 3059 46
 6917 0560 7B68     		ldr	r3, [r7, #4]
 6918 0562 1B68     		ldr	r3, [r3]
 6919              		.loc 2 3059 15
 6920 0564 444A     		ldr	r2, .L420
 6921 0566 9342     		cmp	r3, r2
 6922 0568 04D0     		beq	.L404
 6923              		.loc 2 3059 46 discriminator 2
 6924 056a 7B68     		ldr	r3, [r7, #4]
 6925 056c 1B68     		ldr	r3, [r3]
 6926 056e 434A     		ldr	r2, .L420+4
 6927 0570 9342     		cmp	r3, r2
 6928 0572 01D1     		bne	.L405
 6929              	.L404:
 6930              		.loc 2 3059 15 discriminator 3
 6931 0574 424A     		ldr	r2, .L420+8
 6932 0576 00E0     		b	.L406
 6933              	.L405:
 6934              		.loc 2 3059 15 is_stmt 0 discriminator 4
 6935 0578 424A     		ldr	r2, .L420+12
 6936              	.L406:
 6937              		.loc 2 3059 15 discriminator 6
 6938 057a FB6E     		ldr	r3, [r7, #108]
 6939 057c 43F40003 		orr	r3, r3, #8388608
 6940 0580 1946     		mov	r1, r3
 6941 0582 1046     		mov	r0, r2
 6942 0584 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
3060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Delay for temperature sensor stabilization time */
3062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Wait loop initialization and execution */
3063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Note: Variable divided by 2 to compensate partially              */
3064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       CPU processing cycles, scaling in us split to not          */
3065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       exceed 32 bits register capacity and handle low frequency. */
3066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (10
 6943              		.loc 2 3066 95 is_stmt 1 discriminator 6
 6944 0588 414B     		ldr	r3, .L420+24
 6945 058a 1B68     		ldr	r3, [r3]
 6946 058c 9B09     		lsrs	r3, r3, #6
 6947 058e 414A     		ldr	r2, .L420+28
 6948 0590 A2FB0323 		umull	r2, r3, r2, r3
 6949 0594 9B09     		lsrs	r3, r3, #6
 6950              		.loc 2 3066 115 discriminator 6
 6951 0596 0133     		adds	r3, r3, #1
 6952              		.loc 2 3066 75 discriminator 6
 6953 0598 5B00     		lsls	r3, r3, #1
 6954              		.loc 2 3066 31 discriminator 6
 6955 059a BB60     		str	r3, [r7, #8]
3067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6956              		.loc 2 3067 21 discriminator 6
 6957 059c 02E0     		b	.L407
 6958              	.L408:
3068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
3069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 wait_loop_index--;
ARM GAS  /tmp/ccp7RHPZ.s 			page 336


 6959              		.loc 2 3069 32
 6960 059e BB68     		ldr	r3, [r7, #8]
 6961 05a0 013B     		subs	r3, r3, #1
 6962 05a2 BB60     		str	r3, [r7, #8]
 6963              	.L407:
3067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6964              		.loc 2 3067 38
 6965 05a4 BB68     		ldr	r3, [r7, #8]
3067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 6966              		.loc 2 3067 21
 6967 05a6 002B     		cmp	r3, #0
 6968 05a8 F9D1     		bne	.L408
3057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 6969              		.loc 2 3057 16
 6970 05aa 5AE0     		b	.L356
 6971              	.L402:
3070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               }
3071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC
 6972              		.loc 2 3073 28
 6973 05ac 3B68     		ldr	r3, [r7]
 6974 05ae 1B68     		ldr	r3, [r3]
 6975              		.loc 2 3073 19
 6976 05b0 394A     		ldr	r2, .L420+32
 6977 05b2 9342     		cmp	r3, r2
 6978 05b4 1ED1     		bne	.L410
 6979              		.loc 2 3073 92 discriminator 1
 6980 05b6 FB6E     		ldr	r3, [r7, #108]
 6981 05b8 03F08073 		and	r3, r3, #16777216
 6982              		.loc 2 3073 59 discriminator 1
 6983 05bc 002B     		cmp	r3, #0
 6984 05be 19D1     		bne	.L410
3074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 6985              		.loc 2 3075 17
 6986 05c0 7B68     		ldr	r3, [r7, #4]
 6987 05c2 1B68     		ldr	r3, [r3]
 6988              		.loc 2 3075 16
 6989 05c4 304A     		ldr	r2, .L420+16
 6990 05c6 9342     		cmp	r3, r2
 6991 05c8 4BD1     		bne	.L356
3076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 6992              		.loc 2 3077 46
 6993 05ca 7B68     		ldr	r3, [r7, #4]
 6994 05cc 1B68     		ldr	r3, [r3]
 6995              		.loc 2 3077 15
 6996 05ce 2A4A     		ldr	r2, .L420
 6997 05d0 9342     		cmp	r3, r2
 6998 05d2 04D0     		beq	.L412
 6999              		.loc 2 3077 46 discriminator 2
 7000 05d4 7B68     		ldr	r3, [r7, #4]
 7001 05d6 1B68     		ldr	r3, [r3]
 7002 05d8 284A     		ldr	r2, .L420+4
 7003 05da 9342     		cmp	r3, r2
 7004 05dc 01D1     		bne	.L413
ARM GAS  /tmp/ccp7RHPZ.s 			page 337


 7005              	.L412:
 7006              		.loc 2 3077 15 discriminator 3
 7007 05de 284A     		ldr	r2, .L420+8
 7008 05e0 00E0     		b	.L414
 7009              	.L413:
 7010              		.loc 2 3077 15 is_stmt 0 discriminator 4
 7011 05e2 284A     		ldr	r2, .L420+12
 7012              	.L414:
 7013              		.loc 2 3077 15 discriminator 6
 7014 05e4 FB6E     		ldr	r3, [r7, #108]
 7015 05e6 43F08073 		orr	r3, r3, #16777216
 7016 05ea 1946     		mov	r1, r3
 7017 05ec 1046     		mov	r0, r2
 7018 05ee FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
3075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 7019              		.loc 2 3075 16 is_stmt 1 discriminator 6
 7020 05f2 36E0     		b	.L356
 7021              	.L410:
3078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_
 7022              		.loc 2 3080 28
 7023 05f4 3B68     		ldr	r3, [r7]
 7024 05f6 1B68     		ldr	r3, [r3]
 7025              		.loc 2 3080 19
 7026 05f8 284A     		ldr	r2, .L420+36
 7027 05fa 9342     		cmp	r3, r2
 7028 05fc 31D1     		bne	.L356
 7029              		.loc 2 3080 95 discriminator 1
 7030 05fe FB6E     		ldr	r3, [r7, #108]
 7031 0600 03F48003 		and	r3, r3, #4194304
 7032              		.loc 2 3080 62 discriminator 1
 7033 0604 002B     		cmp	r3, #0
 7034 0606 2CD1     		bne	.L356
3081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_VREFINT_INSTANCE(hadc))
 7035              		.loc 2 3082 17
 7036 0608 7B68     		ldr	r3, [r7, #4]
 7037 060a 1B68     		ldr	r3, [r3]
 7038              		.loc 2 3082 16
 7039 060c 1E4A     		ldr	r2, .L420+16
 7040 060e 9342     		cmp	r3, r2
 7041 0610 27D1     		bne	.L356
3083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
 7042              		.loc 2 3084 46
 7043 0612 7B68     		ldr	r3, [r7, #4]
 7044 0614 1B68     		ldr	r3, [r3]
 7045              		.loc 2 3084 15
 7046 0616 184A     		ldr	r2, .L420
 7047 0618 9342     		cmp	r3, r2
 7048 061a 04D0     		beq	.L415
 7049              		.loc 2 3084 46 discriminator 2
 7050 061c 7B68     		ldr	r3, [r7, #4]
 7051 061e 1B68     		ldr	r3, [r3]
 7052 0620 164A     		ldr	r2, .L420+4
 7053 0622 9342     		cmp	r3, r2
ARM GAS  /tmp/ccp7RHPZ.s 			page 338


 7054 0624 01D1     		bne	.L416
 7055              	.L415:
 7056              		.loc 2 3084 15 discriminator 3
 7057 0626 164A     		ldr	r2, .L420+8
 7058 0628 00E0     		b	.L417
 7059              	.L416:
 7060              		.loc 2 3084 15 is_stmt 0 discriminator 4
 7061 062a 164A     		ldr	r2, .L420+12
 7062              	.L417:
 7063              		.loc 2 3084 15 discriminator 6
 7064 062c FB6E     		ldr	r3, [r7, #108]
 7065 062e 43F48003 		orr	r3, r3, #4194304
 7066 0632 1946     		mov	r1, r3
 7067 0634 1046     		mov	r0, r2
 7068 0636 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
 7069 063a 12E0     		b	.L356
 7070              	.L401:
3085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* nothing to do */
3090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If the requested internal measurement path has already been          */
3093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* enabled and other ADC of the common group are enabled, internal      */
3094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* measurement paths cannot be enabled.                                 */
3095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7071              		.loc 2 3098 11 is_stmt 1
 7072 063c 7B68     		ldr	r3, [r7, #4]
 7073 063e 5B6D     		ldr	r3, [r3, #84]
 7074 0640 43F02002 		orr	r2, r3, #32
 7075 0644 7B68     		ldr	r3, [r7, #4]
 7076 0646 5A65     		str	r2, [r3, #84]
3099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmp_hal_status = HAL_ERROR;
 7077              		.loc 2 3100 26
 7078 0648 0123     		movs	r3, #1
 7079 064a 87F87F30 		strb	r3, [r7, #127]
 7080 064e 08E0     		b	.L356
 7081              	.L337:
3101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
3107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
3108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* parameters.                                                              */
3109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7082              		.loc 2 3112 5
ARM GAS  /tmp/ccp7RHPZ.s 			page 339


 7083 0650 7B68     		ldr	r3, [r7, #4]
 7084 0652 5B6D     		ldr	r3, [r3, #84]
 7085 0654 43F02002 		orr	r2, r3, #32
 7086 0658 7B68     		ldr	r3, [r7, #4]
 7087 065a 5A65     		str	r2, [r3, #84]
3113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 7088              		.loc 2 3114 20
 7089 065c 0123     		movs	r3, #1
 7090 065e 87F87F30 		strb	r3, [r7, #127]
 7091              	.L356:
3115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 7092              		.loc 2 3118 3
 7093 0662 7B68     		ldr	r3, [r7, #4]
 7094 0664 0022     		movs	r2, #0
 7095 0666 83F85020 		strb	r2, [r3, #80]
3119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 7096              		.loc 2 3121 10
 7097 066a 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 7098              	.L336:
3122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 7099              		.loc 2 3122 1
 7100 066e 1846     		mov	r0, r3
 7101 0670 8437     		adds	r7, r7, #132
 7102              	.LCFI322:
 7103              		.cfi_def_cfa_offset 12
 7104 0672 BD46     		mov	sp, r7
 7105              	.LCFI323:
 7106              		.cfi_def_cfa_register 13
 7107              		@ sp needed
 7108 0674 90BD     		pop	{r4, r7, pc}
 7109              	.L421:
 7110 0676 00BF     		.align	2
 7111              	.L420:
 7112 0678 00200240 		.word	1073881088
 7113 067c 00210240 		.word	1073881344
 7114 0680 00230240 		.word	1073881856
 7115 0684 00630258 		.word	1476551424
 7116 0688 00600258 		.word	1476550656
 7117 068c 000084CB 		.word	-880541696
 7118 0690 00000000 		.word	SystemCoreClock
 7119 0694 632D3E05 		.word	87960931
 7120 0698 000052C7 		.word	-950927360
 7121 069c 0000B8CF 		.word	-810024960
 7122              		.cfi_endproc
 7123              	.LFE349:
 7125              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 7126              		.align	1
 7127              		.global	HAL_ADC_AnalogWDGConfig
 7128              		.syntax unified
 7129              		.thumb
 7130              		.thumb_func
ARM GAS  /tmp/ccp7RHPZ.s 			page 340


 7131              		.fpu fpv5-d16
 7133              	HAL_ADC_AnalogWDGConfig:
 7134              	.LFB350:
3123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
3126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
3127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
3128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
3129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
3130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the ADC.
3131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
3132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
3133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
3134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   On this STM32 series, analog watchdog thresholds cannot be modified
3135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         while ADC conversion is on going.
3136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
3138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
3139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
3141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 7135              		.loc 2 3141 1
 7136              		.cfi_startproc
 7137              		@ args = 0, pretend = 0, frame = 80
 7138              		@ frame_needed = 1, uses_anonymous_args = 0
 7139 0000 80B5     		push	{r7, lr}
 7140              	.LCFI324:
 7141              		.cfi_def_cfa_offset 8
 7142              		.cfi_offset 7, -8
 7143              		.cfi_offset 14, -4
 7144 0002 94B0     		sub	sp, sp, #80
 7145              	.LCFI325:
 7146              		.cfi_def_cfa_offset 88
 7147 0004 00AF     		add	r7, sp, #0
 7148              	.LCFI326:
 7149              		.cfi_def_cfa_register 7
 7150 0006 7860     		str	r0, [r7, #4]
 7151 0008 3960     		str	r1, [r7]
3142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 7152              		.loc 2 3142 21
 7153 000a 0023     		movs	r3, #0
 7154 000c 87F84F30 		strb	r3, [r7, #79]
3143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
3144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
3145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
3151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
3152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
3153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 7155              		.loc 2 3154 23
 7156 0010 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccp7RHPZ.s 			page 341


 7157 0012 5B68     		ldr	r3, [r3, #4]
 7158              		.loc 2 3154 6
 7159 0014 B3F5400F 		cmp	r3, #12582912
 7160 0018 03D0     		beq	.L423
3155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7161              		.loc 2 3155 23 discriminator 1
 7162 001a 3B68     		ldr	r3, [r7]
 7163 001c 5B68     		ldr	r3, [r3, #4]
3154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7164              		.loc 2 3154 76 discriminator 1
 7165 001e B3F1A07F 		cmp	r3, #20971520
 7166              	.L423:
3156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC))
3157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
3159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
3164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->
3171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->I
3172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
3182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->I
3189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->In
3190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
3200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
ARM GAS  /tmp/ccp7RHPZ.s 			page 342


 7167              		.loc 2 3200 3
 7168 0022 7B68     		ldr	r3, [r7, #4]
 7169 0024 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 7170 0028 012B     		cmp	r3, #1
 7171 002a 01D1     		bne	.L424
 7172              		.loc 2 3200 3 is_stmt 0 discriminator 1
 7173 002c 0223     		movs	r3, #2
 7174 002e 01E3     		b	.L425
 7175              	.L424:
 7176              		.loc 2 3200 3 discriminator 2
 7177 0030 7B68     		ldr	r3, [r7, #4]
 7178 0032 0122     		movs	r2, #1
 7179 0034 83F85020 		strb	r2, [r3, #80]
3201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
3203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
3204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on ADC groups regular and injected:                  */
3205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
3206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
3207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 7180              		.loc 2 3207 44 is_stmt 1 discriminator 2
 7181 0038 7B68     		ldr	r3, [r7, #4]
 7182 003a 1B68     		ldr	r3, [r3]
 7183 003c 1846     		mov	r0, r3
 7184 003e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7185 0042 B864     		str	r0, [r7, #72]
3208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 7186              		.loc 2 3208 45 discriminator 2
 7187 0044 7B68     		ldr	r3, [r7, #4]
 7188 0046 1B68     		ldr	r3, [r3]
 7189 0048 1846     		mov	r0, r3
 7190 004a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 7191 004e 7864     		str	r0, [r7, #68]
3209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 7192              		.loc 2 3209 6 discriminator 2
 7193 0050 BB6C     		ldr	r3, [r7, #72]
 7194 0052 002B     		cmp	r3, #0
 7195 0054 40F0DF82 		bne	.L426
3210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 7196              		.loc 2 3210 7
 7197 0058 7B6C     		ldr	r3, [r7, #68]
 7198 005a 002B     		cmp	r3, #0
 7199 005c 40F0DB82 		bne	.L426
3211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog configuration */
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 7200              		.loc 2 3214 24
 7201 0060 3B68     		ldr	r3, [r7]
 7202 0062 1B68     		ldr	r3, [r3]
 7203              		.loc 2 3214 8
 7204 0064 AC4A     		ldr	r2, .L487
 7205 0066 9342     		cmp	r3, r2
 7206 0068 40F0FA80 		bne	.L427
3215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
3217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
ARM GAS  /tmp/ccp7RHPZ.s 			page 343


3218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    channels, on groups regular and-or injected.                      */
3219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7207              		.loc 2 3219 30
 7208 006c 3B68     		ldr	r3, [r7]
 7209 006e 5B68     		ldr	r3, [r3, #4]
 7210              		.loc 2 3219 7
 7211 0070 B3F1E07F 		cmp	r3, #29360128
 7212 0074 34D0     		beq	.L428
 7213 0076 B3F1E07F 		cmp	r3, #29360128
 7214 007a 56D8     		bhi	.L429
 7215 007c B3F1C07F 		cmp	r3, #25165824
 7216 0080 4BD0     		beq	.L430
 7217 0082 B3F1C07F 		cmp	r3, #25165824
 7218 0086 50D8     		bhi	.L429
 7219 0088 B3F1A07F 		cmp	r3, #20971520
 7220 008c 1BD0     		beq	.L431
 7221 008e B3F1A07F 		cmp	r3, #20971520
 7222 0092 4AD8     		bhi	.L429
 7223 0094 B3F1807F 		cmp	r3, #16777216
 7224 0098 37D0     		beq	.L432
 7225 009a B3F1807F 		cmp	r3, #16777216
 7226 009e 44D8     		bhi	.L429
 7227 00a0 B3F5000F 		cmp	r3, #8388608
 7228 00a4 29D0     		beq	.L433
 7229 00a6 B3F5400F 		cmp	r3, #12582912
 7230 00aa 3ED1     		bne	.L429
3220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7231              		.loc 2 3222 11
 7232 00ac 7B68     		ldr	r3, [r7, #4]
 7233 00ae 1868     		ldr	r0, [r3]
 7234              		.loc 2 3222 72
 7235 00b0 3B68     		ldr	r3, [r7]
 7236 00b2 9B68     		ldr	r3, [r3, #8]
 7237 00b4 23F07C73 		bic	r3, r3, #66060288
 7238              		.loc 2 3222 11
 7239 00b8 43F44003 		orr	r3, r3, #12582912
 7240 00bc 1A46     		mov	r2, r3
 7241 00be 9649     		ldr	r1, .L487
 7242 00c0 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
3224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7243              		.loc 2 3224 11
 7244 00c4 39E0     		b	.L434
 7245              	.L431:
3225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7246              		.loc 2 3227 11
 7247 00c6 7B68     		ldr	r3, [r7, #4]
 7248 00c8 1868     		ldr	r0, [r3]
 7249              		.loc 2 3227 72
 7250 00ca 3B68     		ldr	r3, [r7]
 7251 00cc 9B68     		ldr	r3, [r3, #8]
 7252 00ce 23F07C73 		bic	r3, r3, #66060288
 7253              		.loc 2 3227 11
ARM GAS  /tmp/ccp7RHPZ.s 			page 344


 7254 00d2 43F0A073 		orr	r3, r3, #20971520
 7255 00d6 1A46     		mov	r2, r3
 7256 00d8 8F49     		ldr	r1, .L487
 7257 00da FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
3229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7258              		.loc 2 3229 11
 7259 00de 2CE0     		b	.L434
 7260              	.L428:
3230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7261              		.loc 2 3232 11
 7262 00e0 7B68     		ldr	r3, [r7, #4]
 7263 00e2 1868     		ldr	r0, [r3]
 7264              		.loc 2 3232 72
 7265 00e4 3B68     		ldr	r3, [r7]
 7266 00e6 9B68     		ldr	r3, [r3, #8]
 7267 00e8 23F07C73 		bic	r3, r3, #66060288
 7268              		.loc 2 3232 11
 7269 00ec 43F0E073 		orr	r3, r3, #29360128
 7270 00f0 1A46     		mov	r2, r3
 7271 00f2 8949     		ldr	r1, .L487
 7272 00f4 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
3234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7273              		.loc 2 3234 11
 7274 00f8 1FE0     		b	.L434
 7275              	.L433:
3235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
 7276              		.loc 2 3237 11
 7277 00fa 7B68     		ldr	r3, [r7, #4]
 7278 00fc 1B68     		ldr	r3, [r3]
 7279 00fe 874A     		ldr	r2, .L487+4
 7280 0100 8549     		ldr	r1, .L487
 7281 0102 1846     		mov	r0, r3
 7282 0104 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7283              		.loc 2 3238 11
 7284 0108 17E0     		b	.L434
 7285              	.L432:
3239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ)
 7286              		.loc 2 3241 11
 7287 010a 7B68     		ldr	r3, [r7, #4]
 7288 010c 1B68     		ldr	r3, [r3]
 7289 010e 844A     		ldr	r2, .L487+8
 7290 0110 8149     		ldr	r1, .L487
 7291 0112 1846     		mov	r0, r3
 7292 0114 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7293              		.loc 2 3242 11
 7294 0118 0FE0     		b	.L434
 7295              	.L430:
ARM GAS  /tmp/ccp7RHPZ.s 			page 345


3243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_
 7296              		.loc 2 3245 11
 7297 011a 7B68     		ldr	r3, [r7, #4]
 7298 011c 1B68     		ldr	r3, [r3]
 7299 011e 814A     		ldr	r2, .L487+12
 7300 0120 7D49     		ldr	r1, .L487
 7301 0122 1846     		mov	r0, r3
 7302 0124 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7303              		.loc 2 3246 11
 7304 0128 07E0     		b	.L434
 7305              	.L429:
3247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 7306              		.loc 2 3249 11
 7307 012a 7B68     		ldr	r3, [r7, #4]
 7308 012c 1B68     		ldr	r3, [r3]
 7309 012e 0022     		movs	r2, #0
 7310 0130 7949     		ldr	r1, .L487
 7311 0132 1846     		mov	r0, r3
 7312 0134 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7313              		.loc 2 3250 11
 7314 0138 00BF     		nop
 7315              	.L434:
3251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset in function of the selected ADC resolution:         */
3254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
3255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* are set to 0                                                         */
3256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighTh
 7316              		.loc 2 3256 36
 7317 013a 7B4B     		ldr	r3, .L487+16
 7318 013c 1B68     		ldr	r3, [r3]
 7319 013e 03F07043 		and	r3, r3, #-268435456
 7320 0142 B3F1805F 		cmp	r3, #268435456
 7321 0146 0BD1     		bne	.L435
 7322              		.loc 2 3256 36 is_stmt 0 discriminator 1
 7323 0148 3B68     		ldr	r3, [r7]
 7324 014a 1A69     		ldr	r2, [r3, #16]
 7325 014c 7B68     		ldr	r3, [r7, #4]
 7326 014e 1B68     		ldr	r3, [r3]
 7327 0150 DB68     		ldr	r3, [r3, #12]
 7328 0152 9B08     		lsrs	r3, r3, #2
 7329 0154 03F00703 		and	r3, r3, #7
 7330 0158 5B00     		lsls	r3, r3, #1
 7331 015a 02FA03F3 		lsl	r3, r2, r3
 7332 015e 1DE0     		b	.L436
 7333              	.L435:
 7334              		.loc 2 3256 36 discriminator 2
 7335 0160 7B68     		ldr	r3, [r7, #4]
 7336 0162 1B68     		ldr	r3, [r3]
 7337 0164 DB68     		ldr	r3, [r3, #12]
 7338 0166 03F01003 		and	r3, r3, #16
ARM GAS  /tmp/ccp7RHPZ.s 			page 346


 7339 016a 002B     		cmp	r3, #0
 7340 016c 0BD1     		bne	.L437
 7341              		.loc 2 3256 36 discriminator 4
 7342 016e 3B68     		ldr	r3, [r7]
 7343 0170 1A69     		ldr	r2, [r3, #16]
 7344 0172 7B68     		ldr	r3, [r7, #4]
 7345 0174 1B68     		ldr	r3, [r3]
 7346 0176 DB68     		ldr	r3, [r3, #12]
 7347 0178 9B08     		lsrs	r3, r3, #2
 7348 017a 03F00703 		and	r3, r3, #7
 7349 017e 5B00     		lsls	r3, r3, #1
 7350 0180 02FA03F3 		lsl	r3, r2, r3
 7351 0184 0AE0     		b	.L436
 7352              	.L437:
 7353              		.loc 2 3256 36 discriminator 5
 7354 0186 3B68     		ldr	r3, [r7]
 7355 0188 1A69     		ldr	r2, [r3, #16]
 7356 018a 7B68     		ldr	r3, [r7, #4]
 7357 018c 1B68     		ldr	r3, [r3]
 7358 018e DB68     		ldr	r3, [r3, #12]
 7359 0190 9B08     		lsrs	r3, r3, #2
 7360 0192 03F00403 		and	r3, r3, #4
 7361 0196 5B00     		lsls	r3, r3, #1
 7362 0198 02FA03F3 		lsl	r3, r2, r3
 7363              	.L436:
 7364              		.loc 2 3256 34 is_stmt 1 discriminator 8
 7365 019c 3B64     		str	r3, [r7, #64]
3257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 7366              		.loc 2 3257 36 discriminator 8
 7367 019e 624B     		ldr	r3, .L487+16
 7368 01a0 1B68     		ldr	r3, [r3]
 7369 01a2 03F07043 		and	r3, r3, #-268435456
 7370 01a6 B3F1805F 		cmp	r3, #268435456
 7371 01aa 0BD1     		bne	.L439
 7372              		.loc 2 3257 36 is_stmt 0 discriminator 1
 7373 01ac 3B68     		ldr	r3, [r7]
 7374 01ae 5A69     		ldr	r2, [r3, #20]
 7375 01b0 7B68     		ldr	r3, [r7, #4]
 7376 01b2 1B68     		ldr	r3, [r3]
 7377 01b4 DB68     		ldr	r3, [r3, #12]
 7378 01b6 9B08     		lsrs	r3, r3, #2
 7379 01b8 03F00703 		and	r3, r3, #7
 7380 01bc 5B00     		lsls	r3, r3, #1
 7381 01be 02FA03F3 		lsl	r3, r2, r3
 7382 01c2 1DE0     		b	.L440
 7383              	.L439:
 7384              		.loc 2 3257 36 discriminator 2
 7385 01c4 7B68     		ldr	r3, [r7, #4]
 7386 01c6 1B68     		ldr	r3, [r3]
 7387 01c8 DB68     		ldr	r3, [r3, #12]
 7388 01ca 03F01003 		and	r3, r3, #16
 7389 01ce 002B     		cmp	r3, #0
 7390 01d0 0BD1     		bne	.L441
 7391              		.loc 2 3257 36 discriminator 4
 7392 01d2 3B68     		ldr	r3, [r7]
 7393 01d4 5A69     		ldr	r2, [r3, #20]
 7394 01d6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 347


 7395 01d8 1B68     		ldr	r3, [r3]
 7396 01da DB68     		ldr	r3, [r3, #12]
 7397 01dc 9B08     		lsrs	r3, r3, #2
 7398 01de 03F00703 		and	r3, r3, #7
 7399 01e2 5B00     		lsls	r3, r3, #1
 7400 01e4 02FA03F3 		lsl	r3, r2, r3
 7401 01e8 0AE0     		b	.L440
 7402              	.L441:
 7403              		.loc 2 3257 36 discriminator 5
 7404 01ea 3B68     		ldr	r3, [r7]
 7405 01ec 5A69     		ldr	r2, [r3, #20]
 7406 01ee 7B68     		ldr	r3, [r7, #4]
 7407 01f0 1B68     		ldr	r3, [r3]
 7408 01f2 DB68     		ldr	r3, [r3, #12]
 7409 01f4 9B08     		lsrs	r3, r3, #2
 7410 01f6 03F00403 		and	r3, r3, #4
 7411 01fa 5B00     		lsls	r3, r3, #1
 7412 01fc 02FA03F3 		lsl	r3, r2, r3
 7413              	.L440:
 7414              		.loc 2 3257 34 is_stmt 1 discriminator 8
 7415 0200 FB63     		str	r3, [r7, #60]
3258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the high and low thresholds */
3260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,
3264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC3_TR1_AWDFILT,
3265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    AnalogWDGConfig->FilteringConfig);
3266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
3267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1
3268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7416              		.loc 2 3276 7 discriminator 8
 7417 0202 7B68     		ldr	r3, [r7, #4]
 7418 0204 1B68     		ldr	r3, [r3]
 7419 0206 1B6A     		ldr	r3, [r3, #32]
 7420 0208 03F07C41 		and	r1, r3, #-67108864
 7421 020c 7B68     		ldr	r3, [r7, #4]
 7422 020e 1B68     		ldr	r3, [r3]
 7423 0210 FA6B     		ldr	r2, [r7, #60]
 7424 0212 0A43     		orrs	r2, r2, r1
 7425 0214 1A62     		str	r2, [r3, #32]
3277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7426              		.loc 2 3277 7 discriminator 8
 7427 0216 7B68     		ldr	r3, [r7, #4]
 7428 0218 1B68     		ldr	r3, [r3]
 7429 021a 5B6A     		ldr	r3, [r3, #36]
 7430 021c 03F07C41 		and	r1, r3, #-67108864
 7431 0220 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 348


 7432 0222 1B68     		ldr	r3, [r3]
 7433 0224 3A6C     		ldr	r2, [r7, #64]
 7434 0226 0A43     		orrs	r2, r2, r1
 7435 0228 5A62     		str	r2, [r3, #36]
3278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
3281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 7436              		.loc 2 3281 7 discriminator 8
 7437 022a 7B68     		ldr	r3, [r7, #4]
 7438 022c 5B6D     		ldr	r3, [r3, #84]
 7439 022e 23F48032 		bic	r2, r3, #65536
 7440 0232 7B68     		ldr	r3, [r7, #4]
 7441 0234 5A65     		str	r2, [r3, #84]
3282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
3284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
3287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
 7442              		.loc 2 3287 7 discriminator 8
 7443 0236 7B68     		ldr	r3, [r7, #4]
 7444 0238 1B68     		ldr	r3, [r3]
 7445 023a 1846     		mov	r0, r3
 7446 023c FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD1
3288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
3290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
 7447              		.loc 2 3290 26 discriminator 8
 7448 0240 3B68     		ldr	r3, [r7]
 7449 0242 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7450              		.loc 2 3290 10 discriminator 8
 7451 0244 012B     		cmp	r3, #1
 7452 0246 05D1     		bne	.L443
3291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
 7453              		.loc 2 3292 9
 7454 0248 7B68     		ldr	r3, [r7, #4]
 7455 024a 1B68     		ldr	r3, [r3]
 7456 024c 1846     		mov	r0, r3
 7457 024e FFF7FEFF 		bl	LL_ADC_EnableIT_AWD1
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7458              		.loc 2 3214 8
 7459 0252 E9E1     		b	.L486
 7460              	.L443:
3293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
 7461              		.loc 2 3296 9
 7462 0254 7B68     		ldr	r3, [r7, #4]
 7463 0256 1B68     		ldr	r3, [r3]
 7464 0258 1846     		mov	r0, r3
 7465 025a FFF7FEFF 		bl	LL_ADC_DisableIT_AWD1
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7466              		.loc 2 3214 8
 7467 025e E3E1     		b	.L486
ARM GAS  /tmp/ccp7RHPZ.s 			page 349


 7468              	.L427:
3297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
3300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7469              		.loc 2 3302 30
 7470 0260 3B68     		ldr	r3, [r7]
 7471 0262 5B68     		ldr	r3, [r3, #4]
 7472              		.loc 2 3302 7
 7473 0264 B3F1E07F 		cmp	r3, #29360128
 7474 0268 20D0     		beq	.L445
 7475 026a B3F1E07F 		cmp	r3, #29360128
 7476 026e 00F2F480 		bhi	.L446
 7477 0272 B3F1C07F 		cmp	r3, #25165824
 7478 0276 00F08B80 		beq	.L447
 7479 027a B3F1C07F 		cmp	r3, #25165824
 7480 027e 00F2EC80 		bhi	.L446
 7481 0282 B3F1A07F 		cmp	r3, #20971520
 7482 0286 11D0     		beq	.L445
 7483 0288 B3F1A07F 		cmp	r3, #20971520
 7484 028c 00F2E580 		bhi	.L446
 7485 0290 B3F1807F 		cmp	r3, #16777216
 7486 0294 7CD0     		beq	.L447
 7487 0296 B3F1807F 		cmp	r3, #16777216
 7488 029a 00F2DE80 		bhi	.L446
 7489 029e B3F5000F 		cmp	r3, #8388608
 7490 02a2 75D0     		beq	.L447
 7491 02a4 B3F5400F 		cmp	r3, #12582912
 7492 02a8 40F0D780 		bne	.L446
 7493              	.L445:
3303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
3308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
3309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7494              		.loc 2 3309 30
 7495 02ac 3B68     		ldr	r3, [r7]
 7496 02ae 1B68     		ldr	r3, [r3]
 7497              		.loc 2 3309 14
 7498 02b0 1E4A     		ldr	r2, .L487+20
 7499 02b2 9342     		cmp	r3, r2
 7500 02b4 3CD1     		bne	.L448
3310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
 7501              		.loc 2 3311 13
 7502 02b6 3B68     		ldr	r3, [r7]
 7503 02b8 9B68     		ldr	r3, [r3, #8]
 7504 02ba C3F31303 		ubfx	r3, r3, #0, #20
 7505 02be 002B     		cmp	r3, #0
 7506 02c0 08D1     		bne	.L449
 7507              		.loc 2 3311 13 is_stmt 0 discriminator 1
 7508 02c2 3B68     		ldr	r3, [r7]
 7509 02c4 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccp7RHPZ.s 			page 350


 7510 02c6 9B0E     		lsrs	r3, r3, #26
 7511 02c8 03F01F03 		and	r3, r3, #31
 7512 02cc 0122     		movs	r2, #1
 7513 02ce 02FA03F3 		lsl	r3, r2, r3
 7514 02d2 16E0     		b	.L450
 7515              	.L449:
 7516              		.loc 2 3311 13 discriminator 2
 7517 02d4 3B68     		ldr	r3, [r7]
 7518 02d6 9B68     		ldr	r3, [r3, #8]
 7519 02d8 7B63     		str	r3, [r7, #52]
 7520              	.LBB83:
 7521              	.LBB84:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 7522              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7523 02da 7B6B     		ldr	r3, [r7, #52]
 7524              		.syntax unified
 7525              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 7526 02dc 93FAA3F3 		rbit r3, r3
 7527              	@ 0 "" 2
 7528              		.thumb
 7529              		.syntax unified
 7530 02e0 3B63     		str	r3, [r7, #48]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 7531              		.loc 3 1068 10 discriminator 2
 7532 02e2 3B6B     		ldr	r3, [r7, #48]
 7533 02e4 BB63     		str	r3, [r7, #56]
 7534              	.LBE84:
 7535              	.LBE83:
 7536              	.LBB85:
 7537              	.LBB86:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 7538              		.loc 3 1089 6 discriminator 2
 7539 02e6 BB6B     		ldr	r3, [r7, #56]
 7540 02e8 002B     		cmp	r3, #0
 7541 02ea 01D1     		bne	.L452
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 7542              		.loc 3 1091 12
 7543 02ec 2023     		movs	r3, #32
 7544 02ee 03E0     		b	.L453
 7545              	.L452:
 7546              		.loc 3 1093 10
 7547 02f0 BB6B     		ldr	r3, [r7, #56]
 7548 02f2 B3FA83F3 		clz	r3, r3
 7549 02f6 DBB2     		uxtb	r3, r3
 7550              	.L453:
 7551              	.LBE86:
 7552              	.LBE85:
 7553              		.loc 2 3311 13
 7554 02f8 03F01F03 		and	r3, r3, #31
 7555 02fc 0122     		movs	r2, #1
 7556 02fe 02FA03F3 		lsl	r3, r2, r3
 7557              	.L450:
 7558              		.loc 2 3311 13 is_stmt 0 discriminator 4
 7559 0302 7A68     		ldr	r2, [r7, #4]
 7560 0304 1268     		ldr	r2, [r2]
 7561 0306 D2F8A010 		ldr	r1, [r2, #160]
 7562 030a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 351


 7563 030c 1268     		ldr	r2, [r2]
 7564 030e 0B43     		orrs	r3, r3, r1
 7565 0310 C2F8A030 		str	r3, [r2, #160]
3312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7566              		.loc 2 3317 11 is_stmt 1 discriminator 4
 7567 0314 AAE0     		b	.L460
 7568              	.L488:
 7569 0316 00BF     		.align	2
 7570              	.L487:
 7571 0318 0000C07D 		.word	2109734912
 7572 031c FFFF8F00 		.word	9437183
 7573 0320 FFFF0F01 		.word	17825791
 7574 0324 FFFF8F01 		.word	26214399
 7575 0328 0010005C 		.word	1543507968
 7576 032c FFFF1F00 		.word	2097151
 7577              	.L448:
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7578              		.loc 2 3315 13
 7579 0330 3B68     		ldr	r3, [r7]
 7580 0332 9B68     		ldr	r3, [r3, #8]
 7581 0334 C3F31303 		ubfx	r3, r3, #0, #20
 7582 0338 002B     		cmp	r3, #0
 7583 033a 08D1     		bne	.L455
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7584              		.loc 2 3315 13 is_stmt 0 discriminator 1
 7585 033c 3B68     		ldr	r3, [r7]
 7586 033e 9B68     		ldr	r3, [r3, #8]
 7587 0340 9B0E     		lsrs	r3, r3, #26
 7588 0342 03F01F03 		and	r3, r3, #31
 7589 0346 0122     		movs	r2, #1
 7590 0348 02FA03F3 		lsl	r3, r2, r3
 7591 034c 16E0     		b	.L456
 7592              	.L455:
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7593              		.loc 2 3315 13 discriminator 2
 7594 034e 3B68     		ldr	r3, [r7]
 7595 0350 9B68     		ldr	r3, [r3, #8]
 7596 0352 BB62     		str	r3, [r7, #40]
 7597              	.LBB87:
 7598              	.LBB88:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 7599              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7600 0354 BB6A     		ldr	r3, [r7, #40]
 7601              		.syntax unified
 7602              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 7603 0356 93FAA3F3 		rbit r3, r3
 7604              	@ 0 "" 2
 7605              		.thumb
 7606              		.syntax unified
 7607 035a 7B62     		str	r3, [r7, #36]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 7608              		.loc 3 1068 10 discriminator 2
ARM GAS  /tmp/ccp7RHPZ.s 			page 352


 7609 035c 7B6A     		ldr	r3, [r7, #36]
 7610 035e FB62     		str	r3, [r7, #44]
 7611              	.LBE88:
 7612              	.LBE87:
 7613              	.LBB89:
 7614              	.LBB90:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 7615              		.loc 3 1089 6 discriminator 2
 7616 0360 FB6A     		ldr	r3, [r7, #44]
 7617 0362 002B     		cmp	r3, #0
 7618 0364 01D1     		bne	.L458
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 7619              		.loc 3 1091 12
 7620 0366 2023     		movs	r3, #32
 7621 0368 03E0     		b	.L459
 7622              	.L458:
 7623              		.loc 3 1093 10
 7624 036a FB6A     		ldr	r3, [r7, #44]
 7625 036c B3FA83F3 		clz	r3, r3
 7626 0370 DBB2     		uxtb	r3, r3
 7627              	.L459:
 7628              	.LBE90:
 7629              	.LBE89:
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7630              		.loc 2 3315 13
 7631 0372 03F01F03 		and	r3, r3, #31
 7632 0376 0122     		movs	r2, #1
 7633 0378 02FA03F3 		lsl	r3, r2, r3
 7634              	.L456:
3315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 7635              		.loc 2 3315 13 is_stmt 0 discriminator 4
 7636 037c 7A68     		ldr	r2, [r7, #4]
 7637 037e 1268     		ldr	r2, [r2]
 7638 0380 D2F8A410 		ldr	r1, [r2, #164]
 7639 0384 7A68     		ldr	r2, [r7, #4]
 7640 0386 1268     		ldr	r2, [r2]
 7641 0388 0B43     		orrs	r3, r3, r1
 7642 038a C2F8A430 		str	r3, [r2, #164]
 7643              		.loc 2 3317 11 is_stmt 1 discriminator 4
 7644 038e 6DE0     		b	.L460
 7645              	.L447:
3318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (hadc->Instance == ADC3)
3325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC
3328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update AWD by bitfield to keep the possibility to monitor        */
ARM GAS  /tmp/ccp7RHPZ.s 			page 353


3334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* several channels by successive calls of this function.           */
3335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7646              		.loc 2 3335 32
 7647 0390 3B68     		ldr	r3, [r7]
 7648 0392 1B68     		ldr	r3, [r3]
 7649              		.loc 2 3335 16
 7650 0394 A94A     		ldr	r2, .L489
 7651 0396 9342     		cmp	r3, r2
 7652 0398 2FD1     		bne	.L461
3336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
 7653              		.loc 2 3337 15
 7654 039a 3B68     		ldr	r3, [r7]
 7655 039c 9B68     		ldr	r3, [r3, #8]
 7656 039e C3F31303 		ubfx	r3, r3, #0, #20
 7657 03a2 002B     		cmp	r3, #0
 7658 03a4 08D1     		bne	.L462
 7659              		.loc 2 3337 15 is_stmt 0 discriminator 1
 7660 03a6 3B68     		ldr	r3, [r7]
 7661 03a8 9B68     		ldr	r3, [r3, #8]
 7662 03aa 9B0E     		lsrs	r3, r3, #26
 7663 03ac 03F01F03 		and	r3, r3, #31
 7664 03b0 0122     		movs	r2, #1
 7665 03b2 02FA03F3 		lsl	r3, r2, r3
 7666 03b6 16E0     		b	.L463
 7667              	.L462:
 7668              		.loc 2 3337 15 discriminator 2
 7669 03b8 3B68     		ldr	r3, [r7]
 7670 03ba 9B68     		ldr	r3, [r3, #8]
 7671 03bc FB61     		str	r3, [r7, #28]
 7672              	.LBB91:
 7673              	.LBB92:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 7674              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7675 03be FB69     		ldr	r3, [r7, #28]
 7676              		.syntax unified
 7677              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 7678 03c0 93FAA3F3 		rbit r3, r3
 7679              	@ 0 "" 2
 7680              		.thumb
 7681              		.syntax unified
 7682 03c4 BB61     		str	r3, [r7, #24]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 7683              		.loc 3 1068 10 discriminator 2
 7684 03c6 BB69     		ldr	r3, [r7, #24]
 7685 03c8 3B62     		str	r3, [r7, #32]
 7686              	.LBE92:
 7687              	.LBE91:
 7688              	.LBB93:
 7689              	.LBB94:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 7690              		.loc 3 1089 6 discriminator 2
 7691 03ca 3B6A     		ldr	r3, [r7, #32]
 7692 03cc 002B     		cmp	r3, #0
 7693 03ce 01D1     		bne	.L465
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 7694              		.loc 3 1091 12
ARM GAS  /tmp/ccp7RHPZ.s 			page 354


 7695 03d0 2023     		movs	r3, #32
 7696 03d2 03E0     		b	.L466
 7697              	.L465:
 7698              		.loc 3 1093 10
 7699 03d4 3B6A     		ldr	r3, [r7, #32]
 7700 03d6 B3FA83F3 		clz	r3, r3
 7701 03da DBB2     		uxtb	r3, r3
 7702              	.L466:
 7703              	.LBE94:
 7704              	.LBE93:
 7705              		.loc 2 3337 15
 7706 03dc 03F01F03 		and	r3, r3, #31
 7707 03e0 0122     		movs	r2, #1
 7708 03e2 02FA03F3 		lsl	r3, r2, r3
 7709              	.L463:
 7710              		.loc 2 3337 15 is_stmt 0 discriminator 4
 7711 03e6 7A68     		ldr	r2, [r7, #4]
 7712 03e8 1268     		ldr	r2, [r2]
 7713 03ea D2F8A010 		ldr	r1, [r2, #160]
 7714 03ee 7A68     		ldr	r2, [r7, #4]
 7715 03f0 1268     		ldr	r2, [r2]
 7716 03f2 0B43     		orrs	r3, r3, r1
 7717 03f4 C2F8A030 		str	r3, [r2, #160]
3338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             else
3340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
3342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7718              		.loc 2 3346 11 is_stmt 1 discriminator 4
 7719 03f8 38E0     		b	.L460
 7720              	.L461:
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7721              		.loc 2 3341 15
 7722 03fa 3B68     		ldr	r3, [r7]
 7723 03fc 9B68     		ldr	r3, [r3, #8]
 7724 03fe C3F31303 		ubfx	r3, r3, #0, #20
 7725 0402 002B     		cmp	r3, #0
 7726 0404 08D1     		bne	.L468
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7727              		.loc 2 3341 15 is_stmt 0 discriminator 1
 7728 0406 3B68     		ldr	r3, [r7]
 7729 0408 9B68     		ldr	r3, [r3, #8]
 7730 040a 9B0E     		lsrs	r3, r3, #26
 7731 040c 03F01F03 		and	r3, r3, #31
 7732 0410 0122     		movs	r2, #1
 7733 0412 02FA03F3 		lsl	r3, r2, r3
 7734 0416 16E0     		b	.L469
 7735              	.L468:
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7736              		.loc 2 3341 15 discriminator 2
 7737 0418 3B68     		ldr	r3, [r7]
 7738 041a 9B68     		ldr	r3, [r3, #8]
 7739 041c 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccp7RHPZ.s 			page 355


 7740              	.LBB95:
 7741              	.LBB96:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 7742              		.loc 3 1055 4 is_stmt 1 discriminator 2
 7743 041e 3B69     		ldr	r3, [r7, #16]
 7744              		.syntax unified
 7745              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 7746 0420 93FAA3F3 		rbit r3, r3
 7747              	@ 0 "" 2
 7748              		.thumb
 7749              		.syntax unified
 7750 0424 FB60     		str	r3, [r7, #12]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 7751              		.loc 3 1068 10 discriminator 2
 7752 0426 FB68     		ldr	r3, [r7, #12]
 7753 0428 7B61     		str	r3, [r7, #20]
 7754              	.LBE96:
 7755              	.LBE95:
 7756              	.LBB97:
 7757              	.LBB98:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 7758              		.loc 3 1089 6 discriminator 2
 7759 042a 7B69     		ldr	r3, [r7, #20]
 7760 042c 002B     		cmp	r3, #0
 7761 042e 01D1     		bne	.L471
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 7762              		.loc 3 1091 12
 7763 0430 2023     		movs	r3, #32
 7764 0432 03E0     		b	.L472
 7765              	.L471:
 7766              		.loc 3 1093 10
 7767 0434 7B69     		ldr	r3, [r7, #20]
 7768 0436 B3FA83F3 		clz	r3, r3
 7769 043a DBB2     		uxtb	r3, r3
 7770              	.L472:
 7771              	.LBE98:
 7772              	.LBE97:
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7773              		.loc 2 3341 15
 7774 043c 03F01F03 		and	r3, r3, #31
 7775 0440 0122     		movs	r2, #1
 7776 0442 02FA03F3 		lsl	r3, r2, r3
 7777              	.L469:
3341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 7778              		.loc 2 3341 15 is_stmt 0 discriminator 4
 7779 0446 7A68     		ldr	r2, [r7, #4]
 7780 0448 1268     		ldr	r2, [r2]
 7781 044a D2F8A410 		ldr	r1, [r2, #164]
 7782 044e 7A68     		ldr	r2, [r7, #4]
 7783 0450 1268     		ldr	r2, [r2]
 7784 0452 0B43     		orrs	r3, r3, r1
 7785 0454 C2F8A430 		str	r3, [r2, #164]
 7786              		.loc 2 3346 11 is_stmt 1 discriminator 4
 7787 0458 08E0     		b	.L460
 7788              	.L446:
3347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
ARM GAS  /tmp/ccp7RHPZ.s 			page 356


3349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
 7789              		.loc 2 3349 11
 7790 045a 7B68     		ldr	r3, [r7, #4]
 7791 045c 1868     		ldr	r0, [r3]
 7792 045e 3B68     		ldr	r3, [r7]
 7793 0460 1B68     		ldr	r3, [r3]
 7794 0462 0022     		movs	r2, #0
 7795 0464 1946     		mov	r1, r3
 7796 0466 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 7797              		.loc 2 3350 11
 7798 046a 00BF     		nop
 7799              	.L460:
3351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the thresholds in function of the selected ADC resolution      */
3354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
3355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
 7800              		.loc 2 3355 36
 7801 046c 744B     		ldr	r3, .L489+4
 7802 046e 1B68     		ldr	r3, [r3]
 7803 0470 03F07043 		and	r3, r3, #-268435456
 7804 0474 B3F1805F 		cmp	r3, #268435456
 7805 0478 0BD1     		bne	.L473
 7806              		.loc 2 3355 36 is_stmt 0 discriminator 1
 7807 047a 3B68     		ldr	r3, [r7]
 7808 047c 1A69     		ldr	r2, [r3, #16]
 7809 047e 7B68     		ldr	r3, [r7, #4]
 7810 0480 1B68     		ldr	r3, [r3]
 7811 0482 DB68     		ldr	r3, [r3, #12]
 7812 0484 9B08     		lsrs	r3, r3, #2
 7813 0486 03F00703 		and	r3, r3, #7
 7814 048a 5B00     		lsls	r3, r3, #1
 7815 048c 02FA03F3 		lsl	r3, r2, r3
 7816 0490 1DE0     		b	.L474
 7817              	.L473:
 7818              		.loc 2 3355 36 discriminator 2
 7819 0492 7B68     		ldr	r3, [r7, #4]
 7820 0494 1B68     		ldr	r3, [r3]
 7821 0496 DB68     		ldr	r3, [r3, #12]
 7822 0498 03F01003 		and	r3, r3, #16
 7823 049c 002B     		cmp	r3, #0
 7824 049e 0BD1     		bne	.L475
 7825              		.loc 2 3355 36 discriminator 4
 7826 04a0 3B68     		ldr	r3, [r7]
 7827 04a2 1A69     		ldr	r2, [r3, #16]
 7828 04a4 7B68     		ldr	r3, [r7, #4]
 7829 04a6 1B68     		ldr	r3, [r3]
 7830 04a8 DB68     		ldr	r3, [r3, #12]
 7831 04aa 9B08     		lsrs	r3, r3, #2
 7832 04ac 03F00703 		and	r3, r3, #7
 7833 04b0 5B00     		lsls	r3, r3, #1
 7834 04b2 02FA03F3 		lsl	r3, r2, r3
 7835 04b6 0AE0     		b	.L474
 7836              	.L475:
 7837              		.loc 2 3355 36 discriminator 5
 7838 04b8 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccp7RHPZ.s 			page 357


 7839 04ba 1A69     		ldr	r2, [r3, #16]
 7840 04bc 7B68     		ldr	r3, [r7, #4]
 7841 04be 1B68     		ldr	r3, [r3]
 7842 04c0 DB68     		ldr	r3, [r3, #12]
 7843 04c2 9B08     		lsrs	r3, r3, #2
 7844 04c4 03F00403 		and	r3, r3, #4
 7845 04c8 5B00     		lsls	r3, r3, #1
 7846 04ca 02FA03F3 		lsl	r3, r2, r3
 7847              	.L474:
 7848              		.loc 2 3355 34 is_stmt 1 discriminator 8
 7849 04ce 3B64     		str	r3, [r7, #64]
3356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 7850              		.loc 2 3356 36 discriminator 8
 7851 04d0 5B4B     		ldr	r3, .L489+4
 7852 04d2 1B68     		ldr	r3, [r3]
 7853 04d4 03F07043 		and	r3, r3, #-268435456
 7854 04d8 B3F1805F 		cmp	r3, #268435456
 7855 04dc 0BD1     		bne	.L477
 7856              		.loc 2 3356 36 is_stmt 0 discriminator 1
 7857 04de 3B68     		ldr	r3, [r7]
 7858 04e0 5A69     		ldr	r2, [r3, #20]
 7859 04e2 7B68     		ldr	r3, [r7, #4]
 7860 04e4 1B68     		ldr	r3, [r3]
 7861 04e6 DB68     		ldr	r3, [r3, #12]
 7862 04e8 9B08     		lsrs	r3, r3, #2
 7863 04ea 03F00703 		and	r3, r3, #7
 7864 04ee 5B00     		lsls	r3, r3, #1
 7865 04f0 02FA03F3 		lsl	r3, r2, r3
 7866 04f4 1DE0     		b	.L478
 7867              	.L477:
 7868              		.loc 2 3356 36 discriminator 2
 7869 04f6 7B68     		ldr	r3, [r7, #4]
 7870 04f8 1B68     		ldr	r3, [r3]
 7871 04fa DB68     		ldr	r3, [r3, #12]
 7872 04fc 03F01003 		and	r3, r3, #16
 7873 0500 002B     		cmp	r3, #0
 7874 0502 0BD1     		bne	.L479
 7875              		.loc 2 3356 36 discriminator 4
 7876 0504 3B68     		ldr	r3, [r7]
 7877 0506 5A69     		ldr	r2, [r3, #20]
 7878 0508 7B68     		ldr	r3, [r7, #4]
 7879 050a 1B68     		ldr	r3, [r3]
 7880 050c DB68     		ldr	r3, [r3, #12]
 7881 050e 9B08     		lsrs	r3, r3, #2
 7882 0510 03F00703 		and	r3, r3, #7
 7883 0514 5B00     		lsls	r3, r3, #1
 7884 0516 02FA03F3 		lsl	r3, r2, r3
 7885 051a 0AE0     		b	.L478
 7886              	.L479:
 7887              		.loc 2 3356 36 discriminator 5
 7888 051c 3B68     		ldr	r3, [r7]
 7889 051e 5A69     		ldr	r2, [r3, #20]
 7890 0520 7B68     		ldr	r3, [r7, #4]
 7891 0522 1B68     		ldr	r3, [r3]
 7892 0524 DB68     		ldr	r3, [r3, #12]
 7893 0526 9B08     		lsrs	r3, r3, #2
 7894 0528 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/ccp7RHPZ.s 			page 358


 7895 052c 5B00     		lsls	r3, r3, #1
 7896 052e 02FA03F3 		lsl	r3, r2, r3
 7897              	.L478:
 7898              		.loc 2 3356 34 is_stmt 1 discriminator 8
 7899 0532 FB63     		str	r3, [r7, #60]
3357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Analog watchdog thresholds configuration */
3363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
3364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Shift the offset with respect to the selected ADC resolution:        */
3366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
3367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* are set to 0.                                                        */
3368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->H
3369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
3370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHigh
3374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7900              		.loc 2 3394 26 discriminator 8
 7901 0534 3B68     		ldr	r3, [r7]
 7902 0536 1B68     		ldr	r3, [r3]
 7903              		.loc 2 3394 10 discriminator 8
 7904 0538 404A     		ldr	r2, .L489
 7905 053a 9342     		cmp	r3, r2
 7906 053c 18D1     		bne	.L481
3395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7907              		.loc 2 3397 9
 7908 053e 7B68     		ldr	r3, [r7, #4]
 7909 0540 1B68     		ldr	r3, [r3]
 7910 0542 D3F8B030 		ldr	r3, [r3, #176]
ARM GAS  /tmp/ccp7RHPZ.s 			page 359


 7911 0546 03F07C41 		and	r1, r3, #-67108864
 7912 054a 7B68     		ldr	r3, [r7, #4]
 7913 054c 1B68     		ldr	r3, [r3]
 7914 054e FA6B     		ldr	r2, [r7, #60]
 7915 0550 0A43     		orrs	r2, r2, r1
 7916 0552 C3F8B020 		str	r2, [r3, #176]
3398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7917              		.loc 2 3398 9
 7918 0556 7B68     		ldr	r3, [r7, #4]
 7919 0558 1B68     		ldr	r3, [r3]
 7920 055a D3F8B430 		ldr	r3, [r3, #180]
 7921 055e 03F07C41 		and	r1, r3, #-67108864
 7922 0562 7B68     		ldr	r3, [r7, #4]
 7923 0564 1B68     		ldr	r3, [r3]
 7924 0566 3A6C     		ldr	r2, [r7, #64]
 7925 0568 0A43     		orrs	r2, r2, r1
 7926 056a C3F8B420 		str	r2, [r3, #180]
 7927 056e 17E0     		b	.L482
 7928              	.L481:
3399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 7929              		.loc 2 3403 9
 7930 0570 7B68     		ldr	r3, [r7, #4]
 7931 0572 1B68     		ldr	r3, [r3]
 7932 0574 D3F8B830 		ldr	r3, [r3, #184]
 7933 0578 03F07C41 		and	r1, r3, #-67108864
 7934 057c 7B68     		ldr	r3, [r7, #4]
 7935 057e 1B68     		ldr	r3, [r3]
 7936 0580 FA6B     		ldr	r2, [r7, #60]
 7937 0582 0A43     		orrs	r2, r2, r1
 7938 0584 C3F8B820 		str	r2, [r3, #184]
3404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 7939              		.loc 2 3404 9
 7940 0588 7B68     		ldr	r3, [r7, #4]
 7941 058a 1B68     		ldr	r3, [r3]
 7942 058c D3F8BC30 		ldr	r3, [r3, #188]
 7943 0590 03F07C41 		and	r1, r3, #-67108864
 7944 0594 7B68     		ldr	r3, [r7, #4]
 7945 0596 1B68     		ldr	r3, [r3]
 7946 0598 3A6C     		ldr	r2, [r7, #64]
 7947 059a 0A43     		orrs	r2, r2, r1
 7948 059c C3F8BC20 		str	r2, [r3, #188]
 7949              	.L482:
3405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7950              		.loc 2 3408 26
 7951 05a0 3B68     		ldr	r3, [r7]
 7952 05a2 1B68     		ldr	r3, [r3]
 7953              		.loc 2 3408 10
 7954 05a4 254A     		ldr	r2, .L489
 7955 05a6 9342     		cmp	r3, r2
 7956 05a8 1AD1     		bne	.L483
ARM GAS  /tmp/ccp7RHPZ.s 			page 360


3409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
3411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 7957              		.loc 2 3411 9
 7958 05aa 7B68     		ldr	r3, [r7, #4]
 7959 05ac 5B6D     		ldr	r3, [r3, #84]
 7960 05ae 23F40032 		bic	r2, r3, #131072
 7961 05b2 7B68     		ldr	r3, [r7, #4]
 7962 05b4 5A65     		str	r2, [r3, #84]
3412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
 7963              		.loc 2 3417 9
 7964 05b6 7B68     		ldr	r3, [r7, #4]
 7965 05b8 1B68     		ldr	r3, [r3]
 7966 05ba 1846     		mov	r0, r3
 7967 05bc FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD2
3418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 7968              		.loc 2 3420 28
 7969 05c0 3B68     		ldr	r3, [r7]
 7970 05c2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7971              		.loc 2 3420 12
 7972 05c4 012B     		cmp	r3, #1
 7973 05c6 05D1     		bne	.L484
3421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
 7974              		.loc 2 3422 11
 7975 05c8 7B68     		ldr	r3, [r7, #4]
 7976 05ca 1B68     		ldr	r3, [r3]
 7977 05cc 1846     		mov	r0, r3
 7978 05ce FFF7FEFF 		bl	LL_ADC_EnableIT_AWD2
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7979              		.loc 2 3214 8
 7980 05d2 29E0     		b	.L486
 7981              	.L484:
3423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
 7982              		.loc 2 3426 11
 7983 05d4 7B68     		ldr	r3, [r7, #4]
 7984 05d6 1B68     		ldr	r3, [r3]
 7985 05d8 1846     		mov	r0, r3
 7986 05da FFF7FEFF 		bl	LL_ADC_DisableIT_AWD2
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 7987              		.loc 2 3214 8
 7988 05de 23E0     		b	.L486
 7989              	.L483:
3427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
3430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
ARM GAS  /tmp/ccp7RHPZ.s 			page 361


3431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
3433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 7990              		.loc 2 3433 9
 7991 05e0 7B68     		ldr	r3, [r7, #4]
 7992 05e2 5B6D     		ldr	r3, [r3, #84]
 7993 05e4 23F48022 		bic	r2, r3, #262144
 7994 05e8 7B68     		ldr	r3, [r7, #4]
 7995 05ea 5A65     		str	r2, [r3, #84]
3434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
 7996              		.loc 2 3439 9
 7997 05ec 7B68     		ldr	r3, [r7, #4]
 7998 05ee 1B68     		ldr	r3, [r3]
 7999 05f0 1846     		mov	r0, r3
 8000 05f2 FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD3
3440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 8001              		.loc 2 3442 28
 8002 05f6 3B68     		ldr	r3, [r7]
 8003 05f8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 8004              		.loc 2 3442 12
 8005 05fa 012B     		cmp	r3, #1
 8006 05fc 05D1     		bne	.L485
3443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007              		.loc 2 3444 11
 8008 05fe 7B68     		ldr	r3, [r7, #4]
 8009 0600 1B68     		ldr	r3, [r3]
 8010 0602 1846     		mov	r0, r3
 8011 0604 FFF7FEFF 		bl	LL_ADC_EnableIT_AWD3
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8012              		.loc 2 3214 8
 8013 0608 0EE0     		b	.L486
 8014              	.L485:
3445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
 8015              		.loc 2 3448 11
 8016 060a 7B68     		ldr	r3, [r7, #4]
 8017 060c 1B68     		ldr	r3, [r3]
 8018 060e 1846     		mov	r0, r3
 8019 0610 FFF7FEFF 		bl	LL_ADC_DisableIT_AWD3
3214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8020              		.loc 2 3214 8
 8021 0614 08E0     		b	.L486
 8022              	.L426:
3449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 362


3453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on ADC group regular or injected, no update  */
3455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* could be done on neither of the AWD configuration structure parameters.  */
3456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8023              		.loc 2 3459 5
 8024 0616 7B68     		ldr	r3, [r7, #4]
 8025 0618 5B6D     		ldr	r3, [r3, #84]
 8026 061a 43F02002 		orr	r2, r3, #32
 8027 061e 7B68     		ldr	r3, [r7, #4]
 8028 0620 5A65     		str	r2, [r3, #84]
3460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 8029              		.loc 2 3461 20
 8030 0622 0123     		movs	r3, #1
 8031 0624 87F84F30 		strb	r3, [r7, #79]
 8032              	.L486:
3462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 8033              		.loc 2 3464 3
 8034 0628 7B68     		ldr	r3, [r7, #4]
 8035 062a 0022     		movs	r2, #0
 8036 062c 83F85020 		strb	r2, [r3, #80]
3465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
 8037              		.loc 2 3467 10
 8038 0630 97F84F30 		ldrb	r3, [r7, #79]	@ zero_extendqisi2
 8039              	.L425:
3468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8040              		.loc 2 3468 1
 8041 0634 1846     		mov	r0, r3
 8042 0636 5037     		adds	r7, r7, #80
 8043              	.LCFI327:
 8044              		.cfi_def_cfa_offset 8
 8045 0638 BD46     		mov	sp, r7
 8046              	.LCFI328:
 8047              		.cfi_def_cfa_register 13
 8048              		@ sp needed
 8049 063a 80BD     		pop	{r7, pc}
 8050              	.L490:
 8051              		.align	2
 8052              	.L489:
 8053 063c FFFF1F00 		.word	2097151
 8054 0640 0010005C 		.word	1543507968
 8055              		.cfi_endproc
 8056              	.LFE350:
 8058              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 8059              		.align	1
 8060              		.global	HAL_ADC_GetState
 8061              		.syntax unified
 8062              		.thumb
 8063              		.thumb_func
 8064              		.fpu fpv5-d16
ARM GAS  /tmp/ccp7RHPZ.s 			page 363


 8066              	HAL_ADC_GetState:
 8067              	.LFB351:
3469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
3476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
3477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
3478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
3479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
3481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
3483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
3484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     peripheral.
3485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC state
3486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC error code
3487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
3489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC handle state.
3494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
3495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         compared with states bits.
3496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For example:
3497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
3498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
3499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
3501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
3503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8068              		.loc 2 3503 1
 8069              		.cfi_startproc
 8070              		@ args = 0, pretend = 0, frame = 8
 8071              		@ frame_needed = 1, uses_anonymous_args = 0
 8072              		@ link register save eliminated.
 8073 0000 80B4     		push	{r7}
 8074              	.LCFI329:
 8075              		.cfi_def_cfa_offset 4
 8076              		.cfi_offset 7, -4
 8077 0002 83B0     		sub	sp, sp, #12
 8078              	.LCFI330:
 8079              		.cfi_def_cfa_offset 16
 8080 0004 00AF     		add	r7, sp, #0
 8081              	.LCFI331:
 8082              		.cfi_def_cfa_register 7
 8083 0006 7860     		str	r0, [r7, #4]
3504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC handle state */
ARM GAS  /tmp/ccp7RHPZ.s 			page 364


3508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->State;
 8084              		.loc 2 3508 14
 8085 0008 7B68     		ldr	r3, [r7, #4]
 8086 000a 5B6D     		ldr	r3, [r3, #84]
3509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8087              		.loc 2 3509 1
 8088 000c 1846     		mov	r0, r3
 8089 000e 0C37     		adds	r7, r7, #12
 8090              	.LCFI332:
 8091              		.cfi_def_cfa_offset 4
 8092 0010 BD46     		mov	sp, r7
 8093              	.LCFI333:
 8094              		.cfi_def_cfa_register 13
 8095              		@ sp needed
 8096 0012 5DF8047B 		ldr	r7, [sp], #4
 8097              	.LCFI334:
 8098              		.cfi_restore 7
 8099              		.cfi_def_cfa_offset 0
 8100 0016 7047     		bx	lr
 8101              		.cfi_endproc
 8102              	.LFE351:
 8104              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 8105              		.align	1
 8106              		.global	HAL_ADC_GetError
 8107              		.syntax unified
 8108              		.thumb
 8109              		.thumb_func
 8110              		.fpu fpv5-d16
 8112              	HAL_ADC_GetError:
 8113              	.LFB352:
3510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC error code.
3513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
3515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
3517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8114              		.loc 2 3517 1
 8115              		.cfi_startproc
 8116              		@ args = 0, pretend = 0, frame = 8
 8117              		@ frame_needed = 1, uses_anonymous_args = 0
 8118              		@ link register save eliminated.
 8119 0000 80B4     		push	{r7}
 8120              	.LCFI335:
 8121              		.cfi_def_cfa_offset 4
 8122              		.cfi_offset 7, -4
 8123 0002 83B0     		sub	sp, sp, #12
 8124              	.LCFI336:
 8125              		.cfi_def_cfa_offset 16
 8126 0004 00AF     		add	r7, sp, #0
 8127              	.LCFI337:
 8128              		.cfi_def_cfa_register 7
 8129 0006 7860     		str	r0, [r7, #4]
3518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccp7RHPZ.s 			page 365


3521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->ErrorCode;
 8130              		.loc 2 3521 14
 8131 0008 7B68     		ldr	r3, [r7, #4]
 8132 000a 9B6D     		ldr	r3, [r3, #88]
3522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8133              		.loc 2 3522 1
 8134 000c 1846     		mov	r0, r3
 8135 000e 0C37     		adds	r7, r7, #12
 8136              	.LCFI338:
 8137              		.cfi_def_cfa_offset 4
 8138 0010 BD46     		mov	sp, r7
 8139              	.LCFI339:
 8140              		.cfi_def_cfa_register 13
 8141              		@ sp needed
 8142 0012 5DF8047B 		ldr	r7, [sp], #4
 8143              	.LCFI340:
 8144              		.cfi_restore 7
 8145              		.cfi_def_cfa_offset 0
 8146 0016 7047     		bx	lr
 8147              		.cfi_endproc
 8148              	.LFE352:
 8150              		.section	.text.ADC_ConversionStop,"ax",%progbits
 8151              		.align	1
 8152              		.global	ADC_ConversionStop
 8153              		.syntax unified
 8154              		.thumb
 8155              		.thumb_func
 8156              		.fpu fpv5-d16
 8158              	ADC_ConversionStop:
 8159              	.LFB353:
3523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
3533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion.
3538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param ConversionGroup ADC group regular and/or injected.
3540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
3541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_GROUP           ADC regular conversion type.
3542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
3543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
3544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
3547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8160              		.loc 2 3547 1
 8161              		.cfi_startproc
ARM GAS  /tmp/ccp7RHPZ.s 			page 366


 8162              		@ args = 0, pretend = 0, frame = 32
 8163              		@ frame_needed = 1, uses_anonymous_args = 0
 8164 0000 80B5     		push	{r7, lr}
 8165              	.LCFI341:
 8166              		.cfi_def_cfa_offset 8
 8167              		.cfi_offset 7, -8
 8168              		.cfi_offset 14, -4
 8169 0002 88B0     		sub	sp, sp, #32
 8170              	.LCFI342:
 8171              		.cfi_def_cfa_offset 40
 8172 0004 00AF     		add	r7, sp, #0
 8173              	.LCFI343:
 8174              		.cfi_def_cfa_register 7
 8175 0006 7860     		str	r0, [r7, #4]
 8176 0008 3960     		str	r1, [r7]
3548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8177              		.loc 2 3549 12
 8178 000a 0023     		movs	r3, #0
 8179 000c FB61     		str	r3, [r7, #28]
3550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
 8180              		.loc 2 3550 12
 8181 000e 3B68     		ldr	r3, [r7]
 8182 0010 BB61     		str	r3, [r7, #24]
3551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
3552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
3558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
3560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* groups) to bypass this function if not needed.                           */
3561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8183              		.loc 2 3561 44
 8184 0012 7B68     		ldr	r3, [r7, #4]
 8185 0014 1B68     		ldr	r3, [r3]
 8186 0016 1846     		mov	r0, r3
 8187 0018 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8188 001c 3861     		str	r0, [r7, #16]
3562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8189              		.loc 2 3562 45
 8190 001e 7B68     		ldr	r3, [r7, #4]
 8191 0020 1B68     		ldr	r3, [r3]
 8192 0022 1846     		mov	r0, r3
 8193 0024 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8194 0028 F860     		str	r0, [r7, #12]
3563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8195              		.loc 2 3563 6
 8196 002a 3B69     		ldr	r3, [r7, #16]
 8197 002c 002B     		cmp	r3, #0
 8198 002e 03D1     		bne	.L496
3564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8199              		.loc 2 3564 7
 8200 0030 FB68     		ldr	r3, [r7, #12]
 8201 0032 002B     		cmp	r3, #0
ARM GAS  /tmp/ccp7RHPZ.s 			page 367


 8202 0034 00F09880 		beq	.L497
 8203              	.L496:
3565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case of continuous auto-injection mode combined with        */
3568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* auto-delay mode.                                                       */
3569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
3570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
3571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
3572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (see reference manual).                                                */
3573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8204              		.loc 2 3573 15
 8205 0038 7B68     		ldr	r3, [r7, #4]
 8206 003a 1B68     		ldr	r3, [r3]
 8207              		.loc 2 3573 25
 8208 003c DB68     		ldr	r3, [r3, #12]
 8209              		.loc 2 3573 32
 8210 003e 03F00073 		and	r3, r3, #33554432
 8211              		.loc 2 3573 8
 8212 0042 002B     		cmp	r3, #0
 8213 0044 2AD0     		beq	.L498
3574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 8214              		.loc 2 3574 23
 8215 0046 7B68     		ldr	r3, [r7, #4]
 8216 0048 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 8217              		.loc 2 3574 9
 8218 004a 012B     		cmp	r3, #1
 8219 004c 26D1     		bne	.L498
3575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.LowPowerAutoWait == ENABLE)
 8220              		.loc 2 3575 23
 8221 004e 7B68     		ldr	r3, [r7, #4]
 8222 0050 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 8223              		.loc 2 3575 9
 8224 0052 012B     		cmp	r3, #1
 8225 0054 22D1     		bne	.L498
3576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Use stop of regular group */
3579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       conversion_group_reassigned = ADC_REGULAR_GROUP;
 8226              		.loc 2 3579 35
 8227 0056 0123     		movs	r3, #1
 8228 0058 BB61     		str	r3, [r7, #24]
3580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
3582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8229              		.loc 2 3582 13
 8230 005a 14E0     		b	.L499
 8231              	.L502:
3583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8232              		.loc 2 3584 12
 8233 005c FB69     		ldr	r3, [r7, #28]
 8234 005e 454A     		ldr	r2, .L510
 8235 0060 9342     		cmp	r3, r2
 8236 0062 0DD9     		bls	.L500
3585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
ARM GAS  /tmp/ccp7RHPZ.s 			page 368


3587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8237              		.loc 2 3587 11
 8238 0064 7B68     		ldr	r3, [r7, #4]
 8239 0066 5B6D     		ldr	r3, [r3, #84]
 8240 0068 43F01002 		orr	r2, r3, #16
 8241 006c 7B68     		ldr	r3, [r7, #4]
 8242 006e 5A65     		str	r2, [r3, #84]
3588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8243              		.loc 2 3590 11
 8244 0070 7B68     		ldr	r3, [r7, #4]
 8245 0072 9B6D     		ldr	r3, [r3, #88]
 8246 0074 43F00102 		orr	r2, r3, #1
 8247 0078 7B68     		ldr	r3, [r7, #4]
 8248 007a 9A65     		str	r2, [r3, #88]
3591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8249              		.loc 2 3592 18
 8250 007c 0123     		movs	r3, #1
 8251 007e 74E0     		b	.L501
 8252              	.L500:
3593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         Conversion_Timeout_CPU_cycles ++;
 8253              		.loc 2 3594 39
 8254 0080 FB69     		ldr	r3, [r7, #28]
 8255 0082 0133     		adds	r3, r3, #1
 8256 0084 FB61     		str	r3, [r7, #28]
 8257              	.L499:
3582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8258              		.loc 2 3582 14
 8259 0086 7B68     		ldr	r3, [r7, #4]
 8260 0088 1B68     		ldr	r3, [r3]
 8261 008a 1B68     		ldr	r3, [r3]
 8262 008c 03F04003 		and	r3, r3, #64
3582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8263              		.loc 2 3582 13
 8264 0090 402B     		cmp	r3, #64
 8265 0092 E3D1     		bne	.L502
3595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear JEOS */
3598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8266              		.loc 2 3598 7
 8267 0094 7B68     		ldr	r3, [r7, #4]
 8268 0096 1B68     		ldr	r3, [r3]
 8269 0098 4022     		movs	r2, #64
 8270 009a 1A60     		str	r2, [r3]
 8271              	.L498:
3599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group regular */
3602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8272              		.loc 2 3602 8
 8273 009c BB69     		ldr	r3, [r7, #24]
 8274 009e 022B     		cmp	r3, #2
 8275 00a0 14D0     		beq	.L503
ARM GAS  /tmp/ccp7RHPZ.s 			page 369


3603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
3605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8276              		.loc 2 3605 11
 8277 00a2 7B68     		ldr	r3, [r7, #4]
 8278 00a4 1B68     		ldr	r3, [r3]
 8279 00a6 1846     		mov	r0, r3
 8280 00a8 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8281 00ac 0346     		mov	r3, r0
 8282              		.loc 2 3605 10
 8283 00ae 002B     		cmp	r3, #0
 8284 00b0 0CD0     		beq	.L503
3606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8285              		.loc 2 3607 13
 8286 00b2 7B68     		ldr	r3, [r7, #4]
 8287 00b4 1B68     		ldr	r3, [r3]
 8288 00b6 1846     		mov	r0, r3
 8289 00b8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8290 00bc 0346     		mov	r3, r0
 8291              		.loc 2 3607 12
 8292 00be 002B     		cmp	r3, #0
 8293 00c0 04D1     		bne	.L503
3608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group regular conversion */
3610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_StopConversion(hadc->Instance);
 8294              		.loc 2 3610 11
 8295 00c2 7B68     		ldr	r3, [r7, #4]
 8296 00c4 1B68     		ldr	r3, [r3]
 8297 00c6 1846     		mov	r0, r3
 8298 00c8 FFF7FEFF 		bl	LL_ADC_REG_StopConversion
 8299              	.L503:
3611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group injected */
3616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8300              		.loc 2 3616 8
 8301 00cc BB69     		ldr	r3, [r7, #24]
 8302 00ce 012B     		cmp	r3, #1
 8303 00d0 14D0     		beq	.L504
3617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
3619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8304              		.loc 2 3619 11
 8305 00d2 7B68     		ldr	r3, [r7, #4]
 8306 00d4 1B68     		ldr	r3, [r3]
 8307 00d6 1846     		mov	r0, r3
 8308 00d8 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8309 00dc 0346     		mov	r3, r0
 8310              		.loc 2 3619 10
 8311 00de 002B     		cmp	r3, #0
 8312 00e0 0CD0     		beq	.L504
3620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8313              		.loc 2 3621 13
ARM GAS  /tmp/ccp7RHPZ.s 			page 370


 8314 00e2 7B68     		ldr	r3, [r7, #4]
 8315 00e4 1B68     		ldr	r3, [r3]
 8316 00e6 1846     		mov	r0, r3
 8317 00e8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8318 00ec 0346     		mov	r3, r0
 8319              		.loc 2 3621 12
 8320 00ee 002B     		cmp	r3, #0
 8321 00f0 04D1     		bne	.L504
3622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group injected conversion */
3624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_INJ_StopConversion(hadc->Instance);
 8322              		.loc 2 3624 11
 8323 00f2 7B68     		ldr	r3, [r7, #4]
 8324 00f4 1B68     		ldr	r3, [r3]
 8325 00f6 1846     		mov	r0, r3
 8326 00f8 FFF7FEFF 		bl	LL_ADC_INJ_StopConversion
 8327              	.L504:
3625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Selection of start and stop bits with respect to the regular or injected group */
3630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (conversion_group_reassigned)
 8328              		.loc 2 3630 5
 8329 00fc BB69     		ldr	r3, [r7, #24]
 8330 00fe 022B     		cmp	r3, #2
 8331 0100 05D0     		beq	.L505
 8332 0102 BB69     		ldr	r3, [r7, #24]
 8333 0104 032B     		cmp	r3, #3
 8334 0106 05D1     		bne	.L506
3631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_REGULAR_INJECTED_GROUP:
3633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8335              		.loc 2 3633 37
 8336 0108 0C23     		movs	r3, #12
 8337 010a 7B61     		str	r3, [r7, #20]
3634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8338              		.loc 2 3634 9
 8339 010c 05E0     		b	.L507
 8340              	.L505:
3635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_INJECTED_GROUP:
3636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8341              		.loc 2 3636 37
 8342 010e 0823     		movs	r3, #8
 8343 0110 7B61     		str	r3, [r7, #20]
3637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8344              		.loc 2 3637 9
 8345 0112 02E0     		b	.L507
 8346              	.L506:
3638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case ADC_REGULAR_GROUP only*/
3639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8347              		.loc 2 3640 37
 8348 0114 0423     		movs	r3, #4
 8349 0116 7B61     		str	r3, [r7, #20]
3641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 8350              		.loc 2 3641 9
ARM GAS  /tmp/ccp7RHPZ.s 			page 371


 8351 0118 00BF     		nop
 8352              	.L507:
3642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
3645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8353              		.loc 2 3645 17
 8354 011a FFF7FEFF 		bl	HAL_GetTick
 8355 011e B860     		str	r0, [r7, #8]
3646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8356              		.loc 2 3647 11
 8357 0120 1BE0     		b	.L508
 8358              	.L509:
3648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8359              		.loc 2 3649 12
 8360 0122 FFF7FEFF 		bl	HAL_GetTick
 8361 0126 0246     		mov	r2, r0
 8362              		.loc 2 3649 26
 8363 0128 BB68     		ldr	r3, [r7, #8]
 8364 012a D31A     		subs	r3, r2, r3
 8365              		.loc 2 3649 10
 8366 012c 052B     		cmp	r3, #5
 8367 012e 14D9     		bls	.L508
3650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
3652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8368              		.loc 2 3652 17
 8369 0130 7B68     		ldr	r3, [r7, #4]
 8370 0132 1B68     		ldr	r3, [r3]
 8371              		.loc 2 3652 27
 8372 0134 9A68     		ldr	r2, [r3, #8]
 8373              		.loc 2 3652 32
 8374 0136 7B69     		ldr	r3, [r7, #20]
 8375 0138 1340     		ands	r3, r3, r2
 8376              		.loc 2 3652 11
 8377 013a 002B     		cmp	r3, #0
 8378 013c 0DD0     		beq	.L508
3653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8379              		.loc 2 3655 11
 8380 013e 7B68     		ldr	r3, [r7, #4]
 8381 0140 5B6D     		ldr	r3, [r3, #84]
 8382 0142 43F01002 		orr	r2, r3, #16
 8383 0146 7B68     		ldr	r3, [r7, #4]
 8384 0148 5A65     		str	r2, [r3, #84]
3656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8385              		.loc 2 3658 11
 8386 014a 7B68     		ldr	r3, [r7, #4]
 8387 014c 9B6D     		ldr	r3, [r3, #88]
 8388 014e 43F00102 		orr	r2, r3, #1
 8389 0152 7B68     		ldr	r3, [r7, #4]
 8390 0154 9A65     		str	r2, [r3, #88]
ARM GAS  /tmp/ccp7RHPZ.s 			page 372


3659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8391              		.loc 2 3660 18
 8392 0156 0123     		movs	r3, #1
 8393 0158 07E0     		b	.L501
 8394              	.L508:
3647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8395              		.loc 2 3647 17
 8396 015a 7B68     		ldr	r3, [r7, #4]
 8397 015c 1B68     		ldr	r3, [r3]
3647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8398              		.loc 2 3647 27
 8399 015e 9A68     		ldr	r2, [r3, #8]
3647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8400              		.loc 2 3647 32
 8401 0160 7B69     		ldr	r3, [r7, #20]
 8402 0162 1340     		ands	r3, r3, r2
3647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8403              		.loc 2 3647 11
 8404 0164 002B     		cmp	r3, #0
 8405 0166 DCD1     		bne	.L509
 8406              	.L497:
3661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8407              		.loc 2 3668 10
 8408 0168 0023     		movs	r3, #0
 8409              	.L501:
3669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8410              		.loc 2 3669 1
 8411 016a 1846     		mov	r0, r3
 8412 016c 2037     		adds	r7, r7, #32
 8413              	.LCFI344:
 8414              		.cfi_def_cfa_offset 8
 8415 016e BD46     		mov	sp, r7
 8416              	.LCFI345:
 8417              		.cfi_def_cfa_register 13
 8418              		@ sp needed
 8419 0170 80BD     		pop	{r7, pc}
 8420              	.L511:
 8421 0172 00BF     		.align	2
 8422              	.L510:
 8423 0174 FFDB0C00 		.word	842751
 8424              		.cfi_endproc
 8425              	.LFE353:
 8427              		.section	.text.ADC_Enable,"ax",%progbits
 8428              		.align	1
 8429              		.global	ADC_Enable
 8430              		.syntax unified
 8431              		.thumb
 8432              		.thumb_func
 8433              		.fpu fpv5-d16
ARM GAS  /tmp/ccp7RHPZ.s 			page 373


 8435              	ADC_Enable:
 8436              	.LFB354:
3670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable the selected ADC.
3675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
3676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
3677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
3681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8437              		.loc 2 3681 1
 8438              		.cfi_startproc
 8439              		@ args = 0, pretend = 0, frame = 16
 8440              		@ frame_needed = 1, uses_anonymous_args = 0
 8441 0000 80B5     		push	{r7, lr}
 8442              	.LCFI346:
 8443              		.cfi_def_cfa_offset 8
 8444              		.cfi_offset 7, -8
 8445              		.cfi_offset 14, -4
 8446 0002 84B0     		sub	sp, sp, #16
 8447              	.LCFI347:
 8448              		.cfi_def_cfa_offset 24
 8449 0004 00AF     		add	r7, sp, #0
 8450              	.LCFI348:
 8451              		.cfi_def_cfa_register 7
 8452 0006 7860     		str	r0, [r7, #4]
3682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
3685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
3686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
3687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
3688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8453              		.loc 2 3688 7
 8454 0008 7B68     		ldr	r3, [r7, #4]
 8455 000a 1B68     		ldr	r3, [r3]
 8456 000c 1846     		mov	r0, r3
 8457 000e FFF7FEFF 		bl	LL_ADC_IsEnabled
 8458 0012 0346     		mov	r3, r0
 8459              		.loc 2 3688 6
 8460 0014 002B     		cmp	r3, #0
 8461 0016 6ED1     		bne	.L513
 8462              	.LBB99:
3689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
3691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_
 8463              		.loc 2 3691 14
 8464 0018 7B68     		ldr	r3, [r7, #4]
 8465 001a 1B68     		ldr	r3, [r3]
 8466              		.loc 2 3691 24
 8467 001c 9A68     		ldr	r2, [r3, #8]
 8468              		.loc 2 3691 29
 8469 001e 384B     		ldr	r3, .L525
ARM GAS  /tmp/ccp7RHPZ.s 			page 374


 8470 0020 1340     		ands	r3, r3, r2
 8471              		.loc 2 3691 8
 8472 0022 002B     		cmp	r3, #0
 8473 0024 0DD0     		beq	.L514
3692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8474              		.loc 2 3694 7
 8475 0026 7B68     		ldr	r3, [r7, #4]
 8476 0028 5B6D     		ldr	r3, [r3, #84]
 8477 002a 43F01002 		orr	r2, r3, #16
 8478 002e 7B68     		ldr	r3, [r7, #4]
 8479 0030 5A65     		str	r2, [r3, #84]
3695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8480              		.loc 2 3697 7
 8481 0032 7B68     		ldr	r3, [r7, #4]
 8482 0034 9B6D     		ldr	r3, [r3, #88]
 8483 0036 43F00102 		orr	r2, r3, #1
 8484 003a 7B68     		ldr	r3, [r7, #4]
 8485 003c 9A65     		str	r2, [r3, #88]
3698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
 8486              		.loc 2 3699 14
 8487 003e 0123     		movs	r3, #1
 8488 0040 5AE0     		b	.L515
 8489              	.L514:
3700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
3703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
 8490              		.loc 2 3703 5
 8491 0042 7B68     		ldr	r3, [r7, #4]
 8492 0044 1B68     		ldr	r3, [r3]
 8493 0046 1846     		mov	r0, r3
 8494 0048 FFF7FEFF 		bl	LL_ADC_Enable
3704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
3706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8495              		.loc 2 3706 17
 8496 004c FFF7FEFF 		bl	HAL_GetTick
 8497 0050 F860     		str	r0, [r7, #12]
3707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Poll for ADC ready flag raised except case of multimode enabled
3709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        and ADC slave selected. */
3710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8498              		.loc 2 3710 57
 8499 0052 7B68     		ldr	r3, [r7, #4]
 8500 0054 1B68     		ldr	r3, [r3]
 8501              		.loc 2 3710 37
 8502 0056 2B4A     		ldr	r2, .L525+4
 8503 0058 9342     		cmp	r3, r2
 8504 005a 04D0     		beq	.L516
 8505              		.loc 2 3710 57 discriminator 2
 8506 005c 7B68     		ldr	r3, [r7, #4]
 8507 005e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccp7RHPZ.s 			page 375


 8508 0060 294A     		ldr	r2, .L525+8
 8509 0062 9342     		cmp	r3, r2
 8510 0064 01D1     		bne	.L517
 8511              	.L516:
 8512              		.loc 2 3710 37 discriminator 3
 8513 0066 294B     		ldr	r3, .L525+12
 8514 0068 00E0     		b	.L518
 8515              	.L517:
 8516              		.loc 2 3710 37 is_stmt 0 discriminator 4
 8517 006a 294B     		ldr	r3, .L525+16
 8518              	.L518:
 8519              		.loc 2 3710 37 discriminator 6
 8520 006c 1846     		mov	r0, r3
 8521 006e FFF7FEFF 		bl	LL_ADC_GetMultimode
 8522 0072 B860     		str	r0, [r7, #8]
3711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8523              		.loc 2 3711 10 is_stmt 1 discriminator 6
 8524 0074 7B68     		ldr	r3, [r7, #4]
 8525 0076 1B68     		ldr	r3, [r3]
 8526 0078 234A     		ldr	r2, .L525+8
 8527 007a 9342     		cmp	r3, r2
 8528 007c 02D0     		beq	.L519
 8529              		.loc 2 3711 10 is_stmt 0 discriminator 1
 8530 007e 7B68     		ldr	r3, [r7, #4]
 8531 0080 1B68     		ldr	r3, [r3]
 8532 0082 00E0     		b	.L520
 8533              	.L519:
 8534              		.loc 2 3711 10 discriminator 2
 8535 0084 1F4B     		ldr	r3, .L525+4
 8536              	.L520:
 8537              		.loc 2 3711 64 is_stmt 1 discriminator 4
 8538 0086 7A68     		ldr	r2, [r7, #4]
 8539 0088 1268     		ldr	r2, [r2]
 8540              		.loc 2 3711 8 discriminator 4
 8541 008a 9342     		cmp	r3, r2
 8542 008c 2CD0     		beq	.L522
3712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8543              		.loc 2 3712 9
 8544 008e BB68     		ldr	r3, [r7, #8]
 8545 0090 002B     		cmp	r3, #0
 8546 0092 30D1     		bne	.L513
3713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8547              		.loc 2 3715 13
 8548 0094 28E0     		b	.L522
 8549              	.L524:
3716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
3718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             has been cleared (after a calibration), ADEN bit is reset by the
3719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             calibration logic.
3720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             The workaround is to continue setting ADEN until ADRDY is becomes 1.
3721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
3722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             4 ADC clock cycle duration */
3723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Test of ADC enabled required due to hardware constraint to     */
3724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*       not enable ADC if already enabled.                             */
3725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
ARM GAS  /tmp/ccp7RHPZ.s 			page 376


 8550              		.loc 2 3725 13
 8551 0096 7B68     		ldr	r3, [r7, #4]
 8552 0098 1B68     		ldr	r3, [r3]
 8553 009a 1846     		mov	r0, r3
 8554 009c FFF7FEFF 		bl	LL_ADC_IsEnabled
 8555 00a0 0346     		mov	r3, r0
 8556              		.loc 2 3725 12
 8557 00a2 002B     		cmp	r3, #0
 8558 00a4 04D1     		bne	.L523
3726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_Enable(hadc->Instance);
 8559              		.loc 2 3727 11
 8560 00a6 7B68     		ldr	r3, [r7, #4]
 8561 00a8 1B68     		ldr	r3, [r3]
 8562 00aa 1846     		mov	r0, r3
 8563 00ac FFF7FEFF 		bl	LL_ADC_Enable
 8564              	.L523:
3728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8565              		.loc 2 3730 14
 8566 00b0 FFF7FEFF 		bl	HAL_GetTick
 8567 00b4 0246     		mov	r2, r0
 8568              		.loc 2 3730 28
 8569 00b6 FB68     		ldr	r3, [r7, #12]
 8570 00b8 D31A     		subs	r3, r2, r3
 8571              		.loc 2 3730 12
 8572 00ba 022B     		cmp	r3, #2
 8573 00bc 14D9     		bls	.L522
3731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
3733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8574              		.loc 2 3733 15
 8575 00be 7B68     		ldr	r3, [r7, #4]
 8576 00c0 1B68     		ldr	r3, [r3]
 8577 00c2 1B68     		ldr	r3, [r3]
 8578 00c4 03F00103 		and	r3, r3, #1
 8579              		.loc 2 3733 14
 8580 00c8 012B     		cmp	r3, #1
 8581 00ca 0DD0     		beq	.L522
3734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update ADC state machine to error */
3736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8582              		.loc 2 3736 13
 8583 00cc 7B68     		ldr	r3, [r7, #4]
 8584 00ce 5B6D     		ldr	r3, [r3, #84]
 8585 00d0 43F01002 		orr	r2, r3, #16
 8586 00d4 7B68     		ldr	r3, [r7, #4]
 8587 00d6 5A65     		str	r2, [r3, #84]
3737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
3739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8588              		.loc 2 3739 13
 8589 00d8 7B68     		ldr	r3, [r7, #4]
 8590 00da 9B6D     		ldr	r3, [r3, #88]
 8591 00dc 43F00102 		orr	r2, r3, #1
 8592 00e0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 377


 8593 00e2 9A65     		str	r2, [r3, #88]
3740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             return HAL_ERROR;
 8594              		.loc 2 3741 20
 8595 00e4 0123     		movs	r3, #1
 8596 00e6 07E0     		b	.L515
 8597              	.L522:
3715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8598              		.loc 2 3715 14
 8599 00e8 7B68     		ldr	r3, [r7, #4]
 8600 00ea 1B68     		ldr	r3, [r3]
 8601 00ec 1B68     		ldr	r3, [r3]
 8602 00ee 03F00103 		and	r3, r3, #1
3715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 8603              		.loc 2 3715 13
 8604 00f2 012B     		cmp	r3, #1
 8605 00f4 CFD1     		bne	.L524
 8606              	.L513:
 8607              	.LBE99:
3742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8608              		.loc 2 3749 10
 8609 00f6 0023     		movs	r3, #0
 8610              	.L515:
3750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8611              		.loc 2 3750 1
 8612 00f8 1846     		mov	r0, r3
 8613 00fa 1037     		adds	r7, r7, #16
 8614              	.LCFI349:
 8615              		.cfi_def_cfa_offset 8
 8616 00fc BD46     		mov	sp, r7
 8617              	.LCFI350:
 8618              		.cfi_def_cfa_register 13
 8619              		@ sp needed
 8620 00fe 80BD     		pop	{r7, pc}
 8621              	.L526:
 8622              		.align	2
 8623              	.L525:
 8624 0100 3F000080 		.word	-2147483585
 8625 0104 00200240 		.word	1073881088
 8626 0108 00210240 		.word	1073881344
 8627 010c 00230240 		.word	1073881856
 8628 0110 00630258 		.word	1476551424
 8629              		.cfi_endproc
 8630              	.LFE354:
 8632              		.section	.text.ADC_Disable,"ax",%progbits
 8633              		.align	1
 8634              		.global	ADC_Disable
 8635              		.syntax unified
 8636              		.thumb
 8637              		.thumb_func
ARM GAS  /tmp/ccp7RHPZ.s 			page 378


 8638              		.fpu fpv5-d16
 8640              	ADC_Disable:
 8641              	.LFB355:
3751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Disable the selected ADC.
3754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
3760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8642              		.loc 2 3760 1
 8643              		.cfi_startproc
 8644              		@ args = 0, pretend = 0, frame = 16
 8645              		@ frame_needed = 1, uses_anonymous_args = 0
 8646 0000 80B5     		push	{r7, lr}
 8647              	.LCFI351:
 8648              		.cfi_def_cfa_offset 8
 8649              		.cfi_offset 7, -8
 8650              		.cfi_offset 14, -4
 8651 0002 84B0     		sub	sp, sp, #16
 8652              	.LCFI352:
 8653              		.cfi_def_cfa_offset 24
 8654 0004 00AF     		add	r7, sp, #0
 8655              	.LCFI353:
 8656              		.cfi_def_cfa_register 7
 8657 0006 7860     		str	r0, [r7, #4]
3761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8658              		.loc 2 3762 48
 8659 0008 7B68     		ldr	r3, [r7, #4]
 8660 000a 1B68     		ldr	r3, [r3]
 8661 000c 1846     		mov	r0, r3
 8662 000e FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8663 0012 F860     		str	r0, [r7, #12]
3763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
3765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
3766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       disabled.                                                          */
3767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8664              		.loc 2 3767 8
 8665 0014 7B68     		ldr	r3, [r7, #4]
 8666 0016 1B68     		ldr	r3, [r3]
 8667 0018 1846     		mov	r0, r3
 8668 001a FFF7FEFF 		bl	LL_ADC_IsEnabled
 8669 001e 0346     		mov	r3, r0
 8670              		.loc 2 3767 6
 8671 0020 002B     		cmp	r3, #0
 8672 0022 47D0     		beq	.L528
3768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 8673              		.loc 2 3768 7
 8674 0024 FB68     		ldr	r3, [r7, #12]
 8675 0026 002B     		cmp	r3, #0
 8676 0028 44D1     		bne	.L528
3769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
ARM GAS  /tmp/ccp7RHPZ.s 			page 379


3770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
3772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8677              		.loc 2 3772 14
 8678 002a 7B68     		ldr	r3, [r7, #4]
 8679 002c 1B68     		ldr	r3, [r3]
 8680              		.loc 2 3772 24
 8681 002e 9B68     		ldr	r3, [r3, #8]
 8682              		.loc 2 3772 29
 8683 0030 03F00D03 		and	r3, r3, #13
 8684              		.loc 2 3772 8
 8685 0034 012B     		cmp	r3, #1
 8686 0036 0CD1     		bne	.L529
3773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable the ADC peripheral */
3775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
 8687              		.loc 2 3775 7
 8688 0038 7B68     		ldr	r3, [r7, #4]
 8689 003a 1B68     		ldr	r3, [r3]
 8690 003c 1846     		mov	r0, r3
 8691 003e FFF7FEFF 		bl	LL_ADC_Disable
3776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8692              		.loc 2 3776 7
 8693 0042 7B68     		ldr	r3, [r7, #4]
 8694 0044 1B68     		ldr	r3, [r3]
 8695 0046 0322     		movs	r2, #3
 8696 0048 1A60     		str	r2, [r3]
3777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
3787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
3790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get tick count */
3791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8697              		.loc 2 3791 17
 8698 004a FFF7FEFF 		bl	HAL_GetTick
 8699 004e B860     		str	r0, [r7, #8]
3792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8700              		.loc 2 3793 11
 8701 0050 29E0     		b	.L532
 8702              	.L529:
3781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 8703              		.loc 2 3781 7
 8704 0052 7B68     		ldr	r3, [r7, #4]
 8705 0054 5B6D     		ldr	r3, [r3, #84]
 8706 0056 43F01002 		orr	r2, r3, #16
 8707 005a 7B68     		ldr	r3, [r7, #4]
 8708 005c 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccp7RHPZ.s 			page 380


3784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 8709              		.loc 2 3784 7
 8710 005e 7B68     		ldr	r3, [r7, #4]
 8711 0060 9B6D     		ldr	r3, [r3, #88]
 8712 0062 43F00102 		orr	r2, r3, #1
 8713 0066 7B68     		ldr	r3, [r7, #4]
 8714 0068 9A65     		str	r2, [r3, #88]
3786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8715              		.loc 2 3786 14
 8716 006a 0123     		movs	r3, #1
 8717 006c 23E0     		b	.L531
 8718              	.L533:
3794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8719              		.loc 2 3795 12
 8720 006e FFF7FEFF 		bl	HAL_GetTick
 8721 0072 0246     		mov	r2, r0
 8722              		.loc 2 3795 26
 8723 0074 BB68     		ldr	r3, [r7, #8]
 8724 0076 D31A     		subs	r3, r2, r3
 8725              		.loc 2 3795 10
 8726 0078 022B     		cmp	r3, #2
 8727 007a 14D9     		bls	.L532
3796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
3798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8728              		.loc 2 3798 18
 8729 007c 7B68     		ldr	r3, [r7, #4]
 8730 007e 1B68     		ldr	r3, [r3]
 8731              		.loc 2 3798 28
 8732 0080 9B68     		ldr	r3, [r3, #8]
 8733              		.loc 2 3798 33
 8734 0082 03F00103 		and	r3, r3, #1
 8735              		.loc 2 3798 12
 8736 0086 002B     		cmp	r3, #0
 8737 0088 0DD0     		beq	.L532
3799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8738              		.loc 2 3801 11
 8739 008a 7B68     		ldr	r3, [r7, #4]
 8740 008c 5B6D     		ldr	r3, [r3, #84]
 8741 008e 43F01002 		orr	r2, r3, #16
 8742 0092 7B68     		ldr	r3, [r7, #4]
 8743 0094 5A65     		str	r2, [r3, #84]
3802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8744              		.loc 2 3804 11
 8745 0096 7B68     		ldr	r3, [r7, #4]
 8746 0098 9B6D     		ldr	r3, [r3, #88]
 8747 009a 43F00102 		orr	r2, r3, #1
 8748 009e 7B68     		ldr	r3, [r7, #4]
 8749 00a0 9A65     		str	r2, [r3, #88]
3805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
 8750              		.loc 2 3806 18
ARM GAS  /tmp/ccp7RHPZ.s 			page 381


 8751 00a2 0123     		movs	r3, #1
 8752 00a4 07E0     		b	.L531
 8753              	.L532:
3793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8754              		.loc 2 3793 17
 8755 00a6 7B68     		ldr	r3, [r7, #4]
 8756 00a8 1B68     		ldr	r3, [r3]
3793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8757              		.loc 2 3793 27
 8758 00aa 9B68     		ldr	r3, [r3, #8]
3793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8759              		.loc 2 3793 32
 8760 00ac 03F00103 		and	r3, r3, #1
3793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8761              		.loc 2 3793 11
 8762 00b0 002B     		cmp	r3, #0
 8763 00b2 DCD1     		bne	.L533
 8764              	.L528:
3807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 8765              		.loc 2 3813 10
 8766 00b4 0023     		movs	r3, #0
 8767              	.L531:
3814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8768              		.loc 2 3814 1
 8769 00b6 1846     		mov	r0, r3
 8770 00b8 1037     		adds	r7, r7, #16
 8771              	.LCFI354:
 8772              		.cfi_def_cfa_offset 8
 8773 00ba BD46     		mov	sp, r7
 8774              	.LCFI355:
 8775              		.cfi_def_cfa_register 13
 8776              		@ sp needed
 8777 00bc 80BD     		pop	{r7, pc}
 8778              		.cfi_endproc
 8779              	.LFE355:
 8781              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 8782              		.align	1
 8783              		.global	ADC_DMAConvCplt
 8784              		.syntax unified
 8785              		.thumb
 8786              		.thumb_func
 8787              		.fpu fpv5-d16
 8789              	ADC_DMAConvCplt:
 8790              	.LFB356:
3815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
3818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccp7RHPZ.s 			page 382


3822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8791              		.loc 2 3822 1
 8792              		.cfi_startproc
 8793              		@ args = 0, pretend = 0, frame = 16
 8794              		@ frame_needed = 1, uses_anonymous_args = 0
 8795 0000 80B5     		push	{r7, lr}
 8796              	.LCFI356:
 8797              		.cfi_def_cfa_offset 8
 8798              		.cfi_offset 7, -8
 8799              		.cfi_offset 14, -4
 8800 0002 84B0     		sub	sp, sp, #16
 8801              	.LCFI357:
 8802              		.cfi_def_cfa_offset 24
 8803 0004 00AF     		add	r7, sp, #0
 8804              	.LCFI358:
 8805              		.cfi_def_cfa_register 7
 8806 0006 7860     		str	r0, [r7, #4]
3823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8807              		.loc 2 3824 22
 8808 0008 7B68     		ldr	r3, [r7, #4]
 8809 000a 9B6B     		ldr	r3, [r3, #56]
 8810 000c FB60     		str	r3, [r7, #12]
3825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
3827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8811              		.loc 2 3827 12
 8812 000e FB68     		ldr	r3, [r7, #12]
 8813 0010 5B6D     		ldr	r3, [r3, #84]
 8814              		.loc 2 3827 20
 8815 0012 03F05003 		and	r3, r3, #80
 8816              		.loc 2 3827 6
 8817 0016 002B     		cmp	r3, #0
 8818 0018 4BD1     		bne	.L535
3828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
3830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8819              		.loc 2 3830 5
 8820 001a FB68     		ldr	r3, [r7, #12]
 8821 001c 5B6D     		ldr	r3, [r3, #84]
 8822 001e 43F40072 		orr	r2, r3, #512
 8823 0022 FB68     		ldr	r3, [r7, #12]
 8824 0024 5A65     		str	r2, [r3, #84]
3831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
3833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
3834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
3835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Is it the end of the regular sequence ? */
3836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8825              		.loc 2 3836 14
 8826 0026 FB68     		ldr	r3, [r7, #12]
 8827 0028 1B68     		ldr	r3, [r3]
 8828              		.loc 2 3836 24
 8829 002a 1B68     		ldr	r3, [r3]
 8830              		.loc 2 3836 30
 8831 002c 03F00803 		and	r3, r3, #8
 8832              		.loc 2 3836 8
ARM GAS  /tmp/ccp7RHPZ.s 			page 383


 8833 0030 002B     		cmp	r3, #0
 8834 0032 21D0     		beq	.L536
3837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Are conversions software-triggered ? */
3839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8835              		.loc 2 3839 11
 8836 0034 FB68     		ldr	r3, [r7, #12]
 8837 0036 1B68     		ldr	r3, [r3]
 8838 0038 1846     		mov	r0, r3
 8839 003a FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 8840 003e 0346     		mov	r3, r0
 8841              		.loc 2 3839 10
 8842 0040 002B     		cmp	r3, #0
 8843 0042 32D0     		beq	.L537
3840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Is CONT bit set ? */
3842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8844              		.loc 2 3842 13
 8845 0044 FB68     		ldr	r3, [r7, #12]
 8846 0046 1B68     		ldr	r3, [r3]
 8847 0048 DB68     		ldr	r3, [r3, #12]
 8848 004a 03F40053 		and	r3, r3, #8192
 8849              		.loc 2 3842 12
 8850 004e 002B     		cmp	r3, #0
 8851 0050 2BD1     		bne	.L537
3843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* CONT bit is not set, no more conversions expected */
3845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8852              		.loc 2 3845 11
 8853 0052 FB68     		ldr	r3, [r7, #12]
 8854 0054 5B6D     		ldr	r3, [r3, #84]
 8855 0056 23F48072 		bic	r2, r3, #256
 8856 005a FB68     		ldr	r3, [r7, #12]
 8857 005c 5A65     		str	r2, [r3, #84]
3846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8858              		.loc 2 3846 20
 8859 005e FB68     		ldr	r3, [r7, #12]
 8860 0060 5B6D     		ldr	r3, [r3, #84]
 8861              		.loc 2 3846 28
 8862 0062 03F48053 		and	r3, r3, #4096
 8863              		.loc 2 3846 14
 8864 0066 002B     		cmp	r3, #0
 8865 0068 1FD1     		bne	.L537
3847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8866              		.loc 2 3848 13
 8867 006a FB68     		ldr	r3, [r7, #12]
 8868 006c 5B6D     		ldr	r3, [r3, #84]
 8869 006e 43F00102 		orr	r2, r3, #1
 8870 0072 FB68     		ldr	r3, [r7, #12]
 8871 0074 5A65     		str	r2, [r3, #84]
 8872 0076 18E0     		b	.L537
 8873              	.L536:
3849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
ARM GAS  /tmp/ccp7RHPZ.s 			page 384


3853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* DMA End of Transfer interrupt was triggered but conversions sequence
3856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          is not over. If DMACFG is set to 0, conversions are stopped. */
3857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8874              		.loc 2 3857 11
 8875 0078 FB68     		ldr	r3, [r7, #12]
 8876 007a 1B68     		ldr	r3, [r3]
 8877 007c DB68     		ldr	r3, [r3, #12]
 8878 007e 03F00303 		and	r3, r3, #3
 8879              		.loc 2 3857 10
 8880 0082 002B     		cmp	r3, #0
 8881 0084 11D1     		bne	.L537
3858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* DMACFG bit is not set, conversions are stopped. */
3860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8882              		.loc 2 3860 9
 8883 0086 FB68     		ldr	r3, [r7, #12]
 8884 0088 5B6D     		ldr	r3, [r3, #84]
 8885 008a 23F48072 		bic	r2, r3, #256
 8886 008e FB68     		ldr	r3, [r7, #12]
 8887 0090 5A65     		str	r2, [r3, #84]
3861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8888              		.loc 2 3861 18
 8889 0092 FB68     		ldr	r3, [r7, #12]
 8890 0094 5B6D     		ldr	r3, [r3, #84]
 8891              		.loc 2 3861 26
 8892 0096 03F48053 		and	r3, r3, #4096
 8893              		.loc 2 3861 12
 8894 009a 002B     		cmp	r3, #0
 8895 009c 05D1     		bne	.L537
3862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8896              		.loc 2 3863 11
 8897 009e FB68     		ldr	r3, [r7, #12]
 8898 00a0 5B6D     		ldr	r3, [r3, #84]
 8899 00a2 43F00102 		orr	r2, r3, #1
 8900 00a6 FB68     		ldr	r3, [r7, #12]
 8901 00a8 5A65     		str	r2, [r3, #84]
 8902              	.L537:
3864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
3869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
3871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 8903              		.loc 2 3872 5
 8904 00aa F868     		ldr	r0, [r7, #12]
 8905 00ac FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
3873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
3876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
ARM GAS  /tmp/ccp7RHPZ.s 			page 385


3878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
3880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
3882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
3884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call ADC DMA error callback */
3889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
3890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8906              		.loc 2 3892 1
 8907 00b0 0EE0     		b	.L540
 8908              	.L535:
3877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8909              		.loc 2 3877 14
 8910 00b2 FB68     		ldr	r3, [r7, #12]
 8911 00b4 5B6D     		ldr	r3, [r3, #84]
3877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8912              		.loc 2 3877 22
 8913 00b6 03F01003 		and	r3, r3, #16
3877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 8914              		.loc 2 3877 8
 8915 00ba 002B     		cmp	r3, #0
 8916 00bc 03D0     		beq	.L539
3883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 8917              		.loc 2 3883 7
 8918 00be F868     		ldr	r0, [r7, #12]
 8919 00c0 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 8920              		.loc 2 3892 1
 8921 00c4 04E0     		b	.L540
 8922              	.L539:
3889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8923              		.loc 2 3889 11
 8924 00c6 FB68     		ldr	r3, [r7, #12]
 8925 00c8 DB6C     		ldr	r3, [r3, #76]
3889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8926              		.loc 2 3889 23
 8927 00ca DB6C     		ldr	r3, [r3, #76]
3889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 8928              		.loc 2 3889 7
 8929 00cc 7868     		ldr	r0, [r7, #4]
 8930 00ce 9847     		blx	r3
 8931              	.LVL0:
 8932              	.L540:
 8933              		.loc 2 3892 1
 8934 00d0 00BF     		nop
 8935 00d2 1037     		adds	r7, r7, #16
 8936              	.LCFI359:
 8937              		.cfi_def_cfa_offset 8
 8938 00d4 BD46     		mov	sp, r7
 8939              	.LCFI360:
 8940              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccp7RHPZ.s 			page 386


 8941              		@ sp needed
 8942 00d6 80BD     		pop	{r7, pc}
 8943              		.cfi_endproc
 8944              	.LFE356:
 8946              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 8947              		.align	1
 8948              		.global	ADC_DMAHalfConvCplt
 8949              		.syntax unified
 8950              		.thumb
 8951              		.thumb_func
 8952              		.fpu fpv5-d16
 8954              	ADC_DMAHalfConvCplt:
 8955              	.LFB357:
3893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
3896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
3900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 8956              		.loc 2 3900 1
 8957              		.cfi_startproc
 8958              		@ args = 0, pretend = 0, frame = 16
 8959              		@ frame_needed = 1, uses_anonymous_args = 0
 8960 0000 80B5     		push	{r7, lr}
 8961              	.LCFI361:
 8962              		.cfi_def_cfa_offset 8
 8963              		.cfi_offset 7, -8
 8964              		.cfi_offset 14, -4
 8965 0002 84B0     		sub	sp, sp, #16
 8966              	.LCFI362:
 8967              		.cfi_def_cfa_offset 24
 8968 0004 00AF     		add	r7, sp, #0
 8969              	.LCFI363:
 8970              		.cfi_def_cfa_register 7
 8971 0006 7860     		str	r0, [r7, #4]
3901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8972              		.loc 2 3902 22
 8973 0008 7B68     		ldr	r3, [r7, #4]
 8974 000a 9B6B     		ldr	r3, [r3, #56]
 8975 000c FB60     		str	r3, [r7, #12]
3903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Half conversion callback */
3905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
3907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 8976              		.loc 2 3908 3
 8977 000e F868     		ldr	r0, [r7, #12]
 8978 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
3909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 8979              		.loc 2 3910 1
 8980 0014 00BF     		nop
 8981 0016 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccp7RHPZ.s 			page 387


 8982              	.LCFI364:
 8983              		.cfi_def_cfa_offset 8
 8984 0018 BD46     		mov	sp, r7
 8985              	.LCFI365:
 8986              		.cfi_def_cfa_register 13
 8987              		@ sp needed
 8988 001a 80BD     		pop	{r7, pc}
 8989              		.cfi_endproc
 8990              	.LFE357:
 8992              		.section	.text.ADC_DMAError,"ax",%progbits
 8993              		.align	1
 8994              		.global	ADC_DMAError
 8995              		.syntax unified
 8996              		.thumb
 8997              		.thumb_func
 8998              		.fpu fpv5-d16
 9000              	ADC_DMAError:
 9001              	.LFB358:
3911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA error callback.
3914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)
3918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 9002              		.loc 2 3918 1
 9003              		.cfi_startproc
 9004              		@ args = 0, pretend = 0, frame = 16
 9005              		@ frame_needed = 1, uses_anonymous_args = 0
 9006 0000 80B5     		push	{r7, lr}
 9007              	.LCFI366:
 9008              		.cfi_def_cfa_offset 8
 9009              		.cfi_offset 7, -8
 9010              		.cfi_offset 14, -4
 9011 0002 84B0     		sub	sp, sp, #16
 9012              	.LCFI367:
 9013              		.cfi_def_cfa_offset 24
 9014 0004 00AF     		add	r7, sp, #0
 9015              	.LCFI368:
 9016              		.cfi_def_cfa_register 7
 9017 0006 7860     		str	r0, [r7, #4]
3919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 9018              		.loc 2 3920 22
 9019 0008 7B68     		ldr	r3, [r7, #4]
 9020 000a 9B6B     		ldr	r3, [r3, #56]
 9021 000c FB60     		str	r3, [r7, #12]
3921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
3923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 9022              		.loc 2 3923 3
 9023 000e FB68     		ldr	r3, [r7, #12]
 9024 0010 5B6D     		ldr	r3, [r3, #84]
 9025 0012 43F04002 		orr	r2, r3, #64
 9026 0016 FB68     		ldr	r3, [r7, #12]
 9027 0018 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccp7RHPZ.s 			page 388


3924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
3926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 9028              		.loc 2 3926 3
 9029 001a FB68     		ldr	r3, [r7, #12]
 9030 001c 9B6D     		ldr	r3, [r3, #88]
 9031 001e 43F00402 		orr	r2, r3, #4
 9032 0022 FB68     		ldr	r3, [r7, #12]
 9033 0024 9A65     		str	r2, [r3, #88]
3927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Error callback */
3929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
3931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 9034              		.loc 2 3932 3
 9035 0026 F868     		ldr	r0, [r7, #12]
 9036 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
3933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 9037              		.loc 2 3934 1
 9038 002c 00BF     		nop
 9039 002e 1037     		adds	r7, r7, #16
 9040              	.LCFI369:
 9041              		.cfi_def_cfa_offset 8
 9042 0030 BD46     		mov	sp, r7
 9043              	.LCFI370:
 9044              		.cfi_def_cfa_register 13
 9045              		@ sp needed
 9046 0032 80BD     		pop	{r7, pc}
 9047              		.cfi_endproc
 9048              	.LFE358:
 9050              		.section	.text.ADC_ConfigureBoostMode,"ax",%progbits
 9051              		.align	1
 9052              		.global	ADC_ConfigureBoostMode
 9053              		.syntax unified
 9054              		.thumb
 9055              		.thumb_func
 9056              		.fpu fpv5-d16
 9058              	ADC_ConfigureBoostMode:
 9059              	.LFB359:
3935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure boost mode of selected ADC.
3938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc ADC handle
3941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None.
3942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
3944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 9060              		.loc 2 3944 1
 9061              		.cfi_startproc
 9062              		@ args = 0, pretend = 0, frame = 16
 9063              		@ frame_needed = 1, uses_anonymous_args = 0
 9064 0000 80B5     		push	{r7, lr}
 9065              	.LCFI371:
ARM GAS  /tmp/ccp7RHPZ.s 			page 389


 9066              		.cfi_def_cfa_offset 8
 9067              		.cfi_offset 7, -8
 9068              		.cfi_offset 14, -4
 9069 0002 84B0     		sub	sp, sp, #16
 9070              	.LCFI372:
 9071              		.cfi_def_cfa_offset 24
 9072 0004 00AF     		add	r7, sp, #0
 9073              	.LCFI373:
 9074              		.cfi_def_cfa_register 7
 9075 0006 7860     		str	r0, [r7, #4]
3945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t freq;
3946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 9076              		.loc 2 3946 7
 9077 0008 7B68     		ldr	r3, [r7, #4]
 9078 000a 1B68     		ldr	r3, [r3]
 9079 000c 794A     		ldr	r2, .L569
 9080 000e 9342     		cmp	r3, r2
 9081 0010 04D0     		beq	.L544
 9082              		.loc 2 3946 7 is_stmt 0 discriminator 2
 9083 0012 7B68     		ldr	r3, [r7, #4]
 9084 0014 1B68     		ldr	r3, [r3]
 9085 0016 784A     		ldr	r2, .L569+4
 9086 0018 9342     		cmp	r3, r2
 9087 001a 09D1     		bne	.L545
 9088              	.L544:
 9089              		.loc 2 3946 7 discriminator 3
 9090 001c 774B     		ldr	r3, .L569+8
 9091 001e 9B68     		ldr	r3, [r3, #8]
 9092 0020 03F44033 		and	r3, r3, #196608
 9093 0024 002B     		cmp	r3, #0
 9094 0026 14BF     		ite	ne
 9095 0028 0123     		movne	r3, #1
 9096 002a 0023     		moveq	r3, #0
 9097 002c DBB2     		uxtb	r3, r3
 9098 002e 08E0     		b	.L546
 9099              	.L545:
 9100              		.loc 2 3946 7 discriminator 4
 9101 0030 734B     		ldr	r3, .L569+12
 9102 0032 9B68     		ldr	r3, [r3, #8]
 9103 0034 03F44033 		and	r3, r3, #196608
 9104 0038 002B     		cmp	r3, #0
 9105 003a 14BF     		ite	ne
 9106 003c 0123     		movne	r3, #1
 9107 003e 0023     		moveq	r3, #0
 9108 0040 DBB2     		uxtb	r3, r3
 9109              	.L546:
 9110              		.loc 2 3946 6 is_stmt 1 discriminator 6
 9111 0042 002B     		cmp	r3, #0
 9112 0044 1CD0     		beq	.L547
3947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCC_GetHCLKFreq();
 9113              		.loc 2 3948 12
 9114 0046 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 9115 004a F860     		str	r0, [r7, #12]
3949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 9116              		.loc 2 3949 23
 9117 004c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccp7RHPZ.s 			page 390


 9118 004e 5B68     		ldr	r3, [r3, #4]
 9119              		.loc 2 3949 5
 9120 0050 B3F5403F 		cmp	r3, #196608
 9121 0054 10D0     		beq	.L548
 9122 0056 B3F5403F 		cmp	r3, #196608
 9123 005a 71D8     		bhi	.L566
 9124 005c B3F5803F 		cmp	r3, #65536
 9125 0060 02D0     		beq	.L550
 9126 0062 B3F5003F 		cmp	r3, #131072
 9127 0066 6BD1     		bne	.L566
 9128              	.L550:
3950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV1:
3952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV2:
3953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 9129              		.loc 2 3953 28
 9130 0068 7B68     		ldr	r3, [r7, #4]
 9131 006a 5B68     		ldr	r3, [r3, #4]
 9132              		.loc 2 3953 44
 9133 006c 1B0C     		lsrs	r3, r3, #16
 9134              		.loc 2 3953 14
 9135 006e FA68     		ldr	r2, [r7, #12]
 9136 0070 B2FBF3F3 		udiv	r3, r2, r3
 9137 0074 FB60     		str	r3, [r7, #12]
3954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9138              		.loc 2 3954 9
 9139 0076 66E0     		b	.L552
 9140              	.L548:
3955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV4:
3956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 4UL;
 9141              		.loc 2 3956 14
 9142 0078 FB68     		ldr	r3, [r7, #12]
 9143 007a 9B08     		lsrs	r3, r3, #2
 9144 007c FB60     		str	r3, [r7, #12]
3957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9145              		.loc 2 3957 9
 9146 007e 62E0     		b	.L552
 9147              	.L547:
3958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 9148              		.loc 2 3964 12
 9149 0080 4FF40020 		mov	r0, #524288
 9150 0084 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 9151 0088 F860     		str	r0, [r7, #12]
3965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 9152              		.loc 2 3965 23
 9153 008a 7B68     		ldr	r3, [r7, #4]
 9154 008c 5B68     		ldr	r3, [r3, #4]
 9155              		.loc 2 3965 5
 9156 008e B3F5301F 		cmp	r3, #2883584
 9157 0092 51D0     		beq	.L553
 9158 0094 B3F5301F 		cmp	r3, #2883584
ARM GAS  /tmp/ccp7RHPZ.s 			page 391


 9159 0098 54D8     		bhi	.L567
 9160 009a B3F5201F 		cmp	r3, #2621440
 9161 009e 47D0     		beq	.L555
 9162 00a0 B3F5201F 		cmp	r3, #2621440
 9163 00a4 4ED8     		bhi	.L567
 9164 00a6 B3F5101F 		cmp	r3, #2359296
 9165 00aa 3DD0     		beq	.L556
 9166 00ac B3F5101F 		cmp	r3, #2359296
 9167 00b0 48D8     		bhi	.L567
 9168 00b2 B3F5001F 		cmp	r3, #2097152
 9169 00b6 33D0     		beq	.L557
 9170 00b8 B3F5001F 		cmp	r3, #2097152
 9171 00bc 42D8     		bhi	.L567
 9172 00be B3F5E01F 		cmp	r3, #1835008
 9173 00c2 29D0     		beq	.L558
 9174 00c4 B3F5E01F 		cmp	r3, #1835008
 9175 00c8 3CD8     		bhi	.L567
 9176 00ca B3F5C01F 		cmp	r3, #1572864
 9177 00ce 1AD0     		beq	.L559
 9178 00d0 B3F5C01F 		cmp	r3, #1572864
 9179 00d4 36D8     		bhi	.L567
 9180 00d6 B3F5A01F 		cmp	r3, #1310720
 9181 00da 14D0     		beq	.L559
 9182 00dc B3F5A01F 		cmp	r3, #1310720
 9183 00e0 30D8     		bhi	.L567
 9184 00e2 B3F5801F 		cmp	r3, #1048576
 9185 00e6 0ED0     		beq	.L559
 9186 00e8 B3F5801F 		cmp	r3, #1048576
 9187 00ec 2AD8     		bhi	.L567
 9188 00ee B3F5402F 		cmp	r3, #786432
 9189 00f2 08D0     		beq	.L559
 9190 00f4 B3F5402F 		cmp	r3, #786432
 9191 00f8 24D8     		bhi	.L567
 9192 00fa B3F5802F 		cmp	r3, #262144
 9193 00fe 02D0     		beq	.L559
 9194 0100 B3F5002F 		cmp	r3, #524288
 9195 0104 1ED1     		bne	.L567
 9196              	.L559:
3966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV2:
3968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV4:
3969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV6:
3970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV8:
3971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV10:
3972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV12:
3973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 9197              		.loc 2 3973 29
 9198 0106 7B68     		ldr	r3, [r7, #4]
 9199 0108 5B68     		ldr	r3, [r3, #4]
 9200              		.loc 2 3973 45
 9201 010a 9B0C     		lsrs	r3, r3, #18
 9202              		.loc 2 3973 67
 9203 010c 5B00     		lsls	r3, r3, #1
 9204              		.loc 2 3973 14
 9205 010e FA68     		ldr	r2, [r7, #12]
 9206 0110 B2FBF3F3 		udiv	r3, r2, r3
 9207 0114 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccp7RHPZ.s 			page 392


3974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9208              		.loc 2 3974 9
 9209 0116 16E0     		b	.L552
 9210              	.L558:
3975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV16:
3976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 16UL;
 9211              		.loc 2 3976 14
 9212 0118 FB68     		ldr	r3, [r7, #12]
 9213 011a 1B09     		lsrs	r3, r3, #4
 9214 011c FB60     		str	r3, [r7, #12]
3977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9215              		.loc 2 3977 9
 9216 011e 12E0     		b	.L552
 9217              	.L557:
3978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV32:
3979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 32UL;
 9218              		.loc 2 3979 14
 9219 0120 FB68     		ldr	r3, [r7, #12]
 9220 0122 5B09     		lsrs	r3, r3, #5
 9221 0124 FB60     		str	r3, [r7, #12]
3980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9222              		.loc 2 3980 9
 9223 0126 0EE0     		b	.L552
 9224              	.L556:
3981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV64:
3982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 64UL;
 9225              		.loc 2 3982 14
 9226 0128 FB68     		ldr	r3, [r7, #12]
 9227 012a 9B09     		lsrs	r3, r3, #6
 9228 012c FB60     		str	r3, [r7, #12]
3983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9229              		.loc 2 3983 9
 9230 012e 0AE0     		b	.L552
 9231              	.L555:
3984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV128:
3985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 128UL;
 9232              		.loc 2 3985 14
 9233 0130 FB68     		ldr	r3, [r7, #12]
 9234 0132 DB09     		lsrs	r3, r3, #7
 9235 0134 FB60     		str	r3, [r7, #12]
3986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9236              		.loc 2 3986 9
 9237 0136 06E0     		b	.L552
 9238              	.L553:
3987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV256:
3988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 256UL;
 9239              		.loc 2 3988 14
 9240 0138 FB68     		ldr	r3, [r7, #12]
 9241 013a 1B0A     		lsrs	r3, r3, #8
 9242 013c FB60     		str	r3, [r7, #12]
3989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9243              		.loc 2 3989 9
 9244 013e 02E0     		b	.L552
 9245              	.L566:
3959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9246              		.loc 2 3959 9
 9247 0140 00BF     		nop
ARM GAS  /tmp/ccp7RHPZ.s 			page 393


 9248 0142 00E0     		b	.L552
 9249              	.L567:
3990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 9250              		.loc 2 3991 9
 9251 0144 00BF     		nop
 9252              	.L552:
3992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
3996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   freq /= 2U;
3997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (freq <= 6250000UL)
3998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
4000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 12500000UL)
4002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
4004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 25000000UL)
4006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
4008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* if(freq > 25000000UL) */
4010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
4012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
4014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 9253              		.loc 2 4014 7
 9254 0146 FFF7FEFF 		bl	HAL_GetREVID
 9255 014a 0346     		mov	r3, r0
 9256              		.loc 2 4014 6
 9257 014c 41F20302 		movw	r2, #4099
 9258 0150 9342     		cmp	r3, r2
 9259 0152 15D8     		bhi	.L560
4015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq > 20000000UL)
 9260              		.loc 2 4016 8
 9261 0154 FB68     		ldr	r3, [r7, #12]
 9262 0156 2B4A     		ldr	r2, .L569+16
 9263 0158 9342     		cmp	r3, r2
 9264 015a 08D9     		bls	.L561
4017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 9265              		.loc 2 4018 7
 9266 015c 7B68     		ldr	r3, [r7, #4]
 9267 015e 1B68     		ldr	r3, [r3]
 9268 0160 9A68     		ldr	r2, [r3, #8]
 9269 0162 7B68     		ldr	r3, [r7, #4]
 9270 0164 1B68     		ldr	r3, [r3]
 9271 0166 42F48072 		orr	r2, r2, #256
 9272 016a 9A60     		str	r2, [r3, #8]
4019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
4021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccp7RHPZ.s 			page 394


4022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
4023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* STM32H7 silicon Rev.V */
4026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq /= 2U; /* divider by 2 for Rev.V */
4028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
4029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq <= 6250000UL)
4030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
4032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 12500000UL)
4034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
4036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 25000000UL)
4038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
4040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else /* if(freq > 25000000UL) */
4042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
4044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
4047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 9273              		.loc 2 4047 1
 9274 016c 3EE0     		b	.L568
 9275              	.L561:
4022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9276              		.loc 2 4022 7
 9277 016e 7B68     		ldr	r3, [r7, #4]
 9278 0170 1B68     		ldr	r3, [r3]
 9279 0172 9A68     		ldr	r2, [r3, #8]
 9280 0174 7B68     		ldr	r3, [r7, #4]
 9281 0176 1B68     		ldr	r3, [r3]
 9282 0178 22F48072 		bic	r2, r2, #256
 9283 017c 9A60     		str	r2, [r3, #8]
 9284              		.loc 2 4047 1
 9285 017e 35E0     		b	.L568
 9286              	.L560:
4027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 9287              		.loc 2 4027 10
 9288 0180 FB68     		ldr	r3, [r7, #12]
 9289 0182 5B08     		lsrs	r3, r3, #1
 9290 0184 FB60     		str	r3, [r7, #12]
4029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9291              		.loc 2 4029 8
 9292 0186 FB68     		ldr	r3, [r7, #12]
 9293 0188 1F4A     		ldr	r2, .L569+20
 9294 018a 9342     		cmp	r3, r2
 9295 018c 08D8     		bhi	.L563
4031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9296              		.loc 2 4031 7
 9297 018e 7B68     		ldr	r3, [r7, #4]
 9298 0190 1B68     		ldr	r3, [r3]
 9299 0192 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccp7RHPZ.s 			page 395


 9300 0194 7B68     		ldr	r3, [r7, #4]
 9301 0196 1B68     		ldr	r3, [r3]
 9302 0198 22F44072 		bic	r2, r2, #768
 9303 019c 9A60     		str	r2, [r3, #8]
 9304              		.loc 2 4047 1
 9305 019e 25E0     		b	.L568
 9306              	.L563:
4033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9307              		.loc 2 4033 13
 9308 01a0 FB68     		ldr	r3, [r7, #12]
 9309 01a2 1A4A     		ldr	r2, .L569+24
 9310 01a4 9342     		cmp	r3, r2
 9311 01a6 0AD8     		bhi	.L564
4035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9312              		.loc 2 4035 7
 9313 01a8 7B68     		ldr	r3, [r7, #4]
 9314 01aa 1B68     		ldr	r3, [r3]
 9315 01ac 9B68     		ldr	r3, [r3, #8]
 9316 01ae 23F44072 		bic	r2, r3, #768
 9317 01b2 7B68     		ldr	r3, [r7, #4]
 9318 01b4 1B68     		ldr	r3, [r3]
 9319 01b6 42F48072 		orr	r2, r2, #256
 9320 01ba 9A60     		str	r2, [r3, #8]
 9321              		.loc 2 4047 1
 9322 01bc 16E0     		b	.L568
 9323              	.L564:
4037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 9324              		.loc 2 4037 13
 9325 01be FB68     		ldr	r3, [r7, #12]
 9326 01c0 134A     		ldr	r2, .L569+28
 9327 01c2 9342     		cmp	r3, r2
 9328 01c4 0AD8     		bhi	.L565
4039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9329              		.loc 2 4039 7
 9330 01c6 7B68     		ldr	r3, [r7, #4]
 9331 01c8 1B68     		ldr	r3, [r3]
 9332 01ca 9B68     		ldr	r3, [r3, #8]
 9333 01cc 23F44072 		bic	r2, r3, #768
 9334 01d0 7B68     		ldr	r3, [r7, #4]
 9335 01d2 1B68     		ldr	r3, [r3]
 9336 01d4 42F40072 		orr	r2, r2, #512
 9337 01d8 9A60     		str	r2, [r3, #8]
 9338              		.loc 2 4047 1
 9339 01da 07E0     		b	.L568
 9340              	.L565:
4043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 9341              		.loc 2 4043 7
 9342 01dc 7B68     		ldr	r3, [r7, #4]
 9343 01de 1B68     		ldr	r3, [r3]
 9344 01e0 9A68     		ldr	r2, [r3, #8]
 9345 01e2 7B68     		ldr	r3, [r7, #4]
 9346 01e4 1B68     		ldr	r3, [r3]
 9347 01e6 42F44072 		orr	r2, r2, #768
 9348 01ea 9A60     		str	r2, [r3, #8]
 9349              	.L568:
 9350              		.loc 2 4047 1
 9351 01ec 00BF     		nop
ARM GAS  /tmp/ccp7RHPZ.s 			page 396


 9352 01ee 1037     		adds	r7, r7, #16
 9353              	.LCFI374:
 9354              		.cfi_def_cfa_offset 8
 9355 01f0 BD46     		mov	sp, r7
 9356              	.LCFI375:
 9357              		.cfi_def_cfa_register 13
 9358              		@ sp needed
 9359 01f2 80BD     		pop	{r7, pc}
 9360              	.L570:
 9361              		.align	2
 9362              	.L569:
 9363 01f4 00200240 		.word	1073881088
 9364 01f8 00210240 		.word	1073881344
 9365 01fc 00230240 		.word	1073881856
 9366 0200 00630258 		.word	1476551424
 9367 0204 002D3101 		.word	20000000
 9368 0208 105E5F00 		.word	6250000
 9369 020c 20BCBE00 		.word	12500000
 9370 0210 40787D01 		.word	25000000
 9371              		.cfi_endproc
 9372              	.LFE359:
 9374              		.text
 9375              	.Letext0:
 9376              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 9377              		.file 5 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 9378              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 9379              		.file 7 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 9380              		.file 8 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 9381              		.file 9 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 9382              		.file 10 "/usr/include/newlib/sys/_types.h"
 9383              		.file 11 "/usr/include/newlib/sys/reent.h"
 9384              		.file 12 "/usr/include/newlib/sys/lock.h"
 9385              		.file 13 "/usr/include/newlib/math.h"
 9386              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 9387              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 9388              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 9389              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 9390              		.file 18 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 9391              		.file 19 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/ccp7RHPZ.s 			page 397


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_adc.c
     /tmp/ccp7RHPZ.s:17     .text.LL_ADC_SetCommonClock:0000000000000000 $t
     /tmp/ccp7RHPZ.s:24     .text.LL_ADC_SetCommonClock:0000000000000000 LL_ADC_SetCommonClock
     /tmp/ccp7RHPZ.s:70     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 $t
     /tmp/ccp7RHPZ.s:76     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 LL_ADC_SetCommonPathInternalCh
     /tmp/ccp7RHPZ.s:121    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 $t
     /tmp/ccp7RHPZ.s:127    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 LL_ADC_GetCommonPathInternalCh
     /tmp/ccp7RHPZ.s:168    .text.LL_ADC_SetOffset:0000000000000000 $t
     /tmp/ccp7RHPZ.s:174    .text.LL_ADC_SetOffset:0000000000000000 LL_ADC_SetOffset
     /tmp/ccp7RHPZ.s:233    .text.LL_ADC_SetDataRightShift:0000000000000000 $t
     /tmp/ccp7RHPZ.s:239    .text.LL_ADC_SetDataRightShift:0000000000000000 LL_ADC_SetDataRightShift
     /tmp/ccp7RHPZ.s:288    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 $t
     /tmp/ccp7RHPZ.s:294    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 LL_ADC_SetOffsetSignedSaturation
     /tmp/ccp7RHPZ.s:351    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/ccp7RHPZ.s:357    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 LL_ADC_REG_IsTriggerSourceSWStart
     /tmp/ccp7RHPZ.s:407    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 $t
     /tmp/ccp7RHPZ.s:413    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 LL_ADC_REG_SetSequencerRanks
     /tmp/ccp7RHPZ.s:480    .text.LL_ADC_REG_SetDataTransferMode:0000000000000000 $t
     /tmp/ccp7RHPZ.s:486    .text.LL_ADC_REG_SetDataTransferMode:0000000000000000 LL_ADC_REG_SetDataTransferMode
     /tmp/ccp7RHPZ.s:531    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/ccp7RHPZ.s:537    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 LL_ADC_INJ_IsTriggerSourceSWStart
     /tmp/ccp7RHPZ.s:587    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 $t
     /tmp/ccp7RHPZ.s:593    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 LL_ADC_SetChannelSamplingTime
     /tmp/ccp7RHPZ.s:660    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 $t
     /tmp/ccp7RHPZ.s:666    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 LL_ADC_SetChannelSingleDiff
     /tmp/ccp7RHPZ.s:720    .text.LL_ADC_SetChannelSingleDiff:0000000000000044 $d
     /tmp/ccp7RHPZ.s:725    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 $t
     /tmp/ccp7RHPZ.s:731    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 LL_ADC_SetAnalogWDMonitChannels
     /tmp/ccp7RHPZ.s:800    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000058 $d
     /tmp/ccp7RHPZ.s:805    .text.LL_ADC_GetMultimode:0000000000000000 $t
     /tmp/ccp7RHPZ.s:811    .text.LL_ADC_GetMultimode:0000000000000000 LL_ADC_GetMultimode
     /tmp/ccp7RHPZ.s:852    .text.LL_ADC_GetMultiDMATransfer:0000000000000000 $t
     /tmp/ccp7RHPZ.s:858    .text.LL_ADC_GetMultiDMATransfer:0000000000000000 LL_ADC_GetMultiDMATransfer
     /tmp/ccp7RHPZ.s:899    .text.LL_ADC_DisableDeepPowerDown:0000000000000000 $t
     /tmp/ccp7RHPZ.s:905    .text.LL_ADC_DisableDeepPowerDown:0000000000000000 LL_ADC_DisableDeepPowerDown
     /tmp/ccp7RHPZ.s:947    .text.LL_ADC_DisableDeepPowerDown:0000000000000020 $d
     /tmp/ccp7RHPZ.s:952    .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 $t
     /tmp/ccp7RHPZ.s:958    .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 LL_ADC_IsDeepPowerDownEnabled
     /tmp/ccp7RHPZ.s:1008   .text.LL_ADC_EnableInternalRegulator:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1014   .text.LL_ADC_EnableInternalRegulator:0000000000000000 LL_ADC_EnableInternalRegulator
     /tmp/ccp7RHPZ.s:1057   .text.LL_ADC_EnableInternalRegulator:0000000000000024 $d
     /tmp/ccp7RHPZ.s:1062   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1068   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 LL_ADC_IsInternalRegulatorEnabled
     /tmp/ccp7RHPZ.s:1118   .text.LL_ADC_Enable:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1124   .text.LL_ADC_Enable:0000000000000000 LL_ADC_Enable
     /tmp/ccp7RHPZ.s:1167   .text.LL_ADC_Enable:0000000000000024 $d
     /tmp/ccp7RHPZ.s:1172   .text.LL_ADC_Disable:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1178   .text.LL_ADC_Disable:0000000000000000 LL_ADC_Disable
     /tmp/ccp7RHPZ.s:1221   .text.LL_ADC_Disable:0000000000000024 $d
     /tmp/ccp7RHPZ.s:1226   .text.LL_ADC_IsEnabled:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1232   .text.LL_ADC_IsEnabled:0000000000000000 LL_ADC_IsEnabled
     /tmp/ccp7RHPZ.s:1282   .text.LL_ADC_IsDisableOngoing:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1288   .text.LL_ADC_IsDisableOngoing:0000000000000000 LL_ADC_IsDisableOngoing
     /tmp/ccp7RHPZ.s:1338   .text.LL_ADC_REG_StartConversion:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1344   .text.LL_ADC_REG_StartConversion:0000000000000000 LL_ADC_REG_StartConversion
     /tmp/ccp7RHPZ.s:1387   .text.LL_ADC_REG_StartConversion:0000000000000024 $d
ARM GAS  /tmp/ccp7RHPZ.s 			page 398


     /tmp/ccp7RHPZ.s:1392   .text.LL_ADC_REG_StopConversion:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1398   .text.LL_ADC_REG_StopConversion:0000000000000000 LL_ADC_REG_StopConversion
     /tmp/ccp7RHPZ.s:1441   .text.LL_ADC_REG_StopConversion:0000000000000024 $d
     /tmp/ccp7RHPZ.s:1446   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1452   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 LL_ADC_REG_IsConversionOngoing
     /tmp/ccp7RHPZ.s:1502   .text.LL_ADC_INJ_StopConversion:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1508   .text.LL_ADC_INJ_StopConversion:0000000000000000 LL_ADC_INJ_StopConversion
     /tmp/ccp7RHPZ.s:1551   .text.LL_ADC_INJ_StopConversion:0000000000000024 $d
     /tmp/ccp7RHPZ.s:1556   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1562   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 LL_ADC_INJ_IsConversionOngoing
     /tmp/ccp7RHPZ.s:1612   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1618   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 LL_ADC_ClearFlag_AWD1
     /tmp/ccp7RHPZ.s:1658   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1664   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 LL_ADC_ClearFlag_AWD2
     /tmp/ccp7RHPZ.s:1704   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1710   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 LL_ADC_ClearFlag_AWD3
     /tmp/ccp7RHPZ.s:1750   .text.LL_ADC_EnableIT_AWD1:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1756   .text.LL_ADC_EnableIT_AWD1:0000000000000000 LL_ADC_EnableIT_AWD1
     /tmp/ccp7RHPZ.s:1798   .text.LL_ADC_EnableIT_AWD2:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1804   .text.LL_ADC_EnableIT_AWD2:0000000000000000 LL_ADC_EnableIT_AWD2
     /tmp/ccp7RHPZ.s:1846   .text.LL_ADC_EnableIT_AWD3:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1852   .text.LL_ADC_EnableIT_AWD3:0000000000000000 LL_ADC_EnableIT_AWD3
     /tmp/ccp7RHPZ.s:1894   .text.LL_ADC_DisableIT_AWD1:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1900   .text.LL_ADC_DisableIT_AWD1:0000000000000000 LL_ADC_DisableIT_AWD1
     /tmp/ccp7RHPZ.s:1942   .text.LL_ADC_DisableIT_AWD2:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1948   .text.LL_ADC_DisableIT_AWD2:0000000000000000 LL_ADC_DisableIT_AWD2
     /tmp/ccp7RHPZ.s:1990   .text.LL_ADC_DisableIT_AWD3:0000000000000000 $t
     /tmp/ccp7RHPZ.s:1996   .text.LL_ADC_DisableIT_AWD3:0000000000000000 LL_ADC_DisableIT_AWD3
     /tmp/ccp7RHPZ.s:2038   .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccp7RHPZ.s:2045   .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccp7RHPZ.s:3025   .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccp7RHPZ.s:9058   .text.ADC_ConfigureBoostMode:0000000000000000 ADC_ConfigureBoostMode
     /tmp/ccp7RHPZ.s:2519   .text.HAL_ADC_Init:00000000000002dc $d
     /tmp/ccp7RHPZ.s:2531   .text.HAL_ADC_Init:0000000000000304 $t
     /tmp/ccp7RHPZ.s:2575   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccp7RHPZ.s:2582   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccp7RHPZ.s:8158   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccp7RHPZ.s:8640   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccp7RHPZ.s:2953   .text.HAL_ADC_DeInit:0000000000000294 $d
     /tmp/ccp7RHPZ.s:2966   .text.HAL_ADC_DeInit:00000000000002c0 $t
     /tmp/ccp7RHPZ.s:3068   .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccp7RHPZ.s:3012   .text.HAL_ADC_DeInit:00000000000002f8 $d
     /tmp/ccp7RHPZ.s:3018   .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3061   .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3104   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3111   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccp7RHPZ.s:8435   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccp7RHPZ.s:3374   .text.HAL_ADC_Start:0000000000000180 $d
     /tmp/ccp7RHPZ.s:3383   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3390   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccp7RHPZ.s:3469   .text.HAL_ADC_Stop:0000000000000064 $d
     /tmp/ccp7RHPZ.s:3474   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3481   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccp7RHPZ.s:3827   .text.HAL_ADC_PollForConversion:00000000000001d8 $d
     /tmp/ccp7RHPZ.s:3835   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccp7RHPZ.s:3842   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccp7RHPZ.s:4071   .text.HAL_ADC_Start_IT:0000000000000000 $t
ARM GAS  /tmp/ccp7RHPZ.s 			page 399


     /tmp/ccp7RHPZ.s:4078   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccp7RHPZ.s:4485   .text.HAL_ADC_Start_IT:000000000000026c $d
     /tmp/ccp7RHPZ.s:4494   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccp7RHPZ.s:4501   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccp7RHPZ.s:4588   .text.HAL_ADC_Stop_IT:0000000000000074 $d
     /tmp/ccp7RHPZ.s:4593   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccp7RHPZ.s:4600   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccp7RHPZ.s:4854   .text.HAL_ADC_Start_DMA:0000000000000168 $d
     /tmp/ccp7RHPZ.s:8789   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccp7RHPZ.s:8954   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccp7RHPZ.s:9000   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccp7RHPZ.s:4866   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccp7RHPZ.s:4873   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccp7RHPZ.s:5005   .text.HAL_ADC_Stop_DMA:00000000000000c0 $d
     /tmp/ccp7RHPZ.s:5010   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5017   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccp7RHPZ.s:5058   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5065   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccp7RHPZ.s:5806   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccp7RHPZ.s:5453   .text.HAL_ADC_IRQHandler:0000000000000240 $d
     /tmp/ccp7RHPZ.s:5459   .text.HAL_ADC_IRQHandler:0000000000000250 $t
     /tmp/ccp7RHPZ.s:5892   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccp7RHPZ.s:5935   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccp7RHPZ.s:5791   .text.HAL_ADC_IRQHandler:0000000000000464 $d
     /tmp/ccp7RHPZ.s:5799   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5842   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5849   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccp7RHPZ.s:5885   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5928   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5971   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccp7RHPZ.s:5978   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccp7RHPZ.s:6392   .text.HAL_ADC_ConfigChannel:0000000000000290 $d
     /tmp/ccp7RHPZ.s:6396   .text.HAL_ADC_ConfigChannel:0000000000000298 $t
     /tmp/ccp7RHPZ.s:7112   .text.HAL_ADC_ConfigChannel:0000000000000678 $d
     /tmp/ccp7RHPZ.s:7126   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccp7RHPZ.s:7133   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccp7RHPZ.s:7571   .text.HAL_ADC_AnalogWDGConfig:0000000000000318 $d
     /tmp/ccp7RHPZ.s:7579   .text.HAL_ADC_AnalogWDGConfig:0000000000000330 $t
     /tmp/ccp7RHPZ.s:8053   .text.HAL_ADC_AnalogWDGConfig:000000000000063c $d
     /tmp/ccp7RHPZ.s:8059   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8066   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccp7RHPZ.s:8105   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8112   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccp7RHPZ.s:8151   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8423   .text.ADC_ConversionStop:0000000000000174 $d
     /tmp/ccp7RHPZ.s:8428   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8624   .text.ADC_Enable:0000000000000100 $d
     /tmp/ccp7RHPZ.s:8633   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8782   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8947   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccp7RHPZ.s:8993   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccp7RHPZ.s:9051   .text.ADC_ConfigureBoostMode:0000000000000000 $t
     /tmp/ccp7RHPZ.s:9363   .text.ADC_ConfigureBoostMode:00000000000001f4 $d

UNDEFINED SYMBOLS
HAL_GetREVID
SystemCoreClock
ARM GAS  /tmp/ccp7RHPZ.s 			page 400


HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_InjectedConvCpltCallback
HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_InjectedQueueOverflowCallback
HAL_RCC_GetHCLKFreq
HAL_RCCEx_GetPeriphCLKFreq
