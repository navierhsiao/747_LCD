ARM GAS  /tmp/ccPNsL7d.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_lms_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_lms_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_lms_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_lms_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c"
   1:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Title:        arm_lms_f32.c
   4:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Description:  Processing function for the floating-point LMS filter
   5:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
ARM GAS  /tmp/ccPNsL7d.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @ingroup groupFilters
  33:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @defgroup LMS Least Mean Square (LMS) Filters
  37:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  38:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   LMS filters are a class of adaptive filters that are able to "learn" an unknown transfer function
  39:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   LMS filters use a gradient descent method in which the filter coefficients are updated based on t
  40:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   Adaptive filters are often used in communication systems, equalizers, and noise removal.
  41:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The CMSIS DSP Library contains LMS filter functions that operate on Q15, Q31, and floating-point 
  42:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The library also contains normalized LMS filters in which the filter coefficient adaptation is in
  43:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  44:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   An LMS filter consists of two components as shown below.
  45:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The first component is a standard transversal or FIR filter.
  46:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The second component is a coefficient update mechanism.
  47:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The LMS filter has two input signals.
  48:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The "input" feeds the FIR filter while the "reference input" corresponds to the desired output of
  49:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   That is, the FIR filter coefficients are updated so that the output of the FIR filter matches the
  50:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The filter coefficient update mechanism is based on the difference between the FIR filter output 
  51:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   This "error signal" tends towards zero as the filter adapts.
  52:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The LMS processing functions accept the input and reference input signals and generate the filter
  53:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   \image html LMS.gif "Internal structure of the Least Mean Square filter"
  54:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  55:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The functions operate on blocks of data and each call to the function processes
  56:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <code>blockSize</code> samples through the filter.
  57:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <code>pSrc</code> points to input signal, <code>pRef</code> points to reference signal,
  58:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <code>pOut</code> points to output signal and <code>pErr</code> points to error signal.
  59:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   All arrays contain <code>blockSize</code> values.
  60:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  61:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The functions operate on a block-by-block basis.
  62:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   Internally, the filter coefficients <code>b[n]</code> are updated on a sample-by-sample basis.
  63:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   The convergence of the LMS filter is slower compared to the normalized LMS algorithm.
  64:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  65:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Algorithm
  66:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The output signal <code>y[n]</code> is computed by a standard FIR filter:
  67:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
  68:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]
  69:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
  70:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  71:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  72:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The error signal equals the difference between the reference signal <code>d[n]</
  73:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
  74:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       e[n] = d[n] - y[n].
  75:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
  76:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
  77:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  78:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    After each sample of the error signal is computed, the filter coefficients <code
  79:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
  80:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       b[k] = b[k] + e[n] * mu * x[n-k],  for k=0, 1, ..., numTaps-1
  81:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
  82:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    where <code>mu</code> is the step size and controls the rate of coefficient conv
  83:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  84:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    In the APIs, <code>pCoeffs</code> points to a coefficient array of size <code>nu
  85:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Coefficients are stored in time reversed order.
  86:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  87:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
  88:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
ARM GAS  /tmp/ccPNsL7d.s 			page 3


  89:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
  90:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  91:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    <code>pState</code> points to a state array of size <code>numTaps + blockSize - 
  92:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Samples in the state buffer are stored in the order:
  93:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  94:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
  95:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize-
  96:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
  97:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
  98:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Note that the length of the state buffer exceeds the length of the coefficient a
  99:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The increased state buffer length allows circular addressing, which is tradition
 100:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    to be avoided and yields a significant speed improvement.
 101:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The state variables are updated after each block of data is processed.
 102:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Instance Structure
 103:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The coefficients and state variables for a filter are stored together in an inst
 104:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    A separate instance structure must be defined for each filter and
 105:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    coefficient and state arrays cannot be shared among instances.
 106:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    There are separate instance structure declarations for each of the 3 supported d
 107:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 108:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Initialization Functions
 109:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    There is also an associated initialization function for each data type.
 110:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The initialization function performs the following operations:
 111:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    - Sets the values of the internal structure fields.
 112:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    - Zeros out the values in the state buffer.
 113:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    To do this manually without calling the init function, assign the follow subfiel
 114:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    numTaps, pCoeffs, mu, postShift (not for f32), pState. Also set all of the value
 115:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 116:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par
 117:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  Use of the initialization function is optional.
 118:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  However, if the initialization function is used, then the instance structure canno
 119:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  To place an instance structure into a const data section, the instance structure m
 120:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  Set the values in the state buffer to zeros before static initialization.
 121:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  The code below statically initializes each of the 3 different data type filter ins
 122:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   <pre>
 123:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      arm_lms_instance_f32 S = {numTaps, pState, pCoeffs, mu};
 124:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      arm_lms_instance_q31 S = {numTaps, pState, pCoeffs, mu, postShift};
 125:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      arm_lms_instance_q15 S = {numTaps, pState, pCoeffs, mu, postShift};
 126:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   </pre>
 127:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  where <code>numTaps</code> is the number of filter coefficients in the filter; <co
 128:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                  <code>pCoeffs</code> is the address of the coefficient buffer; <code>mu</code> is 
 129:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 130:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Fixed-Point Behavior
 131:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Care must be taken when using the Q15 and Q31 versions of the LMS filter.
 132:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The following issues must be considered:
 133:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    - Scaling of coefficients
 134:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    - Overflow and saturation
 135:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 136:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Scaling of Coefficients
 137:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Filter coefficients are represented as fractional values and
 138:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 139:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The fixed-point functions have an additional scaling parameter <code>postShift</
 140:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    At the output of the filter's accumulator is a shift register which shifts the r
 141:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    This essentially scales the filter coefficients by <code>2^postShift</code> and
 142:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    allows the filter coefficients to exceed the range <code>[+1 -1)</code>.
 143:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    The value of <code>postShift</code> is set by the user based on the expected gai
 144:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 145:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @par           Overflow and Saturation
ARM GAS  /tmp/ccPNsL7d.s 			page 4


 146:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are
 147:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****                    described separately as part of the function specific documentation below.
 148:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 149:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 150:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
 151:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @addtogroup LMS
 152:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @{
 153:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 154:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 155:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** /**
 156:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @brief         Processing function for floating-point LMS filter.
 157:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[in]     S          points to an instance of the floating-point LMS filter structure
 158:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[in]     pSrc       points to the block of input data
 159:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[in]     pRef       points to the block of reference data
 160:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[out]    pOut       points to the block of output data
 161:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[out]    pErr       points to the block of error data
 162:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @param[in]     blockSize  number of samples to process
 163:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   @return        none
 164:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****  */
 165:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #if defined(ARM_MATH_NEON)
 166:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** void arm_lms_f32(
 167:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   const arm_lms_instance_f32 * S,
 168:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   const float32_t * pSrc,
 169:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pRef,
 170:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pOut,
 171:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t * pErr,
 172:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t blockSize)
 173:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** {
 174:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
 175:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 176:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
 177:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient bu
 178:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t mu = S->mu;                          /* Adaptive factor */
 179:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 180:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
 181:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t sum, e, d;                           /* accumulator, error, reference data sample */
 182:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32_t w = 0.0f;                            /* weight factor */
 183:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 184:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32x4_t tempV, sumV, xV, bV;
 185:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   float32x2_t tempV2;
 186:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 187:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   e = 0.0f;
 188:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   d = 0.0f;
 189:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 190:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 191:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 192:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
 193:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 194:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   blkCnt = blockSize;
 195:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 196:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0U)
 197:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 198:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 199:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
 200:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 201:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 202:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
ARM GAS  /tmp/ccPNsL7d.s 			page 5


 203:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 204:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 205:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 206:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 207:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 208:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 209:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     sumV = vdupq_n_f32(0.0);
 210:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 211:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Process 4 taps at a time. */
 212:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 213:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 214:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 215:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 216:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 217:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       xV = vld1q_f32(px);
 218:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       bV = vld1q_f32(pb);
 219:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sumV = vmlaq_f32(sumV, xV, bV);
 220:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 221:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       px += 4; 
 222:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb += 4;
 223:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 224:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 225:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 226:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 227:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tempV2 = vpadd_f32(vget_low_f32(sumV),vget_high_f32(sumV));
 228:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     sum = tempV2[0] + tempV2[1];
 229:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 230:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 231:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 232:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 233:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 234:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 235:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 236:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 237:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 238:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 239:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 240:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 241:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 242:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 243:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* The result in the accumulator, store in the destination buffer. */
 244:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 245:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 246:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 247:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 248:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 249:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 250:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 251:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Calculation of Weighting factor for the updating filter coefficients */
 252:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 253:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 254:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 255:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 256:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 257:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 258:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 259:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
ARM GAS  /tmp/ccPNsL7d.s 			page 6


 260:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Process 4 taps at a time. */
 261:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 262:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 263:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Update filter coefficients */
 264:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 265:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 266:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 267:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       xV = vld1q_f32(px);
 268:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       bV = vld1q_f32(pb);
 269:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       px += 4;
 270:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       bV = vmlaq_n_f32(bV,xV,w);
 271:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 272:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       vst1q_f32(pb,bV); 
 273:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb += 4;
 274:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 275:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 276:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 277:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 278:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 279:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 280:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 281:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 282:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 283:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 284:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 285:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 286:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 287:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 288:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 289:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 290:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 291:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 292:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 293:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 294:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 295:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 296:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 297:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 298:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 299:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 300:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 301:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 302:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      satrt of the state buffer. This prepares the state buffer for the
 303:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      next function call. */
 304:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 305:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 306:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 307:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 308:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Process 4 taps at a time for (numTaps - 1U) samples copy */
 309:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) >> 2U;
 310:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 311:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* copy data */
 312:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 313:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 314:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tempV = vld1q_f32(pState);
 315:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     vst1q_f32(pStateCurnt,tempV); 
 316:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pState += 4;
ARM GAS  /tmp/ccPNsL7d.s 			page 7


 317:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pStateCurnt += 4;
 318:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 319:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 320:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 321:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 322:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 323:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Calculate remaining number of copies */
 324:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 325:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 326:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Copy the remaining q31_t data */
 327:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 328:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 329:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 330:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 331:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 332:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 333:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 334:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 335:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 336:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** }
 337:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #else
 338:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** void arm_lms_f32(
 339:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   const arm_lms_instance_f32 * S,
 340:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   const float32_t * pSrc,
 341:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t * pRef,
 342:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t * pOut,
 343:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t * pErr,
 344:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         uint32_t blockSize)
 345:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** {       
  28              		.loc 1 345 1
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 64
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 91B0     		sub	sp, sp, #68
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 72
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  46 000c 3B60     		str	r3, [r7]
 346:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t *pState = S->pState;                 /* State pointer */
  47              		.loc 1 346 20
  48 000e FB68     		ldr	r3, [r7, #12]
  49 0010 5B68     		ldr	r3, [r3, #4]
  50 0012 FB63     		str	r3, [r7, #60]
 347:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  51              		.loc 1 347 20
  52 0014 FB68     		ldr	r3, [r7, #12]
  53 0016 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccPNsL7d.s 			page 8


  54 0018 3B62     		str	r3, [r7, #32]
 348:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t *pStateCurnt;                        /* Points to the current sample of the state
 349:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t *px, *pb;                            /* Temporary pointers for state and coeffici
 350:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t mu = S->mu;                          /* Adaptive factor */
  55              		.loc 1 350 19
  56 001a FB68     		ldr	r3, [r7, #12]
  57 001c DB68     		ldr	r3, [r3, #12]	@ float
  58 001e FB61     		str	r3, [r7, #28]	@ float
 351:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t acc, e;                              /* Accumulator, error */
 352:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         float32_t w;                                   /* Weight factor */
 353:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filt
  59              		.loc 1 353 29
  60 0020 FB68     		ldr	r3, [r7, #12]
  61 0022 1B88     		ldrh	r3, [r3]
  62              		.loc 1 353 18
  63 0024 BB61     		str	r3, [r7, #24]
 354:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****         uint32_t tapCnt, blkCnt;                       /* Loop counters */
 355:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 356:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Initializations of error,  difference, Coefficient update */
 357:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   e = 0.0f;
  64              		.loc 1 357 5
  65 0026 4FF00003 		mov	r3, #0
  66 002a 7B61     		str	r3, [r7, #20]	@ float
 358:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   w = 0.0f;
  67              		.loc 1 358 5
  68 002c 4FF00003 		mov	r3, #0
  69 0030 3B61     		str	r3, [r7, #16]	@ float
 359:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 360:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 361:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 362:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1U)]);
  70              		.loc 1 362 20
  71 0032 FB68     		ldr	r3, [r7, #12]
  72 0034 5A68     		ldr	r2, [r3, #4]
  73              		.loc 1 362 28
  74 0036 B969     		ldr	r1, [r7, #24]
  75 0038 6FF04043 		mvn	r3, #-1073741824
  76 003c 0B44     		add	r3, r3, r1
  77 003e 9B00     		lsls	r3, r3, #2
  78              		.loc 1 362 15
  79 0040 1344     		add	r3, r3, r2
  80 0042 BB63     		str	r3, [r7, #56]
 363:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 364:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* initialise loop count */
 365:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   blkCnt = blockSize;
  81              		.loc 1 365 10
  82 0044 FB6C     		ldr	r3, [r7, #76]
  83 0046 7B62     		str	r3, [r7, #36]
 366:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 367:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0U)
  84              		.loc 1 367 9
  85 0048 6CE0     		b	.L2
  86              	.L7:
 368:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 369:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 370:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
  87              		.loc 1 370 27
ARM GAS  /tmp/ccPNsL7d.s 			page 9


  88 004a BA68     		ldr	r2, [r7, #8]
  89 004c 131D     		adds	r3, r2, #4
  90 004e BB60     		str	r3, [r7, #8]
  91              		.loc 1 370 17
  92 0050 BB6B     		ldr	r3, [r7, #56]
  93 0052 191D     		adds	r1, r3, #4
  94 0054 B963     		str	r1, [r7, #56]
  95              		.loc 1 370 22
  96 0056 1268     		ldr	r2, [r2]	@ float
  97              		.loc 1 370 20
  98 0058 1A60     		str	r2, [r3]	@ float
 371:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 372:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 373:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState;
  99              		.loc 1 373 8
 100 005a FB6B     		ldr	r3, [r7, #60]
 101 005c 7B63     		str	r3, [r7, #52]
 374:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 375:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coefficient pointer */
 376:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 102              		.loc 1 376 8
 103 005e 3B6A     		ldr	r3, [r7, #32]
 104 0060 3B63     		str	r3, [r7, #48]
 377:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 378:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 379:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     acc = 0.0f;
 105              		.loc 1 379 9
 106 0062 4FF00003 		mov	r3, #0
 107 0066 FB62     		str	r3, [r7, #44]	@ float
 380:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 381:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 382:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 383:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 384:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2U;
 385:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 386:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 387:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 388:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 389:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       acc += (*px++) * (*pb++);
 390:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 391:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       acc += (*px++) * (*pb++);
 392:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 393:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       acc += (*px++) * (*pb++);
 394:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 395:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       acc += (*px++) * (*pb++);
 396:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 397:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement loop counter */
 398:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 399:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 400:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 401:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling: Compute remaining taps */
 402:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 403:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 404:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #else
 405:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 406:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize tapCnt with number of samples */
 407:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
ARM GAS  /tmp/ccPNsL7d.s 			page 10


 108              		.loc 1 407 12
 109 0068 BB69     		ldr	r3, [r7, #24]
 110 006a BB62     		str	r3, [r7, #40]
 408:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 409:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 410:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 411:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 111              		.loc 1 411 11
 112 006c 14E0     		b	.L3
 113              	.L4:
 412:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 413:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 414:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       acc += (*px++) * (*pb++);
 114              		.loc 1 414 18
 115 006e 7B6B     		ldr	r3, [r7, #52]
 116 0070 1A1D     		adds	r2, r3, #4
 117 0072 7A63     		str	r2, [r7, #52]
 118              		.loc 1 414 15
 119 0074 93ED007A 		vldr.32	s14, [r3]
 120              		.loc 1 414 28
 121 0078 3B6B     		ldr	r3, [r7, #48]
 122 007a 1A1D     		adds	r2, r3, #4
 123 007c 3A63     		str	r2, [r7, #48]
 124              		.loc 1 414 25
 125 007e D3ED007A 		vldr.32	s15, [r3]
 126              		.loc 1 414 22
 127 0082 67EE277A 		vmul.f32	s15, s14, s15
 128              		.loc 1 414 11
 129 0086 97ED0B7A 		vldr.32	s14, [r7, #44]
 130 008a 77EE277A 		vadd.f32	s15, s14, s15
 131 008e C7ED0B7A 		vstr.32	s15, [r7, #44]
 415:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 416:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 417:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 132              		.loc 1 417 13
 133 0092 BB6A     		ldr	r3, [r7, #40]
 134 0094 013B     		subs	r3, r3, #1
 135 0096 BB62     		str	r3, [r7, #40]
 136              	.L3:
 411:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 137              		.loc 1 411 11
 138 0098 BB6A     		ldr	r3, [r7, #40]
 139 009a 002B     		cmp	r3, #0
 140 009c E7D1     		bne	.L4
 418:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 419:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 420:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Store the result from accumulator into the destination buffer. */
 421:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = acc;
 141              		.loc 1 421 10
 142 009e 3B68     		ldr	r3, [r7]
 143 00a0 1A1D     		adds	r2, r3, #4
 144 00a2 3A60     		str	r2, [r7]
 145              		.loc 1 421 13
 146 00a4 FA6A     		ldr	r2, [r7, #44]	@ float
 147 00a6 1A60     		str	r2, [r3]	@ float
 422:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 423:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
ARM GAS  /tmp/ccPNsL7d.s 			page 11


 424:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     e = (float32_t) *pRef++ - acc;
 148              		.loc 1 424 26
 149 00a8 7B68     		ldr	r3, [r7, #4]
 150 00aa 1A1D     		adds	r2, r3, #4
 151 00ac 7A60     		str	r2, [r7, #4]
 152              		.loc 1 424 9
 153 00ae 93ED007A 		vldr.32	s14, [r3]
 154              		.loc 1 424 7
 155 00b2 D7ED0B7A 		vldr.32	s15, [r7, #44]
 156 00b6 77EE677A 		vsub.f32	s15, s14, s15
 157 00ba C7ED057A 		vstr.32	s15, [r7, #20]
 425:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 158              		.loc 1 425 10
 159 00be BB6C     		ldr	r3, [r7, #72]
 160 00c0 1A1D     		adds	r2, r3, #4
 161 00c2 BA64     		str	r2, [r7, #72]
 162              		.loc 1 425 13
 163 00c4 7A69     		ldr	r2, [r7, #20]	@ float
 164 00c6 1A60     		str	r2, [r3]	@ float
 426:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 427:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Calculation of Weighting factor for updating filter coefficients */
 428:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 165              		.loc 1 428 7
 166 00c8 97ED057A 		vldr.32	s14, [r7, #20]
 167 00cc D7ED077A 		vldr.32	s15, [r7, #28]
 168 00d0 67EE277A 		vmul.f32	s15, s14, s15
 169 00d4 C7ED047A 		vstr.32	s15, [r7, #16]
 429:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 430:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 431:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 432:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     px = pState++;
 170              		.loc 1 432 16
 171 00d8 FB6B     		ldr	r3, [r7, #60]
 172 00da 1A1D     		adds	r2, r3, #4
 173 00dc FA63     		str	r2, [r7, #60]
 174              		.loc 1 432 8
 175 00de 7B63     		str	r3, [r7, #52]
 433:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 434:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coefficient pointer */
 435:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 176              		.loc 1 435 8
 177 00e0 3B6A     		ldr	r3, [r7, #32]
 178 00e2 3B63     		str	r3, [r7, #48]
 436:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 437:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 438:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 439:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling: Compute 4 taps at a time. */
 440:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2U;
 441:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 442:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Update filter coefficients */
 443:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 444:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 445:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 446:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb += w * (*px++);
 447:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 448:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 449:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb += w * (*px++);
ARM GAS  /tmp/ccPNsL7d.s 			page 12


 450:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 451:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 452:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb += w * (*px++);
 453:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 454:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 455:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb += w * (*px++);
 456:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 457:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 458:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement loop counter */
 459:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 460:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 461:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 462:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling: Compute remaining taps */
 463:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4U;
 464:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 465:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #else
 466:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 467:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Initialize tapCnt with number of samples */
 468:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 179              		.loc 1 468 12
 180 00e4 BB69     		ldr	r3, [r7, #24]
 181 00e6 BB62     		str	r3, [r7, #40]
 469:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 470:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 471:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 472:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0U)
 182              		.loc 1 472 11
 183 00e8 16E0     		b	.L5
 184              	.L6:
 473:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 474:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 475:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       *pb += w * (*px++);
 185              		.loc 1 475 22
 186 00ea 7B6B     		ldr	r3, [r7, #52]
 187 00ec 1A1D     		adds	r2, r3, #4
 188 00ee 7A63     		str	r2, [r7, #52]
 189              		.loc 1 475 19
 190 00f0 93ED007A 		vldr.32	s14, [r3]
 191              		.loc 1 475 16
 192 00f4 D7ED047A 		vldr.32	s15, [r7, #16]
 193 00f8 27EE277A 		vmul.f32	s14, s14, s15
 194              		.loc 1 475 11
 195 00fc 3B6B     		ldr	r3, [r7, #48]
 196 00fe D3ED007A 		vldr.32	s15, [r3]
 197 0102 77EE277A 		vadd.f32	s15, s14, s15
 198 0106 3B6B     		ldr	r3, [r7, #48]
 199 0108 C3ED007A 		vstr.32	s15, [r3]
 476:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       pb++;
 200              		.loc 1 476 9
 201 010c 3B6B     		ldr	r3, [r7, #48]
 202 010e 0433     		adds	r3, r3, #4
 203 0110 3B63     		str	r3, [r7, #48]
 477:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 478:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       /* Decrement loop counter */
 479:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 204              		.loc 1 479 13
 205 0112 BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/ccPNsL7d.s 			page 13


 206 0114 013B     		subs	r3, r3, #1
 207 0116 BB62     		str	r3, [r7, #40]
 208              	.L5:
 472:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     {
 209              		.loc 1 472 11
 210 0118 BB6A     		ldr	r3, [r7, #40]
 211 011a 002B     		cmp	r3, #0
 212 011c E5D1     		bne	.L6
 480:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     }
 481:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 482:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement loop counter */
 483:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 213              		.loc 1 483 11
 214 011e 7B6A     		ldr	r3, [r7, #36]
 215 0120 013B     		subs	r3, r3, #1
 216 0122 7B62     		str	r3, [r7, #36]
 217              	.L2:
 367:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 218              		.loc 1 367 9
 219 0124 7B6A     		ldr	r3, [r7, #36]
 220 0126 002B     		cmp	r3, #0
 221 0128 8FD1     		bne	.L7
 484:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 485:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 486:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete.
 487:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      Now copy the last numTaps - 1 samples to the start of the state buffer.
 488:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****      This prepares the state buffer for the next function call. */
 489:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 490:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 491:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 222              		.loc 1 491 15
 223 012a FB68     		ldr	r3, [r7, #12]
 224 012c 5B68     		ldr	r3, [r3, #4]
 225 012e BB63     		str	r3, [r7, #56]
 492:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 493:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* copy data */
 494:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 495:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 496:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Loop unrolling: Compute 4 taps at a time. */
 497:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) >> 2U;
 498:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 499:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 500:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 501:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 502:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 503:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 504:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 505:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 506:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement loop counter */
 507:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 508:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 509:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 510:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Loop unrolling: Compute remaining taps */
 511:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U) % 0x4U;
 512:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 513:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #else
 514:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
ARM GAS  /tmp/ccPNsL7d.s 			page 14


 515:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   /* Initialize tapCnt with number of samples */
 516:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1U);
 226              		.loc 1 516 10
 227 0130 BB69     		ldr	r3, [r7, #24]
 228 0132 013B     		subs	r3, r3, #1
 229 0134 BB62     		str	r3, [r7, #40]
 517:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 518:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 519:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 520:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0U)
 230              		.loc 1 520 9
 231 0136 0AE0     		b	.L8
 232              	.L9:
 521:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 522:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 233              		.loc 1 522 29
 234 0138 FA6B     		ldr	r2, [r7, #60]
 235 013a 131D     		adds	r3, r2, #4
 236 013c FB63     		str	r3, [r7, #60]
 237              		.loc 1 522 17
 238 013e BB6B     		ldr	r3, [r7, #56]
 239 0140 191D     		adds	r1, r3, #4
 240 0142 B963     		str	r1, [r7, #56]
 241              		.loc 1 522 22
 242 0144 1268     		ldr	r2, [r2]	@ float
 243              		.loc 1 522 20
 244 0146 1A60     		str	r2, [r3]	@ float
 523:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 524:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     /* Decrement loop counter */
 525:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 245              		.loc 1 525 11
 246 0148 BB6A     		ldr	r3, [r7, #40]
 247 014a 013B     		subs	r3, r3, #1
 248 014c BB62     		str	r3, [r7, #40]
 249              	.L8:
 520:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   {
 250              		.loc 1 520 9
 251 014e BB6A     		ldr	r3, [r7, #40]
 252 0150 002B     		cmp	r3, #0
 253 0152 F1D1     		bne	.L9
 526:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c ****   }
 527:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** 
 528:./Libraries/CMSIS/DSP/Source/FilteringFunctions/arm_lms_f32.c **** }
 254              		.loc 1 528 1
 255 0154 00BF     		nop
 256 0156 00BF     		nop
 257 0158 4437     		adds	r7, r7, #68
 258              	.LCFI3:
 259              		.cfi_def_cfa_offset 4
 260 015a BD46     		mov	sp, r7
 261              	.LCFI4:
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 015c 5DF8047B 		ldr	r7, [sp], #4
 265              	.LCFI5:
 266              		.cfi_restore 7
 267              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccPNsL7d.s 			page 15


 268 0160 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE145:
 272              		.text
 273              	.Letext0:
 274              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 275              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 276              		.file 4 "/usr/include/newlib/sys/_types.h"
 277              		.file 5 "/usr/include/newlib/sys/reent.h"
 278              		.file 6 "/usr/include/newlib/sys/lock.h"
 279              		.file 7 "/usr/include/newlib/math.h"
 280              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccPNsL7d.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_lms_f32.c
     /tmp/ccPNsL7d.s:17     .text.arm_lms_f32:0000000000000000 $t
     /tmp/ccPNsL7d.s:25     .text.arm_lms_f32:0000000000000000 arm_lms_f32

NO UNDEFINED SYMBOLS
