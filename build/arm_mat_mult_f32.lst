ARM GAS  /tmp/ccS4WyZg.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_mult_f32.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_mult_f32,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_mult_f32
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_mult_f32:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Title:        arm_mat_mult_f32.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Description:  Floating-point matrix multiplication
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /**
ARM GAS  /tmp/ccS4WyZg.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /**
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @defgroup MatrixMult Matrix Multiplication
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Multiplies two matrices.
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  *
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * \image html MatrixMultiplication.gif "Multiplication of two 3 x 3 matrices"
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Matrix multiplication is only defined if the number of columns of the
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * first matrix equals the number of rows of the second matrix.
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * Multiplying an <code>M x N</code> matrix with an <code>N x P</code> matrix results
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * in an <code>M x P</code> matrix.
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * When matrix size checking is enabled, the functions check: (1) that the inner dimensions of
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * <code>pSrcA</code> and <code>pSrcB</code> are equal; and (2) that the size of the output
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * matrix equals the outer dimensions of <code>pSrcA</code> and <code>pSrcB</code>.
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  */
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /**
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @addtogroup MatrixMult
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @{
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  */
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** /**
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @brief Floating-point matrix multiplication.
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[out]      *pDst points to output matrix structure
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * @return     		The function returns either
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****  */
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #if defined(ARM_MATH_NEON)
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #define GROUPOFROWS 8
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** arm_status arm_mat_mult_f32(
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   arm_matrix_instance_f32 * pDst)
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** {
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t sum;                                 /* Accumulator */
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t in1, in2, in3, in4;
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t col, i = 0U, j, row = numRowsA, rowCnt, colCnt;      /* loop counters */
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
ARM GAS  /tmp/ccS4WyZg.s 			page 3


  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32x4_t a0V, a1V, a2V, a3V, a4V, a5V, a6V, a7V;
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32x4_t acc0,acc1,acc2,acc3,acc4,acc5,acc6,acc7,temp;
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32x2_t accum = vdup_n_f32(0);
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1B = pSrcA->pData;    
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1C = pSrcA->pData;    
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1D = pSrcA->pData;  
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1E = pSrcA->pData; 
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1F = pSrcA->pData; 
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1G = pSrcA->pData; 
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1H = pSrcA->pData;   
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pxB,*pxC, *pxD, *pxE, *pxF, *pxG, *pxH;                                 /* Temporary o
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t sum0,sum1, sum2,sum3, sum4, sum5 , sum6, sum7;
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   /* Check for matrix mismatch condition */
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   {
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   }
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   else
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   {
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* Row loop */
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     rowCnt = row >> 3;
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     while(rowCnt > 0)
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     {
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       px = pOut + GROUPOFROWS*i;
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxB = px + numColsB;
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxC = px + 2*numColsB;
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxD = px + 3*numColsB;
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxE = px + 4*numColsB;
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxF = px + 5*numColsB;
 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxG = px + 6*numColsB;
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pxH = px + 7*numColsB;
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       col = numColsB;
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****        ** to the starting address of the pSrcB data */
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pIn2 = pSrcB->pData;
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       j = 0U;
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Column loop */
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       do
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       {
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum0 = 0.0f;
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum1 = 0.0f;
ARM GAS  /tmp/ccS4WyZg.s 			page 4


 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum2 = 0.0f;
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum3 = 0.0f;
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum4 = 0.0f;
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum5 = 0.0f;
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum6 = 0.0f;
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum7 = 0.0f;
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1 = pInA;
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1B = pIn1 + numColsA;
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1C = pIn1 + 2*numColsA;
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1D = pIn1 + 3*numColsA;
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1E = pIn1 + 4*numColsA;
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1F = pIn1 + 5*numColsA;
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1G = pIn1 + 6*numColsA;
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1H = pIn1 + 7*numColsA;
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc0 = vdupq_n_f32(0.0);
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc1 = vdupq_n_f32(0.0);
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc2 = vdupq_n_f32(0.0);
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc3 = vdupq_n_f32(0.0);
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc4 = vdupq_n_f32(0.0);
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc5 = vdupq_n_f32(0.0);
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc6 = vdupq_n_f32(0.0);
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc7 = vdupq_n_f32(0.0);
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Compute 4 MACs simultaneously. */
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA >> 2U;
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Matrix multiplication */
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a0V = vld1q_f32(pIn1);  
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a1V = vld1q_f32(pIn1B);  
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a2V = vld1q_f32(pIn1C); 
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a3V = vld1q_f32(pIn1D); 
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a4V = vld1q_f32(pIn1E); 
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a5V = vld1q_f32(pIn1F); 
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a6V = vld1q_f32(pIn1G); 
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a7V = vld1q_f32(pIn1H); 
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 	  pIn1 += 4;
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1B += 4;
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1C += 4;
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1D += 4;
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1E += 4;
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1F += 4;
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1G += 4;
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1H += 4;
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[0] = *pIn2;
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[1] = *pIn2;
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[2] = *pIn2;
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
ARM GAS  /tmp/ccS4WyZg.s 			page 5


 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[3] = *pIn2;
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc0 = vmlaq_f32(acc0,a0V,temp);
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc1 = vmlaq_f32(acc1,a1V,temp);
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc2 = vmlaq_f32(acc2,a2V,temp);
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc3 = vmlaq_f32(acc3,a3V,temp);
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc4 = vmlaq_f32(acc4,a4V,temp);
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc5 = vmlaq_f32(acc5,a5V,temp);
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc6 = vmlaq_f32(acc6,a6V,temp);
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc7 = vmlaq_f32(acc7,a7V,temp);
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop count */
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc0), vget_high_f32(acc0));
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum0 += accum[0] + accum[1];
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc1), vget_high_f32(acc1));
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum1 += accum[0] + accum[1];
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc2), vget_high_f32(acc2));
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum2 += accum[0] + accum[1];
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc3), vget_high_f32(acc3));
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum3 += accum[0] + accum[1];
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc4), vget_high_f32(acc4));
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum4 += accum[0] + accum[1];
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc5), vget_high_f32(acc5));
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum5 += accum[0] + accum[1];
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc6), vget_high_f32(acc6));
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum6 += accum[0] + accum[1];
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc7), vget_high_f32(acc7));
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum7 += accum[0] + accum[1];
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****          ** No loop unrolling is used. */
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA & 3;
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum0 += *pIn1++ * (*pIn2);
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum1 += *pIn1B++ * (*pIn2);
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum2 += *pIn1C++ * (*pIn2);
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum3 += *pIn1D++ * (*pIn2);
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum4 += *pIn1E++ * (*pIn2);
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum5 += *pIn1F++ * (*pIn2);
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum6 += *pIn1G++ * (*pIn2);
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum7 += *pIn1H++ * (*pIn2);
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
ARM GAS  /tmp/ccS4WyZg.s 			page 6


 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop counter */
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Store the result in the destination buffer */
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *px++ = sum0;
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxB++ = sum1;
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxC++ = sum2;
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxD++ = sum3;
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxE++ = sum4;
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxF++ = sum5;
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxG++ = sum6;
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *pxH++ = sum7;
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         j++;
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pSrcB->pData + j;
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Decrement the column loop counter */
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         col--;
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       } while (col > 0U);
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       i = i + numColsB;
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + GROUPOFROWS*numColsA;
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Decrement the row loop counter */
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       rowCnt--;
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     } 
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /*
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     i was the index of a group of rows computed by previous loop.
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     Now i is the index of a row since below code is computing row per row
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     and no more group of row per group of rows.
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     */
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     i = GROUPOFROWS*i;
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     rowCnt = row & 7;
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     while(rowCnt > 0)
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     {
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       px = pOut + i;
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       col = numColsB;
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****        ** to the starting address of the pSrcB data */
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pIn2 = pSrcB->pData;
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       j = 0U;
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Column loop */
ARM GAS  /tmp/ccS4WyZg.s 			page 7


 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       do
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       {
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum = 0.0f;
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1 = pInA;
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         acc0 = vdupq_n_f32(0.0);
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Compute 4 MACs simultaneously. */
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA >> 2U;
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Matrix multiplication   */
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           a0V = vld1q_f32(pIn1);  // load & separate real/imag pSrcA (de-interleave 2)
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1 += 4;
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[0] = *pIn2;
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[1] = *pIn2;
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[2] = *pIn2;
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           temp[3] = *pIn2;
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           acc0 = vmlaq_f32(acc0,a0V,temp);
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop count */
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         accum = vpadd_f32(vget_low_f32(acc0), vget_high_f32(acc0));
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum += accum[0] + accum[1];
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****          ** No loop unrolling is used. */
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA % 0x4U;
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2)*b(2,1) + ... + a(m,p)*b(p,n) */
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * (*pIn2);
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop counter */
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Store the result in the destination buffer */
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *px++ = sum;
 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         j++;
ARM GAS  /tmp/ccS4WyZg.s 			page 8


 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pSrcB->pData + j;
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Decrement the column loop counter */
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         col--;
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       } while (col > 0U);
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       i = i + numColsB;
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Decrement the row loop counter */
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       rowCnt--;
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     } 
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   }
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   /* Return to application */
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   return (status);
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** }
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #else
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** arm_status arm_mat_mult_f32(
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         arm_matrix_instance_f32 * pDst)
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** {
  28              		.loc 1 402 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 72
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 93B0     		sub	sp, sp, #76
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 80
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
  46              		.loc 1 403 14
  47 000c FB68     		ldr	r3, [r7, #12]
  48 000e 5B68     		ldr	r3, [r3, #4]
  49 0010 7B64     		str	r3, [r7, #68]
 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
  50              		.loc 1 404 14
  51 0012 BB68     		ldr	r3, [r7, #8]
  52 0014 5B68     		ldr	r3, [r3, #4]
  53 0016 3B64     		str	r3, [r7, #64]
ARM GAS  /tmp/ccS4WyZg.s 			page 9


 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  54              		.loc 1 405 14
  55 0018 FB68     		ldr	r3, [r7, #12]
  56 001a 5B68     		ldr	r3, [r3, #4]
  57 001c FB63     		str	r3, [r7, #60]
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  58              		.loc 1 406 14
  59 001e BB68     		ldr	r3, [r7, #8]
  60 0020 5B68     		ldr	r3, [r3, #4]
  61 0022 3B62     		str	r3, [r7, #32]
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
  62              		.loc 1 407 14
  63 0024 7B68     		ldr	r3, [r7, #4]
  64 0026 5B68     		ldr	r3, [r3, #4]
  65 0028 FB61     		str	r3, [r7, #28]
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t sum;                                 /* Accumulator */
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  66              		.loc 1 410 12
  67 002a FB68     		ldr	r3, [r7, #12]
  68 002c 1B88     		ldrh	r3, [r3]	@ movhi
  69 002e 7B83     		strh	r3, [r7, #26]	@ movhi
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
  70              		.loc 1 411 12
  71 0030 BB68     		ldr	r3, [r7, #8]
  72 0032 5B88     		ldrh	r3, [r3, #2]	@ movhi
  73 0034 3B83     		strh	r3, [r7, #24]	@ movhi
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
  74              		.loc 1 412 12
  75 0036 FB68     		ldr	r3, [r7, #12]
  76 0038 5B88     		ldrh	r3, [r3, #2]	@ movhi
  77 003a FB82     		strh	r3, [r7, #22]	@ movhi
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
  78              		.loc 1 413 17
  79 003c 0023     		movs	r3, #0
  80 003e FB62     		str	r3, [r7, #44]
  81              		.loc 1 413 25
  82 0040 7B8B     		ldrh	r3, [r7, #26]
  83 0042 BB62     		str	r3, [r7, #40]
  84              	.L5:
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   arm_status status;                             /* Status of matrix multiplication */
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   /* Check for matrix mismatch condition */
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       (pSrcA->numRows != pDst->numRows)  ||
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       (pSrcB->numCols != pDst->numCols)    )
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   {
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   }
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   else
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   {
ARM GAS  /tmp/ccS4WyZg.s 			page 10


 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* row loop */
 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     do
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     {
 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Output pointer is set to starting address of row being processed */
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       px = pOut + i;
  85              		.loc 1 436 17
  86 0044 FB6A     		ldr	r3, [r7, #44]
  87 0046 9B00     		lsls	r3, r3, #2
  88              		.loc 1 436 10
  89 0048 FA69     		ldr	r2, [r7, #28]
  90 004a 1344     		add	r3, r3, r2
  91 004c BB63     		str	r3, [r7, #56]
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, column loop counter is to be initiated */
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       col = numColsB;
  92              		.loc 1 439 11
  93 004e 3B8B     		ldrh	r3, [r7, #24]
  94 0050 3B63     		str	r3, [r7, #48]
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pIn2 = pSrcB->pData;
  95              		.loc 1 442 12
  96 0052 BB68     		ldr	r3, [r7, #8]
  97 0054 5B68     		ldr	r3, [r3, #4]
  98 0056 3B64     		str	r3, [r7, #64]
  99              	.L4:
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* column loop */
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       do
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       {
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         sum = 0.0f;
 100              		.loc 1 448 13
 101 0058 4FF00003 		mov	r3, #0
 102 005c 7B63     		str	r3, [r7, #52]	@ float
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initialize pointer pIn1 to point to starting address of column being processed */
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1 = pInA;
 103              		.loc 1 451 14
 104 005e FB6B     		ldr	r3, [r7, #60]
 105 0060 7B64     		str	r3, [r7, #68]
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #if defined (ARM_MATH_LOOPUNROLL)
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Loop unrolling: Compute 4 MACs at a time. */
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA >> 2U;
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* matrix multiplication */
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Perform the multiply-accumulates */
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * *pIn2;
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
ARM GAS  /tmp/ccS4WyZg.s 			page 11


 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * *pIn2;
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * *pIn2;
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * *pIn2;
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement loop counter */
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 480:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Loop unrolling: Compute remaining MACs */
 481:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA % 0x4U;
 482:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 483:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #else
 484:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 485:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initialize cntCnt with number of columns */
 486:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA;
 106              		.loc 1 486 16
 107 0062 FB8A     		ldrh	r3, [r7, #22]
 108 0064 7B62     		str	r3, [r7, #36]
 487:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 488:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 489:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0U)
 109              		.loc 1 490 15
 110 0066 17E0     		b	.L2
 111              	.L3:
 491:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 492:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 493:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 494:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Perform the multiply-accumulates */
 495:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * *pIn2;
 112              		.loc 1 495 23
 113 0068 7B6C     		ldr	r3, [r7, #68]
 114 006a 1A1D     		adds	r2, r3, #4
 115 006c 7A64     		str	r2, [r7, #68]
 116              		.loc 1 495 18
 117 006e 93ED007A 		vldr.32	s14, [r3]
 118              		.loc 1 495 28
 119 0072 3B6C     		ldr	r3, [r7, #64]
 120 0074 D3ED007A 		vldr.32	s15, [r3]
 121              		.loc 1 495 26
 122 0078 67EE277A 		vmul.f32	s15, s14, s15
 123              		.loc 1 495 15
 124 007c 97ED0D7A 		vldr.32	s14, [r7, #52]
 125 0080 77EE277A 		vadd.f32	s15, s14, s15
 126 0084 C7ED0D7A 		vstr.32	s15, [r7, #52]
 496:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 127              		.loc 1 496 16
 128 0088 3B8B     		ldrh	r3, [r7, #24]
 129 008a 9B00     		lsls	r3, r3, #2
 130 008c 3A6C     		ldr	r2, [r7, #64]
 131 008e 1344     		add	r3, r3, r2
 132 0090 3B64     		str	r3, [r7, #64]
ARM GAS  /tmp/ccS4WyZg.s 			page 12


 497:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 498:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement loop counter */
 499:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 133              		.loc 1 499 17
 134 0092 7B6A     		ldr	r3, [r7, #36]
 135 0094 013B     		subs	r3, r3, #1
 136 0096 7B62     		str	r3, [r7, #36]
 137              	.L2:
 490:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         {
 138              		.loc 1 490 15
 139 0098 7B6A     		ldr	r3, [r7, #36]
 140 009a 002B     		cmp	r3, #0
 141 009c E4D1     		bne	.L3
 500:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         }
 501:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 502:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Store result in destination buffer */
 503:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         *px++ = sum;
 142              		.loc 1 503 12
 143 009e BB6B     		ldr	r3, [r7, #56]
 144 00a0 1A1D     		adds	r2, r3, #4
 145 00a2 BA63     		str	r2, [r7, #56]
 146              		.loc 1 503 15
 147 00a4 7A6B     		ldr	r2, [r7, #52]	@ float
 148 00a6 1A60     		str	r2, [r3]	@ float
 504:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 505:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Decrement column loop counter */
 506:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         col--;
 149              		.loc 1 506 12
 150 00a8 3B6B     		ldr	r3, [r7, #48]
 151 00aa 013B     		subs	r3, r3, #1
 152 00ac 3B63     		str	r3, [r7, #48]
 507:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 508:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         /* Update pointer pIn2 to point to starting address of next column */
 509:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pInB + (numColsB - col);
 153              		.loc 1 509 33
 154 00ae 3A8B     		ldrh	r2, [r7, #24]
 155 00b0 3B6B     		ldr	r3, [r7, #48]
 156 00b2 D31A     		subs	r3, r2, r3
 157              		.loc 1 509 21
 158 00b4 9B00     		lsls	r3, r3, #2
 159              		.loc 1 509 14
 160 00b6 3A6A     		ldr	r2, [r7, #32]
 161 00b8 1344     		add	r3, r3, r2
 162 00ba 3B64     		str	r3, [r7, #64]
 510:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 511:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       } while (col > 0U);
 163              		.loc 1 511 7
 164 00bc 3B6B     		ldr	r3, [r7, #48]
 165 00be 002B     		cmp	r3, #0
 166 00c0 CAD1     		bne	.L4
 512:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 513:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Update pointer pInA to point to starting address of next row */
 514:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       i = i + numColsB;
 167              		.loc 1 514 13
 168 00c2 3B8B     		ldrh	r3, [r7, #24]
 169              		.loc 1 514 9
 170 00c4 FA6A     		ldr	r2, [r7, #44]
ARM GAS  /tmp/ccS4WyZg.s 			page 13


 171 00c6 1344     		add	r3, r3, r2
 172 00c8 FB62     		str	r3, [r7, #44]
 515:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 173              		.loc 1 515 19
 174 00ca FB8A     		ldrh	r3, [r7, #22]
 175 00cc 9B00     		lsls	r3, r3, #2
 176              		.loc 1 515 12
 177 00ce FA6B     		ldr	r2, [r7, #60]
 178 00d0 1344     		add	r3, r3, r2
 179 00d2 FB63     		str	r3, [r7, #60]
 516:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 517:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       /* Decrement row loop counter */
 518:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****       row--;
 180              		.loc 1 518 10
 181 00d4 BB6A     		ldr	r3, [r7, #40]
 182 00d6 013B     		subs	r3, r3, #1
 183 00d8 BB62     		str	r3, [r7, #40]
 519:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 520:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     } while (row > 0U);
 184              		.loc 1 520 5
 185 00da BB6A     		ldr	r3, [r7, #40]
 186 00dc 002B     		cmp	r3, #0
 187 00de B1D1     		bne	.L5
 521:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 522:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 523:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 188              		.loc 1 523 12
 189 00e0 0023     		movs	r3, #0
 190 00e2 7B75     		strb	r3, [r7, #21]
 524:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   }
 525:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** 
 526:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   /* Return to application */
 527:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c ****   return (status);
 191              		.loc 1 527 10
 192 00e4 97F91530 		ldrsb	r3, [r7, #21]
 528:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_f32.c **** }
 193              		.loc 1 528 1
 194 00e8 1846     		mov	r0, r3
 195 00ea 4C37     		adds	r7, r7, #76
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 4
 198 00ec BD46     		mov	sp, r7
 199              	.LCFI4:
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 00ee 5DF8047B 		ldr	r7, [sp], #4
 203              	.LCFI5:
 204              		.cfi_restore 7
 205              		.cfi_def_cfa_offset 0
 206 00f2 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE145:
 210              		.text
 211              	.Letext0:
 212              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 213              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 214              		.file 4 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccS4WyZg.s 			page 14


 215              		.file 5 "/usr/include/newlib/sys/reent.h"
 216              		.file 6 "/usr/include/newlib/sys/lock.h"
 217              		.file 7 "/usr/include/newlib/math.h"
 218              		.file 8 "./Libraries/CMSIS/DSP/Include/arm_math.h"
ARM GAS  /tmp/ccS4WyZg.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_mult_f32.c
     /tmp/ccS4WyZg.s:17     .text.arm_mat_mult_f32:0000000000000000 $t
     /tmp/ccS4WyZg.s:25     .text.arm_mat_mult_f32:0000000000000000 arm_mat_mult_f32

NO UNDEFINED SYMBOLS
