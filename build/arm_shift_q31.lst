ARM GAS  /tmp/ccaqqIeo.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_shift_q31.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_shift_q31,"ax",%progbits
  17              		.align	1
  18              		.global	arm_shift_q31
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_shift_q31:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c"
   1:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Title:        arm_shift_q31.c
   4:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Description:  Shifts the elements of a Q31 vector by a specified number of bits
   5:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
   6:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
   9:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /*
  12:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
  14:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
  16:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
  20:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  *
  22:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  */
  28:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  29:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  31:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /**
ARM GAS  /tmp/ccaqqIeo.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @ingroup groupMath
  33:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  */
  34:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /**
  35:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @defgroup BasicShift Vector Shift
  36:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  37:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   Shifts the elements of a fixed-point vector by a specified number of bits.
  38:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   There are separate functions for Q7, Q15, and Q31 data types.
  39:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   The underlying algorithm used is:
  40:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  41:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   <pre>
  42:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       pDst[n] = pSrc[n] << shift,   0 <= n < blockSize.
  43:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   </pre>
  44:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  45:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   If <code>shift</code> is positive then the elements of the vector are shifted to the left.
  46:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   If <code>shift</code> is negative then the elements of the vector are shifted to the right.
  47:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  48:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   The functions support in-place computation allowing the source and destination
  49:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   pointers to reference the same memory buffer.
  50:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  */
  51:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  52:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /**
  53:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @addtogroup BasicShift
  54:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @{
  55:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  */
  56:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  57:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** /**
  58:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @brief         Shifts the elements of a Q31 vector a specified number of bits.
  59:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @param[in]     pSrc       points to the input vector
  60:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @param[in]     shiftBits  number of bits to shift.  A positive value shifts left; a negative valu
  61:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @param[out]    pDst       points to the output vector
  62:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @param[in]     blockSize  number of samples in the vector
  63:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @return        none
  64:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  65:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   @par           Scaling and Overflow Behavior
  66:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****                    The function uses saturating arithmetic.
  67:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****                    Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated
  68:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****  */
  69:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  70:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** void arm_shift_q31(
  71:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   const q31_t * pSrc,
  72:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         int8_t shiftBits,
  73:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         q31_t * pDst,
  74:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         uint32_t blockSize)
  75:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** {
  28              		.loc 1 75 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 F0B4     		push	{r4, r5, r6, r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 7, -4
  40 0002 88B0     		sub	sp, sp, #32
ARM GAS  /tmp/ccaqqIeo.s 			page 3


  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 F860     		str	r0, [r7, #12]
  47 0008 7A60     		str	r2, [r7, #4]
  48 000a 3B60     		str	r3, [r7]
  49 000c 0B46     		mov	r3, r1
  50 000e FB72     		strb	r3, [r7, #11]
  76:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         uint32_t blkCnt;                               /* Loop counter */
  77:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
  51              		.loc 1 77 35
  52 0010 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
  53              		.loc 1 77 17
  54 0012 23F07F03 		bic	r3, r3, #127
  55 0016 FB76     		strb	r3, [r7, #27]
  78:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  79:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** #if defined (ARM_MATH_LOOPUNROLL)
  80:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  81:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   q31_t in, out;                                 /* Temporary variables */
  82:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  83:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   /* Loop unrolling: Compute 4 outputs at a time */
  84:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize >> 2U;
  85:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  86:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   /* If the shift value is positive then do right shift else left shift */
  87:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   if (sign == 0U)
  88:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   {
  89:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
  90:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
  91:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* C = A << shiftBits */
  92:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
  93:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
  94:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
  95:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
  96:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
  97:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
  98:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
  99:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 100:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 101:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 102:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 103:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 104:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 105:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 106:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 107:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 108:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 109:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 110:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 111:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 112:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       in = *pSrc++;
 113:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       out = in << shiftBits;
 114:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       if (in != (out >> shiftBits))
 115:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****         out = 0x7FFFFFFF ^ (in >> 31);
 116:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = out;
 117:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
ARM GAS  /tmp/ccaqqIeo.s 			page 4


 118:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 119:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 120:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     }
 121:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   }
 122:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   else
 123:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   {
 124:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 125:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
 126:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* C = A >> shiftBits */
 127:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 128:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store results in destination buffer. */
 129:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 130:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 131:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 132:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 133:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 134:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 135:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 136:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     }
 137:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   }
 138:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 139:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   /* Loop unrolling: Compute remaining outputs */
 140:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize % 0x4U;
 141:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 142:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** #else
 143:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 144:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   /* Initialize blkCnt with number of samples */
 145:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   blkCnt = blockSize;
  56              		.loc 1 145 10
  57 0018 3B68     		ldr	r3, [r7]
  58 001a FB61     		str	r3, [r7, #28]
 146:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 147:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 148:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 149:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   /* If the shift value is positive then do right shift else left shift */
 150:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   if (sign == 0U)
  59              		.loc 1 150 6
  60 001c FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
  61 001e 002B     		cmp	r3, #0
  62 0020 4DD1     		bne	.L9
 151:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   {
 152:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
  63              		.loc 1 152 11
  64 0022 38E0     		b	.L3
  65              	.L7:
 153:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
 154:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* C = A << shiftBits */
 155:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 156:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
 157:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
  66              		.loc 1 157 46
  67 0024 FB68     		ldr	r3, [r7, #12]
  68 0026 1A1D     		adds	r2, r3, #4
  69 0028 FA60     		str	r2, [r7, #12]
  70              		.loc 1 157 41
  71 002a 1B68     		ldr	r3, [r3]
  72              		.loc 1 157 33
ARM GAS  /tmp/ccaqqIeo.s 			page 5


  73 002c 1A46     		mov	r2, r3
  74 002e 4FEAE273 		asr	r3, r2, #31
  75              		.loc 1 157 17
  76 0032 97F90B10 		ldrsb	r1, [r7, #11]
  77 0036 A1F12006 		sub	r6, r1, #32
  78 003a C1F12000 		rsb	r0, r1, #32
  79 003e 03FA01F5 		lsl	r5, r3, r1
  80 0042 02FA06F6 		lsl	r6, r2, r6
  81 0046 3543     		orrs	r5, r5, r6
  82 0048 22FA00F0 		lsr	r0, r2, r0
  83 004c 0543     		orrs	r5, r5, r0
  84 004e 02FA01F4 		lsl	r4, r2, r1
  85              		.loc 1 157 12
  86 0052 7E68     		ldr	r6, [r7, #4]
  87 0054 331D     		adds	r3, r6, #4
  88 0056 7B60     		str	r3, [r7, #4]
  89 0058 C7E90445 		strd	r4, [r7, #16]
  90              	.LBB4:
  91              	.LBB5:
  92              		.file 2 "./Libraries/CMSIS/DSP/Include/arm_math.h"
   1:./Libraries/CMSIS/DSP/Include/arm_math.h **** /******************************************************************************
   2:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @file     arm_math.h
   3:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @brief    Public header file for CMSIS DSP Library
   4:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @version  V1.6.0
   5:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @date     18. March 2019
   6:./Libraries/CMSIS/DSP/Include/arm_math.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/DSP/Include/arm_math.h **** /*
   8:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved.
   9:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  10:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  12:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  16:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  18:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * limitations under the License.
  23:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
  24:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
  25:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
  26:./Libraries/CMSIS/DSP/Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  27:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  28:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Introduction
  29:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  30:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  31:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  32:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  33:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  34:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  35:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Basic math functions
  36:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Fast math functions
  37:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Complex math functions
ARM GAS  /tmp/ccaqqIeo.s 			page 6


  38:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Filters
  39:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Matrix functions
  40:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Transform functions
  41:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Motor control functions
  42:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Statistical functions
  43:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Support functions
  44:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Interpolation functions
  45:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  46:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  47:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  48:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  49:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Using the Library
  50:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  51:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  52:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  53:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  54:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  55:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  56:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  57:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  58:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  59:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  60:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  61:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  62:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  63:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  64:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  65:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  66:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  67:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (Armv8-M Baseline, Little endian)
  68:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (Armv8-M Mainline, Little endian)
  69:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (Armv8-M Mainline, Little endian, Single Precision Floating Point 
  70:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (Armv8-M Mainline, Little endian, DSP instructions)
  71:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (Armv8-M Mainline, Little endian, DSP instructions, Single Precis
  72:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  73:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  74:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  75:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  76:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  77:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  78:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Examples
  79:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * --------
  80:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  81:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  82:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  83:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Toolchain Support
  84:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  85:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  86:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has been developed and tested with MDK version 5.14.0.0
  87:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  88:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  89:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Building the Library
  90:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  91:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  92:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains a project file to rebuild libraries on MDK toolchain in the <co
  93:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
  94:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
ARM GAS  /tmp/ccaqqIeo.s 			page 7


  95:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  96:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
  97:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  98:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Preprocessor Macros
  99:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 100:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 101:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Each library project have different preprocessor macros.
 102:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 103:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 104:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 105:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 106:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 107:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 108:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 109:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 110:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 111:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 112:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 113:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 114:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 115:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_LOOPUNROLL:
 116:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 117:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_LOOPUNROLL to enable manual loop unrolling in DSP functions
 118:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 119:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON:
 120:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 121:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON to enable Neon versions of the DSP functions.
 122:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * It is not enabled by default when Neon is available because performances are 
 123:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * dependent on the compiler and target architecture.
 124:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 125:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON_EXPERIMENTAL:
 126:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 127:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON_EXPERIMENTAL to enable experimental Neon versions of 
 128:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * of some DSP functions. Experimental Neon versions currently do not have better
 129:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * performances than the scalar versions.
 130:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 131:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 132:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 133:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * -----------------------------
 134:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 135:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 136:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |File/Folder                      |Content                                                    
 137:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |---------------------------------|-----------------------------------------------------------
 138:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP     | This documentation                                        
 139:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\DSP_Lib_TestSuite | DSP_Lib test suite                                        
 140:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Examples          | Example projects demonstrating the usage of the library fu
 141:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Include           | DSP_Lib include files                                     
 142:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Lib               | DSP_Lib binaries                                          
 143:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Projects          | Projects to rebuild DSP_Lib binaries                      
 144:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Source            | DSP_Lib source files                                      
 145:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 146:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 147:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Revision History of CMSIS-DSP
 148:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 149:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 150:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 151:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
ARM GAS  /tmp/ccaqqIeo.s 			page 8


 152:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 153:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 154:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 155:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 156:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 157:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 158:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 159:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 160:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 161:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * operate on individual values and not arrays.
 162:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 163:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 164:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 165:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 166:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 167:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 168:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 169:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 170:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * (real, imag, real, imag, ...).
 171:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 172:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 173:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * real values.
 174:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 175:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 176:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 177:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 178:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 179:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 180:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 181:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 182:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 183:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 184:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 185:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * the type
 186:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 187:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * below:
 188:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 189:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     typedef struct
 190:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     {
 191:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 192:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 193:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 194:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 195:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 196:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 197:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 198:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 199:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 200:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 201:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * matrix element (i, j) is stored at:
 202:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 203:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     pData[i*numCols + j]
 204:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 205:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 206:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Init Functions
 207:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 208:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data structure.
ARM GAS  /tmp/ccaqqIeo.s 			page 9


 209:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 210:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Refer to \ref arm_mat_init_f32(), \ref arm_mat_init_q31() and \ref arm_mat_init_q15()
 211:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * for floating-point, Q31 and Q15 types,  respectively.
 212:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 213:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par
 214:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 215:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 216:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * To place the instance structure in a const data
 217:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 218:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 219:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 220:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 221:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 222:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 223:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 224:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 225:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data array.
 226:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 227:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Size Checking
 228:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 229:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * output matrices. For example, the matrix addition function verifies that the
 230:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 231:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * columns. If the size check fails the functions return:
 232:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 233:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 234:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 235:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Otherwise the functions return
 236:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 237:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 238:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 239:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 240:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 241:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 242:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 243:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 244:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 245:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and size checking is enabled. By changing the project settings and
 246:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 247:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * run a bit faster. With size checking disabled the functions always
 248:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 249:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 250:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 251:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 252:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 253:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 254:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 255:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 256:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupController Controller Functions
 257:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 258:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 259:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 260:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 261:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 262:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 263:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 264:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 265:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
ARM GAS  /tmp/ccaqqIeo.s 			page 10


 266:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 267:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 268:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 269:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 270:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 271:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 272:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 273:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 274:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 275:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupExamples Examples
 276:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 277:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 278:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 279:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef _ARM_MATH_H
 280:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _ARM_MATH_H
 281:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 282:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Compiler specific diagnostic adjustment */
 283:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 284:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 285:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 286:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 287:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 288:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic push
 289:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wsign-conversion"
 290:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wconversion"
 291:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wunused-parameter"
 292:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 293:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 294:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 295:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 296:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 297:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 298:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 299:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 300:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 301:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( _MSC_VER )
 302:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 303:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 304:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 305:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 306:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 307:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 308:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Included for instrinsics definitions */
 309:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if !defined ( _MSC_VER )
 310:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "cmsis_compiler.h"
 311:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 312:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <stdint.h>
 313:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __STATIC_FORCEINLINE static __forceinline
 314:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __ALIGNED(x) __declspec(align(x))
 315:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_ENTER
 316:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_EXIT
 317:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_ENTER 
 318:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
 319:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 320:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 321:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "string.h"
 322:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "math.h"
ARM GAS  /tmp/ccaqqIeo.s 			page 11


 323:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "float.h"
 324:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 325:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* evaluate ARM DSP feature */
 326:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
 327:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define ARM_MATH_DSP                   1
 328:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 329:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 330:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if defined(__ARM_NEON)
 331:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <arm_neon.h>
 332:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 333:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 334:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 335:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifdef   __cplusplus
 336:./Libraries/CMSIS/DSP/Include/arm_math.h **** extern "C"
 337:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 338:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 339:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 340:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 341:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 342:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 344:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 345:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q15          0x5
 347:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef PI
 349:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define PI               3.14159265358979f
 350:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 351:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 352:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 353:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 355:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 356:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 363:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 364:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 366:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 370:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 371:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 372:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 373:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 374:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 375:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef enum
 376:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 377:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SUCCESS        =  0,        /**< No error */
 378:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 379:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR   = -2,        /**< Length of data buffer is incorrect */
ARM GAS  /tmp/ccaqqIeo.s 			page 12


 380:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH  = -3,        /**< Size of matrices is not compatible with the operation
 381:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_NANINF         = -4,        /**< Not-a-number (NaN) or infinity is generated */
 382:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SINGULAR       = -5,        /**< Input matrix is singular and cannot be inverted */
 383:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_TEST_FAILURE   = -6         /**< Test Failed */
 384:./Libraries/CMSIS/DSP/Include/arm_math.h ****   } arm_status;
 385:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 386:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 387:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 388:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 389:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int8_t q7_t;
 390:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 391:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 392:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 393:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 394:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int16_t q15_t;
 395:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 396:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 397:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 398:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 399:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int32_t q31_t;
 400:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 401:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 402:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 403:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 404:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int64_t q63_t;
 405:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 406:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 407:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 408:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 409:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef float float32_t;
 410:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 411:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 412:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 413:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 414:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef double float64_t;
 415:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 416:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 417:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 418:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief definition to read/write two 16 bit values.
 419:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @deprecated
 420:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 421:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 422:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 423:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 424:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 425:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 426:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 427:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 428:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 429:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 430:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 431:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 432:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 433:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 434:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE __un(aligned) int32_t
 435:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined(_MSC_VER )
 436:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
ARM GAS  /tmp/ccaqqIeo.s 			page 13


 437:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 438:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 439:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 440:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 441:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 442:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32_CONST(addr)  ( (__SIMD32_TYPE * )   (addr))
 443:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE * )   (addr))
 444:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD64(addr)        (*(      int64_t **) & (addr))
 445:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 446:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* SIMD replacement */
 447:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 448:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 449:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 450:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer.
 451:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 452:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 453:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 454:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2 (
 455:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t * pQ15)
 456:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 457:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 458:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 459:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, pQ15, 4);
 460:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 461:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 462:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 463:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 464:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 465:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and increment pointer afterwards.
 466:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 467:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 468:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 469:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_ia (
 470:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15)
 471:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 472:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 473:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ15, 4);
 475:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 476:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 477:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 478:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 479:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 480:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 481:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and decrement pointer afterwards.
 482:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 483:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 484:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 485:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_da (
 486:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15)
 487:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 488:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 489:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 490:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ15, 4);
 491:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 -= 2;
 492:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 493:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
ARM GAS  /tmp/ccaqqIeo.s 			page 14


 494:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 495:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 496:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 497:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer and increment pointer afterwards.
 498:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 499:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 500:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
 501:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 502:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q15x2_ia (
 503:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15,
 504:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t    value)
 505:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 506:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 507:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 508:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (*pQ15, &val, 4);
 509:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 510:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 511:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 512:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 513:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 2 Q15 to Q15 pointer.
 514:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 515:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 516:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
 517:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 518:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q15x2 (
 519:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t * pQ15,
 520:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t   value)
 521:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 522:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 523:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 524:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (pQ15, &val, 4);
 525:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 526:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 527:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 528:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 529:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and increment pointer afterwards.
 530:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 531:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 532:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 533:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_ia (
 534:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7)
 535:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 536:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 537:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 538:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ7, 4);
 539:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 += 4;
 540:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 541:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 542:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 543:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 544:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 545:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 4 Q7 from Q7 pointer and decrement pointer afterwards.
 546:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 547:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 548:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 549:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q7x4_da (
 550:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7)
ARM GAS  /tmp/ccaqqIeo.s 			page 15


 551:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 552:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 553:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 554:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ7, 4);
 555:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 -= 4;
 556:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 557:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 558:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 559:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 560:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 561:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Write 4 Q7 to Q7 pointer and increment pointer afterwards.
 562:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ7       points to input value
 563:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     value     Q31 value
 564:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        none
 565:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 566:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE void write_q7x4_ia (
 567:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q7_t ** pQ7,
 568:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t   value)
 569:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 570:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val = value;
 571:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 572:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (*pQ7, &val, 4);
 573:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ7 += 4;
 574:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 575:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 576:./Libraries/CMSIS/DSP/Include/arm_math.h **** /*
 577:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 578:./Libraries/CMSIS/DSP/Include/arm_math.h **** Normally those kind of definitions are in a compiler file
 579:./Libraries/CMSIS/DSP/Include/arm_math.h **** in Core or Core_A.
 580:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 581:./Libraries/CMSIS/DSP/Include/arm_math.h **** But for MSVC compiler it is a bit special. The goal is very specific
 582:./Libraries/CMSIS/DSP/Include/arm_math.h **** to CMSIS-DSP and only to allow the use of this library from other
 583:./Libraries/CMSIS/DSP/Include/arm_math.h **** systems like Python or Matlab.
 584:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 585:./Libraries/CMSIS/DSP/Include/arm_math.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
 586:./Libraries/CMSIS/DSP/Include/arm_math.h **** compiler file in Core or Core_A would not make sense.
 587:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 588:./Libraries/CMSIS/DSP/Include/arm_math.h **** */
 589:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if defined ( _MSC_VER )
 590:./Libraries/CMSIS/DSP/Include/arm_math.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
 591:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 592:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (data == 0U) { return 32U; }
 593:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 594:./Libraries/CMSIS/DSP/Include/arm_math.h ****       uint32_t count = 0U;
 595:./Libraries/CMSIS/DSP/Include/arm_math.h ****       uint32_t mask = 0x80000000U;
 596:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 597:./Libraries/CMSIS/DSP/Include/arm_math.h ****       while ((data & mask) == 0U)
 598:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 599:./Libraries/CMSIS/DSP/Include/arm_math.h ****         count += 1U;
 600:./Libraries/CMSIS/DSP/Include/arm_math.h ****         mask = mask >> 1U;
 601:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 602:./Libraries/CMSIS/DSP/Include/arm_math.h ****       return count;
 603:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 604:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 605:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 606:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 607:./Libraries/CMSIS/DSP/Include/arm_math.h ****     if ((sat >= 1U) && (sat <= 32U))
ARM GAS  /tmp/ccaqqIeo.s 			page 16


 608:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 609:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 610:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const int32_t min = -1 - max ;
 611:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (val > max)
 612:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 613:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return max;
 614:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 615:./Libraries/CMSIS/DSP/Include/arm_math.h ****       else if (val < min)
 616:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 617:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return min;
 618:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 619:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 620:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return val;
 621:./Libraries/CMSIS/DSP/Include/arm_math.h ****   }
 622:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 623:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 624:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 625:./Libraries/CMSIS/DSP/Include/arm_math.h ****     if (sat <= 31U)
 626:./Libraries/CMSIS/DSP/Include/arm_math.h ****     {
 627:./Libraries/CMSIS/DSP/Include/arm_math.h ****       const uint32_t max = ((1U << sat) - 1U);
 628:./Libraries/CMSIS/DSP/Include/arm_math.h ****       if (val > (int32_t)max)
 629:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 630:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return max;
 631:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 632:./Libraries/CMSIS/DSP/Include/arm_math.h ****       else if (val < 0)
 633:./Libraries/CMSIS/DSP/Include/arm_math.h ****       {
 634:./Libraries/CMSIS/DSP/Include/arm_math.h ****         return 0U;
 635:./Libraries/CMSIS/DSP/Include/arm_math.h ****       }
 636:./Libraries/CMSIS/DSP/Include/arm_math.h ****     }
 637:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return (uint32_t)val;
 638:./Libraries/CMSIS/DSP/Include/arm_math.h ****   }
 639:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 640:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 641:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef ARM_MATH_DSP
 642:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 643:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 644:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 645:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 646:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                       (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 647:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 648:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                       (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 649:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 650:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 651:./Libraries/CMSIS/DSP/Include/arm_math.h ****    /**
 652:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 653:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 654:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 655:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 656:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 657:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 658:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 659:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 660:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 661:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 662:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 663:./Libraries/CMSIS/DSP/Include/arm_math.h ****                                   (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 664:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
ARM GAS  /tmp/ccaqqIeo.s 			page 17


 665:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 666:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 667:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 668:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 669:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 670:./Libraries/CMSIS/DSP/Include/arm_math.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
 671:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q63_t x)
 672:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 673:./Libraries/CMSIS/DSP/Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  93              		.loc 2 673 24
  94 005c D7E90401 		ldrd	r0, [r7, #16]
  95 0060 4FF00002 		mov	r2, #0
  96 0064 4FF00003 		mov	r3, #0
  97 0068 0A00     		movs	r2, r1
  98 006a CB17     		asrs	r3, r1, #31
  99              		.loc 2 673 35
 100 006c 3B69     		ldr	r3, [r7, #16]
 101              		.loc 2 673 45
 102 006e DB17     		asrs	r3, r3, #31
 674:./Libraries/CMSIS/DSP/Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 103              		.loc 2 674 44
 104 0070 9A42     		cmp	r2, r3
 105 0072 0BD0     		beq	.L4
 106              		.loc 2 674 34
 107 0074 D7E90401 		ldrd	r0, [r7, #16]
 108 0078 4FF00002 		mov	r2, #0
 109 007c 4FF00003 		mov	r3, #0
 110 0080 CA17     		asrs	r2, r1, #31
 111 0082 CB17     		asrs	r3, r1, #31
 112              		.loc 2 674 44
 113 0084 6FF00043 		mvn	r3, #-2147483648
 114 0088 5340     		eors	r3, r3, r2
 115 008a 00E0     		b	.L11
 116              	.L4:
 117 008c 3B69     		ldr	r3, [r7, #16]
 118              	.L11:
 119              	.LBE5:
 120              	.LBE4:
 121              		.loc 1 157 15
 122 008e 3360     		str	r3, [r6]
 158:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 159:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 160:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 123              		.loc 1 160 13
 124 0090 FB69     		ldr	r3, [r7, #28]
 125 0092 013B     		subs	r3, r3, #1
 126 0094 FB61     		str	r3, [r7, #28]
 127              	.L3:
 152:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
 128              		.loc 1 152 11
 129 0096 FB69     		ldr	r3, [r7, #28]
 130 0098 002B     		cmp	r3, #0
 131 009a C3D1     		bne	.L7
 161:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     }
 162:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   }
 163:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   else
 164:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   {
ARM GAS  /tmp/ccaqqIeo.s 			page 18


 165:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     while (blkCnt > 0U)
 166:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
 167:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* C = A >> shiftBits */
 168:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 169:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Shift input and store result in destination buffer. */
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 171:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 172:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       /* Decrement loop counter */
 173:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****       blkCnt--;
 174:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     }
 175:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****   }
 176:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 177:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** }
 132              		.loc 1 177 1
 133 009c 12E0     		b	.L12
 134              	.L10:
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 135              		.loc 1 170 23
 136 009e FB68     		ldr	r3, [r7, #12]
 137 00a0 1A1D     		adds	r2, r3, #4
 138 00a2 FA60     		str	r2, [r7, #12]
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 139              		.loc 1 170 18
 140 00a4 1968     		ldr	r1, [r3]
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 141              		.loc 1 170 29
 142 00a6 97F90B30 		ldrsb	r3, [r7, #11]
 143 00aa 5A42     		rsbs	r2, r3, #0
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 144              		.loc 1 170 12
 145 00ac 7B68     		ldr	r3, [r7, #4]
 146 00ae 181D     		adds	r0, r3, #4
 147 00b0 7860     		str	r0, [r7, #4]
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 148              		.loc 1 170 26
 149 00b2 41FA02F2 		asr	r2, r1, r2
 170:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c **** 
 150              		.loc 1 170 15
 151 00b6 1A60     		str	r2, [r3]
 173:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     }
 152              		.loc 1 173 13
 153 00b8 FB69     		ldr	r3, [r7, #28]
 154 00ba 013B     		subs	r3, r3, #1
 155 00bc FB61     		str	r3, [r7, #28]
 156              	.L9:
 165:./Libraries/CMSIS/DSP/Source/BasicMathFunctions/arm_shift_q31.c ****     {
 157              		.loc 1 165 11
 158 00be FB69     		ldr	r3, [r7, #28]
 159 00c0 002B     		cmp	r3, #0
 160 00c2 ECD1     		bne	.L10
 161              	.L12:
 162              		.loc 1 177 1
 163 00c4 00BF     		nop
 164 00c6 2037     		adds	r7, r7, #32
 165              	.LCFI3:
 166              		.cfi_def_cfa_offset 16
 167 00c8 BD46     		mov	sp, r7
ARM GAS  /tmp/ccaqqIeo.s 			page 19


 168              	.LCFI4:
 169              		.cfi_def_cfa_register 13
 170              		@ sp needed
 171 00ca F0BC     		pop	{r4, r5, r6, r7}
 172              	.LCFI5:
 173              		.cfi_restore 7
 174              		.cfi_restore 6
 175              		.cfi_restore 5
 176              		.cfi_restore 4
 177              		.cfi_def_cfa_offset 0
 178 00cc 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE145:
 182              		.text
 183              	.Letext0:
 184              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 185              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 186              		.file 5 "/usr/include/newlib/sys/_types.h"
 187              		.file 6 "/usr/include/newlib/sys/reent.h"
 188              		.file 7 "/usr/include/newlib/sys/lock.h"
 189              		.file 8 "/usr/include/newlib/math.h"
ARM GAS  /tmp/ccaqqIeo.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_shift_q31.c
     /tmp/ccaqqIeo.s:17     .text.arm_shift_q31:0000000000000000 $t
     /tmp/ccaqqIeo.s:25     .text.arm_shift_q31:0000000000000000 arm_shift_q31

NO UNDEFINED SYMBOLS
