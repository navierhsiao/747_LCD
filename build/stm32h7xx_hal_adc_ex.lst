ARM GAS  /tmp/cc6jq3Wn.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_adc_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.LL_ADC_SetCommonPathInternalCh,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	LL_ADC_SetCommonPathInternalCh:
  25              	.LFB147:
  26              		.file 1 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
   1:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @file    stm32h7xx_ll_adc.h
   4:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   7:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @attention
   8:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
   9:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  10:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  12:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  17:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
  18:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  19:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  20:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifndef STM32H7xx_LL_ADC_H
  22:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define STM32H7xx_LL_ADC_H
  23:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  24:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifdef __cplusplus
  25:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** extern "C" {
  26:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
  27:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  28:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #include "stm32h7xx.h"
  30:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  31:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @addtogroup STM32H7xx_LL_Driver
  32:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /tmp/cc6jq3Wn.s 			page 2


  33:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  34:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  35:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  36:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  37:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  39:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  40:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  41:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  44:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  47:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  48:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC calibration:                                         */
  50:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC calibration factors configuration */
  51:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  52:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_CALIB_OFFSET, LL_ADC_CALIB_LINEARITY, ...   */
  53:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
  54:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
  55:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration configuration: configuration before calibration start    */
  56:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration factors: register offset                                 */
  57:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_OFFSET_REGOFFSET    (0x00000000UL) /* Register CALFACT defined as referenc
  58:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_LINEARITY_REGOFFSET (0x00000001UL) /* Register CALFACT2 offset vs register
  59:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_REGOFFSET_MASK      (ADC_CALIB_FACTOR_OFFSET_REGOFFSET | ADC_CALIB_FACTOR_
  60:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_MASK                  (ADC_CR_ADCALLIN)
  61:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_BINARY_MASK           (ADC_CALIB_FACTOR_REGOFFSET_MASK) /* Mask to get binar
  62:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  64:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  65:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  66:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer register offset                                                */
  67:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  68:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  69:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  70:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  71:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  72:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  73:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  74:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  75:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  76:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  77:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  78:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  79:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  80:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  81:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  82:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR1_SQ1" po
  83:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR1_SQ2" po
  84:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR1_SQ3" po
  85:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR1_SQ4" po
  86:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_SQR2_SQ5" po
  87:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR2_SQ6" po
  88:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR2_SQ7" po
  89:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR2_SQ8" po
ARM GAS  /tmp/cc6jq3Wn.s 			page 3


  90:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR2_SQ9" po
  91:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR3_SQ10" p
  92:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR3_SQ11" p
  93:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL) /* Value equivalent to bitfield "ADC_SQR3_SQ12" p
  94:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL) /* Value equivalent to bitfield "ADC_SQR3_SQ13" p
  95:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL) /* Value equivalent to bitfield "ADC_SQR3_SQ14" p
  96:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR4_SQ15" p
  97:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR4_SQ16" p
  98:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  99:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
 102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
 103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - data register offset                                                     */
 104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
 105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
 107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
 109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
 110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
 111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
 112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger source                                                   */
 129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger edge                                                     */
 130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
ARM GAS  /tmp/cc6jq3Wn.s 			page 4


 147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR_EXTSEL"
 150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR_EXTEN" 
 151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger source                                                  */
 157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger edge                                                    */
 158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U 
 164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  ( 2UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTSEL
 178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   ( 6UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTEN"
 179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 5


 204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_BITFIELD            (ADC_AWD2CR_AWD2CH_19)
 259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
ARM GAS  /tmp/cc6jq3Wn.s 			page 6


 261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_SMP                 (ADC_SMPR2_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
 287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection on groups.                                                     */
 306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
ARM GAS  /tmp/cc6jq3Wn.s 			page 7


 318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 thresholds registers */
 338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_TRX_REGOFFSET to spare 32 bits space */
 339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_VAL      (0x00000022UL)
 341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Legacy literals */
 343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1_TR                      LL_ADC_AWD1
 344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2_TR                      LL_ADC_AWD2
 345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3_TR                      LL_ADC_AWD3
 346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits positions */
 357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS_ADC3    (ADC3_CFGR_RES_Pos)
 363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits groups */
 367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC internal channels related definitions */
 371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x8fff810UL))  /* Internal voltage referen
 374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Address related to STM32
ARM GAS  /tmp/cc6jq3Wn.s 			page 8


 375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FF1E860UL)) /* Internal voltage referen
 377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3300UL)                     /* Analog voltage reference
 379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Temperature sensor */
 380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x8fff814UL))  /* Internal temperature sen
 382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x8fff818UL))  /* Internal temperature sen
 383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Addresses related to STM
 384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FF1E820UL)) /* Internal temperature sen
 386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FF1E840UL)) /* Internal temperature sen
 387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3300UL)                     /* Analog voltage reference
 392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Registers addresses with ADC linearity calibration content (programmed during device production,
 394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_1_ADDR ((uint32_t*) (0x1FF1EC00UL))
 395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_2_ADDR ((uint32_t*) (0x1FF1EC04UL))
 396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_3_ADDR ((uint32_t*) (0x1FF1EC08UL))
 397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_4_ADDR ((uint32_t*) (0x1FF1EC0CUL))
 398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_5_ADDR ((uint32_t*) (0x1FF1EC10UL))
 399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_6_ADDR ((uint32_t*) (0x1FF1EC14UL))
 400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_COUNT  (6UL)
 401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a register from a register basis from which an offset
 414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is applied.
 415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Pointer to register address
 418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 9


 432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and multimode
 436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sharing the same ADC common instance):
 440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         disabled.
 442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, if ADC group injected is u
 448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC dual ADC mode DMA transfer data format: Each D
 459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
ARM GAS  /tmp/cc6jq3Wn.s 			page 10


 489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LeftBitShift;                /*!< Configures the left shifting applied to the final resu
 498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LEFT_B
 499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "REG").
 513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 11


 546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t DataTransferMode;            /*!< Set ADC group regular conversion data transfer mode: n
 555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DA
 556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              data preserved or overwritten.
 561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "INJ").
 573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
ARM GAS  /tmp/cc6jq3Wn.s 			page 12


 603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
ARM GAS  /tmp/cc6jq3Wn.s 			page 13


 660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* DMA transfer.                                                              */
 691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 14


 717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement paths all di
 729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_BOOST_MODE ADC instance - Boost mode
 737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_6MHZ25   (0x00000000UL)                                            /*!< B
 740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_12MHZ5   (                                        ADC_CR_BOOST_0)  /*!< B
 741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_20MHZ    (                       ADC_CR_BOOST_1                 )  /*!< B
 742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_25MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1                 )  /*!< B
 743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_50MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1 | ADC_CR_BOOST_0)  /*!< B
 744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_OFFSET_LINEARITY  ADC instance - Calibration mode for offset an
 749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET                (ADC_CALIB_FACTOR_OFFSET_REGOFFSET)                     
 752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY             (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET)                  
 753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET_LINEARITY      (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET | ADC_CR_ADCALLIN)
 754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_LINEARITY_WORD  ADC instance - Calibration linearity words
 759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD1       (ADC_CR_LINCALRDYW1)    /*!< ADC calibration linearity w
 762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD2       (ADC_CR_LINCALRDYW2)    /*!< ADC calibration linearity w
 763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD3       (ADC_CR_LINCALRDYW3)    /*!< ADC calibration linearity w
 764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD4       (ADC_CR_LINCALRDYW4)    /*!< ADC calibration linearity w
 765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD5       (ADC_CR_LINCALRDYW5)    /*!< ADC calibration linearity w
 766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD6       (ADC_CR_LINCALRDYW6)    /*!< ADC calibration linearity w
 767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 15


 774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_16B              (0x00000000UL)                                      /*!<
 775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B              (                                  ADC_CFGR_RES_0)  /*!<
 776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (                 ADC_CFGR_RES_1                 )  /*!<
 777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_1 | ADC_CFGR_RES_0)  /*!<
 778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_X)
 780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B_OPT          (ADC_CFGR_RES_2 |                  ADC_CFGR_RES_0)  /*!<
 781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B_OPT          (ADC_CFGR_RES_2 | ADC_CFGR_RES_1                 )  /*!<
 782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
 785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0) /*!< AD
 786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2                                ) /*!< AD
 788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                             /*!< Th
 789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC3_CFGR_RES_1 | ADC3_CFGR_RES_0)   /*!< ADC resolutio
 794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC3_CFGR_ALIGN)       /*!< ADC conversion data alignme
 805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LEFT_BIT_SHIFT   ADC left Shift
 812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_NONE  (0x00000000UL)                                                 
 815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_1     (ADC_CFGR2_LSHIFT_0)                                           
 816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_2     (ADC_CFGR2_LSHIFT_1)                                           
 817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_3     (ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0)                      
 818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_4     (ADC_CFGR2_LSHIFT_2)                                           
 819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_5     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0)                      
 820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_6     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1)                      
 821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_7     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_8     (ADC_CFGR2_LSHIFT_3)                                           
 823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_9     (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_0)                      
 824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_10    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1)                      
 825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_11    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_12    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2)                      
 827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_13    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0) 
 828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_14    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1) 
 829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_15    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 |
 830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 16


 831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGNED_SATURATION ADC instance - Offset signed saturation mode
 855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE   (0x00000000UL)   /*!< ADC offset signed saturatio
 858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE    (ADC_OFR1_SSATE) /*!< ADC offset signed saturatio
 859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_RSHIFT ADC instance - Offset right shift
 864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_DISABLE   (0x00000000UL)      /*!< ADC offset right shift is disabled 
 867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_ENABLE    (ADC_CFGR2_RSHIFT1) /*!< ADC offset right shift is enabled (
 868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)           /*!< ADC offset saturation is d
 876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC3_OFR1_SATEN)        /*!< ADC offset saturation is e
 877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC3_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among A
 886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/cc6jq3Wn.s 			page 17


 888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)        /*!< ADC offset is negative (among
 894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC3_OFR1_OFFSETPOS) /*!< ADC offset is positive (among
 895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_19                  (ADC_CHANNEL_19_NUMBER | ADC_CHANNEL_19_SMP | ADC_CHANNE
 935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
 936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
ARM GAS  /tmp/cc6jq3Wn.s 			page 18


 945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH1_ADC2        (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH2_ADC2        (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(DAC2)
 954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC2CH1_ADC2        (LL_ADC_CHANNEL_15 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE          (0x00000000UL)                                           
 965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                          
 966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2      (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3      (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2      (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11   (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1    (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM1_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM2_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM3_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM23)
 987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM23_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM23 */
 989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM24)
 990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM24_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM24 */
 992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
1000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
1001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
ARM GAS  /tmp/cc6jq3Wn.s 			page 19


1002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
1007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)        /*!< ADC conversions sa
1010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC3_CFGR2_BULB)     /*!< ADC conversions sa
1011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Note: First conver
1012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC3_CFGR2_SMPTRIG)  /*!< ADC conversions sa
1013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger rising edg
1014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger falling ed
1015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */ 
1018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
1021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
1024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
1025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DATA_TRANSFER_MODE  ADC group regular - Data transfer mode of ADC conve
1030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DR_TRANSFER             (0x00000000UL)                        /*!< ADC conversio
1033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR_DMNGT_0) /*!< ADC conversio
1034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMNGT_1 | ADC_CFGR_DMNGT_0) /*!< ADC conversio
1035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DFSDM_TRANSFER          (ADC_CFGR_DMNGT_1                   ) /*!< ADC conversio
1036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
1042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversi
1046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_LIMITED    (                  ADC3_CFGR_DMAEN)    /*!< ADC convers
1047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_UNLIMITED  (ADC3_CFGR_DMACFG | ADC3_CFGR_DMAEN)    /*!< ADC conver
1048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
1054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
1057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
1058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 20


1059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
1063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
1066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
1067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
1068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
1069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
1070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
1071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
1072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
1074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
1075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
1076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
1077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
1078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
ARM GAS  /tmp/cc6jq3Wn.s 			page 21


1116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM23_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM24_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 22


1173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                          
1219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_8CYCLES_5      (                    ADC_SMPR2_SMP10_1                  
1221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_16CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_32CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_64CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_387CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_810CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
ARM GAS  /tmp/cc6jq3Wn.s 			page 23


1230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_2CYCLES_5      (0x00000000UL)                                     
1234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_6CYCLES_5      (                                        ADC_SMPR2_
1235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_12CYCLES_5     (                    ADC_SMPR2_SMP10_1             
1236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_47CYCLES_5     (ADC_SMPR2_SMP10_2                                 
1238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_
1239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1             
1240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
ARM GAS  /tmp/cc6jq3Wn.s 			page 24


1287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK)              
1331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_INJ          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG_INJ      ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK)   
1337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK)   
1343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
ARM GAS  /tmp/cc6jq3Wn.s 			page 25


1344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK)   
1346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (0x1UL)                     /*!< ADC analog watchdog thr
1356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (0x0UL)                     /*!< ADC analog watchdog thr
1357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                          ADC3_TR1_AWDF
1366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                     ADC3_TR1_AWDFILT_1                
1367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                     ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC3_TR1_AWDFILT_2                                     
1369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC3_TR1_AWDFILT_2 |                      ADC3_TR1_AWDF
1370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1                
1371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 26


1401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                        ADC3_CFGR2_OVSR
1403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                    ADC3_CFGR2_OVSR_1                  
1404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                    ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC3_CFGR2_OVSR_2                                      
1406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC3_CFGR2_OVSR_2                     | ADC3_CFGR2_OVSR
1407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1                  
1408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_9           (ADC_CFGR2_OVSS_3                                       
1427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_10          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_11          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                      /*!< ADC multimode
1452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_32_10B      (ADC_CCR_DAMDF_1                  ) /*!< ADC multimode
1453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_8B          (ADC_CCR_DAMDF_1 | ADC_CCR_DAMDF_0) /*!< ADC multimode
1454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 27


1458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5           (0x00000000UL)                                
1462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5          (                                             
1463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5          (                                    ADC_CCR_D
1464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5          (                                    ADC_CCR_D
1465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS   (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5          (                  ADC_CCR_DELAY_2            
1467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES            (ADC_CCR_DELAY_3                              
1469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5          (                  ADC_CCR_DELAY_2            
1470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5          (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES            (ADC_CCR_DELAY_3                              
1473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES            (ADC_CCR_DELAY_3                              
1474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not timeout values.
1493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         above each literal definition.
1495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       not timeout values.                                                  */
1500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       STM32 series:                                                         */
1505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 16384/fADC.                   */
1506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         cycles                                                             */
1512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         configuration.                                                     */
1514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
ARM GAS  /tmp/cc6jq3Wn.s 			page 28


1515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "ts_vrefint").                                                   */
1525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (5UL)  /*!< Delay for internal voltage reference stabili
1527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tSTART_RUN").                                                   */
1531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    ( 26UL)  /*!< Delay for temperature sensor stabilization
1533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles            */
1536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Fixed timeout value for ADC linearity word bit set/clear delay.                         */
1544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Values defined to be higher than worst cases: low clock frequency,                      */
1545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* maximum prescalers.                                                                     */
1546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Ex of profile low frequency : f_ADC at 4,577 Khz (minimum value                         */
1547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* according to Data sheet), linearity set/clear bit delay MAX = 6 / f_ADC + 3 cycles AHB  */
1548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*           6 / 4577 = 1,311ms                                                            */
1549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* At maximum CPU speed (400 MHz), this means                                              */
1550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*    3.58 * 400 MHz = 524400 CPU cycles                                                   */
1551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEARITY_BIT_TOGGLE_TIMEOUT         (524400UL)      /*!< ADC linearity set/clear bit d
1552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 29


1572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Write a value in ADC register
1573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be written
1575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
1577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Read a value in ADC register
1582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be read
1584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Register value
1585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the resolution defines to STM32H73x/2x ADC3 registers values
1598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the ADC3 resolution according to the STM32H73x/2x RefMan.
1599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from ADC3 resolution (12b, 10b, 8b,6b)
1600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x00000000UL (value correspodning to ADC3 12 bits)
1607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_0 = 0x00000004  (value corresponding to ADC3 10 bits)
1608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_1 = 0x00000008 (value corresponding to ADC3 8 bits)
1609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x0000001C (value corresponding to ADC3 6 bits)
1610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This helper macro is applicable for STM32H73x/2x devices only
1611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC12_RESOLUTION_TO_ADC3(__ADC_RESOLUTION__)                      \
1613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (                                                                     \
1614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_12B)                     \
1615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             ?(0x00000000UL)                                                    \
1616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              :                                                                 \
1617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_10B)                   \
1618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ?(ADC_CFGR_RES_0)                                               \
1619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 :                                                              \
1620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_8B)                 \
1621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   ?(ADC_CFGR_RES_1)                                            \
1622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    :                                                           \
1623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_6B)              \
1624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      ?((ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0))       \
1625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                        :(0x00000000UL)                                         \
1626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          )
1627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
ARM GAS  /tmp/cc6jq3Wn.s 			page 30


1629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return decimal number "4".
1636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number is returned, either defined with number
1638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                    \
1675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                    \
1678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                    \
1679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from number in decimal format.
ARM GAS  /tmp/cc6jq3Wn.s 			page 31


1686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                            
1728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
1733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                            
1734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
ARM GAS  /tmp/cc6jq3Wn.s 			page 32


1743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC internal channel:
1745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
ARM GAS  /tmp/cc6jq3Wn.s 			page 33


1800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a value defined from parameter definition of
1804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC registers.
1807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
ARM GAS  /tmp/cc6jq3Wn.s 			page 34


1857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is
1872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
1886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
1890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2)                          \
1895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ||                                                                          \
1898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
1907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2) ||                       \
1912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
ARM GAS  /tmp/cc6jq3Wn.s 			page 35


1914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
1926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
1970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
ARM GAS  /tmp/cc6jq3Wn.s 			page 36


1971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
1973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
1974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
1976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
1977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
1979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
1980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
1982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
1983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
1985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
1986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
1988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
1989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
1991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
1992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
1994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
1995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
1997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
1998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
1999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
ARM GAS  /tmp/cc6jq3Wn.s 			page 37


2028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
2030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
2031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
2032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
2033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
2034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
2035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
2036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
2037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
2038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
2039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
2040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
2041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
2042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
2043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
2044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
2045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
2046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
2047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
2049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
2050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
2051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                 
2055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
2056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
2057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)             
2058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :                                                                                         
2059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD
2060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
2067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (< ADCx param >,
2071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_1
2072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 38


2085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           < threshold_value_18_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_16_BITS__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_16_BITS__) \
2106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD_16_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationOffsetFactor().
2112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential ended to 0x2A:
2114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetCalibrationOffsetFactor(
2115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1,
2116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
ARM GAS  /tmp/cc6jq3Wn.s 			page 39


2142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance).
2144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         considered as master instances (do not depend to
2148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         any other ADC instance).
2149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     )?                                                                         \
2155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (ADC1)                                                                    \
2156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      :                                                                         \
2157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADCx__)                                                                \
2158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC common register instance
2169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC3_COMMON)                                                           \
2179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)   (ADC12_COMMON)
2183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance are disabled.
2188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are disabled.
ARM GAS  /tmp/cc6jq3Wn.s 			page 40


2199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
2201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3))                                                \
2212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                         (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (0xFFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: digital value of ADC conversion bit
2249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC3_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))
2252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a resolution to another resolution.
ARM GAS  /tmp/cc6jq3Wn.s 			page 41


2256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_X) || defined(ADC_VER_V5_V90)
2274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* defined(ADC_VER_V5_3) */
2302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
ARM GAS  /tmp/cc6jq3Wn.s 			page 42


2313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @brief  Helper macro to convert the ADC conversion data from
2333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         a resolution to another resolution.
2334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __DATA__ ADC conversion data to be converted
2335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @retval ADC conversion data to the requested resolution
2348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
2349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION_ADC3(__DATA__,\
2350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DATA__)                                                                 \
2353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))  \
2354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL))     \
2355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 16 bits)
2365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                       (unit: digital value).
2366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
ARM GAS  /tmp/cc6jq3Wn.s 			page 43


2370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_DATA__,\
2376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         reference VrefInt.
2385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         connected to pin Vref+.
2389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of internal voltage reference
2392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 16 bits,
2393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 16 bits)
2398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
2411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
2412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_16B)                  \
2413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
ARM GAS  /tmp/cc6jq3Wn.s 			page 44


2427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  parameters are correct (address and data).
2433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  less accurate than calibrated values),
2436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of temperature sensor
2443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to a resolution of 16 bits,
2444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor.
2446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_16B)         \
2467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to device datasheet).
2480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
ARM GAS  /tmp/cc6jq3Wn.s 			page 45


2484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: digital value)
2485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values.
2492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 16 bits
2502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 16 bits.
2504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "Avg_Slop
2506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "V30" (co
2508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((( (                                                                        \
2527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        -                                                                       \
2531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 46


2541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
2566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC register address
2585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t data_reg_addr;
2589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register DR */
2593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & (ADCx->DR);
2594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register CDR */
ARM GAS  /tmp/cc6jq3Wn.s 			page 47


2598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & ((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return data_reg_addr;
2602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, if ADC group injected is used, some
2615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must be respected.
2617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
2618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
2649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
ARM GAS  /tmp/cc6jq3Wn.s 			page 48


2655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
2704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
2705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
ARM GAS  /tmp/cc6jq3Wn.s 			page 49


2712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  27              		.loc 1 2715 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7]
2716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
  44              		.loc 1 2716 3
  45 000a 7B68     		ldr	r3, [r7, #4]
  46 000c 9B68     		ldr	r3, [r3, #8]
  47 000e 23F0E072 		bic	r2, r3, #29360128
  48 0012 3B68     		ldr	r3, [r7]
  49 0014 1A43     		orrs	r2, r2, r3
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 9A60     		str	r2, [r3, #8]
2717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
  52              		.loc 1 2717 1
  53 001a 00BF     		nop
  54 001c 0C37     		adds	r7, r7, #12
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 001e BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 0020 5DF8047B 		ldr	r7, [sp], #4
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 0024 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE147:
  69              		.section	.text.LL_ADC_GetCommonPathInternalCh,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv5-d16
  76              	LL_ADC_GetCommonPathInternalCh:
  77              	.LFB148:
2718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 50


2720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
2727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
2728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
  78              		.loc 1 2737 1
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 8
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83 0000 80B4     		push	{r7}
  84              	.LCFI6:
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 7, -4
  87 0002 83B0     		sub	sp, sp, #12
  88              	.LCFI7:
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              	.LCFI8:
  92              		.cfi_def_cfa_register 7
  93 0006 7860     		str	r0, [r7, #4]
2738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
  94              		.loc 1 2738 21
  95 0008 7B68     		ldr	r3, [r7, #4]
  96 000a 9B68     		ldr	r3, [r3, #8]
  97              		.loc 1 2738 10
  98 000c 03F0E073 		and	r3, r3, #29360128
2739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
  99              		.loc 1 2739 1
 100 0010 1846     		mov	r0, r3
 101 0012 0C37     		adds	r7, r7, #12
 102              	.LCFI9:
 103              		.cfi_def_cfa_offset 4
 104 0014 BD46     		mov	sp, r7
 105              	.LCFI10:
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0016 5DF8047B 		ldr	r7, [sp], #4
 109              	.LCFI11:
 110              		.cfi_restore 7
 111              		.cfi_def_cfa_offset 0
 112 001a 7047     		bx	lr
 113              		.cfi_endproc
 114              	.LFE148:
ARM GAS  /tmp/cc6jq3Wn.s 			page 51


 116              		.section	.text.LL_ADC_SetCalibrationOffsetFactor,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv5-d16
 123              	LL_ADC_SetCalibrationOffsetFactor:
 124              	.LFB149:
2740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
2761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor can be specified only once).
2764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         To perform this processing, use helper macro
2768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationOffsetFactor\n
2774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationOffsetFactor
2775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint
2784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 125              		.loc 1 2784 1
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 16
 128              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6jq3Wn.s 			page 52


 129              		@ link register save eliminated.
 130 0000 80B4     		push	{r7}
 131              	.LCFI12:
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
 134 0002 85B0     		sub	sp, sp, #20
 135              	.LCFI13:
 136              		.cfi_def_cfa_offset 24
 137 0004 00AF     		add	r7, sp, #0
 138              	.LCFI14:
 139              		.cfi_def_cfa_register 7
 140 0006 F860     		str	r0, [r7, #12]
 141 0008 B960     		str	r1, [r7, #8]
 142 000a 7A60     		str	r2, [r7, #4]
2785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
2786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT_RES13,
2787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
 143              		.loc 1 2790 3
 144 000c FB68     		ldr	r3, [r7, #12]
 145 000e D3F8C420 		ldr	r2, [r3, #196]
 146 0012 BB68     		ldr	r3, [r7, #8]
 147 0014 23F0F823 		bic	r3, r3, #-134154240
 148 0018 DB43     		mvns	r3, r3
 149 001a 1A40     		ands	r2, r2, r3
 150 001c BB68     		ldr	r3, [r7, #8]
 151 001e 190B     		lsrs	r1, r3, #12
 152 0020 BB68     		ldr	r3, [r7, #8]
 153 0022 C3F30A03 		ubfx	r3, r3, #0, #11
 154 0026 DB43     		mvns	r3, r3
 155 0028 0B40     		ands	r3, r3, r1
 156 002a 03F01003 		and	r3, r3, #16
 157 002e 7968     		ldr	r1, [r7, #4]
 158 0030 01FA03F3 		lsl	r3, r1, r3
 159 0034 1A43     		orrs	r2, r2, r3
 160 0036 FB68     		ldr	r3, [r7, #12]
 161 0038 C3F8C420 		str	r2, [r3, #196]
2791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 162              		.loc 1 2794 1
 163 003c 00BF     		nop
 164 003e 1437     		adds	r7, r7, #20
 165              	.LCFI15:
 166              		.cfi_def_cfa_offset 4
 167 0040 BD46     		mov	sp, r7
 168              	.LCFI16:
 169              		.cfi_def_cfa_register 13
 170              		@ sp needed
 171 0042 5DF8047B 		ldr	r7, [sp], #4
 172              	.LCFI17:
 173              		.cfi_restore 7
 174              		.cfi_def_cfa_offset 0
 175 0046 7047     		bx	lr
ARM GAS  /tmp/cc6jq3Wn.s 			page 53


 176              		.cfi_endproc
 177              	.LFE149:
 179              		.section	.text.LL_ADC_GetCalibrationOffsetFactor,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv5-d16
 186              	LL_ADC_GetCalibrationOffsetFactor:
 187              	.LFB150:
2795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationOffsetFactor\n
2807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationOffsetFactor
2808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 188              		.loc 1 2815 1
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI18:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI19:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI20:
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 204 0008 3960     		str	r1, [r7]
2816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT_RES13, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) 
2822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
 205              		.loc 1 2823 21
ARM GAS  /tmp/cc6jq3Wn.s 			page 54


 206 000a 7B68     		ldr	r3, [r7, #4]
 207 000c D3F8C420 		ldr	r2, [r3, #196]
 208 0010 3B68     		ldr	r3, [r7]
 209 0012 1340     		ands	r3, r3, r2
 210 0014 23F0F822 		bic	r2, r3, #-134154240
 211              		.loc 1 2823 147
 212 0018 3B68     		ldr	r3, [r7]
 213 001a 1B0B     		lsrs	r3, r3, #12
 214 001c 03F01003 		and	r3, r3, #16
 215              		.loc 1 2823 10
 216 0020 22FA03F3 		lsr	r3, r2, r3
2824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 217              		.loc 1 2825 1
 218 0024 1846     		mov	r0, r3
 219 0026 0C37     		adds	r7, r7, #12
 220              	.LCFI21:
 221              		.cfi_def_cfa_offset 4
 222 0028 BD46     		mov	sp, r7
 223              	.LCFI22:
 224              		.cfi_def_cfa_register 13
 225              		@ sp needed
 226 002a 5DF8047B 		ldr	r7, [sp], #4
 227              	.LCFI23:
 228              		.cfi_restore 7
 229              		.cfi_def_cfa_offset 0
 230 002e 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE150:
 234              		.section	.text.LL_ADC_SetCalibrationLinearFactor,"ax",%progbits
 235              		.align	1
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv5-d16
 241              	LL_ADC_SetCalibrationLinearFactor:
 242              	.LFB151:
2826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC Linear calibration factor in the mode single-ended.
2829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set linear calibration parameters
2830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor\n
2837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor
2838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
ARM GAS  /tmp/cc6jq3Wn.s 			page 55


2846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, u
2850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 243              		.loc 1 2850 1
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 24
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 248 0000 80B4     		push	{r7}
 249              	.LCFI24:
 250              		.cfi_def_cfa_offset 4
 251              		.cfi_offset 7, -4
 252 0002 87B0     		sub	sp, sp, #28
 253              	.LCFI25:
 254              		.cfi_def_cfa_offset 32
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI26:
 257              		.cfi_def_cfa_register 7
 258 0006 F860     		str	r0, [r7, #12]
 259 0008 B960     		str	r1, [r7, #8]
 260 000a 7A60     		str	r2, [r7, #4]
2851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
2853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       timeout_cpu_cycles--;
2860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
 261              		.loc 1 2863 12
 262 000c 134B     		ldr	r3, .L12
 263 000e 7B61     		str	r3, [r7, #20]
2864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
 264              		.loc 1 2864 3
 265 0010 FB68     		ldr	r3, [r7, #12]
 266 0012 D3F8C830 		ldr	r3, [r3, #200]
 267 0016 03F04042 		and	r2, r3, #-1073741824
 268 001a 7B68     		ldr	r3, [r7, #4]
 269 001c 1A43     		orrs	r2, r2, r3
 270 001e FB68     		ldr	r3, [r7, #12]
 271 0020 C3F8C820 		str	r2, [r3, #200]
2865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
 272              		.loc 1 2865 3
 273 0024 FB68     		ldr	r3, [r7, #12]
 274 0026 9B68     		ldr	r3, [r3, #8]
 275 0028 23F48032 		bic	r2, r3, #65536
 276 002c BB68     		ldr	r3, [r7, #8]
 277 002e 1A43     		orrs	r2, r2, r3
 278 0030 FB68     		ldr	r3, [r7, #12]
 279 0032 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/cc6jq3Wn.s 			page 56


2866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 280              		.loc 1 2866 9
 281 0034 02E0     		b	.L8
 282              	.L10:
2867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
 283              		.loc 1 2868 23
 284 0036 7B69     		ldr	r3, [r7, #20]
 285 0038 013B     		subs	r3, r3, #1
 286 003a 7B61     		str	r3, [r7, #20]
 287              	.L8:
2866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 288              		.loc 1 2866 11
 289 003c FB68     		ldr	r3, [r7, #12]
 290 003e 9A68     		ldr	r2, [r3, #8]
 291 0040 BB68     		ldr	r3, [r7, #8]
 292 0042 1340     		ands	r3, r3, r2
2866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 293              		.loc 1 2866 9
 294 0044 002B     		cmp	r3, #0
 295 0046 02D1     		bne	.L11
2866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 296              		.loc 1 2866 53 discriminator 1
 297 0048 7B69     		ldr	r3, [r7, #20]
 298 004a 002B     		cmp	r3, #0
 299 004c F3D1     		bne	.L10
 300              	.L11:
2869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 301              		.loc 1 2871 1
 302 004e 00BF     		nop
 303 0050 1C37     		adds	r7, r7, #28
 304              	.LCFI27:
 305              		.cfi_def_cfa_offset 4
 306 0052 BD46     		mov	sp, r7
 307              	.LCFI28:
 308              		.cfi_def_cfa_register 13
 309              		@ sp needed
 310 0054 5DF8047B 		ldr	r7, [sp], #4
 311              	.LCFI29:
 312              		.cfi_restore 7
 313              		.cfi_def_cfa_offset 0
 314 0058 7047     		bx	lr
 315              	.L13:
 316 005a 00BF     		.align	2
 317              	.L12:
 318 005c 70000800 		.word	524400
 319              		.cfi_endproc
 320              	.LFE151:
 322              		.section	.text.LL_ADC_GetCalibrationLinearFactor,"ax",%progbits
 323              		.align	1
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu fpv5-d16
 329              	LL_ADC_GetCalibrationLinearFactor:
ARM GAS  /tmp/cc6jq3Wn.s 			page 57


 330              	.LFB152:
2872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC Linear calibration factor in the mode single-ended.
2875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor\n
2878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor
2879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWor
2890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 331              		.loc 1 2890 1
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 16
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336 0000 80B4     		push	{r7}
 337              	.LCFI30:
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 7, -4
 340 0002 85B0     		sub	sp, sp, #20
 341              	.LCFI31:
 342              		.cfi_def_cfa_offset 24
 343 0004 00AF     		add	r7, sp, #0
 344              	.LCFI32:
 345              		.cfi_def_cfa_register 7
 346 0006 7860     		str	r0, [r7, #4]
 347 0008 3960     		str	r1, [r7]
2891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
 348              		.loc 1 2891 12
 349 000a 104B     		ldr	r3, .L19
 350 000c FB60     		str	r3, [r7, #12]
2892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
 351              		.loc 1 2892 3
 352 000e 7B68     		ldr	r3, [r7, #4]
 353 0010 9A68     		ldr	r2, [r3, #8]
 354 0012 3B68     		ldr	r3, [r7]
 355 0014 DB43     		mvns	r3, r3
 356 0016 1A40     		ands	r2, r2, r3
 357 0018 7B68     		ldr	r3, [r7, #4]
 358 001a 9A60     		str	r2, [r3, #8]
2893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 359              		.loc 1 2893 9
 360 001c 02E0     		b	.L15
 361              	.L17:
2894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
 362              		.loc 1 2895 23
ARM GAS  /tmp/cc6jq3Wn.s 			page 58


 363 001e FB68     		ldr	r3, [r7, #12]
 364 0020 013B     		subs	r3, r3, #1
 365 0022 FB60     		str	r3, [r7, #12]
 366              	.L15:
2893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 367              		.loc 1 2893 11
 368 0024 7B68     		ldr	r3, [r7, #4]
 369 0026 9A68     		ldr	r2, [r3, #8]
 370 0028 3B68     		ldr	r3, [r7]
 371 002a 1340     		ands	r3, r3, r2
2893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 372              		.loc 1 2893 9
 373 002c 002B     		cmp	r3, #0
 374 002e 02D0     		beq	.L16
2893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 375              		.loc 1 2893 53 discriminator 1
 376 0030 FB68     		ldr	r3, [r7, #12]
 377 0032 002B     		cmp	r3, #0
 378 0034 F3D1     		bne	.L17
 379              	.L16:
2896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT));
2899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
 380              		.loc 1 2900 21
 381 0036 7B68     		ldr	r3, [r7, #4]
 382 0038 D3F8C830 		ldr	r3, [r3, #200]
 383              		.loc 1 2900 10
 384 003c 23F04043 		bic	r3, r3, #-1073741824
2901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 385              		.loc 1 2902 1
 386 0040 1846     		mov	r0, r3
 387 0042 1437     		adds	r7, r7, #20
 388              	.LCFI33:
 389              		.cfi_def_cfa_offset 4
 390 0044 BD46     		mov	sp, r7
 391              	.LCFI34:
 392              		.cfi_def_cfa_register 13
 393              		@ sp needed
 394 0046 5DF8047B 		ldr	r7, [sp], #4
 395              	.LCFI35:
 396              		.cfi_restore 7
 397              		.cfi_def_cfa_offset 0
 398 004a 7047     		bx	lr
 399              	.L20:
 400              		.align	2
 401              	.L19:
 402 004c 70000800 		.word	524400
 403              		.cfi_endproc
 404              	.LFE152:
 406              		.section	.text.LL_ADC_SetOffset,"ax",%progbits
 407              		.align	1
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
ARM GAS  /tmp/cc6jq3Wn.s 			page 59


 411              		.fpu fpv5-d16
 413              	LL_ADC_SetOffset:
 414              	.LFB158:
2903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC resolution.
2905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
2911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
2924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_RES, (((Resolution & 0x10UL) | 0x08UL | (Resolution & 0x04UL))
2931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else /* Rev.V */
2939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if (LL_ADC_RESOLUTION_8B == Resolution)
2941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
2945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
2956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/cc6jq3Wn.s 			page 60


2957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (LL_ADC_RESOLUTION_8B == Resolution)
2958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
2962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X*/
2968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC resolution.
2972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    *         @arg @ref LL_ADC_RESOLUTION_6B   **Value available for ADC3 on STM32H72x/3x devices on
2983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3)
2987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
2994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
2998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
3008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/cc6jq3Wn.s 			page 61


3014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X */
3025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC low power mode.
3029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /tmp/cc6jq3Wn.s 			page 62


3071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
3072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
3074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
3079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
3081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC low power mode:
3085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
3101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
3102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
3103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
3104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
3105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
3106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
ARM GAS  /tmp/cc6jq3Wn.s 			page 63


3128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected Channel.
3136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the pre-selection of channel configuration.
3137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Channel selections is dependent to ADC instance and IP version:
3138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For STM32H72x/3x This is applicable only for ADC1/ADC2
3139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For Rest of STM32H7xxx This is applicable only all the ADCs instances.
3140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * 
3141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           
3144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           
3145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           
3146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           
3147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           
3148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           
3149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
3166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (ADCx != ADC3)
3169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       /* ADC channels preselection */
3171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
3174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* ADC channels preselection */
3175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or group injected)
ARM GAS  /tmp/cc6jq3Wn.s 			page 64


3185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           converted data).
3187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
ARM GAS  /tmp/cc6jq3Wn.s 			page 65


3242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
3249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 415              		.loc 1 3253 1
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 24
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              	.LCFI36:
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 87B0     		sub	sp, sp, #28
 425              	.LCFI37:
 426              		.cfi_def_cfa_offset 32
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI38:
 429              		.cfi_def_cfa_register 7
 430 0006 F860     		str	r0, [r7, #12]
 431 0008 B960     		str	r1, [r7, #8]
 432 000a 7A60     		str	r2, [r7, #4]
 433 000c 3B60     		str	r3, [r7]
3254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 434              		.loc 1 3254 25
 435 000e FB68     		ldr	r3, [r7, #12]
 436 0010 6033     		adds	r3, r3, #96
 437 0012 1A46     		mov	r2, r3
 438 0014 BB68     		ldr	r3, [r7, #8]
 439 0016 9B00     		lsls	r3, r3, #2
 440 0018 1344     		add	r3, r3, r2
 441              		.loc 1 3254 18
 442 001a 7B61     		str	r3, [r7, #20]
3255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
 443              		.loc 1 3265 5
 444 001c 7B69     		ldr	r3, [r7, #20]
 445 001e 1B68     		ldr	r3, [r3]
 446 0020 03F00042 		and	r2, r3, #-2147483648
 447 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6jq3Wn.s 			page 66


 448 0026 03F0F841 		and	r1, r3, #2080374784
 449 002a 3B68     		ldr	r3, [r7]
 450 002c 0B43     		orrs	r3, r3, r1
 451 002e 1A43     		orrs	r2, r2, r3
 452 0030 7B69     		ldr	r3, [r7, #20]
 453 0032 1A60     		str	r2, [r3]
3266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 454              		.loc 1 3269 1
 455 0034 00BF     		nop
 456 0036 1C37     		adds	r7, r7, #28
 457              	.LCFI39:
 458              		.cfi_def_cfa_offset 4
 459 0038 BD46     		mov	sp, r7
 460              	.LCFI40:
 461              		.cfi_def_cfa_register 13
 462              		@ sp needed
 463 003a 5DF8047B 		ldr	r7, [sp], #4
 464              	.LCFI41:
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
 467 003e 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE158:
 471              		.section	.text.LL_ADC_GetOffsetChannel,"ax",%progbits
 472              		.align	1
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 476              		.fpu fpv5-d16
 478              	LL_ADC_GetOffsetChannel:
 479              	.LFB159:
3270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or group injected)
3276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
3284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
3286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
ARM GAS  /tmp/cc6jq3Wn.s 			page 67


3293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
3330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
3331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
3332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 480              		.loc 1 3335 1
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 16
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485 0000 80B4     		push	{r7}
 486              	.LCFI42:
 487              		.cfi_def_cfa_offset 4
 488              		.cfi_offset 7, -4
 489 0002 85B0     		sub	sp, sp, #20
 490              	.LCFI43:
 491              		.cfi_def_cfa_offset 24
 492 0004 00AF     		add	r7, sp, #0
 493              	.LCFI44:
ARM GAS  /tmp/cc6jq3Wn.s 			page 68


 494              		.cfi_def_cfa_register 7
 495 0006 7860     		str	r0, [r7, #4]
 496 0008 3960     		str	r1, [r7]
3336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 497              		.loc 1 3336 31
 498 000a 7B68     		ldr	r3, [r7, #4]
 499 000c 6033     		adds	r3, r3, #96
 500 000e 1A46     		mov	r2, r3
 501 0010 3B68     		ldr	r3, [r7]
 502 0012 9B00     		lsls	r3, r3, #2
 503 0014 1344     		add	r3, r3, r2
 504              		.loc 1 3336 24
 505 0016 FB60     		str	r3, [r7, #12]
3337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 506              		.loc 1 3338 10
 507 0018 FB68     		ldr	r3, [r7, #12]
 508 001a 1B68     		ldr	r3, [r3]
 509 001c 03F0F843 		and	r3, r3, #2080374784
3339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 510              		.loc 1 3339 1
 511 0020 1846     		mov	r0, r3
 512 0022 1437     		adds	r7, r7, #20
 513              	.LCFI45:
 514              		.cfi_def_cfa_offset 4
 515 0024 BD46     		mov	sp, r7
 516              	.LCFI46:
 517              		.cfi_def_cfa_register 13
 518              		@ sp needed
 519 0026 5DF8047B 		ldr	r7, [sp], #4
 520              	.LCFI47:
 521              		.cfi_restore 7
 522              		.cfi_def_cfa_offset 0
 523 002a 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE159:
 527              		.section	.text.LL_ADC_SetOffsetSignedSaturation,"ax",%progbits
 528              		.align	1
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu fpv5-d16
 534              	LL_ADC_SetOffsetSignedSaturation:
 535              	.LFB163:
3340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted data).
3345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/cc6jq3Wn.s 			page 69


3353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set data right shift for the ADC selected offset number 1, 2, 3 or 4:
3370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_SetDataRightShift\n
3372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  RigthShift This parameter can be one of the following values:
3379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthSh
3384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RS
3386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get data right shift for the ADC selected offset number 1, 2, 3 or 4:
3390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_GetDataRightShift\n
3392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
3403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 << (Offsety & 0x1FUL)))) >> (Offsety 
3405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
ARM GAS  /tmp/cc6jq3Wn.s 			page 70


3410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_SetOffsetSignedSaturation
3414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSignedSaturation This parameter can be one of the following values:
3421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t
3426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 536              		.loc 1 3426 1
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 24
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541 0000 80B4     		push	{r7}
 542              	.LCFI48:
 543              		.cfi_def_cfa_offset 4
 544              		.cfi_offset 7, -4
 545 0002 87B0     		sub	sp, sp, #28
 546              	.LCFI49:
 547              		.cfi_def_cfa_offset 32
 548 0004 00AF     		add	r7, sp, #0
 549              	.LCFI50:
 550              		.cfi_def_cfa_register 7
 551 0006 F860     		str	r0, [r7, #12]
 552 0008 B960     		str	r1, [r7, #8]
 553 000a 7A60     		str	r2, [r7, #4]
 554              	.LBB66:
3427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 555              		.loc 1 3435 27
 556 000c FB68     		ldr	r3, [r7, #12]
 557 000e 6033     		adds	r3, r3, #96
 558 0010 1A46     		mov	r2, r3
 559 0012 BB68     		ldr	r3, [r7, #8]
 560 0014 9B00     		lsls	r3, r3, #2
 561 0016 1344     		add	r3, r3, r2
 562              		.loc 1 3435 20
 563 0018 7B61     		str	r3, [r7, #20]
3436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 564              		.loc 1 3436 5
 565 001a 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc6jq3Wn.s 			page 71


 566 001c 1B68     		ldr	r3, [r3]
 567 001e 23F00042 		bic	r2, r3, #-2147483648
 568 0022 7B68     		ldr	r3, [r7, #4]
 569 0024 1A43     		orrs	r2, r2, r3
 570 0026 7B69     		ldr	r3, [r7, #20]
 571 0028 1A60     		str	r2, [r3]
 572              	.LBE66:
3437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 573              		.loc 1 3438 1
 574 002a 00BF     		nop
 575 002c 1C37     		adds	r7, r7, #28
 576              	.LCFI51:
 577              		.cfi_def_cfa_offset 4
 578 002e BD46     		mov	sp, r7
 579              	.LCFI52:
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 0030 5DF8047B 		ldr	r7, [sp], #4
 583              	.LCFI53:
 584              		.cfi_restore 7
 585              		.cfi_def_cfa_offset 0
 586 0034 7047     		bx	lr
 587              		.cfi_endproc
 588              	.LFE163:
 590              		.section	.text.LL_ADC_REG_IsTriggerSourceSWStart,"ax",%progbits
 591              		.align	1
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu fpv5-d16
 597              	LL_ADC_REG_IsTriggerSourceSWStart:
 598              	.LFB167:
3439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_GetOffsetSignedSaturation
3447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
ARM GAS  /tmp/cc6jq3Wn.s 			page 72


3463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset saturation mode.
3477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
3504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSaturation);
3505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
ARM GAS  /tmp/cc6jq3Wn.s 			page 73


3520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_SATEN);
3532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }else
3533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset sign.
3541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
3568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSign);
3569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset sign if positive or negative.
3575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
ARM GAS  /tmp/cc6jq3Wn.s 			page 74


3577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSETPOS);
3596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
3599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         force offset state disable or enable
3606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/cc6jq3Wn.s 			page 75


3634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
3636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
3642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset state disabled or enabled.
3649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSET1_EN);
3669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
3680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
3684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
ARM GAS  /tmp/cc6jq3Wn.s 			page 76


3691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
3743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
ARM GAS  /tmp/cc6jq3Wn.s 			page 77


3748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2U
3781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
3785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
3788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or external.
3793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 599              		.loc 1 3802 1
 600              		.cfi_startproc
ARM GAS  /tmp/cc6jq3Wn.s 			page 78


 601              		@ args = 0, pretend = 0, frame = 8
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604 0000 80B4     		push	{r7}
 605              	.LCFI54:
 606              		.cfi_def_cfa_offset 4
 607              		.cfi_offset 7, -4
 608 0002 83B0     		sub	sp, sp, #12
 609              	.LCFI55:
 610              		.cfi_def_cfa_offset 16
 611 0004 00AF     		add	r7, sp, #0
 612              	.LCFI56:
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
3803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
 615              		.loc 1 3803 12
 616 0008 7B68     		ldr	r3, [r7, #4]
 617 000a DB68     		ldr	r3, [r3, #12]
 618 000c 03F44063 		and	r3, r3, #3072
 619              		.loc 1 3803 103
 620 0010 002B     		cmp	r3, #0
 621 0012 01D1     		bne	.L26
 622              		.loc 1 3803 103 is_stmt 0 discriminator 1
 623 0014 0123     		movs	r3, #1
 624 0016 00E0     		b	.L28
 625              	.L26:
 626              		.loc 1 3803 103 discriminator 2
 627 0018 0023     		movs	r3, #0
 628              	.L28:
3804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 629              		.loc 1 3804 1 is_stmt 1 discriminator 5
 630 001a 1846     		mov	r0, r3
 631 001c 0C37     		adds	r7, r7, #12
 632              	.LCFI57:
 633              		.cfi_def_cfa_offset 4
 634 001e BD46     		mov	sp, r7
 635              	.LCFI58:
 636              		.cfi_def_cfa_register 13
 637              		@ sp needed
 638 0020 5DF8047B 		ldr	r7, [sp], #4
 639              	.LCFI59:
 640              		.cfi_restore 7
 641              		.cfi_def_cfa_offset 0
 642 0024 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE167:
 646              		.section	.text.LL_ADC_INJ_IsTriggerSourceSWStart,"ax",%progbits
 647              		.align	1
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu fpv5-d16
 653              	LL_ADC_INJ_IsTriggerSourceSWStart:
 654              	.LFB184:
3805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
ARM GAS  /tmp/cc6jq3Wn.s 			page 79


3808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Set sampling mode is applied to all conversion of regular group.
3847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
3863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
ARM GAS  /tmp/cc6jq3Wn.s 			page 80


3865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, SamplingMode);
3869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
ARM GAS  /tmp/cc6jq3Wn.s 			page 81


3922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
ARM GAS  /tmp/cc6jq3Wn.s 			page 82


3979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
3990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
4000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
4016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
4020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
4023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
4024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 83


4036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
4037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
4039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
4043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
4046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
4047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
4048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
4062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
4063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
4064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
4065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
4066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
4067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
4068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
4069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
4070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
4071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
4072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
4073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
4074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
4075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
4076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
4077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
ARM GAS  /tmp/cc6jq3Wn.s 			page 84


4093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
4132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> A
4135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
4137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
4145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
ARM GAS  /tmp/cc6jq3Wn.s 			page 85


4150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
ARM GAS  /tmp/cc6jq3Wn.s 			page 86


4207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK
4233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 87


4264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC data transfer mode
4282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_SetDataTransferMode
4288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DataTransferMode Select Data Management configuration
4290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
4293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
4295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
4298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable DMA requests for ADC3.
4300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
4305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
4307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDMAReq(ADC_TypeDef *ADCx)
4310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT (ADCx->CFGR, ADC3_CFGR_DMAEN);
4312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabledDMAReq (ADC_TypeDef *ADCx)
4315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN) == (ADC3_CFGR_DMAEN)) ? 1UL : 0UL);
4317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
ARM GAS  /tmp/cc6jq3Wn.s 			page 88


4321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransferMode\n
4345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransferMode
4346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
4358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
ARM GAS  /tmp/cc6jq3Wn.s 			page 89


4378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransferMode(ADC_TypeDef *ADCx)
4392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG));
4396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    else
4398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
4399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
4400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
4404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC data transfer mode
4407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in one shot mode
4410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred by DMA in circular mode
4411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transferred to DFSDM data register
4412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_GetDataTransferMode
4413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DR_TRANSFER
4416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
4419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
4421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMNGT));
4423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         other devices without this feature have a behavior
4431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         equivalent to data overwritten.
4432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         overrun should be set to data overwritten.
ARM GAS  /tmp/cc6jq3Wn.s 			page 90


4435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
4467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
4471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
4478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/cc6jq3Wn.s 			page 91


4492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
4530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
ARM GAS  /tmp/cc6jq3Wn.s 			page 92


4549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFSET_POS - 
4568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
4572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
4575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             or external
4580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 655              		.loc 1 4589 1
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660 0000 80B4     		push	{r7}
 661              	.LCFI60:
 662              		.cfi_def_cfa_offset 4
 663              		.cfi_offset 7, -4
 664 0002 83B0     		sub	sp, sp, #12
 665              	.LCFI61:
 666              		.cfi_def_cfa_offset 16
 667 0004 00AF     		add	r7, sp, #0
 668              	.LCFI62:
 669              		.cfi_def_cfa_register 7
 670 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc6jq3Wn.s 			page 93


4590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
 671              		.loc 1 4590 12
 672 0008 7B68     		ldr	r3, [r7, #4]
 673 000a DB6C     		ldr	r3, [r3, #76]
 674 000c 03F4C073 		and	r3, r3, #384
 675              		.loc 1 4590 105
 676 0010 002B     		cmp	r3, #0
 677 0012 01D1     		bne	.L30
 678              		.loc 1 4590 105 is_stmt 0 discriminator 1
 679 0014 0123     		movs	r3, #1
 680 0016 00E0     		b	.L32
 681              	.L30:
 682              		.loc 1 4590 105 discriminator 2
 683 0018 0023     		movs	r3, #0
 684              	.L32:
4591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 685              		.loc 1 4591 1 is_stmt 1 discriminator 5
 686 001a 1846     		mov	r0, r3
 687 001c 0C37     		adds	r7, r7, #12
 688              	.LCFI63:
 689              		.cfi_def_cfa_offset 4
 690 001e BD46     		mov	sp, r7
 691              	.LCFI64:
 692              		.cfi_def_cfa_register 13
 693              		@ sp needed
 694 0020 5DF8047B 		ldr	r7, [sp], #4
 695              	.LCFI65:
 696              		.cfi_restore 7
 697              		.cfi_def_cfa_offset 0
 698 0024 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE184:
 702              		.section	.text.LL_ADC_INJ_GetTrigAuto,"ax",%progbits
 703              		.align	1
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 707              		.fpu fpv5-d16
 709              	LL_ADC_INJ_GetTrigAuto:
 710              	.LFB194:
4592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
ARM GAS  /tmp/cc6jq3Wn.s 			page 94


4609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function retrieves:
4657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
ARM GAS  /tmp/cc6jq3Wn.s 			page 95


4666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
ARM GAS  /tmp/cc6jq3Wn.s 			page 96


4723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
ARM GAS  /tmp/cc6jq3Wn.s 			page 97


4780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
ARM GAS  /tmp/cc6jq3Wn.s 			page 98


4837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
4842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group injected.
4855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent trigger.
4858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC group regular.
4863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 711              		.loc 1 4891 1
 712              		.cfi_startproc
ARM GAS  /tmp/cc6jq3Wn.s 			page 99


 713              		@ args = 0, pretend = 0, frame = 8
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 716 0000 80B4     		push	{r7}
 717              	.LCFI66:
 718              		.cfi_def_cfa_offset 4
 719              		.cfi_offset 7, -4
 720 0002 83B0     		sub	sp, sp, #12
 721              	.LCFI67:
 722              		.cfi_def_cfa_offset 16
 723 0004 00AF     		add	r7, sp, #0
 724              	.LCFI68:
 725              		.cfi_def_cfa_register 7
 726 0006 7860     		str	r0, [r7, #4]
4892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 727              		.loc 1 4892 21
 728 0008 7B68     		ldr	r3, [r7, #4]
 729 000a DB68     		ldr	r3, [r3, #12]
 730              		.loc 1 4892 10
 731 000c 03F00073 		and	r3, r3, #33554432
4893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 732              		.loc 1 4893 1
 733 0010 1846     		mov	r0, r3
 734 0012 0C37     		adds	r7, r7, #12
 735              	.LCFI69:
 736              		.cfi_def_cfa_offset 4
 737 0014 BD46     		mov	sp, r7
 738              	.LCFI70:
 739              		.cfi_def_cfa_register 13
 740              		@ sp needed
 741 0016 5DF8047B 		ldr	r7, [sp], #4
 742              	.LCFI71:
 743              		.cfi_restore 7
 744              		.cfi_def_cfa_offset 0
 745 001a 7047     		bx	lr
 746              		.cfi_endproc
 747              	.LFE194:
 749              		.section	.text.LL_ADC_INJ_SetQueueMode,"ax",%progbits
 750              		.align	1
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu fpv5-d16
 756              	LL_ADC_INJ_SetQueueMode:
 757              	.LFB195:
4894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is disabled:
4902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - only 1 sequence can be configured
4903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and is active perpetually.
4904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is enabled:
4905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - up to 2 contexts can be queued
ARM GAS  /tmp/cc6jq3Wn.s 			page 100


4906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           into the queue).
4916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 758              		.loc 1 4937 1
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 8
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763 0000 80B4     		push	{r7}
 764              	.LCFI72:
 765              		.cfi_def_cfa_offset 4
 766              		.cfi_offset 7, -4
 767 0002 83B0     		sub	sp, sp, #12
 768              	.LCFI73:
 769              		.cfi_def_cfa_offset 16
 770 0004 00AF     		add	r7, sp, #0
 771              	.LCFI74:
 772              		.cfi_def_cfa_register 7
 773 0006 7860     		str	r0, [r7, #4]
 774 0008 3960     		str	r1, [r7]
4938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 775              		.loc 1 4938 3
 776 000a 7B68     		ldr	r3, [r7, #4]
 777 000c DA68     		ldr	r2, [r3, #12]
 778 000e 064B     		ldr	r3, .L36
 779 0010 1340     		ands	r3, r3, r2
 780 0012 3A68     		ldr	r2, [r7]
 781 0014 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cc6jq3Wn.s 			page 101


 782 0016 7B68     		ldr	r3, [r7, #4]
 783 0018 DA60     		str	r2, [r3, #12]
4939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 784              		.loc 1 4939 1
 785 001a 00BF     		nop
 786 001c 0C37     		adds	r7, r7, #12
 787              	.LCFI75:
 788              		.cfi_def_cfa_offset 4
 789 001e BD46     		mov	sp, r7
 790              	.LCFI76:
 791              		.cfi_def_cfa_register 13
 792              		@ sp needed
 793 0020 5DF8047B 		ldr	r7, [sp], #4
 794              	.LCFI77:
 795              		.cfi_restore 7
 796              		.cfi_def_cfa_offset 0
 797 0024 7047     		bx	lr
 798              	.L37:
 799 0026 00BF     		.align	2
 800              	.L36:
 801 0028 FFFFDF7F 		.word	2145386495
 802              		.cfi_endproc
 803              	.LFE195:
 805              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
 806              		.align	1
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu fpv5-d16
 812              	LL_ADC_SetChannelSamplingTime:
 813              	.LFB198:
4940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         contexts queue.
4959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
ARM GAS  /tmp/cc6jq3Wn.s 			page 102


4966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         cannot be used):
4967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
4974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
5000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
5001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
5002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
5003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
5004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
5005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
5006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
5007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
5008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
5009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
5010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
5011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
5012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
5013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
5014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
5015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
5016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
5017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
5018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
5020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
5021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
5022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
ARM GAS  /tmp/cc6jq3Wn.s 			page 103


5023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
5024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
5025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
5026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
5027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
5058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
ARM GAS  /tmp/cc6jq3Wn.s 			page 104


5080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
ARM GAS  /tmp/cc6jq3Wn.s 			page 105


5137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1UL : 0UL);
5168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JL,
5176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)        |
5177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SequencerNbRanks
5183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             );
5184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 106


5194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted:
5201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         setting).
5204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TS_temp, ...).
5206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required.
5215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
5216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
ARM GAS  /tmp/cc6jq3Wn.s 			page 107


5251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 814              		.loc 1 5283 1
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 24
 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 819 0000 80B4     		push	{r7}
 820              	.LCFI78:
 821              		.cfi_def_cfa_offset 4
 822              		.cfi_offset 7, -4
 823 0002 87B0     		sub	sp, sp, #28
 824              	.LCFI79:
 825              		.cfi_def_cfa_offset 32
 826 0004 00AF     		add	r7, sp, #0
 827              	.LCFI80:
 828              		.cfi_def_cfa_register 7
 829 0006 F860     		str	r0, [r7, #12]
 830 0008 B960     		str	r1, [r7, #8]
 831 000a 7A60     		str	r2, [r7, #4]
5284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_M
 832              		.loc 1 5288 25
ARM GAS  /tmp/cc6jq3Wn.s 			page 108


 833 000c FB68     		ldr	r3, [r7, #12]
 834 000e 1433     		adds	r3, r3, #20
 835 0010 1A46     		mov	r2, r3
 836 0012 BB68     		ldr	r3, [r7, #8]
 837 0014 5B0E     		lsrs	r3, r3, #25
 838 0016 9B00     		lsls	r3, r3, #2
 839 0018 03F00403 		and	r3, r3, #4
 840 001c 1344     		add	r3, r3, r2
 841              		.loc 1 5288 18
 842 001e 7B61     		str	r3, [r7, #20]
5289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
 843              		.loc 1 5290 3
 844 0020 7B69     		ldr	r3, [r7, #20]
 845 0022 1A68     		ldr	r2, [r3]
 846 0024 BB68     		ldr	r3, [r7, #8]
 847 0026 1B0D     		lsrs	r3, r3, #20
 848 0028 03F01F03 		and	r3, r3, #31
 849 002c 0721     		movs	r1, #7
 850 002e 01FA03F3 		lsl	r3, r1, r3
 851 0032 DB43     		mvns	r3, r3
 852 0034 1A40     		ands	r2, r2, r3
 853 0036 BB68     		ldr	r3, [r7, #8]
 854 0038 1B0D     		lsrs	r3, r3, #20
 855 003a 03F01F03 		and	r3, r3, #31
 856 003e 7968     		ldr	r1, [r7, #4]
 857 0040 01FA03F3 		lsl	r3, r1, r3
 858 0044 1A43     		orrs	r2, r2, r3
 859 0046 7B69     		ldr	r3, [r7, #20]
 860 0048 1A60     		str	r2, [r3]
5291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 861              		.loc 1 5293 1
 862 004a 00BF     		nop
 863 004c 1C37     		adds	r7, r7, #28
 864              	.LCFI81:
 865              		.cfi_def_cfa_offset 4
 866 004e BD46     		mov	sp, r7
 867              	.LCFI82:
 868              		.cfi_def_cfa_register 13
 869              		@ sp needed
 870 0050 5DF8047B 		ldr	r7, [sp], #4
 871              	.LCFI83:
 872              		.cfi_restore 7
 873              		.cfi_def_cfa_offset 0
 874 0054 7047     		bx	lr
 875              		.cfi_endproc
 876              	.LFE198:
 878              		.section	.text.LL_ADC_SetChannelSingleDiff,"ax",%progbits
 879              		.align	1
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 883              		.fpu fpv5-d16
 885              	LL_ADC_SetChannelSingleDiff:
 886              	.LFB200:
ARM GAS  /tmp/cc6jq3Wn.s 			page 109


5294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
5302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
ARM GAS  /tmp/cc6jq3Wn.s 			page 110


5351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOF
5370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
5375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group regular or injected.
5382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
5403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
5404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
ARM GAS  /tmp/cc6jq3Wn.s 			page 111


5408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 887              		.loc 1 5429 1
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892 0000 80B4     		push	{r7}
 893              	.LCFI84:
 894              		.cfi_def_cfa_offset 4
 895              		.cfi_offset 7, -4
 896 0002 85B0     		sub	sp, sp, #20
 897              	.LCFI85:
 898              		.cfi_def_cfa_offset 24
 899 0004 00AF     		add	r7, sp, #0
 900              	.LCFI86:
 901              		.cfi_def_cfa_register 7
 902 0006 F860     		str	r0, [r7, #12]
 903 0008 B960     		str	r1, [r7, #8]
 904 000a 7A60     		str	r2, [r7, #4]
5430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR2_DIFSEL,
5437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->DIFSEL_RES12,
5443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
ARM GAS  /tmp/cc6jq3Wn.s 			page 112


5447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
 905              		.loc 1 5450 3
 906 000c FB68     		ldr	r3, [r7, #12]
 907 000e D3F8C020 		ldr	r2, [r3, #192]
 908 0012 BB68     		ldr	r3, [r7, #8]
 909 0014 C3F31303 		ubfx	r3, r3, #0, #20
 910 0018 DB43     		mvns	r3, r3
 911 001a 1A40     		ands	r2, r2, r3
 912 001c 7B68     		ldr	r3, [r7, #4]
 913 001e 03F01803 		and	r3, r3, #24
 914 0022 0849     		ldr	r1, .L40
 915 0024 D940     		lsrs	r1, r1, r3
 916 0026 BB68     		ldr	r3, [r7, #8]
 917 0028 0B40     		ands	r3, r3, r1
 918 002a C3F31303 		ubfx	r3, r3, #0, #20
 919 002e 1A43     		orrs	r2, r2, r3
 920 0030 FB68     		ldr	r3, [r7, #12]
 921 0032 C3F8C020 		str	r2, [r3, #192]
5451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 922              		.loc 1 5454 1
 923 0036 00BF     		nop
 924 0038 1437     		adds	r7, r7, #20
 925              	.LCFI87:
 926              		.cfi_def_cfa_offset 4
 927 003a BD46     		mov	sp, r7
 928              	.LCFI88:
 929              		.cfi_def_cfa_register 13
 930              		@ sp needed
 931 003c 5DF8047B 		ldr	r7, [sp], #4
 932              	.LCFI89:
 933              		.cfi_restore 7
 934              		.cfi_def_cfa_offset 0
 935 0040 7047     		bx	lr
 936              	.L41:
 937 0042 00BF     		.align	2
 938              	.L40:
 939 0044 FFFF0F00 		.word	1048575
 940              		.cfi_endproc
 941              	.LFE200:
 943              		.section	.text.LL_ADC_GetMultimode,"ax",%progbits
 944              		.align	1
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 948              		.fpu fpv5-d16
 950              	LL_ADC_GetMultimode:
 951              	.LFB216:
5455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
ARM GAS  /tmp/cc6jq3Wn.s 			page 113


5459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
5502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL_RES12, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  
5504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 114


5516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
5522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
ARM GAS  /tmp/cc6jq3Wn.s 			page 115


5573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
5627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
5628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
5629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
ARM GAS  /tmp/cc6jq3Wn.s 			page 116


5630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
5631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
5632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
5633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
5634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
5635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
5636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
5637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
5638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
5639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
5640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
5641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
5643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
5645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> AD
5654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
5657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
5671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
5673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           one channel.
5676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
ARM GAS  /tmp/cc6jq3Wn.s 			page 117


5687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             by bitfield.
5718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
ARM GAS  /tmp/cc6jq3Wn.s 			page 118


5744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.
5785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)
5789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
5792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* or a single channel.                                                     */
5797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
ARM GAS  /tmp/cc6jq3Wn.s 			page 119


5801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  )
5807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
5819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return AnalogWDMonitChannels;
5840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high or low.
5845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
ARM GAS  /tmp/cc6jq3Wn.s 			page 120


5858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done
5871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on oversampling intermediate computation (after ratio, before shift
5872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         application): intermediate register bitfield [32:7]
5873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (26 most significant bits).
5874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
5875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
5906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
5908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdsHighLow,
5909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_
5910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
ARM GAS  /tmp/cc6jq3Wn.s 			page 121


5915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
5919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
5920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (AWDThresholdsHighLow));
5921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> A
5931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) * 
5932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + (AWDThresholdsHighLow));
5933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
5936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         concatenated.
5942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
5960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
5961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_
5965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MA
5966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + (AWDThresholdsHighLow));
5967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + ((AWDy & ADC_AWD_TR12_REGOFFSE
ARM GAS  /tmp/cc6jq3Wn.s 			page 122


5972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + (AWDThresholdsHighLow));
5973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high and low. Applicable for devices STM32H72xx and STM32H73xx.
5983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
5989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
6000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
6001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
6002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
6003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
6004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
6005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
6006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
6007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
6008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
6009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
6010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
6011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
6012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
6013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
6014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
6015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
6021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
6022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
6025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
6027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
6028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDy".                                                                  */
ARM GAS  /tmp/cc6jq3Wn.s 			page 123


6029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
6030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
6031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
6034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
6036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
6037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (AWDThresholdHighValue << ADC3_TR1_HT1_Pos) | AWDThresholdLowValue);
6038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
6042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
6043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (LL_ADC_AWD_THRESHOLD_LOW));
6044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
6046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + (LL_ADC_AWD_THRESHOLD_HIGH));
6047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
6049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
6050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
6056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
6064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
6068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT, FilteringConfig);
6085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
ARM GAS  /tmp/cc6jq3Wn.s 			page 124


6086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6087:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6088:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6089:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6090:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 series, this feature is only available on first
6091:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6092:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6093:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6094:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6095:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6096:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6097:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be:
6098:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6099:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6100:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6101:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6102:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6103:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6104:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6105:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6106:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6107:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6108:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6109:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6110:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6111:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6112:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6113:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT));
6114:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6115:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6116:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6117:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance, return 0 */
6118:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
6119:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6120:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6121:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
6122:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6123:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6124:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6125:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6126:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6127:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6128:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6129:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6130:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6131:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6132:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6133:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6134:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6135:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6136:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6137:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6138:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6139:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6140:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6141:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6142:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /tmp/cc6jq3Wn.s 			page 125


6143:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6144:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6145:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6146:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6147:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6148:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6149:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6150:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6151:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6152:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6153:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6154:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6155:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6156:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6157:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6158:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6159:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6160:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6161:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6162:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6163:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6164:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6165:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6166:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6167:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6168:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6169:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6170:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6171:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6172:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6173:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6174:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6175:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6176:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6177:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6178:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6179:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6180:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6181:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6182:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6183:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6184:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6185:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6186:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6187:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6188:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6189:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6190:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6191:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6192:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6193:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6194:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6195:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6196:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
6197:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, oversampling discontinuous mode
6198:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6199:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
ARM GAS  /tmp/cc6jq3Wn.s 			page 126


6200:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6201:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6202:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6203:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6204:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6205:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6206:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6207:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6208:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6209:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6210:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6211:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6212:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6213:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6214:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6215:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6216:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6217:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6218:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6219:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6220:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6221:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6222:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6223:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6224:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6225:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6226:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6227:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6228:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6229:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6230:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6231:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6232:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling
6233:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6234:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6235:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ratio
6236:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - shift
6237:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6238:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6239:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6240:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6241:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6242:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6243:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6244:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Ratio This parameter can be in the range from 1 to 1024.
6245:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6246:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6247:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6248:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6249:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6250:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6251:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6252:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6253:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6254:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6255:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6256:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
ARM GAS  /tmp/cc6jq3Wn.s 			page 127


6257:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6258:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6259:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6260:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6261:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6262:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_
6263:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6264:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6265:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6266:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6267:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6268:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6269:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6270:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Ratio This parameter can be in the from 1 to 1024.
6271:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6272:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6273:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6274:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (((uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR)) + (1UL << ADC_CFGR2_OVSR_Pos)) >> ADC_
6275:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6276:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6277:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6278:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6279:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6280:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6281:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6282:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6283:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6284:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6285:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6286:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6287:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6288:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6289:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6290:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6291:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6292:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6293:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6294:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6295:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6296:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6297:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6298:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6299:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6300:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6301:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6302:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6303:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6304:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6305:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6306:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6307:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6308:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6309:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC boost mode.
6310:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6311:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6312:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6313:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
ARM GAS  /tmp/cc6jq3Wn.s 			page 128


6314:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_SetBoostMode
6315:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6316:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  BoostMode This parameter can be one of the following values:
6317:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_6MHZ25
6318:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_12MHZ5
6319:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_20MHZ
6320:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_25MHZ
6321:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_50MHZ
6322:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6323:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6324:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
6325:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6326:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6327:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
6328:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6329:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6330:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6331:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else   /* ADC_VER_V5_V90 */
6332:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6333:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6334:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
6335:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6336:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6337:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6338:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6339:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6340:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
6341:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6342:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6343:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6344:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6345:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC boost mode.
6346:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6347:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6348:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6349:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6350:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_GetBoostMode
6351:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6352:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: Boost disabled 1: Boost enabled
6353:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6354:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
6355:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6356:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6357:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6358:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)READ_BIT(ADCx->CR, ADC_CR_BOOST_0);
6359:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6360:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6361:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6362:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return ((READ_BIT(ADCx->CR, ADC_CR_BOOST) == (ADC_CR_BOOST)) ? 1UL : 0UL);
6363:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6364:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6365:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6366:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6367:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6368:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6369:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6370:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
ARM GAS  /tmp/cc6jq3Wn.s 			page 129


6371:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6372:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6373:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6374:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6375:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6376:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro
6377:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6378:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6379:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6380:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6381:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6382:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6383:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6384:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6385:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6386:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6387:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6388:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6389:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6390:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6391:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6392:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6393:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6394:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6395:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6396:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6397:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6398:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6399:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6400:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6401:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6402:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6403:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6404:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6405:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6406:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6407:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6408:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6409:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6410:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6411:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6412:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6413:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6414:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6415:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6416:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6417:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 952              		.loc 1 6417 1
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 8
 955              		@ frame_needed = 1, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957 0000 80B4     		push	{r7}
 958              	.LCFI90:
 959              		.cfi_def_cfa_offset 4
 960              		.cfi_offset 7, -4
 961 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc6jq3Wn.s 			page 130


 962              	.LCFI91:
 963              		.cfi_def_cfa_offset 16
 964 0004 00AF     		add	r7, sp, #0
 965              	.LCFI92:
 966              		.cfi_def_cfa_register 7
 967 0006 7860     		str	r0, [r7, #4]
6418:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 968              		.loc 1 6418 21
 969 0008 7B68     		ldr	r3, [r7, #4]
 970 000a 9B68     		ldr	r3, [r3, #8]
 971              		.loc 1 6418 10
 972 000c 03F01F03 		and	r3, r3, #31
6419:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 973              		.loc 1 6419 1
 974 0010 1846     		mov	r0, r3
 975 0012 0C37     		adds	r7, r7, #12
 976              	.LCFI93:
 977              		.cfi_def_cfa_offset 4
 978 0014 BD46     		mov	sp, r7
 979              	.LCFI94:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 0016 5DF8047B 		ldr	r7, [sp], #4
 983              	.LCFI95:
 984              		.cfi_restore 7
 985              		.cfi_def_cfa_offset 0
 986 001a 7047     		bx	lr
 987              		.cfi_endproc
 988              	.LFE216:
 990              		.section	.text.LL_ADC_EnableDeepPowerDown,"ax",%progbits
 991              		.align	1
 992              		.syntax unified
 993              		.thumb
 994              		.thumb_func
 995              		.fpu fpv5-d16
 997              	LL_ADC_EnableDeepPowerDown:
 998              	.LFB221:
6420:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6421:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6422:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6423:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6424:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6425:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6426:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6427:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6428:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6429:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6430:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6431:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6432:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6433:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6434:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6435:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6436:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6437:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6438:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6439:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
ARM GAS  /tmp/cc6jq3Wn.s 			page 131


6440:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6441:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6442:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6443:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6444:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6445:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6446:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6447:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6448:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6449:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6450:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6451:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6452:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6453:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6454:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6455:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6456:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6457:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6458:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6459:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6460:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6461:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6462:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6463:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6464:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6465:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6466:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DAMDF, MultiDMATransfer);
6467:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6468:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6469:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6470:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6471:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6472:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6473:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6474:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6475:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6476:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6477:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6478:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6479:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6480:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6481:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6482:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6483:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6484:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6485:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6486:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6487:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6488:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6489:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6490:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6491:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6492:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6493:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6494:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6495:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6496:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
ARM GAS  /tmp/cc6jq3Wn.s 			page 132


6497:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6498:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6499:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6500:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6501:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6502:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6503:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6504:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6505:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6506:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6507:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6508:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6509:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
6510:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6511:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6512:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6513:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6514:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6515:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6516:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6517:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6518:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6519:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6520:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6521:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6522:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6523:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6524:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6525:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6526:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6527:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6528:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6529:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6530:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6531:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6532:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6533:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6534:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6535:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6536:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6537:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6538:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6539:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6540:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6541:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6542:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6543:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6544:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6545:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6546:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6547:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6548:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6549:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6550:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6551:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6552:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6553:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/cc6jq3Wn.s 			page 133


6554:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6555:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6556:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6557:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6558:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6559:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6560:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6561:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6562:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6563:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6564:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6565:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6566:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6567:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6568:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6569:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6570:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6571:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6572:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6573:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6574:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6575:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6576:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6577:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6578:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6579:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6580:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6581:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6582:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6583:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6584:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6585:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6586:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6587:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6588:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6589:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6590:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6591:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6592:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6593:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6594:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6595:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6596:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6597:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6598:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6599:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6600:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6601:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6602:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6603:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6604:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6605:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6606:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6607:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6608:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6609:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6610:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
ARM GAS  /tmp/cc6jq3Wn.s 			page 134


6611:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 999              		.loc 1 6611 1
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 8
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004 0000 80B4     		push	{r7}
 1005              	.LCFI96:
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 83B0     		sub	sp, sp, #12
 1009              	.LCFI97:
 1010              		.cfi_def_cfa_offset 16
 1011 0004 00AF     		add	r7, sp, #0
 1012              	.LCFI98:
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
6612:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6613:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6614:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6615:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1015              		.loc 1 6615 3
 1016 0008 7B68     		ldr	r3, [r7, #4]
 1017 000a 9A68     		ldr	r2, [r3, #8]
 1018 000c 054B     		ldr	r3, .L45
 1019 000e 1340     		ands	r3, r3, r2
 1020 0010 43F00052 		orr	r2, r3, #536870912
 1021 0014 7B68     		ldr	r3, [r7, #4]
 1022 0016 9A60     		str	r2, [r3, #8]
6616:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6617:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6618:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1023              		.loc 1 6618 1
 1024 0018 00BF     		nop
 1025 001a 0C37     		adds	r7, r7, #12
 1026              	.LCFI99:
 1027              		.cfi_def_cfa_offset 4
 1028 001c BD46     		mov	sp, r7
 1029              	.LCFI100:
 1030              		.cfi_def_cfa_register 13
 1031              		@ sp needed
 1032 001e 5DF8047B 		ldr	r7, [sp], #4
 1033              	.LCFI101:
 1034              		.cfi_restore 7
 1035              		.cfi_def_cfa_offset 0
 1036 0022 7047     		bx	lr
 1037              	.L46:
 1038              		.align	2
 1039              	.L45:
 1040 0024 C0FFFF5F 		.word	1610612672
 1041              		.cfi_endproc
 1042              	.LFE221:
 1044              		.section	.text.LL_ADC_DisableInternalRegulator,"ax",%progbits
 1045              		.align	1
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
ARM GAS  /tmp/cc6jq3Wn.s 			page 135


 1049              		.fpu fpv5-d16
 1051              	LL_ADC_DisableInternalRegulator:
 1052              	.LFB225:
6619:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6620:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6621:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6622:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6623:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6624:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6625:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6626:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6627:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6628:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6629:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6630:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6631:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6632:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6633:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6634:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6635:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6636:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6637:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6638:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
6639:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6640:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6641:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6642:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6643:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6644:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6645:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6646:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6647:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6648:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6649:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
6650:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6651:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6652:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6653:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6654:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC internal voltage regulator enable,
6655:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6656:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6657:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6658:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6659:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6660:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6661:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6662:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6663:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6664:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6665:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6666:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6667:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6668:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6669:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6670:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6671:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6672:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
ARM GAS  /tmp/cc6jq3Wn.s 			page 136


6673:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6674:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6675:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6676:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6677:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6678:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6679:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6680:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6681:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6682:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6683:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6684:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6685:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6686:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1053              		.loc 1 6686 1
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 8
 1056              		@ frame_needed = 1, uses_anonymous_args = 0
 1057              		@ link register save eliminated.
 1058 0000 80B4     		push	{r7}
 1059              	.LCFI102:
 1060              		.cfi_def_cfa_offset 4
 1061              		.cfi_offset 7, -4
 1062 0002 83B0     		sub	sp, sp, #12
 1063              	.LCFI103:
 1064              		.cfi_def_cfa_offset 16
 1065 0004 00AF     		add	r7, sp, #0
 1066              	.LCFI104:
 1067              		.cfi_def_cfa_register 7
 1068 0006 7860     		str	r0, [r7, #4]
6687:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 1069              		.loc 1 6687 3
 1070 0008 7B68     		ldr	r3, [r7, #4]
 1071 000a 9A68     		ldr	r2, [r3, #8]
 1072 000c 044B     		ldr	r3, .L48
 1073 000e 1340     		ands	r3, r3, r2
 1074 0010 7A68     		ldr	r2, [r7, #4]
 1075 0012 9360     		str	r3, [r2, #8]
6688:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1076              		.loc 1 6688 1
 1077 0014 00BF     		nop
 1078 0016 0C37     		adds	r7, r7, #12
 1079              	.LCFI105:
 1080              		.cfi_def_cfa_offset 4
 1081 0018 BD46     		mov	sp, r7
 1082              	.LCFI106:
 1083              		.cfi_def_cfa_register 13
 1084              		@ sp needed
 1085 001a 5DF8047B 		ldr	r7, [sp], #4
 1086              	.LCFI107:
 1087              		.cfi_restore 7
 1088              		.cfi_def_cfa_offset 0
 1089 001e 7047     		bx	lr
 1090              	.L49:
 1091              		.align	2
 1092              	.L48:
 1093 0020 C0FFFF6F 		.word	1879048128
ARM GAS  /tmp/cc6jq3Wn.s 			page 137


 1094              		.cfi_endproc
 1095              	.LFE225:
 1097              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
 1098              		.align	1
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1102              		.fpu fpv5-d16
 1104              	LL_ADC_IsEnabled:
 1105              	.LFB229:
6689:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6690:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6691:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6692:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6693:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6694:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6695:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6696:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6697:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6698:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
6699:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6700:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6701:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6702:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6703:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for
6704:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6705:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion start.
6706:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6707:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6708:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6709:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6710:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6711:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6712:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6713:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6714:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6715:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6716:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6717:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6718:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6719:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6720:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6721:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6722:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6723:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6724:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADEN);
6725:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6726:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6727:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6728:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6729:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6730:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6731:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6732:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6733:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6734:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6735:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/cc6jq3Wn.s 			page 138


6736:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6737:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6738:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6739:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6740:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6741:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6742:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6743:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6744:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADDIS);
6745:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6746:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6747:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6748:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6749:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6750:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6751:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6752:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6753:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6754:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6755:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6756:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6757:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1106              		.loc 1 6757 1
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 8
 1109              		@ frame_needed = 1, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111 0000 80B4     		push	{r7}
 1112              	.LCFI108:
 1113              		.cfi_def_cfa_offset 4
 1114              		.cfi_offset 7, -4
 1115 0002 83B0     		sub	sp, sp, #12
 1116              	.LCFI109:
 1117              		.cfi_def_cfa_offset 16
 1118 0004 00AF     		add	r7, sp, #0
 1119              	.LCFI110:
 1120              		.cfi_def_cfa_register 7
 1121 0006 7860     		str	r0, [r7, #4]
6758:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 1122              		.loc 1 6758 12
 1123 0008 7B68     		ldr	r3, [r7, #4]
 1124 000a 9B68     		ldr	r3, [r3, #8]
 1125 000c 03F00103 		and	r3, r3, #1
 1126              		.loc 1 6758 68
 1127 0010 012B     		cmp	r3, #1
 1128 0012 01D1     		bne	.L51
 1129              		.loc 1 6758 68 is_stmt 0 discriminator 1
 1130 0014 0123     		movs	r3, #1
 1131 0016 00E0     		b	.L53
 1132              	.L51:
 1133              		.loc 1 6758 68 discriminator 2
 1134 0018 0023     		movs	r3, #0
 1135              	.L53:
6759:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1136              		.loc 1 6759 1 is_stmt 1 discriminator 5
 1137 001a 1846     		mov	r0, r3
 1138 001c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/cc6jq3Wn.s 			page 139


 1139              	.LCFI111:
 1140              		.cfi_def_cfa_offset 4
 1141 001e BD46     		mov	sp, r7
 1142              	.LCFI112:
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
 1145 0020 5DF8047B 		ldr	r7, [sp], #4
 1146              	.LCFI113:
 1147              		.cfi_restore 7
 1148              		.cfi_def_cfa_offset 0
 1149 0024 7047     		bx	lr
 1150              		.cfi_endproc
 1151              	.LFE229:
 1153              		.section	.text.LL_ADC_StartCalibration,"ax",%progbits
 1154              		.align	1
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu fpv5-d16
 1160              	LL_ADC_StartCalibration:
 1161              	.LFB231:
6760:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6761:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6762:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6763:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6764:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6765:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6766:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6767:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6768:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6769:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
6770:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6771:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6772:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6773:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6774:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6775:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, a minimum number of ADC clock cycles
6776:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6777:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6778:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration duration:
6779:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of offset: 520 ADC clock cycles
6780:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of linearity: 131072 ADC clock cycles
6781:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
6782:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6783:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6784:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6785:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6786:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
6787:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
6788:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6789:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run can be performed only once).
6790:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6791:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6792:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6793:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6794:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration\n
6795:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALLIN       LL_ADC_StartCalibration
ARM GAS  /tmp/cc6jq3Wn.s 			page 140


6796:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6797:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationMode This parameter can be one of the following values:
6798:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET
6799:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET_LINEARITY
6800:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6801:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6802:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6803:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6804:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6805:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t 
6806:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1162              		.loc 1 6806 1
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 16
 1165              		@ frame_needed = 1, uses_anonymous_args = 0
 1166              		@ link register save eliminated.
 1167 0000 80B4     		push	{r7}
 1168              	.LCFI114:
 1169              		.cfi_def_cfa_offset 4
 1170              		.cfi_offset 7, -4
 1171 0002 85B0     		sub	sp, sp, #20
 1172              	.LCFI115:
 1173              		.cfi_def_cfa_offset 24
 1174 0004 00AF     		add	r7, sp, #0
 1175              	.LCFI116:
 1176              		.cfi_def_cfa_register 7
 1177 0006 F860     		str	r0, [r7, #12]
 1178 0008 B960     		str	r1, [r7, #8]
 1179 000a 7A60     		str	r2, [r7, #4]
6807:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6808:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6809:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6810:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1180              		.loc 1 6810 3
 1181 000c FB68     		ldr	r3, [r7, #12]
 1182 000e 9A68     		ldr	r2, [r3, #8]
 1183 0010 094B     		ldr	r3, .L55
 1184 0012 1340     		ands	r3, r3, r2
 1185 0014 BA68     		ldr	r2, [r7, #8]
 1186 0016 02F48031 		and	r1, r2, #65536
 1187 001a 7A68     		ldr	r2, [r7, #4]
 1188 001c 02F08042 		and	r2, r2, #1073741824
 1189 0020 0A43     		orrs	r2, r2, r1
 1190 0022 1343     		orrs	r3, r3, r2
 1191 0024 43F00042 		orr	r2, r3, #-2147483648
 1192 0028 FB68     		ldr	r3, [r7, #12]
 1193 002a 9A60     		str	r2, [r3, #8]
6811:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6812:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_
6813:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1194              		.loc 1 6813 1
 1195 002c 00BF     		nop
 1196 002e 1437     		adds	r7, r7, #20
 1197              	.LCFI117:
 1198              		.cfi_def_cfa_offset 4
 1199 0030 BD46     		mov	sp, r7
 1200              	.LCFI118:
ARM GAS  /tmp/cc6jq3Wn.s 			page 141


 1201              		.cfi_def_cfa_register 13
 1202              		@ sp needed
 1203 0032 5DF8047B 		ldr	r7, [sp], #4
 1204              	.LCFI119:
 1205              		.cfi_restore 7
 1206              		.cfi_def_cfa_offset 0
 1207 0036 7047     		bx	lr
 1208              	.L56:
 1209              		.align	2
 1210              	.L55:
 1211 0038 C0FFFE3F 		.word	1073676224
 1212              		.cfi_endproc
 1213              	.LFE231:
 1215              		.section	.text.LL_ADC_IsCalibrationOnGoing,"ax",%progbits
 1216              		.align	1
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu fpv5-d16
 1222              	LL_ADC_IsCalibrationOnGoing:
 1223              	.LFB232:
6814:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6815:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6816:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6817:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6818:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6819:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6820:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6821:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6822:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1224              		.loc 1 6822 1
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 8
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229 0000 80B4     		push	{r7}
 1230              	.LCFI120:
 1231              		.cfi_def_cfa_offset 4
 1232              		.cfi_offset 7, -4
 1233 0002 83B0     		sub	sp, sp, #12
 1234              	.LCFI121:
 1235              		.cfi_def_cfa_offset 16
 1236 0004 00AF     		add	r7, sp, #0
 1237              	.LCFI122:
 1238              		.cfi_def_cfa_register 7
 1239 0006 7860     		str	r0, [r7, #4]
6823:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 1240              		.loc 1 6823 12
 1241 0008 7B68     		ldr	r3, [r7, #4]
 1242 000a 9B68     		ldr	r3, [r3, #8]
 1243 000c 03F00043 		and	r3, r3, #-2147483648
 1244              		.loc 1 6823 70
 1245 0010 B3F1004F 		cmp	r3, #-2147483648
 1246 0014 01D1     		bne	.L58
 1247              		.loc 1 6823 70 is_stmt 0 discriminator 1
 1248 0016 0123     		movs	r3, #1
 1249 0018 00E0     		b	.L60
ARM GAS  /tmp/cc6jq3Wn.s 			page 142


 1250              	.L58:
 1251              		.loc 1 6823 70 discriminator 2
 1252 001a 0023     		movs	r3, #0
 1253              	.L60:
6824:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1254              		.loc 1 6824 1 is_stmt 1 discriminator 5
 1255 001c 1846     		mov	r0, r3
 1256 001e 0C37     		adds	r7, r7, #12
 1257              	.LCFI123:
 1258              		.cfi_def_cfa_offset 4
 1259 0020 BD46     		mov	sp, r7
 1260              	.LCFI124:
 1261              		.cfi_def_cfa_register 13
 1262              		@ sp needed
 1263 0022 5DF8047B 		ldr	r7, [sp], #4
 1264              	.LCFI125:
 1265              		.cfi_restore 7
 1266              		.cfi_def_cfa_offset 0
 1267 0026 7047     		bx	lr
 1268              		.cfi_endproc
 1269              	.LFE232:
 1271              		.section	.text.LL_ADC_REG_StartConversion,"ax",%progbits
 1272              		.align	1
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu fpv5-d16
 1278              	LL_ADC_REG_StartConversion:
 1279              	.LFB233:
6825:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6826:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6827:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6828:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6829:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6830:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6831:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6832:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6833:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6834:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6835:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6836:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
6837:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6838:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6839:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
6840:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6841:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6842:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
6843:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6844:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6845:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6846:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6847:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6848:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6849:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6850:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6851:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6852:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
ARM GAS  /tmp/cc6jq3Wn.s 			page 143


6853:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1280              		.loc 1 6853 1
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 8
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284              		@ link register save eliminated.
 1285 0000 80B4     		push	{r7}
 1286              	.LCFI126:
 1287              		.cfi_def_cfa_offset 4
 1288              		.cfi_offset 7, -4
 1289 0002 83B0     		sub	sp, sp, #12
 1290              	.LCFI127:
 1291              		.cfi_def_cfa_offset 16
 1292 0004 00AF     		add	r7, sp, #0
 1293              	.LCFI128:
 1294              		.cfi_def_cfa_register 7
 1295 0006 7860     		str	r0, [r7, #4]
6854:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6855:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6856:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6857:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1296              		.loc 1 6857 3
 1297 0008 7B68     		ldr	r3, [r7, #4]
 1298 000a 9A68     		ldr	r2, [r3, #8]
 1299 000c 054B     		ldr	r3, .L62
 1300 000e 1340     		ands	r3, r3, r2
 1301 0010 43F00402 		orr	r2, r3, #4
 1302 0014 7B68     		ldr	r3, [r7, #4]
 1303 0016 9A60     		str	r2, [r3, #8]
6858:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6859:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTART);
6860:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1304              		.loc 1 6860 1
 1305 0018 00BF     		nop
 1306 001a 0C37     		adds	r7, r7, #12
 1307              	.LCFI129:
 1308              		.cfi_def_cfa_offset 4
 1309 001c BD46     		mov	sp, r7
 1310              	.LCFI130:
 1311              		.cfi_def_cfa_register 13
 1312              		@ sp needed
 1313 001e 5DF8047B 		ldr	r7, [sp], #4
 1314              	.LCFI131:
 1315              		.cfi_restore 7
 1316              		.cfi_def_cfa_offset 0
 1317 0022 7047     		bx	lr
 1318              	.L63:
 1319              		.align	2
 1320              	.L62:
 1321 0024 C0FFFF7F 		.word	2147483584
 1322              		.cfi_endproc
 1323              	.LFE233:
 1325              		.section	.text.LL_ADC_REG_StopConversion,"ax",%progbits
 1326              		.align	1
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
ARM GAS  /tmp/cc6jq3Wn.s 			page 144


 1330              		.fpu fpv5-d16
 1332              	LL_ADC_REG_StopConversion:
 1333              	.LFB234:
6861:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6862:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6863:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6864:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
6865:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6866:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6867:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6868:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6869:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6870:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6871:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6872:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6873:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1334              		.loc 1 6873 1
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 8
 1337              		@ frame_needed = 1, uses_anonymous_args = 0
 1338              		@ link register save eliminated.
 1339 0000 80B4     		push	{r7}
 1340              	.LCFI132:
 1341              		.cfi_def_cfa_offset 4
 1342              		.cfi_offset 7, -4
 1343 0002 83B0     		sub	sp, sp, #12
 1344              	.LCFI133:
 1345              		.cfi_def_cfa_offset 16
 1346 0004 00AF     		add	r7, sp, #0
 1347              	.LCFI134:
 1348              		.cfi_def_cfa_register 7
 1349 0006 7860     		str	r0, [r7, #4]
6874:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6875:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6876:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6877:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1350              		.loc 1 6877 3
 1351 0008 7B68     		ldr	r3, [r7, #4]
 1352 000a 9A68     		ldr	r2, [r3, #8]
 1353 000c 054B     		ldr	r3, .L65
 1354 000e 1340     		ands	r3, r3, r2
 1355 0010 43F01002 		orr	r2, r3, #16
 1356 0014 7B68     		ldr	r3, [r7, #4]
 1357 0016 9A60     		str	r2, [r3, #8]
6878:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6879:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTP);
6880:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1358              		.loc 1 6880 1
 1359 0018 00BF     		nop
 1360 001a 0C37     		adds	r7, r7, #12
 1361              	.LCFI135:
 1362              		.cfi_def_cfa_offset 4
 1363 001c BD46     		mov	sp, r7
 1364              	.LCFI136:
 1365              		.cfi_def_cfa_register 13
 1366              		@ sp needed
 1367 001e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc6jq3Wn.s 			page 145


 1368              	.LCFI137:
 1369              		.cfi_restore 7
 1370              		.cfi_def_cfa_offset 0
 1371 0022 7047     		bx	lr
 1372              	.L66:
 1373              		.align	2
 1374              	.L65:
 1375 0024 C0FFFF7F 		.word	2147483584
 1376              		.cfi_endproc
 1377              	.LFE234:
 1379              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
 1380              		.align	1
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1384              		.fpu fpv5-d16
 1386              	LL_ADC_REG_IsConversionOngoing:
 1387              	.LFB235:
6881:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6882:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6883:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6884:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6885:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6886:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6887:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6888:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6889:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1388              		.loc 1 6889 1
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 8
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
 1393 0000 80B4     		push	{r7}
 1394              	.LCFI138:
 1395              		.cfi_def_cfa_offset 4
 1396              		.cfi_offset 7, -4
 1397 0002 83B0     		sub	sp, sp, #12
 1398              	.LCFI139:
 1399              		.cfi_def_cfa_offset 16
 1400 0004 00AF     		add	r7, sp, #0
 1401              	.LCFI140:
 1402              		.cfi_def_cfa_register 7
 1403 0006 7860     		str	r0, [r7, #4]
6890:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 1404              		.loc 1 6890 12
 1405 0008 7B68     		ldr	r3, [r7, #4]
 1406 000a 9B68     		ldr	r3, [r3, #8]
 1407 000c 03F00403 		and	r3, r3, #4
 1408              		.loc 1 6890 74
 1409 0010 042B     		cmp	r3, #4
 1410 0012 01D1     		bne	.L68
 1411              		.loc 1 6890 74 is_stmt 0 discriminator 1
 1412 0014 0123     		movs	r3, #1
 1413 0016 00E0     		b	.L70
 1414              	.L68:
 1415              		.loc 1 6890 74 discriminator 2
 1416 0018 0023     		movs	r3, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 146


 1417              	.L70:
6891:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1418              		.loc 1 6891 1 is_stmt 1 discriminator 5
 1419 001a 1846     		mov	r0, r3
 1420 001c 0C37     		adds	r7, r7, #12
 1421              	.LCFI141:
 1422              		.cfi_def_cfa_offset 4
 1423 001e BD46     		mov	sp, r7
 1424              	.LCFI142:
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 0020 5DF8047B 		ldr	r7, [sp], #4
 1428              	.LCFI143:
 1429              		.cfi_restore 7
 1430              		.cfi_def_cfa_offset 0
 1431 0024 7047     		bx	lr
 1432              		.cfi_endproc
 1433              	.LFE235:
 1435              		.section	.text.LL_ADC_INJ_StartConversion,"ax",%progbits
 1436              		.align	1
 1437              		.syntax unified
 1438              		.thumb
 1439              		.thumb_func
 1440              		.fpu fpv5-d16
 1442              	LL_ADC_INJ_StartConversion:
 1443              	.LFB244:
6892:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6893:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6894:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6895:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6896:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6897:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6898:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6899:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6900:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6901:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6902:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6903:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6904:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6905:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6906:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6907:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6908:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
6909:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6910:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6911:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6912:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6913:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6914:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6915:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6916:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6917:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6918:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6919:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6920:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
6921:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6922:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
ARM GAS  /tmp/cc6jq3Wn.s 			page 147


6923:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6924:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
6925:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6926:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
6927:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6928:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
6929:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6930:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6931:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6932:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6933:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6934:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6935:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
6936:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6937:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6938:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6939:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData14
6940:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6941:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FF
6942:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6943:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
6944:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6945:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6946:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6947:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6948:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6949:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6950:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
6951:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6952:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6953:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6954:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6955:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6956:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6957:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6958:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6959:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6960:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6961:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6962:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6963:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6964:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6965:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
6966:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6967:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6968:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6969:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6970:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6971:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6972:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6973:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6974:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6975:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6976:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6977:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6978:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6979:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
ARM GAS  /tmp/cc6jq3Wn.s 			page 148


6980:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
6981:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6982:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6983:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6984:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6985:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6986:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6987:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6988:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6989:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6990:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6991:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6992:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6993:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6994:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6995:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6996:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6997:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6998:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6999:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
7000:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
7001:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
7002:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         separately).
7003:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
7004:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
7005:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7006:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7007:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
7008:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
7009:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
7010:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
7011:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7012:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7013:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
7014:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7015:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
7016:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ConversionData)
7017:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
7018:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7019:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7020:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7021:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7022:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7023:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7024:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7025:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
7026:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7027:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7028:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7029:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7030:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
7031:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
7032:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
7033:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
7034:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
7035:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
7036:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
ARM GAS  /tmp/cc6jq3Wn.s 			page 149


7037:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
7038:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7039:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7040:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
7041:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
7042:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7043:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
7044:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7045:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7046:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7047:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
7048:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1444              		.loc 1 7048 1
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 8
 1447              		@ frame_needed = 1, uses_anonymous_args = 0
 1448              		@ link register save eliminated.
 1449 0000 80B4     		push	{r7}
 1450              	.LCFI144:
 1451              		.cfi_def_cfa_offset 4
 1452              		.cfi_offset 7, -4
 1453 0002 83B0     		sub	sp, sp, #12
 1454              	.LCFI145:
 1455              		.cfi_def_cfa_offset 16
 1456 0004 00AF     		add	r7, sp, #0
 1457              	.LCFI146:
 1458              		.cfi_def_cfa_register 7
 1459 0006 7860     		str	r0, [r7, #4]
7049:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7050:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7051:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7052:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1460              		.loc 1 7052 3
 1461 0008 7B68     		ldr	r3, [r7, #4]
 1462 000a 9A68     		ldr	r2, [r3, #8]
 1463 000c 054B     		ldr	r3, .L72
 1464 000e 1340     		ands	r3, r3, r2
 1465 0010 43F00802 		orr	r2, r3, #8
 1466 0014 7B68     		ldr	r3, [r7, #4]
 1467 0016 9A60     		str	r2, [r3, #8]
7053:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7054:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTART);
7055:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1468              		.loc 1 7055 1
 1469 0018 00BF     		nop
 1470 001a 0C37     		adds	r7, r7, #12
 1471              	.LCFI147:
 1472              		.cfi_def_cfa_offset 4
 1473 001c BD46     		mov	sp, r7
 1474              	.LCFI148:
 1475              		.cfi_def_cfa_register 13
 1476              		@ sp needed
 1477 001e 5DF8047B 		ldr	r7, [sp], #4
 1478              	.LCFI149:
 1479              		.cfi_restore 7
 1480              		.cfi_def_cfa_offset 0
 1481 0022 7047     		bx	lr
ARM GAS  /tmp/cc6jq3Wn.s 			page 150


 1482              	.L73:
 1483              		.align	2
 1484              	.L72:
 1485 0024 C0FFFF7F 		.word	2147483584
 1486              		.cfi_endproc
 1487              	.LFE244:
 1489              		.section	.text.LL_ADC_INJ_IsConversionOngoing,"ax",%progbits
 1490              		.align	1
 1491              		.syntax unified
 1492              		.thumb
 1493              		.thumb_func
 1494              		.fpu fpv5-d16
 1496              	LL_ADC_INJ_IsConversionOngoing:
 1497              	.LFB246:
7056:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7057:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7058:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
7059:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
7060:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7061:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
7062:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7063:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
7064:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7065:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7066:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7067:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
7068:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7069:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7070:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7071:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7072:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7073:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7074:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTP);
7075:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7076:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7077:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7078:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
7079:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
7080:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7081:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
7082:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7083:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
7084:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 1498              		.loc 1 7084 1
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 8
 1501              		@ frame_needed = 1, uses_anonymous_args = 0
 1502              		@ link register save eliminated.
 1503 0000 80B4     		push	{r7}
 1504              	.LCFI150:
 1505              		.cfi_def_cfa_offset 4
 1506              		.cfi_offset 7, -4
 1507 0002 83B0     		sub	sp, sp, #12
 1508              	.LCFI151:
 1509              		.cfi_def_cfa_offset 16
 1510 0004 00AF     		add	r7, sp, #0
 1511              	.LCFI152:
ARM GAS  /tmp/cc6jq3Wn.s 			page 151


 1512              		.cfi_def_cfa_register 7
 1513 0006 7860     		str	r0, [r7, #4]
7085:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 1514              		.loc 1 7085 12
 1515 0008 7B68     		ldr	r3, [r7, #4]
 1516 000a 9B68     		ldr	r3, [r3, #8]
 1517 000c 03F00803 		and	r3, r3, #8
 1518              		.loc 1 7085 76
 1519 0010 082B     		cmp	r3, #8
 1520 0012 01D1     		bne	.L75
 1521              		.loc 1 7085 76 is_stmt 0 discriminator 1
 1522 0014 0123     		movs	r3, #1
 1523 0016 00E0     		b	.L77
 1524              	.L75:
 1525              		.loc 1 7085 76 discriminator 2
 1526 0018 0023     		movs	r3, #0
 1527              	.L77:
7086:./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1528              		.loc 1 7086 1 is_stmt 1 discriminator 5
 1529 001a 1846     		mov	r0, r3
 1530 001c 0C37     		adds	r7, r7, #12
 1531              	.LCFI153:
 1532              		.cfi_def_cfa_offset 4
 1533 001e BD46     		mov	sp, r7
 1534              	.LCFI154:
 1535              		.cfi_def_cfa_register 13
 1536              		@ sp needed
 1537 0020 5DF8047B 		ldr	r7, [sp], #4
 1538              	.LCFI155:
 1539              		.cfi_restore 7
 1540              		.cfi_def_cfa_offset 0
 1541 0024 7047     		bx	lr
 1542              		.cfi_endproc
 1543              	.LFE246:
 1545              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
 1546              		.align	1
 1547              		.global	HAL_ADCEx_Calibration_Start
 1548              		.syntax unified
 1549              		.thumb
 1550              		.thumb_func
 1551              		.fpu fpv5-d16
 1553              	HAL_ADCEx_Calibration_Start:
 1554              	.LFB331:
 1555              		.file 2 "./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c"
   1:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
   2:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
   3:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @file    stm32h7xx_hal_adc_ex.c
   4:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following
   6:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Converter (ADC)
   7:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          peripheral:
   8:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + Operation functions
   9:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of ADC group injected,
  10:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *                using 2 possible modes: polling, interruption.
  11:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Calibration
  12:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *               +++ ADC automatic self-calibration
  13:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *               +++ Calibration factors get or set
ARM GAS  /tmp/cc6jq3Wn.s 			page 152


  14:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Multimode feature when available
  15:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + Control functions
  16:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Channels configuration on ADC group injected
  17:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + State functions
  18:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ ADC group injected contexts queue management
  19:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file
  20:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          "stm32h7xx_hal_adc.c".
  21:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  22:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   @verbatim
  23:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   [..]
  24:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  25:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       available in file of generic functions "stm32h7xx_hal_adc.c".
  26:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   [..]
  27:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   @endverbatim
  28:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
  29:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @attention
  30:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  31:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  32:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * All rights reserved.</center></h2>
  33:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  34:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  35:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * the "License"; You may not use this file except in compliance with the
  36:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * License. You may obtain a copy of the License at:
  37:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  38:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  39:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
  40:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  41:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  42:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  43:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #include "stm32h7xx_hal.h"
  44:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  45:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
  46:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  47:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  48:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  49:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  50:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief ADC Extended HAL module driver
  51:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  52:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  53:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  54:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  55:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  56:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  57:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  58:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  59:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADC Extended Private Constants
  60:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  61:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  62:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  63:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #define ADC_JSQR_FIELDS  ((ADC_JSQR_JL | ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN |\
  64:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ1  | ADC_JSQR_JSQ2 |\
  65:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ3 | ADC_JSQR_JSQ4 ))  /*!< ADC_JSQR fields of parameters tha
  66:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                                                   once the ADC is enabled */
  67:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  68:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Fixed timeout value for ADC calibration.                                   */
  69:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Fixed timeout value for ADC calibration.                                     */
  70:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Values defined to be higher than worst cases: low clock frequency,         */
ARM GAS  /tmp/cc6jq3Wn.s 			page 153


  71:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* maximum prescalers.                                                        */
  72:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Ex of profile low frequency : f_ADC at 0.125 Mhz (minimum value              */
  73:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* according to Data sheet), calibration_time MAX = 165010 / f_ADC              */
  74:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /*           165010 / 125000 = 1.32s                                            */
  75:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* At maximum CPU speed (480 MHz), this means                                   */
  76:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /*    1.32 * 480 MHz = 633600000 CPU cycles                                     */
  77:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #define ADC_CALIBRATION_TIMEOUT         (633600000U)   /*!< ADC calibration time-out value */
  78:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  79:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  80:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
  81:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @}
  82:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  83:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  84:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
  85:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
  86:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  87:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Exported functions --------------------------------------------------------*/
  88:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  89:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADC Extended Exported Functions
  90:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  91:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  92:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  93:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Input and Output operation functions
  94:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief    Extended IO operation functions
  95:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  96:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @verbatim
  97:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
  98:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       ##### IO operation functions #####
  99:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
 100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected.
 107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected.
 108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Poll for conversion complete on ADC group injected.
 109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get result of ADC group injected channel conversion.
 110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected and enable interruptions.
 111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected and disable interruptions.
 112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) When multimode feature is available, start multimode and enable DMA transfer.
 114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @endverbatim
 118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
 119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc       ADC handle
 126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** * @param  CalibrationMode       Selection of calibration offset or
 127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         linear calibration offset.
ARM GAS  /tmp/cc6jq3Wn.s 			page 154


 128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg ADC_CALIB_OFFSET       Channel in mode calibration offset
 129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg ADC_CALIB_OFFSET_LINEARITY Channel in mode linear calibration offset
 130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  SingleDiff Selection of single-ended or differential input
 131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This parameter can be one of the following values:
 132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, ui
 137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1556              		.loc 2 137 1
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 24
 1559              		@ frame_needed = 1, uses_anonymous_args = 0
 1560 0000 80B5     		push	{r7, lr}
 1561              	.LCFI156:
 1562              		.cfi_def_cfa_offset 8
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 86B0     		sub	sp, sp, #24
 1566              	.LCFI157:
 1567              		.cfi_def_cfa_offset 32
 1568 0004 00AF     		add	r7, sp, #0
 1569              	.LCFI158:
 1570              		.cfi_def_cfa_register 7
 1571 0006 F860     		str	r0, [r7, #12]
 1572 0008 B960     		str	r1, [r7, #8]
 1573 000a 7A60     		str	r2, [r7, #4]
 138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0UL;
 1574              		.loc 2 139 17
 1575 000c 0023     		movs	r3, #0
 1576 000e 3B61     		str	r3, [r7, #16]
 140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1577              		.loc 2 146 3
 1578 0010 FB68     		ldr	r3, [r7, #12]
 1579 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 1580 0016 012B     		cmp	r3, #1
 1581 0018 01D1     		bne	.L79
 1582              		.loc 2 146 3 is_stmt 0 discriminator 1
 1583 001a 0223     		movs	r3, #2
 1584 001c 4CE0     		b	.L80
 1585              	.L79:
 1586              		.loc 2 146 3 discriminator 2
 1587 001e FB68     		ldr	r3, [r7, #12]
 1588 0020 0122     		movs	r2, #1
 1589 0022 83F85020 		strb	r2, [r3, #80]
 147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Calibration prerequisite: ADC must be disabled. */
 149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable the ADC (if not already disabled) */
ARM GAS  /tmp/cc6jq3Wn.s 			page 155


 151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Disable(hadc);
 1590              		.loc 2 151 20 is_stmt 1 discriminator 2
 1591 0026 F868     		ldr	r0, [r7, #12]
 1592 0028 FFF7FEFF 		bl	ADC_Disable
 1593 002c 0346     		mov	r3, r0
 1594 002e FB75     		strb	r3, [r7, #23]
 152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1595              		.loc 2 154 6 discriminator 2
 1596 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1597 0032 002B     		cmp	r3, #0
 1598 0034 35D1     		bne	.L81
 155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state */
 157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 1599              		.loc 2 157 5
 1600 0036 FB68     		ldr	r3, [r7, #12]
 1601 0038 5A6D     		ldr	r2, [r3, #84]
 1602 003a 214B     		ldr	r3, .L85
 1603 003c 1340     		ands	r3, r3, r2
 1604 003e 43F00202 		orr	r2, r3, #2
 1605 0042 FB68     		ldr	r3, [r7, #12]
 1606 0044 5A65     		str	r2, [r3, #84]
 158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start ADC calibration in mode single-ended or differential */
 162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 1607              		.loc 2 162 5
 1608 0046 FB68     		ldr	r3, [r7, #12]
 1609 0048 1B68     		ldr	r3, [r3]
 1610 004a 7A68     		ldr	r2, [r7, #4]
 1611 004c B968     		ldr	r1, [r7, #8]
 1612 004e 1846     		mov	r0, r3
 1613 0050 FFF7FEFF 		bl	LL_ADC_StartCalibration
 163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 1614              		.loc 2 165 11
 1615 0054 14E0     		b	.L82
 1616              	.L83:
 166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       wait_loop_index++;
 1617              		.loc 2 167 22
 1618 0056 3B69     		ldr	r3, [r7, #16]
 1619 0058 0133     		adds	r3, r3, #1
 1620 005a 3B61     		str	r3, [r7, #16]
 168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 1621              		.loc 2 168 27
 1622 005c 3B69     		ldr	r3, [r7, #16]
 1623              		.loc 2 168 10
 1624 005e 194A     		ldr	r2, .L85+4
 1625 0060 9342     		cmp	r3, r2
 1626 0062 0DD3     		bcc	.L82
 169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
ARM GAS  /tmp/cc6jq3Wn.s 			page 156


 171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 1627              		.loc 2 171 9
 1628 0064 FB68     		ldr	r3, [r7, #12]
 1629 0066 5B6D     		ldr	r3, [r3, #84]
 1630 0068 23F01203 		bic	r3, r3, #18
 1631 006c 43F01002 		orr	r2, r3, #16
 1632 0070 FB68     		ldr	r3, [r7, #12]
 1633 0072 5A65     		str	r2, [r3, #84]
 172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Process unlocked */
 176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1634              		.loc 2 176 9
 1635 0074 FB68     		ldr	r3, [r7, #12]
 1636 0076 0022     		movs	r2, #0
 1637 0078 83F85020 		strb	r2, [r3, #80]
 177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         return HAL_ERROR;
 1638              		.loc 2 178 16
 1639 007c 0123     		movs	r3, #1
 1640 007e 1BE0     		b	.L80
 1641              	.L82:
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 1642              		.loc 2 165 12
 1643 0080 FB68     		ldr	r3, [r7, #12]
 1644 0082 1B68     		ldr	r3, [r3]
 1645 0084 1846     		mov	r0, r3
 1646 0086 FFF7FEFF 		bl	LL_ADC_IsCalibrationOnGoing
 1647 008a 0346     		mov	r3, r0
 165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 1648              		.loc 2 165 11
 1649 008c 002B     		cmp	r3, #0
 1650 008e E2D1     		bne	.L83
 179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state */
 183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 1651              		.loc 2 183 5
 1652 0090 FB68     		ldr	r3, [r7, #12]
 1653 0092 5B6D     		ldr	r3, [r3, #84]
 1654 0094 23F00303 		bic	r3, r3, #3
 1655 0098 43F00102 		orr	r2, r3, #1
 1656 009c FB68     		ldr	r3, [r7, #12]
 1657 009e 5A65     		str	r2, [r3, #84]
 1658 00a0 05E0     		b	.L84
 1659              	.L81:
 184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1660              		.loc 2 189 5
 1661 00a2 FB68     		ldr	r3, [r7, #12]
 1662 00a4 5B6D     		ldr	r3, [r3, #84]
ARM GAS  /tmp/cc6jq3Wn.s 			page 157


 1663 00a6 43F01002 		orr	r2, r3, #16
 1664 00aa FB68     		ldr	r3, [r7, #12]
 1665 00ac 5A65     		str	r2, [r3, #84]
 1666              	.L84:
 190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: No need to update variable "tmp_hal_status" here: already set    */
 192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       to state "HAL_ERROR" by function disabling the ADC.              */
 193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1667              		.loc 2 196 3
 1668 00ae FB68     		ldr	r3, [r7, #12]
 1669 00b0 0022     		movs	r2, #0
 1670 00b2 83F85020 		strb	r2, [r3, #80]
 197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 1671              		.loc 2 199 10
 1672 00b6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1673              	.L80:
 200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1674              		.loc 2 200 1
 1675 00b8 1846     		mov	r0, r3
 1676 00ba 1837     		adds	r7, r7, #24
 1677              	.LCFI159:
 1678              		.cfi_def_cfa_offset 8
 1679 00bc BD46     		mov	sp, r7
 1680              	.LCFI160:
 1681              		.cfi_def_cfa_register 13
 1682              		@ sp needed
 1683 00be 80BD     		pop	{r7, pc}
 1684              	.L86:
 1685              		.align	2
 1686              	.L85:
 1687 00c0 FDEEFFFF 		.word	-4355
 1688 00c4 00F8C325 		.word	633600000
 1689              		.cfi_endproc
 1690              	.LFE331:
 1692              		.section	.text.HAL_ADCEx_Calibration_GetValue,"ax",%progbits
 1693              		.align	1
 1694              		.global	HAL_ADCEx_Calibration_GetValue
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu fpv5-d16
 1700              	HAL_ADCEx_Calibration_GetValue:
 1701              	.LFB332:
 201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get the calibration factor.
 204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval Calibration value.
 209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 158


 210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
 211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1702              		.loc 2 211 1
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 8
 1705              		@ frame_needed = 1, uses_anonymous_args = 0
 1706 0000 80B5     		push	{r7, lr}
 1707              	.LCFI161:
 1708              		.cfi_def_cfa_offset 8
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711 0002 82B0     		sub	sp, sp, #8
 1712              	.LCFI162:
 1713              		.cfi_def_cfa_offset 16
 1714 0004 00AF     		add	r7, sp, #0
 1715              	.LCFI163:
 1716              		.cfi_def_cfa_register 7
 1717 0006 7860     		str	r0, [r7, #4]
 1718 0008 3960     		str	r1, [r7]
 212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return the selected ADC calibration value */
 217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return LL_ADC_GetCalibrationOffsetFactor(hadc->Instance, SingleDiff);
 1719              		.loc 2 217 10
 1720 000a 7B68     		ldr	r3, [r7, #4]
 1721 000c 1B68     		ldr	r3, [r3]
 1722 000e 3968     		ldr	r1, [r7]
 1723 0010 1846     		mov	r0, r3
 1724 0012 FFF7FEFF 		bl	LL_ADC_GetCalibrationOffsetFactor
 1725 0016 0346     		mov	r3, r0
 218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1726              		.loc 2 218 1
 1727 0018 1846     		mov	r0, r3
 1728 001a 0837     		adds	r7, r7, #8
 1729              	.LCFI164:
 1730              		.cfi_def_cfa_offset 8
 1731 001c BD46     		mov	sp, r7
 1732              	.LCFI165:
 1733              		.cfi_def_cfa_register 13
 1734              		@ sp needed
 1735 001e 80BD     		pop	{r7, pc}
 1736              		.cfi_endproc
 1737              	.LFE332:
 1739              		.section	.text.HAL_ADCEx_LinearCalibration_GetValue,"ax",%progbits
 1740              		.align	1
 1741              		.global	HAL_ADCEx_LinearCalibration_GetValue
 1742              		.syntax unified
 1743              		.thumb
 1744              		.thumb_func
 1745              		.fpu fpv5-d16
 1747              	HAL_ADCEx_LinearCalibration_GetValue:
 1748              	.LFB333:
 219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get the calibration factor from automatic conversion result
ARM GAS  /tmp/cc6jq3Wn.s 			page 159


 222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  LinearCalib_Buffer: Linear calibration factor
 224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCal
 227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1749              		.loc 2 227 1
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 24
 1752              		@ frame_needed = 1, uses_anonymous_args = 0
 1753 0000 90B5     		push	{r4, r7, lr}
 1754              	.LCFI166:
 1755              		.cfi_def_cfa_offset 12
 1756              		.cfi_offset 4, -12
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 87B0     		sub	sp, sp, #28
 1760              	.LCFI167:
 1761              		.cfi_def_cfa_offset 40
 1762 0004 00AF     		add	r7, sp, #0
 1763              	.LCFI168:
 1764              		.cfi_def_cfa_register 7
 1765 0006 7860     		str	r0, [r7, #4]
 1766 0008 3960     		str	r1, [r7]
 228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt;
 229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1767              		.loc 2 229 21
 1768 000a 0023     		movs	r3, #0
 1769 000c FB74     		strb	r3, [r7, #19]
 230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t temp_REG_IsConversionOngoing = 0UL;
 1770              		.loc 2 230 12
 1771 000e 0023     		movs	r3, #0
 1772 0010 FB60     		str	r3, [r7, #12]
 231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Enable the ADC ADEN = 1 to be able to read the linear calibration factor */
 236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 1773              		.loc 2 236 7
 1774 0012 7B68     		ldr	r3, [r7, #4]
 1775 0014 1B68     		ldr	r3, [r3]
 1776 0016 1846     		mov	r0, r3
 1777 0018 FFF7FEFF 		bl	LL_ADC_IsEnabled
 1778 001c 0346     		mov	r3, r0
 1779              		.loc 2 236 6
 1780 001e 002B     		cmp	r3, #0
 1781 0020 04D1     		bne	.L90
 237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1782              		.loc 2 238 22
 1783 0022 7868     		ldr	r0, [r7, #4]
 1784 0024 FFF7FEFF 		bl	ADC_Enable
 1785 0028 0346     		mov	r3, r0
 1786 002a FB74     		strb	r3, [r7, #19]
 1787              	.L90:
 239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/cc6jq3Wn.s 			page 160


 240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1788              		.loc 2 241 6
 1789 002c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1790 002e 002B     		cmp	r3, #0
 1791 0030 33D1     		bne	.L91
 242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 1792              		.loc 2 243 9
 1793 0032 7B68     		ldr	r3, [r7, #4]
 1794 0034 1B68     		ldr	r3, [r3]
 1795 0036 1846     		mov	r0, r3
 1796 0038 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1797 003c 0346     		mov	r3, r0
 1798              		.loc 2 243 8
 1799 003e 002B     		cmp	r3, #0
 1800 0040 06D0     		beq	.L92
 244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
 1801              		.loc 2 245 7
 1802 0042 7B68     		ldr	r3, [r7, #4]
 1803 0044 1B68     		ldr	r3, [r3]
 1804 0046 1846     		mov	r0, r3
 1805 0048 FFF7FEFF 		bl	LL_ADC_REG_StopConversion
 246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       temp_REG_IsConversionOngoing = 1UL;
 1806              		.loc 2 246 36
 1807 004c 0123     		movs	r3, #1
 1808 004e FB60     		str	r3, [r7, #12]
 1809              	.L92:
 247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL; cnt--)
 1810              		.loc 2 248 14
 1811 0050 0623     		movs	r3, #6
 1812 0052 7B61     		str	r3, [r7, #20]
 1813              		.loc 2 248 5
 1814 0054 16E0     		b	.L93
 1815              	.L94:
 249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LinearCalib_Buffer[cnt - 1U] = LL_ADC_GetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCA
 1816              		.loc 2 250 38 discriminator 3
 1817 0056 7B68     		ldr	r3, [r7, #4]
 1818 0058 1868     		ldr	r0, [r3]
 1819              		.loc 2 250 138 discriminator 3
 1820 005a 7B69     		ldr	r3, [r7, #20]
 1821 005c C3F10603 		rsb	r3, r3, #6
 1822              		.loc 2 250 38 discriminator 3
 1823 0060 4FF00062 		mov	r2, #134217728
 1824 0064 22FA03F1 		lsr	r1, r2, r3
 1825              		.loc 2 250 25 discriminator 3
 1826 0068 7A69     		ldr	r2, [r7, #20]
 1827 006a 6FF04043 		mvn	r3, #-1073741824
 1828 006e 1344     		add	r3, r3, r2
 1829 0070 9B00     		lsls	r3, r3, #2
 1830 0072 3A68     		ldr	r2, [r7]
 1831 0074 D418     		adds	r4, r2, r3
 1832              		.loc 2 250 38 discriminator 3
 1833 0076 FFF7FEFF 		bl	LL_ADC_GetCalibrationLinearFactor
ARM GAS  /tmp/cc6jq3Wn.s 			page 161


 1834 007a 0346     		mov	r3, r0
 1835              		.loc 2 250 36 discriminator 3
 1836 007c 2360     		str	r3, [r4]
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 1837              		.loc 2 248 58 discriminator 3
 1838 007e 7B69     		ldr	r3, [r7, #20]
 1839 0080 013B     		subs	r3, r3, #1
 1840 0082 7B61     		str	r3, [r7, #20]
 1841              	.L93:
 248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 1842              		.loc 2 248 5 discriminator 1
 1843 0084 7B69     		ldr	r3, [r7, #20]
 1844 0086 002B     		cmp	r3, #0
 1845 0088 E5D1     		bne	.L94
 251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (temp_REG_IsConversionOngoing != 0UL)
 1846              		.loc 2 252 8
 1847 008a FB68     		ldr	r3, [r7, #12]
 1848 008c 002B     		cmp	r3, #0
 1849 008e 04D0     		beq	.L91
 253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 1850              		.loc 2 254 7
 1851 0090 7B68     		ldr	r3, [r7, #4]
 1852 0092 1B68     		ldr	r3, [r3]
 1853 0094 1846     		mov	r0, r3
 1854 0096 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 1855              	.L91:
 255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 1856              		.loc 2 258 10
 1857 009a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1858              		.loc 2 259 1
 1859 009c 1846     		mov	r0, r3
 1860 009e 1C37     		adds	r7, r7, #28
 1861              	.LCFI169:
 1862              		.cfi_def_cfa_offset 12
 1863 00a0 BD46     		mov	sp, r7
 1864              	.LCFI170:
 1865              		.cfi_def_cfa_register 13
 1866              		@ sp needed
 1867 00a2 90BD     		pop	{r4, r7, pc}
 1868              		.cfi_endproc
 1869              	.LFE333:
 1871              		.section	.text.HAL_ADCEx_Calibration_SetValue,"ax",%progbits
 1872              		.align	1
 1873              		.global	HAL_ADCEx_Calibration_SetValue
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv5-d16
 1879              	HAL_ADCEx_Calibration_SetValue:
 1880              	.LFB334:
 260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 162


 261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Set the calibration factor to overwrite automatic conversion result.
 263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC must be enabled and no conversion is ongoing.
 264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
 269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint
 272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1881              		.loc 2 272 1
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 32
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885 0000 80B5     		push	{r7, lr}
 1886              	.LCFI171:
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 88B0     		sub	sp, sp, #32
 1891              	.LCFI172:
 1892              		.cfi_def_cfa_offset 40
 1893 0004 00AF     		add	r7, sp, #0
 1894              	.LCFI173:
 1895              		.cfi_def_cfa_register 7
 1896 0006 F860     		str	r0, [r7, #12]
 1897 0008 B960     		str	r1, [r7, #8]
 1898 000a 7A60     		str	r2, [r7, #4]
 273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1899              		.loc 2 273 21
 1900 000c 0023     		movs	r3, #0
 1901 000e FB77     		strb	r3, [r7, #31]
 274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_CALFACT(CalibrationFactor));
 281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1902              		.loc 2 283 3
 1903 0010 FB68     		ldr	r3, [r7, #12]
 1904 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 1905 0016 012B     		cmp	r3, #1
 1906 0018 01D1     		bne	.L97
 1907              		.loc 2 283 3 is_stmt 0 discriminator 1
 1908 001a 0223     		movs	r3, #2
 1909 001c 38E0     		b	.L98
 1910              	.L97:
 1911              		.loc 2 283 3 discriminator 2
 1912 001e FB68     		ldr	r3, [r7, #12]
 1913 0020 0122     		movs	r2, #1
 1914 0022 83F85020 		strb	r2, [r3, #80]
ARM GAS  /tmp/cc6jq3Wn.s 			page 163


 284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification of hardware constraints before modifying the calibration    */
 286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* factors register: ADC must be enabled, no conversion on going.           */
 287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 1915              		.loc 2 287 44 is_stmt 1 discriminator 2
 1916 0026 FB68     		ldr	r3, [r7, #12]
 1917 0028 1B68     		ldr	r3, [r3]
 1918 002a 1846     		mov	r0, r3
 1919 002c FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1920 0030 B861     		str	r0, [r7, #24]
 288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 1921              		.loc 2 288 45 discriminator 2
 1922 0032 FB68     		ldr	r3, [r7, #12]
 1923 0034 1B68     		ldr	r3, [r3]
 1924 0036 1846     		mov	r0, r3
 1925 0038 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 1926 003c 7861     		str	r0, [r7, #20]
 289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 1927              		.loc 2 290 8 discriminator 2
 1928 003e FB68     		ldr	r3, [r7, #12]
 1929 0040 1B68     		ldr	r3, [r3]
 1930 0042 1846     		mov	r0, r3
 1931 0044 FFF7FEFF 		bl	LL_ADC_IsEnabled
 1932 0048 0346     		mov	r3, r0
 1933              		.loc 2 290 6 discriminator 2
 1934 004a 002B     		cmp	r3, #0
 1935 004c 0DD0     		beq	.L99
 291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_regular == 0UL)
 1936              		.loc 2 291 7
 1937 004e BB69     		ldr	r3, [r7, #24]
 1938 0050 002B     		cmp	r3, #0
 1939 0052 0AD1     		bne	.L99
 292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 1940              		.loc 2 292 7
 1941 0054 7B69     		ldr	r3, [r7, #20]
 1942 0056 002B     		cmp	r3, #0
 1943 0058 07D1     		bne	.L99
 293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
 294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set the selected ADC calibration value */
 296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetCalibrationOffsetFactor(hadc->Instance, SingleDiff, CalibrationFactor);
 1944              		.loc 2 296 5
 1945 005a FB68     		ldr	r3, [r7, #12]
 1946 005c 1B68     		ldr	r3, [r3]
 1947 005e 7A68     		ldr	r2, [r7, #4]
 1948 0060 B968     		ldr	r1, [r7, #8]
 1949 0062 1846     		mov	r0, r3
 1950 0064 FFF7FEFF 		bl	LL_ADC_SetCalibrationOffsetFactor
 1951 0068 0DE0     		b	.L100
 1952              	.L99:
 297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine */
 301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1953              		.loc 2 301 5
ARM GAS  /tmp/cc6jq3Wn.s 			page 164


 1954 006a FB68     		ldr	r3, [r7, #12]
 1955 006c 5B6D     		ldr	r3, [r3, #84]
 1956 006e 43F02002 		orr	r2, r3, #32
 1957 0072 FB68     		ldr	r3, [r7, #12]
 1958 0074 5A65     		str	r2, [r3, #84]
 302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC error code */
 303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1959              		.loc 2 303 5
 1960 0076 FB68     		ldr	r3, [r7, #12]
 1961 0078 9B6D     		ldr	r3, [r3, #88]
 1962 007a 43F00102 		orr	r2, r3, #1
 1963 007e FB68     		ldr	r3, [r7, #12]
 1964 0080 9A65     		str	r2, [r3, #88]
 304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 1965              		.loc 2 306 20
 1966 0082 0123     		movs	r3, #1
 1967 0084 FB77     		strb	r3, [r7, #31]
 1968              	.L100:
 307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1969              		.loc 2 310 3
 1970 0086 FB68     		ldr	r3, [r7, #12]
 1971 0088 0022     		movs	r2, #0
 1972 008a 83F85020 		strb	r2, [r3, #80]
 311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 1973              		.loc 2 313 10
 1974 008e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1975              	.L98:
 314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1976              		.loc 2 314 1
 1977 0090 1846     		mov	r0, r3
 1978 0092 2037     		adds	r7, r7, #32
 1979              	.LCFI174:
 1980              		.cfi_def_cfa_offset 8
 1981 0094 BD46     		mov	sp, r7
 1982              	.LCFI175:
 1983              		.cfi_def_cfa_register 13
 1984              		@ sp needed
 1985 0096 80BD     		pop	{r7, pc}
 1986              		.cfi_endproc
 1987              	.LFE334:
 1989              		.section	.text.HAL_ADCEx_LinearCalibration_SetValue,"ax",%progbits
 1990              		.align	1
 1991              		.global	HAL_ADCEx_LinearCalibration_SetValue
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu fpv5-d16
 1997              	HAL_ADCEx_LinearCalibration_SetValue:
 1998              	.LFB335:
 315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 165


 316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Set the linear calibration factor
 318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  LinearCalib_Buffer: Linear calibration factor
 320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCal
 323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1999              		.loc 2 323 1
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 24
 2002              		@ frame_needed = 1, uses_anonymous_args = 0
 2003 0000 80B5     		push	{r7, lr}
 2004              	.LCFI176:
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 7, -8
 2007              		.cfi_offset 14, -4
 2008 0002 86B0     		sub	sp, sp, #24
 2009              	.LCFI177:
 2010              		.cfi_def_cfa_offset 32
 2011 0004 00AF     		add	r7, sp, #0
 2012              	.LCFI178:
 2013              		.cfi_def_cfa_register 7
 2014 0006 7860     		str	r0, [r7, #4]
 2015 0008 3960     		str	r1, [r7]
 324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt;
 325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 2016              		.loc 2 325 17
 2017 000a 0023     		movs	r3, #0
 2018 000c FB60     		str	r3, [r7, #12]
 326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t temp_REG_IsConversionOngoing = 0UL;
 2019              		.loc 2 326 12
 2020 000e 0023     		movs	r3, #0
 2021 0010 3B61     		str	r3, [r7, #16]
 327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  Exit deep power down mode if still in that state                        */
 333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 2022              		.loc 2 333 7
 2023 0012 7B68     		ldr	r3, [r7, #4]
 2024 0014 1B68     		ldr	r3, [r3]
 2025 0016 9B68     		ldr	r3, [r3, #8]
 2026 0018 03F00053 		and	r3, r3, #536870912
 2027              		.loc 2 333 6
 2028 001c B3F1005F 		cmp	r3, #536870912
 2029 0020 07D1     		bne	.L102
 334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Exit deep power down mode */
 336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 2030              		.loc 2 336 5
 2031 0022 7B68     		ldr	r3, [r7, #4]
 2032 0024 1B68     		ldr	r3, [r3]
 2033 0026 9A68     		ldr	r2, [r3, #8]
 2034 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6jq3Wn.s 			page 166


 2035 002a 1B68     		ldr	r3, [r3]
 2036 002c 22F00052 		bic	r2, r2, #536870912
 2037 0030 9A60     		str	r2, [r3, #8]
 2038              	.L102:
 337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* System was in deep power down mode, calibration must
 339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        be relaunched or a previously saved calibration factor
 340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        re-applied once the ADC voltage regulator is enabled */
 341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 2039              		.loc 2 344 7
 2040 0032 7B68     		ldr	r3, [r7, #4]
 2041 0034 1B68     		ldr	r3, [r3]
 2042 0036 9B68     		ldr	r3, [r3, #8]
 2043 0038 03F08053 		and	r3, r3, #268435456
 2044              		.loc 2 344 6
 2045 003c 002B     		cmp	r3, #0
 2046 003e 17D1     		bne	.L103
 345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable ADC internal voltage regulator                                  */
 347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 2047              		.loc 2 347 5
 2048 0040 7B68     		ldr	r3, [r7, #4]
 2049 0042 1B68     		ldr	r3, [r3]
 2050 0044 9A68     		ldr	r2, [r3, #8]
 2051 0046 7B68     		ldr	r3, [r7, #4]
 2052 0048 1B68     		ldr	r3, [r3]
 2053 004a 42F08052 		orr	r2, r2, #268435456
 2054 004e 9A60     		str	r2, [r3, #8]
 348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Delay for ADC stabilization time                                       */
 349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Wait loop initialization and execution                                 */
 350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: Variable divided by 2 to compensate partially                    */
 351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       CPU processing cycles.                                           */
 352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     wait_loop_index = ((ADC_STAB_DELAY_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 2055              		.loc 2 352 71
 2056 0050 474B     		ldr	r3, .L116
 2057 0052 1B68     		ldr	r3, [r3]
 2058 0054 9B09     		lsrs	r3, r3, #6
 2059 0056 474A     		ldr	r2, .L116+4
 2060 0058 A2FB0323 		umull	r2, r3, r2, r3
 2061 005c 9B09     		lsrs	r3, r3, #6
 2062              		.loc 2 352 51
 2063 005e 0133     		adds	r3, r3, #1
 2064              		.loc 2 352 21
 2065 0060 FB60     		str	r3, [r7, #12]
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (wait_loop_index != 0UL)
 2066              		.loc 2 353 11
 2067 0062 02E0     		b	.L104
 2068              	.L105:
 354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       wait_loop_index--;
 2069              		.loc 2 355 22
 2070 0064 FB68     		ldr	r3, [r7, #12]
 2071 0066 013B     		subs	r3, r3, #1
 2072 0068 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc6jq3Wn.s 			page 167


 2073              	.L104:
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (wait_loop_index != 0UL)
 2074              		.loc 2 353 28
 2075 006a FB68     		ldr	r3, [r7, #12]
 353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (wait_loop_index != 0UL)
 2076              		.loc 2 353 11
 2077 006c 002B     		cmp	r3, #0
 2078 006e F9D1     		bne	.L105
 2079              	.L103:
 356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* clocking, voltage regulator would not be enabled).                       */
 363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 2080              		.loc 2 363 7
 2081 0070 7B68     		ldr	r3, [r7, #4]
 2082 0072 1B68     		ldr	r3, [r3]
 2083 0074 9B68     		ldr	r3, [r3, #8]
 2084 0076 03F08053 		and	r3, r3, #268435456
 2085              		.loc 2 363 6
 2086 007a 002B     		cmp	r3, #0
 2087 007c 0DD1     		bne	.L106
 364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2088              		.loc 2 366 5
 2089 007e 7B68     		ldr	r3, [r7, #4]
 2090 0080 5B6D     		ldr	r3, [r3, #84]
 2091 0082 43F01002 		orr	r2, r3, #16
 2092 0086 7B68     		ldr	r3, [r7, #4]
 2093 0088 5A65     		str	r2, [r3, #84]
 367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC error code to ADC peripheral internal error */
 369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2094              		.loc 2 369 5
 2095 008a 7B68     		ldr	r3, [r7, #4]
 2096 008c 9B6D     		ldr	r3, [r3, #88]
 2097 008e 43F00102 		orr	r2, r3, #1
 2098 0092 7B68     		ldr	r3, [r7, #4]
 2099 0094 9A65     		str	r2, [r3, #88]
 370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return  HAL_ERROR;
 2100              		.loc 2 371 13
 2101 0096 0123     		movs	r3, #1
 2102 0098 65E0     		b	.L107
 2103              	.L106:
 372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) /* Enable the ADC if it is disabled */
 2104              		.loc 2 374 7
 2105 009a 7B68     		ldr	r3, [r7, #4]
 2106 009c 1B68     		ldr	r3, [r3]
 2107 009e 1846     		mov	r0, r3
 2108 00a0 FFF7FEFF 		bl	LL_ADC_IsEnabled
ARM GAS  /tmp/cc6jq3Wn.s 			page 168


 2109 00a4 0346     		mov	r3, r0
 2110              		.loc 2 374 6
 2111 00a6 002B     		cmp	r3, #0
 2112 00a8 28D1     		bne	.L108
 375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (ADC_Enable(hadc) != HAL_OK)
 2113              		.loc 2 376 9
 2114 00aa 7868     		ldr	r0, [r7, #4]
 2115 00ac FFF7FEFF 		bl	ADC_Enable
 2116 00b0 0346     		mov	r3, r0
 2117              		.loc 2 376 8
 2118 00b2 002B     		cmp	r3, #0
 2119 00b4 01D0     		beq	.L109
 377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return  HAL_ERROR;
 2120              		.loc 2 378 15
 2121 00b6 0123     		movs	r3, #1
 2122 00b8 55E0     		b	.L107
 2123              	.L109:
 379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 2124              		.loc 2 382 16
 2125 00ba 0623     		movs	r3, #6
 2126 00bc 7B61     		str	r3, [r7, #20]
 2127              		.loc 2 382 7
 2128 00be 16E0     		b	.L110
 2129              	.L111:
 383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_R
 2130              		.loc 2 384 9 discriminator 3
 2131 00c0 7B68     		ldr	r3, [r7, #4]
 2132 00c2 1868     		ldr	r0, [r3]
 2133              		.loc 2 384 109 discriminator 3
 2134 00c4 7B69     		ldr	r3, [r7, #20]
 2135 00c6 C3F10603 		rsb	r3, r3, #6
 2136              		.loc 2 384 9 discriminator 3
 2137 00ca 4FF00062 		mov	r2, #134217728
 2138 00ce 22FA03F1 		lsr	r1, r2, r3
 2139              		.loc 2 384 135 discriminator 3
 2140 00d2 7A69     		ldr	r2, [r7, #20]
 2141 00d4 6FF04043 		mvn	r3, #-1073741824
 2142 00d8 1344     		add	r3, r3, r2
 2143 00da 9B00     		lsls	r3, r3, #2
 2144 00dc 3A68     		ldr	r2, [r7]
 2145 00de 1344     		add	r3, r3, r2
 2146              		.loc 2 384 9 discriminator 3
 2147 00e0 1B68     		ldr	r3, [r3]
 2148 00e2 1A46     		mov	r2, r3
 2149 00e4 FFF7FEFF 		bl	LL_ADC_SetCalibrationLinearFactor
 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2150              		.loc 2 382 61 discriminator 3
 2151 00e8 7B69     		ldr	r3, [r7, #20]
 2152 00ea 013B     		subs	r3, r3, #1
 2153 00ec 7B61     		str	r3, [r7, #20]
 2154              	.L110:
ARM GAS  /tmp/cc6jq3Wn.s 			page 169


 382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2155              		.loc 2 382 7 discriminator 1
 2156 00ee 7B69     		ldr	r3, [r7, #20]
 2157 00f0 002B     		cmp	r3, #0
 2158 00f2 E5D1     		bne	.L111
 385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void)ADC_Disable(hadc);
 2159              		.loc 2 386 13
 2160 00f4 7868     		ldr	r0, [r7, #4]
 2161 00f6 FFF7FEFF 		bl	ADC_Disable
 2162 00fa 33E0     		b	.L112
 2163              	.L108:
 387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else  /* ADC is already enabled, so no need to enable it but need to stop conversion */
 390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 2164              		.loc 2 391 9
 2165 00fc 7B68     		ldr	r3, [r7, #4]
 2166 00fe 1B68     		ldr	r3, [r3]
 2167 0100 1846     		mov	r0, r3
 2168 0102 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2169 0106 0346     		mov	r3, r0
 2170              		.loc 2 391 8
 2171 0108 002B     		cmp	r3, #0
 2172 010a 06D0     		beq	.L113
 392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
 2173              		.loc 2 393 7
 2174 010c 7B68     		ldr	r3, [r7, #4]
 2175 010e 1B68     		ldr	r3, [r3]
 2176 0110 1846     		mov	r0, r3
 2177 0112 FFF7FEFF 		bl	LL_ADC_REG_StopConversion
 394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       temp_REG_IsConversionOngoing = 1UL;
 2178              		.loc 2 394 36
 2179 0116 0123     		movs	r3, #1
 2180 0118 3B61     		str	r3, [r7, #16]
 2181              	.L113:
 395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 2182              		.loc 2 396 14
 2183 011a 0623     		movs	r3, #6
 2184 011c 7B61     		str	r3, [r7, #20]
 2185              		.loc 2 396 5
 2186 011e 16E0     		b	.L114
 2187              	.L115:
 397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG
 2188              		.loc 2 398 7 discriminator 3
 2189 0120 7B68     		ldr	r3, [r7, #4]
 2190 0122 1868     		ldr	r0, [r3]
 2191              		.loc 2 398 107 discriminator 3
 2192 0124 7B69     		ldr	r3, [r7, #20]
 2193 0126 C3F10603 		rsb	r3, r3, #6
 2194              		.loc 2 398 7 discriminator 3
 2195 012a 4FF00062 		mov	r2, #134217728
 2196 012e 22FA03F1 		lsr	r1, r2, r3
ARM GAS  /tmp/cc6jq3Wn.s 			page 170


 2197              		.loc 2 398 133 discriminator 3
 2198 0132 7A69     		ldr	r2, [r7, #20]
 2199 0134 6FF04043 		mvn	r3, #-1073741824
 2200 0138 1344     		add	r3, r3, r2
 2201 013a 9B00     		lsls	r3, r3, #2
 2202 013c 3A68     		ldr	r2, [r7]
 2203 013e 1344     		add	r3, r3, r2
 2204              		.loc 2 398 7 discriminator 3
 2205 0140 1B68     		ldr	r3, [r3]
 2206 0142 1A46     		mov	r2, r3
 2207 0144 FFF7FEFF 		bl	LL_ADC_SetCalibrationLinearFactor
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 2208              		.loc 2 396 59 discriminator 3
 2209 0148 7B69     		ldr	r3, [r7, #20]
 2210 014a 013B     		subs	r3, r3, #1
 2211 014c 7B61     		str	r3, [r7, #20]
 2212              	.L114:
 396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 2213              		.loc 2 396 5 discriminator 1
 2214 014e 7B69     		ldr	r3, [r7, #20]
 2215 0150 002B     		cmp	r3, #0
 2216 0152 E5D1     		bne	.L115
 399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (temp_REG_IsConversionOngoing != 0UL)
 2217              		.loc 2 400 8
 2218 0154 3B69     		ldr	r3, [r7, #16]
 2219 0156 002B     		cmp	r3, #0
 2220 0158 04D0     		beq	.L112
 401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 2221              		.loc 2 402 7
 2222 015a 7B68     		ldr	r3, [r7, #4]
 2223 015c 1B68     		ldr	r3, [r3]
 2224 015e 1846     		mov	r0, r3
 2225 0160 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 2226              	.L112:
 403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return HAL_OK;
 2227              		.loc 2 405 10
 2228 0164 0023     		movs	r3, #0
 2229              	.L107:
 406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2230              		.loc 2 406 1
 2231 0166 1846     		mov	r0, r3
 2232 0168 1837     		adds	r7, r7, #24
 2233              	.LCFI179:
 2234              		.cfi_def_cfa_offset 8
 2235 016a BD46     		mov	sp, r7
 2236              	.LCFI180:
 2237              		.cfi_def_cfa_register 13
 2238              		@ sp needed
 2239 016c 80BD     		pop	{r7, pc}
 2240              	.L117:
 2241 016e 00BF     		.align	2
 2242              	.L116:
 2243 0170 00000000 		.word	SystemCoreClock
ARM GAS  /tmp/cc6jq3Wn.s 			page 171


 2244 0174 632D3E05 		.word	87960931
 2245              		.cfi_endproc
 2246              	.LFE335:
 2248              		.section	.text.HAL_ADCEx_LinearCalibration_FactorLoad,"ax",%progbits
 2249              		.align	1
 2250              		.global	HAL_ADCEx_LinearCalibration_FactorLoad
 2251              		.syntax unified
 2252              		.thumb
 2253              		.thumb_func
 2254              		.fpu fpv5-d16
 2256              	HAL_ADCEx_LinearCalibration_FactorLoad:
 2257              	.LFB336:
 407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Load the calibration factor from engi bytes
 410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_FactorLoad(ADC_HandleTypeDef *hadc)
 414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2258              		.loc 2 414 1
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 48
 2261              		@ frame_needed = 1, uses_anonymous_args = 0
 2262 0000 80B5     		push	{r7, lr}
 2263              	.LCFI181:
 2264              		.cfi_def_cfa_offset 8
 2265              		.cfi_offset 7, -8
 2266              		.cfi_offset 14, -4
 2267 0002 8CB0     		sub	sp, sp, #48
 2268              	.LCFI182:
 2269              		.cfi_def_cfa_offset 56
 2270 0004 00AF     		add	r7, sp, #0
 2271              	.LCFI183:
 2272              		.cfi_def_cfa_register 7
 2273 0006 7860     		str	r0, [r7, #4]
 415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2274              		.loc 2 415 21
 2275 0008 0023     		movs	r3, #0
 2276 000a 87F82F30 		strb	r3, [r7, #47]
 416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt, FactorOffset;
 417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t LinearCalib_Buffer[ADC_LINEAR_CALIB_REG_COUNT];
 418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Linearity calibration is retrieved from engi bytes
 420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      read values from registers and put them to the CALFACT2 register */
 421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If needed linearity calibration can be done in runtime using
 422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      LL_ADC_GetCalibrationLinearFactor()                             */
 423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC1)
 2277              		.loc 2 423 11
 2278 000e 7B68     		ldr	r3, [r7, #4]
 2279 0010 1B68     		ldr	r3, [r3]
 2280              		.loc 2 423 6
 2281 0012 1C4A     		ldr	r2, .L126
 2282 0014 9342     		cmp	r3, r2
 2283 0016 02D1     		bne	.L119
 424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 0UL;
ARM GAS  /tmp/cc6jq3Wn.s 			page 172


 2284              		.loc 2 425 18
 2285 0018 0023     		movs	r3, #0
 2286 001a 7B62     		str	r3, [r7, #36]
 2287 001c 09E0     		b	.L120
 2288              	.L119:
 426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else if (hadc->Instance == ADC2)
 2289              		.loc 2 427 16
 2290 001e 7B68     		ldr	r3, [r7, #4]
 2291 0020 1B68     		ldr	r3, [r3]
 2292              		.loc 2 427 11
 2293 0022 194A     		ldr	r2, .L126+4
 2294 0024 9342     		cmp	r3, r2
 2295 0026 02D1     		bne	.L121
 428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 8UL;
 2296              		.loc 2 429 18
 2297 0028 0823     		movs	r3, #8
 2298 002a 7B62     		str	r3, [r7, #36]
 2299 002c 01E0     		b	.L120
 2300              	.L121:
 430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else   /*Case ADC3*/
 432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 16UL;
 2301              		.loc 2 433 18
 2302 002e 1023     		movs	r3, #16
 2303 0030 7B62     		str	r3, [r7, #36]
 2304              	.L120:
 434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   for (cnt = 0UL; cnt < ADC_LINEAR_CALIB_REG_COUNT; cnt++)
 2305              		.loc 2 436 12
 2306 0032 0023     		movs	r3, #0
 2307 0034 BB62     		str	r3, [r7, #40]
 2308              		.loc 2 436 3
 2309 0036 10E0     		b	.L122
 2310              	.L123:
 437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LinearCalib_Buffer[cnt] = *(uint32_t *)(ADC_LINEAR_CALIB_REG_1_ADDR + FactorOffset + cnt);
 2311              		.loc 2 438 88 discriminator 3
 2312 0038 7A6A     		ldr	r2, [r7, #36]
 2313 003a BB6A     		ldr	r3, [r7, #40]
 2314 003c 1344     		add	r3, r3, r2
 2315 003e 9A00     		lsls	r2, r3, #2
 2316              		.loc 2 438 32 discriminator 3
 2317 0040 124B     		ldr	r3, .L126+8
 2318 0042 1344     		add	r3, r3, r2
 2319              		.loc 2 438 31 discriminator 3
 2320 0044 1A68     		ldr	r2, [r3]
 2321              		.loc 2 438 29 discriminator 3
 2322 0046 BB6A     		ldr	r3, [r7, #40]
 2323 0048 9B00     		lsls	r3, r3, #2
 2324 004a 07F13001 		add	r1, r7, #48
 2325 004e 0B44     		add	r3, r3, r1
 2326 0050 43F8242C 		str	r2, [r3, #-36]
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
ARM GAS  /tmp/cc6jq3Wn.s 			page 173


 2327              		.loc 2 436 56 discriminator 3
 2328 0054 BB6A     		ldr	r3, [r7, #40]
 2329 0056 0133     		adds	r3, r3, #1
 2330 0058 BB62     		str	r3, [r7, #40]
 2331              	.L122:
 436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 2332              		.loc 2 436 3 discriminator 1
 2333 005a BB6A     		ldr	r3, [r7, #40]
 2334 005c 052B     		cmp	r3, #5
 2335 005e EBD9     		bls	.L123
 439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_ADCEx_LinearCalibration_SetValue(hadc, (uint32_t *)LinearCalib_Buffer) != HAL_OK)
 2336              		.loc 2 440 7
 2337 0060 07F10C03 		add	r3, r7, #12
 2338 0064 1946     		mov	r1, r3
 2339 0066 7868     		ldr	r0, [r7, #4]
 2340 0068 FFF7FEFF 		bl	HAL_ADCEx_LinearCalibration_SetValue
 2341 006c 0346     		mov	r3, r0
 2342              		.loc 2 440 6
 2343 006e 002B     		cmp	r3, #0
 2344 0070 02D0     		beq	.L124
 441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 2345              		.loc 2 442 20
 2346 0072 0123     		movs	r3, #1
 2347 0074 87F82F30 		strb	r3, [r7, #47]
 2348              	.L124:
 443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 2349              		.loc 2 445 10
 2350 0078 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2351              		.loc 2 446 1
 2352 007c 1846     		mov	r0, r3
 2353 007e 3037     		adds	r7, r7, #48
 2354              	.LCFI184:
 2355              		.cfi_def_cfa_offset 8
 2356 0080 BD46     		mov	sp, r7
 2357              	.LCFI185:
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 0082 80BD     		pop	{r7, pc}
 2361              	.L127:
 2362              		.align	2
 2363              	.L126:
 2364 0084 00200240 		.word	1073881088
 2365 0088 00210240 		.word	1073881344
 2366 008c 00ECF11F 		.word	535948288
 2367              		.cfi_endproc
 2368              	.LFE336:
 2370              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 2371              		.align	1
 2372              		.global	HAL_ADCEx_InjectedStart
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
ARM GAS  /tmp/cc6jq3Wn.s 			page 174


 2376              		.fpu fpv5-d16
 2378              	HAL_ADCEx_InjectedStart:
 2379              	.LFB337:
 447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group.
 450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function: None.
 451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled when multimode feature is available:
 452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart() API must be called for ADC slave first,
 453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC master.
 454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
 460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2380              		.loc 2 460 1
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 24
 2383              		@ frame_needed = 1, uses_anonymous_args = 0
 2384 0000 80B5     		push	{r7, lr}
 2385              	.LCFI186:
 2386              		.cfi_def_cfa_offset 8
 2387              		.cfi_offset 7, -8
 2388              		.cfi_offset 14, -4
 2389 0002 86B0     		sub	sp, sp, #24
 2390              	.LCFI187:
 2391              		.cfi_def_cfa_offset 32
 2392 0004 00AF     		add	r7, sp, #0
 2393              	.LCFI188:
 2394              		.cfi_def_cfa_register 7
 2395 0006 7860     		str	r0, [r7, #4]
 461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 2396              		.loc 2 463 55
 2397 0008 7B68     		ldr	r3, [r7, #4]
 2398 000a 1B68     		ldr	r3, [r3]
 2399              		.loc 2 463 35
 2400 000c 564A     		ldr	r2, .L150
 2401 000e 9342     		cmp	r3, r2
 2402 0010 04D0     		beq	.L129
 2403              		.loc 2 463 55 discriminator 2
 2404 0012 7B68     		ldr	r3, [r7, #4]
 2405 0014 1B68     		ldr	r3, [r3]
 2406 0016 554A     		ldr	r2, .L150+4
 2407 0018 9342     		cmp	r3, r2
 2408 001a 01D1     		bne	.L130
 2409              	.L129:
 2410              		.loc 2 463 35 discriminator 3
 2411 001c 544B     		ldr	r3, .L150+8
 2412 001e 00E0     		b	.L131
 2413              	.L130:
 2414              		.loc 2 463 35 is_stmt 0 discriminator 4
 2415 0020 544B     		ldr	r3, .L150+12
 2416              	.L131:
ARM GAS  /tmp/cc6jq3Wn.s 			page 175


 2417              		.loc 2 463 35 discriminator 6
 2418 0022 1846     		mov	r0, r3
 2419 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 2420 0028 7861     		str	r0, [r7, #20]
 464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 2421              		.loc 2 468 7 is_stmt 1 discriminator 6
 2422 002a 7B68     		ldr	r3, [r7, #4]
 2423 002c 1B68     		ldr	r3, [r3]
 2424 002e 1846     		mov	r0, r3
 2425 0030 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2426 0034 0346     		mov	r3, r0
 2427              		.loc 2 468 6 discriminator 6
 2428 0036 002B     		cmp	r3, #0
 2429 0038 01D0     		beq	.L132
 469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
 2430              		.loc 2 470 12
 2431 003a 0223     		movs	r3, #2
 2432 003c 90E0     		b	.L133
 2433              	.L132:
 471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          the queue is empty */
 481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 2434              		.loc 2 481 33
 2435 003e 7B68     		ldr	r3, [r7, #4]
 2436 0040 1B68     		ldr	r3, [r3]
 2437 0042 DB68     		ldr	r3, [r3, #12]
 2438              		.loc 2 481 31
 2439 0044 03F00043 		and	r3, r3, #-2147483648
 2440 0048 3B61     		str	r3, [r7, #16]
 482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 2441              		.loc 2 483 10
 2442 004a 7B68     		ldr	r3, [r7, #4]
 2443 004c 1B68     		ldr	r3, [r3]
 2444 004e DB6C     		ldr	r3, [r3, #76]
 2445 0050 03F4C073 		and	r3, r3, #384
 2446              		.loc 2 483 8
 2447 0054 002B     		cmp	r3, #0
 2448 0056 0AD1     		bne	.L134
 484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 2449              		.loc 2 484 9
 2450 0058 3B69     		ldr	r3, [r7, #16]
 2451 005a 002B     		cmp	r3, #0
 2452 005c 07D1     		bne	.L134
ARM GAS  /tmp/cc6jq3Wn.s 			page 176


 485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        )
 486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2453              		.loc 2 487 7
 2454 005e 7B68     		ldr	r3, [r7, #4]
 2455 0060 5B6D     		ldr	r3, [r3, #84]
 2456 0062 43F02002 		orr	r2, r3, #32
 2457 0066 7B68     		ldr	r3, [r7, #4]
 2458 0068 5A65     		str	r2, [r3, #84]
 488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 2459              		.loc 2 488 14
 2460 006a 0123     		movs	r3, #1
 2461 006c 78E0     		b	.L133
 2462              	.L134:
 489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
 492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 2463              		.loc 2 492 5
 2464 006e 7B68     		ldr	r3, [r7, #4]
 2465 0070 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 2466 0074 012B     		cmp	r3, #1
 2467 0076 01D1     		bne	.L135
 2468              		.loc 2 492 5 is_stmt 0 discriminator 1
 2469 0078 0223     		movs	r3, #2
 2470 007a 71E0     		b	.L133
 2471              	.L135:
 2472              		.loc 2 492 5 discriminator 2
 2473 007c 7B68     		ldr	r3, [r7, #4]
 2474 007e 0122     		movs	r2, #1
 2475 0080 83F85020 		strb	r2, [r3, #80]
 493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 2476              		.loc 2 495 22 is_stmt 1 discriminator 2
 2477 0084 7868     		ldr	r0, [r7, #4]
 2478 0086 FFF7FEFF 		bl	ADC_Enable
 2479 008a 0346     		mov	r3, r0
 2480 008c FB73     		strb	r3, [r7, #15]
 496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2481              		.loc 2 498 8 discriminator 2
 2482 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2483 0090 002B     		cmp	r3, #0
 2484 0092 60D1     		bne	.L136
 499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 2485              		.loc 2 501 16
 2486 0094 7B68     		ldr	r3, [r7, #4]
 2487 0096 5B6D     		ldr	r3, [r3, #84]
 2488              		.loc 2 501 24
 2489 0098 03F48073 		and	r3, r3, #256
 2490              		.loc 2 501 10
 2491 009c 002B     		cmp	r3, #0
 2492 009e 06D0     		beq	.L137
ARM GAS  /tmp/cc6jq3Wn.s 			page 177


 502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 2493              		.loc 2 504 9
 2494 00a0 7B68     		ldr	r3, [r7, #4]
 2495 00a2 9B6D     		ldr	r3, [r3, #88]
 2496 00a4 23F00802 		bic	r2, r3, #8
 2497 00a8 7B68     		ldr	r3, [r7, #4]
 2498 00aa 9A65     		str	r2, [r3, #88]
 2499 00ac 02E0     		b	.L138
 2500              	.L137:
 505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 2501              		.loc 2 509 9
 2502 00ae 7B68     		ldr	r3, [r7, #4]
 2503 00b0 0022     		movs	r2, #0
 2504 00b2 9A65     		str	r2, [r3, #88]
 2505              	.L138:
 510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 2506              		.loc 2 515 7
 2507 00b4 7B68     		ldr	r3, [r7, #4]
 2508 00b6 5A6D     		ldr	r2, [r3, #84]
 2509 00b8 2F4B     		ldr	r3, .L150+16
 2510 00ba 1340     		ands	r3, r3, r2
 2511 00bc 43F48052 		orr	r2, r3, #4096
 2512 00c0 7B68     		ldr	r3, [r7, #4]
 2513 00c2 5A65     		str	r2, [r3, #84]
 516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 2514              		.loc 2 522 12
 2515 00c4 7B68     		ldr	r3, [r7, #4]
 2516 00c6 1B68     		ldr	r3, [r3]
 2517 00c8 284A     		ldr	r2, .L150+4
 2518 00ca 9342     		cmp	r3, r2
 2519 00cc 02D0     		beq	.L139
 2520              		.loc 2 522 12 is_stmt 0 discriminator 1
 2521 00ce 7B68     		ldr	r3, [r7, #4]
 2522 00d0 1B68     		ldr	r3, [r3]
 2523 00d2 00E0     		b	.L140
 2524              	.L139:
 2525              		.loc 2 522 12 discriminator 2
 2526 00d4 244B     		ldr	r3, .L150
 2527              	.L140:
 2528              		.loc 2 522 66 is_stmt 1 discriminator 4
ARM GAS  /tmp/cc6jq3Wn.s 			page 178


 2529 00d6 7A68     		ldr	r2, [r7, #4]
 2530 00d8 1268     		ldr	r2, [r2]
 2531              		.loc 2 522 10 discriminator 4
 2532 00da 9342     		cmp	r3, r2
 2533 00dc 02D0     		beq	.L141
 523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 2534              		.loc 2 523 11
 2535 00de 7B69     		ldr	r3, [r7, #20]
 2536 00e0 002B     		cmp	r3, #0
 2537 00e2 05D1     		bne	.L142
 2538              	.L141:
 524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2539              		.loc 2 526 9
 2540 00e4 7B68     		ldr	r3, [r7, #4]
 2541 00e6 5B6D     		ldr	r3, [r3, #84]
 2542 00e8 23F48012 		bic	r2, r3, #1048576
 2543 00ec 7B68     		ldr	r3, [r7, #4]
 2544 00ee 5A65     		str	r2, [r3, #84]
 2545              	.L142:
 527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 2546              		.loc 2 531 7
 2547 00f0 7B68     		ldr	r3, [r7, #4]
 2548 00f2 1B68     		ldr	r3, [r3]
 2549 00f4 6022     		movs	r2, #96
 2550 00f6 1A60     		str	r2, [r3]
 532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2551              		.loc 2 536 7
 2552 00f8 7B68     		ldr	r3, [r7, #4]
 2553 00fa 0022     		movs	r2, #0
 2554 00fc 83F85020 		strb	r2, [r3, #80]
 537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
 546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 2555              		.loc 2 550 12
 2556 0100 7B68     		ldr	r3, [r7, #4]
 2557 0102 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6jq3Wn.s 			page 179


 2558 0104 194A     		ldr	r2, .L150+4
 2559 0106 9342     		cmp	r3, r2
 2560 0108 02D0     		beq	.L143
 2561              		.loc 2 550 12 is_stmt 0 discriminator 1
 2562 010a 7B68     		ldr	r3, [r7, #4]
 2563 010c 1B68     		ldr	r3, [r3]
 2564 010e 00E0     		b	.L144
 2565              	.L143:
 2566              		.loc 2 550 12 discriminator 2
 2567 0110 154B     		ldr	r3, .L150
 2568              	.L144:
 2569              		.loc 2 550 66 is_stmt 1 discriminator 4
 2570 0112 7A68     		ldr	r2, [r7, #4]
 2571 0114 1268     		ldr	r2, [r2]
 2572              		.loc 2 550 10 discriminator 4
 2573 0116 9342     		cmp	r3, r2
 2574 0118 08D0     		beq	.L145
 551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 2575              		.loc 2 551 11
 2576 011a 7B69     		ldr	r3, [r7, #20]
 2577 011c 002B     		cmp	r3, #0
 2578 011e 05D0     		beq	.L145
 552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 2579              		.loc 2 552 11
 2580 0120 7B69     		ldr	r3, [r7, #20]
 2581 0122 062B     		cmp	r3, #6
 2582 0124 02D0     		beq	.L145
 553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 2583              		.loc 2 553 11
 2584 0126 7B69     		ldr	r3, [r7, #20]
 2585 0128 072B     		cmp	r3, #7
 2586 012a 0DD1     		bne	.L146
 2587              	.L145:
 554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 2588              		.loc 2 557 13
 2589 012c 7B68     		ldr	r3, [r7, #4]
 2590 012e 1B68     		ldr	r3, [r3]
 2591 0130 1846     		mov	r0, r3
 2592 0132 FFF7FEFF 		bl	LL_ADC_INJ_GetTrigAuto
 2593 0136 0346     		mov	r3, r0
 2594              		.loc 2 557 12
 2595 0138 002B     		cmp	r3, #0
 2596 013a 10D1     		bne	.L149
 558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 2597              		.loc 2 559 11
 2598 013c 7B68     		ldr	r3, [r7, #4]
 2599 013e 1B68     		ldr	r3, [r3]
 2600 0140 1846     		mov	r0, r3
 2601 0142 FFF7FEFF 		bl	LL_ADC_INJ_StartConversion
 557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 2602              		.loc 2 557 12
 2603 0146 0AE0     		b	.L149
 2604              	.L146:
ARM GAS  /tmp/cc6jq3Wn.s 			page 180


 560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 2605              		.loc 2 565 9
 2606 0148 7B68     		ldr	r3, [r7, #4]
 2607 014a 5B6D     		ldr	r3, [r3, #84]
 2608 014c 43F48012 		orr	r2, r3, #1048576
 2609 0150 7B68     		ldr	r3, [r7, #4]
 2610 0152 5A65     		str	r2, [r3, #84]
 2611 0154 03E0     		b	.L149
 2612              	.L136:
 566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2613              		.loc 2 572 7
 2614 0156 7B68     		ldr	r3, [r7, #4]
 2615 0158 0022     		movs	r2, #0
 2616 015a 83F85020 		strb	r2, [r3, #80]
 2617              	.L149:
 573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
 576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
 2618              		.loc 2 576 12
 2619 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2620              	.L133:
 577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2621              		.loc 2 578 1
 2622 0160 1846     		mov	r0, r3
 2623 0162 1837     		adds	r7, r7, #24
 2624              	.LCFI189:
 2625              		.cfi_def_cfa_offset 8
 2626 0164 BD46     		mov	sp, r7
 2627              	.LCFI190:
 2628              		.cfi_def_cfa_register 13
 2629              		@ sp needed
 2630 0166 80BD     		pop	{r7, pc}
 2631              	.L151:
 2632              		.align	2
 2633              	.L150:
 2634 0168 00200240 		.word	1073881088
 2635 016c 00210240 		.word	1073881344
 2636 0170 00230240 		.word	1073881856
 2637 0174 00630258 		.word	1476551424
 2638 0178 FECFFFFF 		.word	-12290
 2639              		.cfi_endproc
 2640              	.LFE337:
 2642              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 2643              		.align	1
ARM GAS  /tmp/cc6jq3Wn.s 			page 181


 2644              		.global	HAL_ADCEx_InjectedStop
 2645              		.syntax unified
 2646              		.thumb
 2647              		.thumb_func
 2648              		.fpu fpv5-d16
 2650              	HAL_ADCEx_InjectedStop:
 2651              	.LFB338:
 579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of multimode enabled (when multimode feature is available),
 589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop() must be called for ADC master first, then for ADC slave.
 590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
 597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2652              		.loc 2 597 1
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 16
 2655              		@ frame_needed = 1, uses_anonymous_args = 0
 2656 0000 80B5     		push	{r7, lr}
 2657              	.LCFI191:
 2658              		.cfi_def_cfa_offset 8
 2659              		.cfi_offset 7, -8
 2660              		.cfi_offset 14, -4
 2661 0002 84B0     		sub	sp, sp, #16
 2662              	.LCFI192:
 2663              		.cfi_def_cfa_offset 24
 2664 0004 00AF     		add	r7, sp, #0
 2665              	.LCFI193:
 2666              		.cfi_def_cfa_register 7
 2667 0006 7860     		str	r0, [r7, #4]
 598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2668              		.loc 2 604 3
 2669 0008 7B68     		ldr	r3, [r7, #4]
 2670 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 2671 000e 012B     		cmp	r3, #1
 2672 0010 01D1     		bne	.L153
 2673              		.loc 2 604 3 is_stmt 0 discriminator 1
 2674 0012 0223     		movs	r3, #2
 2675 0014 30E0     		b	.L154
ARM GAS  /tmp/cc6jq3Wn.s 			page 182


 2676              	.L153:
 2677              		.loc 2 604 3 discriminator 2
 2678 0016 7B68     		ldr	r3, [r7, #4]
 2679 0018 0122     		movs	r2, #1
 2680 001a 83F85020 		strb	r2, [r3, #80]
 605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 2681              		.loc 2 607 20 is_stmt 1 discriminator 2
 2682 001e 0221     		movs	r1, #2
 2683 0020 7868     		ldr	r0, [r7, #4]
 2684 0022 FFF7FEFF 		bl	ADC_ConversionStop
 2685 0026 0346     		mov	r3, r0
 2686 0028 FB73     		strb	r3, [r7, #15]
 608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and if no conversion on regular group is on-going                       */
 611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2687              		.loc 2 611 6 discriminator 2
 2688 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2689 002c 002B     		cmp	r3, #0
 2690 002e 1ED1     		bne	.L155
 612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 2691              		.loc 2 613 9
 2692 0030 7B68     		ldr	r3, [r7, #4]
 2693 0032 1B68     		ldr	r3, [r3]
 2694 0034 1846     		mov	r0, r3
 2695 0036 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2696 003a 0346     		mov	r3, r0
 2697              		.loc 2 613 8
 2698 003c 002B     		cmp	r3, #0
 2699 003e 10D1     		bne	.L156
 614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 2700              		.loc 2 616 24
 2701 0040 7868     		ldr	r0, [r7, #4]
 2702 0042 FFF7FEFF 		bl	ADC_Disable
 2703 0046 0346     		mov	r3, r0
 2704 0048 FB73     		strb	r3, [r7, #15]
 617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2705              		.loc 2 619 10
 2706 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2707 004c 002B     		cmp	r3, #0
 2708 004e 0ED1     		bne	.L155
 620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 2709              		.loc 2 622 9
 2710 0050 7B68     		ldr	r3, [r7, #4]
 2711 0052 5A6D     		ldr	r2, [r3, #84]
 2712 0054 0A4B     		ldr	r3, .L157
 2713 0056 1340     		ands	r3, r3, r2
 2714 0058 43F00102 		orr	r2, r3, #1
ARM GAS  /tmp/cc6jq3Wn.s 			page 183


 2715 005c 7B68     		ldr	r3, [r7, #4]
 2716 005e 5A65     		str	r2, [r3, #84]
 2717 0060 05E0     		b	.L155
 2718              	.L156:
 623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
 632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2719              		.loc 2 632 7
 2720 0062 7B68     		ldr	r3, [r7, #4]
 2721 0064 5B6D     		ldr	r3, [r3, #84]
 2722 0066 23F48052 		bic	r2, r3, #4096
 2723 006a 7B68     		ldr	r3, [r7, #4]
 2724 006c 5A65     		str	r2, [r3, #84]
 2725              	.L155:
 633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2726              		.loc 2 637 3
 2727 006e 7B68     		ldr	r3, [r7, #4]
 2728 0070 0022     		movs	r2, #0
 2729 0072 83F85020 		strb	r2, [r3, #80]
 638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 2730              		.loc 2 640 10
 2731 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2732              	.L154:
 641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2733              		.loc 2 641 1
 2734 0078 1846     		mov	r0, r3
 2735 007a 1037     		adds	r7, r7, #16
 2736              	.LCFI194:
 2737              		.cfi_def_cfa_offset 8
 2738 007c BD46     		mov	sp, r7
 2739              	.LCFI195:
 2740              		.cfi_def_cfa_register 13
 2741              		@ sp needed
 2742 007e 80BD     		pop	{r7, pc}
 2743              	.L158:
 2744              		.align	2
 2745              	.L157:
 2746 0080 FEEEFFFF 		.word	-4354
 2747              		.cfi_endproc
 2748              	.LFE338:
 2750              		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 2751              		.align	1
 2752              		.global	HAL_ADCEx_InjectedPollForConversion
 2753              		.syntax unified
ARM GAS  /tmp/cc6jq3Wn.s 			page 184


 2754              		.thumb
 2755              		.thumb_func
 2756              		.fpu fpv5-d16
 2758              	HAL_ADCEx_InjectedPollForConversion:
 2759              	.LFB339:
 642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param Timeout Timeout value in millisecond.
 647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
 648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         checked and cleared depending on AUTDLY bit status.
 649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
 652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2760              		.loc 2 652 1
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 40
 2763              		@ frame_needed = 1, uses_anonymous_args = 0
 2764 0000 80B5     		push	{r7, lr}
 2765              	.LCFI196:
 2766              		.cfi_def_cfa_offset 8
 2767              		.cfi_offset 7, -8
 2768              		.cfi_offset 14, -4
 2769 0002 8AB0     		sub	sp, sp, #40
 2770              	.LCFI197:
 2771              		.cfi_def_cfa_offset 48
 2772 0004 00AF     		add	r7, sp, #0
 2773              	.LCFI198:
 2774              		.cfi_def_cfa_register 7
 2775 0006 7860     		str	r0, [r7, #4]
 2776 0008 3960     		str	r1, [r7]
 653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
 654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_Flag_End;
 655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
 657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_cfgr;
 658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   const ADC_TypeDef *tmpADC_Master;
 659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 2777              		.loc 2 659 55
 2778 000a 7B68     		ldr	r3, [r7, #4]
 2779 000c 1B68     		ldr	r3, [r3]
 2780              		.loc 2 659 35
 2781 000e 614A     		ldr	r2, .L180
 2782 0010 9342     		cmp	r3, r2
 2783 0012 04D0     		beq	.L160
 2784              		.loc 2 659 55 discriminator 2
 2785 0014 7B68     		ldr	r3, [r7, #4]
 2786 0016 1B68     		ldr	r3, [r3]
 2787 0018 5F4A     		ldr	r2, .L180+4
 2788 001a 9342     		cmp	r3, r2
 2789 001c 01D1     		bne	.L161
 2790              	.L160:
 2791              		.loc 2 659 35 discriminator 3
 2792 001e 5F4B     		ldr	r3, .L180+8
 2793 0020 00E0     		b	.L162
ARM GAS  /tmp/cc6jq3Wn.s 			page 185


 2794              	.L161:
 2795              		.loc 2 659 35 is_stmt 0 discriminator 4
 2796 0022 5F4B     		ldr	r3, .L180+12
 2797              	.L162:
 2798              		.loc 2 659 35 discriminator 6
 2799 0024 1846     		mov	r0, r3
 2800 0026 FFF7FEFF 		bl	LL_ADC_GetMultimode
 2801 002a F861     		str	r0, [r7, #28]
 660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If end of sequence selected */
 665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 2802              		.loc 2 665 17 is_stmt 1 discriminator 6
 2803 002c 7B68     		ldr	r3, [r7, #4]
 2804 002e 1B69     		ldr	r3, [r3, #16]
 2805              		.loc 2 665 6 discriminator 6
 2806 0030 082B     		cmp	r3, #8
 2807 0032 02D1     		bne	.L163
 666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOS;
 2808              		.loc 2 667 18
 2809 0034 4023     		movs	r3, #64
 2810 0036 7B62     		str	r3, [r7, #36]
 2811 0038 01E0     		b	.L164
 2812              	.L163:
 668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else /* end of conversion selected */
 670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOC;
 2813              		.loc 2 671 18
 2814 003a 2023     		movs	r3, #32
 2815 003c 7B62     		str	r3, [r7, #36]
 2816              	.L164:
 672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get timeout */
 675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();
 2817              		.loc 2 675 15
 2818 003e FFF7FEFF 		bl	HAL_GetTick
 2819 0042 B861     		str	r0, [r7, #24]
 676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Wait until End of Conversion or Sequence flag is raised */
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 2820              		.loc 2 678 9
 2821 0044 21E0     		b	.L165
 2822              	.L168:
 679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
 681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (Timeout != HAL_MAX_DELAY)
 2823              		.loc 2 681 8
 2824 0046 3B68     		ldr	r3, [r7]
 2825 0048 B3F1FF3F 		cmp	r3, #-1
 2826 004c 1DD0     		beq	.L165
 682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
ARM GAS  /tmp/cc6jq3Wn.s 			page 186


 2827              		.loc 2 683 13
 2828 004e FFF7FEFF 		bl	HAL_GetTick
 2829 0052 0246     		mov	r2, r0
 2830              		.loc 2 683 27
 2831 0054 BB69     		ldr	r3, [r7, #24]
 2832 0056 D31A     		subs	r3, r2, r3
 2833              		.loc 2 683 10
 2834 0058 3A68     		ldr	r2, [r7]
 2835 005a 9A42     		cmp	r2, r3
 2836 005c 02D3     		bcc	.L166
 2837              		.loc 2 683 51 discriminator 1
 2838 005e 3B68     		ldr	r3, [r7]
 2839 0060 002B     		cmp	r3, #0
 2840 0062 12D1     		bne	.L165
 2841              	.L166:
 684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 2842              		.loc 2 685 17
 2843 0064 7B68     		ldr	r3, [r7, #4]
 2844 0066 1B68     		ldr	r3, [r3]
 2845              		.loc 2 685 27
 2846 0068 1A68     		ldr	r2, [r3]
 2847              		.loc 2 685 33
 2848 006a 7B6A     		ldr	r3, [r7, #36]
 2849 006c 1340     		ands	r3, r3, r2
 2850              		.loc 2 685 11
 2851 006e 002B     		cmp	r3, #0
 2852 0070 0BD1     		bne	.L165
 686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 2853              		.loc 2 688 11
 2854 0072 7B68     		ldr	r3, [r7, #4]
 2855 0074 5B6D     		ldr	r3, [r3, #84]
 2856 0076 43F00402 		orr	r2, r3, #4
 2857 007a 7B68     		ldr	r3, [r7, #4]
 2858 007c 5A65     		str	r2, [r3, #84]
 689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Process unlocked */
 691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 2859              		.loc 2 691 11
 2860 007e 7B68     		ldr	r3, [r7, #4]
 2861 0080 0022     		movs	r2, #0
 2862 0082 83F85020 		strb	r2, [r3, #80]
 692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 2863              		.loc 2 693 18
 2864 0086 0323     		movs	r3, #3
 2865 0088 80E0     		b	.L167
 2866              	.L165:
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 2867              		.loc 2 678 15
 2868 008a 7B68     		ldr	r3, [r7, #4]
 2869 008c 1B68     		ldr	r3, [r3]
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 2870              		.loc 2 678 25
 2871 008e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc6jq3Wn.s 			page 187


 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 2872              		.loc 2 678 31
 2873 0090 7B6A     		ldr	r3, [r7, #36]
 2874 0092 1340     		ands	r3, r3, r2
 678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 2875              		.loc 2 678 9
 2876 0094 002B     		cmp	r3, #0
 2877 0096 D6D0     		beq	.L168
 694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Retrieve ADC configuration */
 700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 2878              		.loc 2 700 44
 2879 0098 7B68     		ldr	r3, [r7, #4]
 2880 009a 1B68     		ldr	r3, [r3]
 2881 009c 1846     		mov	r0, r3
 2882 009e FFF7FEFF 		bl	LL_ADC_INJ_IsTriggerSourceSWStart
 2883 00a2 7861     		str	r0, [r7, #20]
 701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 2884              		.loc 2 701 44
 2885 00a4 7B68     		ldr	r3, [r7, #4]
 2886 00a6 1B68     		ldr	r3, [r3]
 2887 00a8 1846     		mov	r0, r3
 2888 00aa FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 2889 00ae 3861     		str	r0, [r7, #16]
 702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave  */
 703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* in function of multimode state (for devices with multimode         */
 704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* available).                                                        */
 705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 2890              		.loc 2 705 8
 2891 00b0 7B68     		ldr	r3, [r7, #4]
 2892 00b2 1B68     		ldr	r3, [r3]
 2893 00b4 384A     		ldr	r2, .L180+4
 2894 00b6 9342     		cmp	r3, r2
 2895 00b8 02D0     		beq	.L169
 2896              		.loc 2 705 8 is_stmt 0 discriminator 1
 2897 00ba 7B68     		ldr	r3, [r7, #4]
 2898 00bc 1B68     		ldr	r3, [r3]
 2899 00be 00E0     		b	.L170
 2900              	.L169:
 2901              		.loc 2 705 8 discriminator 2
 2902 00c0 344B     		ldr	r3, .L180
 2903              	.L170:
 2904              		.loc 2 705 62 is_stmt 1 discriminator 4
 2905 00c2 7A68     		ldr	r2, [r7, #4]
 2906 00c4 1268     		ldr	r2, [r2]
 2907              		.loc 2 705 6 discriminator 4
 2908 00c6 9342     		cmp	r3, r2
 2909 00c8 08D0     		beq	.L171
 706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 2910              		.loc 2 706 7
 2911 00ca FB69     		ldr	r3, [r7, #28]
 2912 00cc 002B     		cmp	r3, #0
 2913 00ce 05D0     		beq	.L171
ARM GAS  /tmp/cc6jq3Wn.s 			page 188


 707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 2914              		.loc 2 707 7
 2915 00d0 FB69     		ldr	r3, [r7, #28]
 2916 00d2 062B     		cmp	r3, #6
 2917 00d4 02D0     		beq	.L171
 708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 2918              		.loc 2 708 7
 2919 00d6 FB69     		ldr	r3, [r7, #28]
 2920 00d8 072B     		cmp	r3, #7
 2921 00da 04D1     		bne	.L172
 2922              	.L171:
 709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
 710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 2923              		.loc 2 711 16
 2924 00dc 7B68     		ldr	r3, [r7, #4]
 2925 00de 1B68     		ldr	r3, [r3]
 2926              		.loc 2 711 14
 2927 00e0 DB68     		ldr	r3, [r3, #12]
 2928 00e2 3B62     		str	r3, [r7, #32]
 2929 00e4 0CE0     		b	.L173
 2930              	.L172:
 712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 2931              		.loc 2 715 21
 2932 00e6 7B68     		ldr	r3, [r7, #4]
 2933 00e8 1B68     		ldr	r3, [r3]
 2934 00ea 2B4A     		ldr	r2, .L180+4
 2935 00ec 9342     		cmp	r3, r2
 2936 00ee 02D0     		beq	.L174
 2937              		.loc 2 715 21 is_stmt 0 discriminator 1
 2938 00f0 7B68     		ldr	r3, [r7, #4]
 2939 00f2 1B68     		ldr	r3, [r3]
 2940 00f4 00E0     		b	.L175
 2941              	.L174:
 2942              		.loc 2 715 21 discriminator 2
 2943 00f6 274B     		ldr	r3, .L180
 2944              	.L175:
 2945              		.loc 2 715 19 is_stmt 1 discriminator 4
 2946 00f8 FB60     		str	r3, [r7, #12]
 716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 2947              		.loc 2 716 14 discriminator 4
 2948 00fa FB68     		ldr	r3, [r7, #12]
 2949 00fc DB68     		ldr	r3, [r3, #12]
 2950 00fe 3B62     		str	r3, [r7, #32]
 2951              	.L173:
 717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Update ADC state machine */
 720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2952              		.loc 2 720 3
 2953 0100 7B68     		ldr	r3, [r7, #4]
 2954 0102 5B6D     		ldr	r3, [r3, #84]
 2955 0104 43F40052 		orr	r2, r3, #8192
 2956 0108 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6jq3Wn.s 			page 189


 2957 010a 5A65     		str	r2, [r3, #84]
 721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 2958              		.loc 2 725 6
 2959 010c 7B69     		ldr	r3, [r7, #20]
 2960 010e 002B     		cmp	r3, #0
 2961 0110 0CD1     		bne	.L176
 726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 2962              		.loc 2 726 9 discriminator 1
 2963 0112 3B6A     		ldr	r3, [r7, #32]
 2964 0114 03F00073 		and	r3, r3, #33554432
 725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 2965              		.loc 2 725 66 discriminator 1
 2966 0118 002B     		cmp	r3, #0
 2967 011a 25D1     		bne	.L177
 2968              		.loc 2 726 57
 2969 011c 3B69     		ldr	r3, [r7, #16]
 2970 011e 002B     		cmp	r3, #0
 2971 0120 22D0     		beq	.L177
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 2972              		.loc 2 728 10
 2973 0122 3B6A     		ldr	r3, [r7, #32]
 2974 0124 03F40053 		and	r3, r3, #8192
 727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 2975              		.loc 2 727 58
 2976 0128 002B     		cmp	r3, #0
 2977 012a 1DD1     		bne	.L177
 2978              	.L176:
 729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check whether end of sequence is reached */
 731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 2979              		.loc 2 731 9
 2980 012c 7B68     		ldr	r3, [r7, #4]
 2981 012e 1B68     		ldr	r3, [r3]
 2982 0130 1B68     		ldr	r3, [r3]
 2983 0132 03F04003 		and	r3, r3, #64
 2984              		.loc 2 731 8
 2985 0136 402B     		cmp	r3, #64
 2986 0138 16D1     		bne	.L177
 732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Particular case if injected contexts queue is enabled:             */
 734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* when the last context has been fully processed, JSQR is reset      */
 735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* by the hardware. Even if no injected conversion is planned to come */
 736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (queue empty, triggers are ignored), it can start again            */
 737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* immediately after setting a new context (JADSTART is still set).   */
 738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Therefore, state of HAL ADC injected group is kept to busy.        */
 739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 2987              		.loc 2 739 11
 2988 013a 3B6A     		ldr	r3, [r7, #32]
 2989 013c 03F40013 		and	r3, r3, #2097152
 2990              		.loc 2 739 10
 2991 0140 002B     		cmp	r3, #0
 2992 0142 11D1     		bne	.L177
ARM GAS  /tmp/cc6jq3Wn.s 			page 190


 740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2993              		.loc 2 742 9
 2994 0144 7B68     		ldr	r3, [r7, #4]
 2995 0146 5B6D     		ldr	r3, [r3, #84]
 2996 0148 23F48052 		bic	r2, r3, #4096
 2997 014c 7B68     		ldr	r3, [r7, #4]
 2998 014e 5A65     		str	r2, [r3, #84]
 743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 2999              		.loc 2 744 18
 3000 0150 7B68     		ldr	r3, [r7, #4]
 3001 0152 5B6D     		ldr	r3, [r3, #84]
 3002              		.loc 2 744 26
 3003 0154 03F48073 		and	r3, r3, #256
 3004              		.loc 2 744 12
 3005 0158 002B     		cmp	r3, #0
 3006 015a 05D1     		bne	.L177
 745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3007              		.loc 2 746 11
 3008 015c 7B68     		ldr	r3, [r7, #4]
 3009 015e 5B6D     		ldr	r3, [r3, #84]
 3010 0160 43F00102 		orr	r2, r3, #1
 3011 0164 7B68     		ldr	r3, [r7, #4]
 3012 0166 5A65     		str	r2, [r3, #84]
 3013              	.L177:
 747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Clear polled flag */
 753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_Flag_End == ADC_FLAG_JEOS)
 3014              		.loc 2 753 6
 3015 0168 7B6A     		ldr	r3, [r7, #36]
 3016 016a 402B     		cmp	r3, #64
 3017 016c 09D1     		bne	.L178
 754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear end of sequence JEOS flag of injected group if low power feature */
 756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
 757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* For injected groups, no new conversion will start before JEOS is       */
 758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* cleared.                                                               */
 759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 3018              		.loc 2 759 9
 3019 016e 3B6A     		ldr	r3, [r7, #32]
 3020 0170 03F48043 		and	r3, r3, #16384
 3021              		.loc 2 759 8
 3022 0174 002B     		cmp	r3, #0
 3023 0176 08D1     		bne	.L179
 760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 3024              		.loc 2 761 7
 3025 0178 7B68     		ldr	r3, [r7, #4]
 3026 017a 1B68     		ldr	r3, [r3]
 3027 017c 6022     		movs	r2, #96
ARM GAS  /tmp/cc6jq3Wn.s 			page 191


 3028 017e 1A60     		str	r2, [r3]
 3029 0180 03E0     		b	.L179
 3030              	.L178:
 762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 3031              		.loc 2 766 5
 3032 0182 7B68     		ldr	r3, [r7, #4]
 3033 0184 1B68     		ldr	r3, [r3]
 3034 0186 2022     		movs	r2, #32
 3035 0188 1A60     		str	r2, [r3]
 3036              	.L179:
 767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return API HAL status */
 770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return HAL_OK;
 3037              		.loc 2 770 10
 3038 018a 0023     		movs	r3, #0
 3039              	.L167:
 771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3040              		.loc 2 771 1
 3041 018c 1846     		mov	r0, r3
 3042 018e 2837     		adds	r7, r7, #40
 3043              	.LCFI199:
 3044              		.cfi_def_cfa_offset 8
 3045 0190 BD46     		mov	sp, r7
 3046              	.LCFI200:
 3047              		.cfi_def_cfa_register 13
 3048              		@ sp needed
 3049 0192 80BD     		pop	{r7, pc}
 3050              	.L181:
 3051              		.align	2
 3052              	.L180:
 3053 0194 00200240 		.word	1073881088
 3054 0198 00210240 		.word	1073881344
 3055 019c 00230240 		.word	1073881856
 3056 01a0 00630258 		.word	1476551424
 3057              		.cfi_endproc
 3058              	.LFE339:
 3060              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 3061              		.align	1
 3062              		.global	HAL_ADCEx_InjectedStart_IT
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu fpv5-d16
 3068              	HAL_ADCEx_InjectedStart_IT:
 3069              	.LFB340:
 772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group with interruption.
 775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function according to initialization
 776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         setting : JEOC (end of conversion) or JEOS (end of sequence)
 777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is enabled):
 778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart_IT() API must be called for ADC slave first,
ARM GAS  /tmp/cc6jq3Wn.s 			page 192


 779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC master.
 780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
 784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
 786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 3070              		.loc 2 786 1
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 24
 3073              		@ frame_needed = 1, uses_anonymous_args = 0
 3074 0000 80B5     		push	{r7, lr}
 3075              	.LCFI201:
 3076              		.cfi_def_cfa_offset 8
 3077              		.cfi_offset 7, -8
 3078              		.cfi_offset 14, -4
 3079 0002 86B0     		sub	sp, sp, #24
 3080              	.LCFI202:
 3081              		.cfi_def_cfa_offset 32
 3082 0004 00AF     		add	r7, sp, #0
 3083              	.LCFI203:
 3084              		.cfi_def_cfa_register 7
 3085 0006 7860     		str	r0, [r7, #4]
 787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3086              		.loc 2 789 55
 3087 0008 7B68     		ldr	r3, [r7, #4]
 3088 000a 1B68     		ldr	r3, [r3]
 3089              		.loc 2 789 35
 3090 000c 714A     		ldr	r2, .L207
 3091 000e 9342     		cmp	r3, r2
 3092 0010 04D0     		beq	.L183
 3093              		.loc 2 789 55 discriminator 2
 3094 0012 7B68     		ldr	r3, [r7, #4]
 3095 0014 1B68     		ldr	r3, [r3]
 3096 0016 704A     		ldr	r2, .L207+4
 3097 0018 9342     		cmp	r3, r2
 3098 001a 01D1     		bne	.L184
 3099              	.L183:
 3100              		.loc 2 789 35 discriminator 3
 3101 001c 6F4B     		ldr	r3, .L207+8
 3102 001e 00E0     		b	.L185
 3103              	.L184:
 3104              		.loc 2 789 35 is_stmt 0 discriminator 4
 3105 0020 6F4B     		ldr	r3, .L207+12
 3106              	.L185:
 3107              		.loc 2 789 35 discriminator 6
 3108 0022 1846     		mov	r0, r3
 3109 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3110 0028 7861     		str	r0, [r7, #20]
 790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
ARM GAS  /tmp/cc6jq3Wn.s 			page 193


 3111              		.loc 2 794 7 is_stmt 1 discriminator 6
 3112 002a 7B68     		ldr	r3, [r7, #4]
 3113 002c 1B68     		ldr	r3, [r3]
 3114 002e 1846     		mov	r0, r3
 3115 0030 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 3116 0034 0346     		mov	r3, r0
 3117              		.loc 2 794 6 discriminator 6
 3118 0036 002B     		cmp	r3, #0
 3119 0038 01D0     		beq	.L186
 795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
 3120              		.loc 2 796 12
 3121 003a 0223     		movs	r3, #2
 3122 003c C6E0     		b	.L187
 3123              	.L186:
 797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          the queue is empty */
 807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 3124              		.loc 2 807 33
 3125 003e 7B68     		ldr	r3, [r7, #4]
 3126 0040 1B68     		ldr	r3, [r3]
 3127 0042 DB68     		ldr	r3, [r3, #12]
 3128              		.loc 2 807 31
 3129 0044 03F00043 		and	r3, r3, #-2147483648
 3130 0048 3B61     		str	r3, [r7, #16]
 808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 3131              		.loc 2 809 10
 3132 004a 7B68     		ldr	r3, [r7, #4]
 3133 004c 1B68     		ldr	r3, [r3]
 3134 004e DB6C     		ldr	r3, [r3, #76]
 3135 0050 03F4C073 		and	r3, r3, #384
 3136              		.loc 2 809 8
 3137 0054 002B     		cmp	r3, #0
 3138 0056 0AD1     		bne	.L188
 810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 3139              		.loc 2 810 9
 3140 0058 3B69     		ldr	r3, [r7, #16]
 3141 005a 002B     		cmp	r3, #0
 3142 005c 07D1     		bne	.L188
 811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        )
 812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3143              		.loc 2 813 7
 3144 005e 7B68     		ldr	r3, [r7, #4]
 3145 0060 5B6D     		ldr	r3, [r3, #84]
 3146 0062 43F02002 		orr	r2, r3, #32
 3147 0066 7B68     		ldr	r3, [r7, #4]
 3148 0068 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/cc6jq3Wn.s 			page 194


 814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 3149              		.loc 2 814 14
 3150 006a 0123     		movs	r3, #1
 3151 006c AEE0     		b	.L187
 3152              	.L188:
 815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
 818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 3153              		.loc 2 818 5
 3154 006e 7B68     		ldr	r3, [r7, #4]
 3155 0070 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3156 0074 012B     		cmp	r3, #1
 3157 0076 01D1     		bne	.L189
 3158              		.loc 2 818 5 is_stmt 0 discriminator 1
 3159 0078 0223     		movs	r3, #2
 3160 007a A7E0     		b	.L187
 3161              	.L189:
 3162              		.loc 2 818 5 discriminator 2
 3163 007c 7B68     		ldr	r3, [r7, #4]
 3164 007e 0122     		movs	r2, #1
 3165 0080 83F85020 		strb	r2, [r3, #80]
 819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 3166              		.loc 2 821 22 is_stmt 1 discriminator 2
 3167 0084 7868     		ldr	r0, [r7, #4]
 3168 0086 FFF7FEFF 		bl	ADC_Enable
 3169 008a 0346     		mov	r3, r0
 3170 008c FB73     		strb	r3, [r7, #15]
 822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3171              		.loc 2 824 8 discriminator 2
 3172 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3173 0090 002B     		cmp	r3, #0
 3174 0092 40F09680 		bne	.L190
 825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 3175              		.loc 2 827 16
 3176 0096 7B68     		ldr	r3, [r7, #4]
 3177 0098 5B6D     		ldr	r3, [r3, #84]
 3178              		.loc 2 827 24
 3179 009a 03F48073 		and	r3, r3, #256
 3180              		.loc 2 827 10
 3181 009e 002B     		cmp	r3, #0
 3182 00a0 06D0     		beq	.L191
 828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 3183              		.loc 2 830 9
 3184 00a2 7B68     		ldr	r3, [r7, #4]
 3185 00a4 9B6D     		ldr	r3, [r3, #88]
 3186 00a6 23F00802 		bic	r2, r3, #8
 3187 00aa 7B68     		ldr	r3, [r7, #4]
 3188 00ac 9A65     		str	r2, [r3, #88]
ARM GAS  /tmp/cc6jq3Wn.s 			page 195


 3189 00ae 02E0     		b	.L192
 3190              	.L191:
 831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 3191              		.loc 2 835 9
 3192 00b0 7B68     		ldr	r3, [r7, #4]
 3193 00b2 0022     		movs	r2, #0
 3194 00b4 9A65     		str	r2, [r3, #88]
 3195              	.L192:
 836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 3196              		.loc 2 841 7
 3197 00b6 7B68     		ldr	r3, [r7, #4]
 3198 00b8 5A6D     		ldr	r2, [r3, #84]
 3199 00ba 4A4B     		ldr	r3, .L207+16
 3200 00bc 1340     		ands	r3, r3, r2
 3201 00be 43F48052 		orr	r2, r3, #4096
 3202 00c2 7B68     		ldr	r3, [r7, #4]
 3203 00c4 5A65     		str	r2, [r3, #84]
 842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3204              		.loc 2 848 12
 3205 00c6 7B68     		ldr	r3, [r7, #4]
 3206 00c8 1B68     		ldr	r3, [r3]
 3207 00ca 434A     		ldr	r2, .L207+4
 3208 00cc 9342     		cmp	r3, r2
 3209 00ce 02D0     		beq	.L193
 3210              		.loc 2 848 12 is_stmt 0 discriminator 1
 3211 00d0 7B68     		ldr	r3, [r7, #4]
 3212 00d2 1B68     		ldr	r3, [r3]
 3213 00d4 00E0     		b	.L194
 3214              	.L193:
 3215              		.loc 2 848 12 discriminator 2
 3216 00d6 3F4B     		ldr	r3, .L207
 3217              	.L194:
 3218              		.loc 2 848 66 is_stmt 1 discriminator 4
 3219 00d8 7A68     		ldr	r2, [r7, #4]
 3220 00da 1268     		ldr	r2, [r2]
 3221              		.loc 2 848 10 discriminator 4
 3222 00dc 9342     		cmp	r3, r2
 3223 00de 02D0     		beq	.L195
 849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3224              		.loc 2 849 11
 3225 00e0 7B69     		ldr	r3, [r7, #20]
 3226 00e2 002B     		cmp	r3, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 196


 3227 00e4 05D1     		bne	.L196
 3228              	.L195:
 850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3229              		.loc 2 852 9
 3230 00e6 7B68     		ldr	r3, [r7, #4]
 3231 00e8 5B6D     		ldr	r3, [r3, #84]
 3232 00ea 23F48012 		bic	r2, r3, #1048576
 3233 00ee 7B68     		ldr	r3, [r7, #4]
 3234 00f0 5A65     		str	r2, [r3, #84]
 3235              	.L196:
 853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 3236              		.loc 2 857 7
 3237 00f2 7B68     		ldr	r3, [r7, #4]
 3238 00f4 1B68     		ldr	r3, [r3]
 3239 00f6 6022     		movs	r2, #96
 3240 00f8 1A60     		str	r2, [r3]
 858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3241              		.loc 2 862 7
 3242 00fa 7B68     		ldr	r3, [r7, #4]
 3243 00fc 0022     		movs	r2, #0
 3244 00fe 83F85020 		strb	r2, [r3, #80]
 863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC Injected context queue overflow interrupt if this feature   */
 865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is enabled.                                                            */
 866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 3245              		.loc 2 866 16
 3246 0102 7B68     		ldr	r3, [r7, #4]
 3247 0104 1B68     		ldr	r3, [r3]
 3248              		.loc 2 866 26
 3249 0106 DB68     		ldr	r3, [r3, #12]
 3250              		.loc 2 866 33
 3251 0108 03F40013 		and	r3, r3, #2097152
 3252              		.loc 2 866 10
 3253 010c 002B     		cmp	r3, #0
 3254 010e 07D0     		beq	.L197
 867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 3255              		.loc 2 868 9
 3256 0110 7B68     		ldr	r3, [r7, #4]
 3257 0112 1B68     		ldr	r3, [r3]
 3258 0114 5A68     		ldr	r2, [r3, #4]
 3259 0116 7B68     		ldr	r3, [r7, #4]
 3260 0118 1B68     		ldr	r3, [r3]
 3261 011a 42F48062 		orr	r2, r2, #1024
 3262 011e 5A60     		str	r2, [r3, #4]
 3263              	.L197:
 869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
ARM GAS  /tmp/cc6jq3Wn.s 			page 197


 870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC end of conversion interrupt */
 872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       switch (hadc->Init.EOCSelection)
 3264              		.loc 2 872 25
 3265 0120 7B68     		ldr	r3, [r7, #4]
 3266 0122 1B69     		ldr	r3, [r3, #16]
 3267              		.loc 2 872 7
 3268 0124 082B     		cmp	r3, #8
 3269 0126 10D1     		bne	.L198
 873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         case ADC_EOC_SEQ_CONV:
 875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 3270              		.loc 2 875 11
 3271 0128 7B68     		ldr	r3, [r7, #4]
 3272 012a 1B68     		ldr	r3, [r3]
 3273 012c 5A68     		ldr	r2, [r3, #4]
 3274 012e 7B68     		ldr	r3, [r7, #4]
 3275 0130 1B68     		ldr	r3, [r3]
 3276 0132 22F02002 		bic	r2, r2, #32
 3277 0136 5A60     		str	r2, [r3, #4]
 876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 3278              		.loc 2 876 11
 3279 0138 7B68     		ldr	r3, [r7, #4]
 3280 013a 1B68     		ldr	r3, [r3]
 3281 013c 5A68     		ldr	r2, [r3, #4]
 3282 013e 7B68     		ldr	r3, [r7, #4]
 3283 0140 1B68     		ldr	r3, [r3]
 3284 0142 42F04002 		orr	r2, r2, #64
 3285 0146 5A60     		str	r2, [r3, #4]
 877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           break;
 3286              		.loc 2 877 11
 3287 0148 10E0     		b	.L199
 3288              	.L198:
 878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* case ADC_EOC_SINGLE_CONV */
 879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         default:
 880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 3289              		.loc 2 880 11
 3290 014a 7B68     		ldr	r3, [r7, #4]
 3291 014c 1B68     		ldr	r3, [r3]
 3292 014e 5A68     		ldr	r2, [r3, #4]
 3293 0150 7B68     		ldr	r3, [r7, #4]
 3294 0152 1B68     		ldr	r3, [r3]
 3295 0154 22F04002 		bic	r2, r2, #64
 3296 0158 5A60     		str	r2, [r3, #4]
 881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 3297              		.loc 2 881 11
 3298 015a 7B68     		ldr	r3, [r7, #4]
 3299 015c 1B68     		ldr	r3, [r3]
 3300 015e 5A68     		ldr	r2, [r3, #4]
 3301 0160 7B68     		ldr	r3, [r7, #4]
 3302 0162 1B68     		ldr	r3, [r3]
 3303 0164 42F02002 		orr	r2, r2, #32
 3304 0168 5A60     		str	r2, [r3, #4]
 882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           break;
 3305              		.loc 2 882 11
 3306 016a 00BF     		nop
 3307              	.L199:
ARM GAS  /tmp/cc6jq3Wn.s 			page 198


 883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
 893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3308              		.loc 2 897 12
 3309 016c 7B68     		ldr	r3, [r7, #4]
 3310 016e 1B68     		ldr	r3, [r3]
 3311 0170 194A     		ldr	r2, .L207+4
 3312 0172 9342     		cmp	r3, r2
 3313 0174 02D0     		beq	.L200
 3314              		.loc 2 897 12 is_stmt 0 discriminator 1
 3315 0176 7B68     		ldr	r3, [r7, #4]
 3316 0178 1B68     		ldr	r3, [r3]
 3317 017a 00E0     		b	.L201
 3318              	.L200:
 3319              		.loc 2 897 12 discriminator 2
 3320 017c 154B     		ldr	r3, .L207
 3321              	.L201:
 3322              		.loc 2 897 66 is_stmt 1 discriminator 4
 3323 017e 7A68     		ldr	r2, [r7, #4]
 3324 0180 1268     		ldr	r2, [r2]
 3325              		.loc 2 897 10 discriminator 4
 3326 0182 9342     		cmp	r3, r2
 3327 0184 08D0     		beq	.L202
 898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3328              		.loc 2 898 11
 3329 0186 7B69     		ldr	r3, [r7, #20]
 3330 0188 002B     		cmp	r3, #0
 3331 018a 05D0     		beq	.L202
 899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 3332              		.loc 2 899 11
 3333 018c 7B69     		ldr	r3, [r7, #20]
 3334 018e 062B     		cmp	r3, #6
 3335 0190 02D0     		beq	.L202
 900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 3336              		.loc 2 900 11
 3337 0192 7B69     		ldr	r3, [r7, #20]
 3338 0194 072B     		cmp	r3, #7
 3339 0196 0DD1     		bne	.L203
 3340              	.L202:
 901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 3341              		.loc 2 904 13
 3342 0198 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc6jq3Wn.s 			page 199


 3343 019a 1B68     		ldr	r3, [r3]
 3344 019c 1846     		mov	r0, r3
 3345 019e FFF7FEFF 		bl	LL_ADC_INJ_GetTrigAuto
 3346 01a2 0346     		mov	r3, r0
 3347              		.loc 2 904 12
 3348 01a4 002B     		cmp	r3, #0
 3349 01a6 10D1     		bne	.L206
 905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 3350              		.loc 2 906 11
 3351 01a8 7B68     		ldr	r3, [r7, #4]
 3352 01aa 1B68     		ldr	r3, [r3]
 3353 01ac 1846     		mov	r0, r3
 3354 01ae FFF7FEFF 		bl	LL_ADC_INJ_StartConversion
 904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3355              		.loc 2 904 12
 3356 01b2 0AE0     		b	.L206
 3357              	.L203:
 907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3358              		.loc 2 912 9
 3359 01b4 7B68     		ldr	r3, [r7, #4]
 3360 01b6 5B6D     		ldr	r3, [r3, #84]
 3361 01b8 43F48012 		orr	r2, r3, #1048576
 3362 01bc 7B68     		ldr	r3, [r7, #4]
 3363 01be 5A65     		str	r2, [r3, #84]
 3364 01c0 03E0     		b	.L206
 3365              	.L190:
 913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3366              		.loc 2 919 7
 3367 01c2 7B68     		ldr	r3, [r7, #4]
 3368 01c4 0022     		movs	r2, #0
 3369 01c6 83F85020 		strb	r2, [r3, #80]
 3370              	.L206:
 920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
 923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
 3371              		.loc 2 923 12
 3372 01ca FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3373              	.L187:
 924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3374              		.loc 2 925 1
 3375 01cc 1846     		mov	r0, r3
 3376 01ce 1837     		adds	r7, r7, #24
 3377              	.LCFI204:
ARM GAS  /tmp/cc6jq3Wn.s 			page 200


 3378              		.cfi_def_cfa_offset 8
 3379 01d0 BD46     		mov	sp, r7
 3380              	.LCFI205:
 3381              		.cfi_def_cfa_register 13
 3382              		@ sp needed
 3383 01d2 80BD     		pop	{r7, pc}
 3384              	.L208:
 3385              		.align	2
 3386              	.L207:
 3387 01d4 00200240 		.word	1073881088
 3388 01d8 00210240 		.word	1073881344
 3389 01dc 00230240 		.word	1073881856
 3390 01e0 00630258 		.word	1476551424
 3391 01e4 FECFFFFF 		.word	-12290
 3392              		.cfi_endproc
 3393              	.LFE340:
 3395              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 3396              		.align	1
 3397              		.global	HAL_ADCEx_InjectedStop_IT
 3398              		.syntax unified
 3399              		.thumb
 3400              		.thumb_func
 3401              		.fpu fpv5-d16
 3403              	HAL_ADCEx_InjectedStop_IT:
 3404              	.LFB341:
 926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of
 929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         is on going.
 931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is available):
 937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop_IT() API must be called for ADC master first,
 938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC slave.
 939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
 943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
 947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 3405              		.loc 2 947 1
 3406              		.cfi_startproc
 3407              		@ args = 0, pretend = 0, frame = 16
 3408              		@ frame_needed = 1, uses_anonymous_args = 0
 3409 0000 80B5     		push	{r7, lr}
 3410              	.LCFI206:
 3411              		.cfi_def_cfa_offset 8
 3412              		.cfi_offset 7, -8
 3413              		.cfi_offset 14, -4
 3414 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/cc6jq3Wn.s 			page 201


 3415              	.LCFI207:
 3416              		.cfi_def_cfa_offset 24
 3417 0004 00AF     		add	r7, sp, #0
 3418              	.LCFI208:
 3419              		.cfi_def_cfa_register 7
 3420 0006 7860     		str	r0, [r7, #4]
 948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3421              		.loc 2 954 3
 3422 0008 7B68     		ldr	r3, [r7, #4]
 3423 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3424 000e 012B     		cmp	r3, #1
 3425 0010 01D1     		bne	.L210
 3426              		.loc 2 954 3 is_stmt 0 discriminator 1
 3427 0012 0223     		movs	r3, #2
 3428 0014 38E0     		b	.L211
 3429              	.L210:
 3430              		.loc 2 954 3 discriminator 2
 3431 0016 7B68     		ldr	r3, [r7, #4]
 3432 0018 0122     		movs	r2, #1
 3433 001a 83F85020 		strb	r2, [r3, #80]
 955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 3434              		.loc 2 957 20 is_stmt 1 discriminator 2
 3435 001e 0221     		movs	r1, #2
 3436 0020 7868     		ldr	r0, [r7, #4]
 3437 0022 FFF7FEFF 		bl	ADC_ConversionStop
 3438 0026 0346     		mov	r3, r0
 3439 0028 FB73     		strb	r3, [r7, #15]
 958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and if no conversion on the other group (regular group) is intended to   */
 961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* continue.                                                                */
 962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 3440              		.loc 2 962 6 discriminator 2
 3441 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3442 002c 002B     		cmp	r3, #0
 3443 002e 26D1     		bne	.L212
 963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for injected channels */
 965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 3444              		.loc 2 965 5
 3445 0030 7B68     		ldr	r3, [r7, #4]
 3446 0032 1B68     		ldr	r3, [r3]
 3447 0034 5A68     		ldr	r2, [r3, #4]
 3448 0036 7B68     		ldr	r3, [r7, #4]
 3449 0038 1B68     		ldr	r3, [r3]
 3450 003a 22F48C62 		bic	r2, r2, #1120
 3451 003e 5A60     		str	r2, [r3, #4]
 966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
ARM GAS  /tmp/cc6jq3Wn.s 			page 202


 3452              		.loc 2 967 9
 3453 0040 7B68     		ldr	r3, [r7, #4]
 3454 0042 1B68     		ldr	r3, [r3]
 3455 0044 1846     		mov	r0, r3
 3456 0046 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3457 004a 0346     		mov	r3, r0
 3458              		.loc 2 967 8
 3459 004c 002B     		cmp	r3, #0
 3460 004e 10D1     		bne	.L213
 968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 3461              		.loc 2 970 24
 3462 0050 7868     		ldr	r0, [r7, #4]
 3463 0052 FFF7FEFF 		bl	ADC_Disable
 3464 0056 0346     		mov	r3, r0
 3465 0058 FB73     		strb	r3, [r7, #15]
 971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 3466              		.loc 2 973 10
 3467 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3468 005c 002B     		cmp	r3, #0
 3469 005e 0ED1     		bne	.L212
 974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 3470              		.loc 2 976 9
 3471 0060 7B68     		ldr	r3, [r7, #4]
 3472 0062 5A6D     		ldr	r2, [r3, #84]
 3473 0064 0A4B     		ldr	r3, .L214
 3474 0066 1340     		ands	r3, r3, r2
 3475 0068 43F00102 		orr	r2, r3, #1
 3476 006c 7B68     		ldr	r3, [r7, #4]
 3477 006e 5A65     		str	r2, [r3, #84]
 3478 0070 05E0     		b	.L212
 3479              	.L213:
 977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
 986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 3480              		.loc 2 986 7
 3481 0072 7B68     		ldr	r3, [r7, #4]
 3482 0074 5B6D     		ldr	r3, [r3, #84]
 3483 0076 23F48052 		bic	r2, r3, #4096
 3484 007a 7B68     		ldr	r3, [r7, #4]
 3485 007c 5A65     		str	r2, [r3, #84]
 3486              	.L212:
 987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 203


 990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3487              		.loc 2 991 3
 3488 007e 7B68     		ldr	r3, [r7, #4]
 3489 0080 0022     		movs	r2, #0
 3490 0082 83F85020 		strb	r2, [r3, #80]
 992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 3491              		.loc 2 994 10
 3492 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3493              	.L211:
 995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3494              		.loc 2 995 1
 3495 0088 1846     		mov	r0, r3
 3496 008a 1037     		adds	r7, r7, #16
 3497              	.LCFI209:
 3498              		.cfi_def_cfa_offset 8
 3499 008c BD46     		mov	sp, r7
 3500              	.LCFI210:
 3501              		.cfi_def_cfa_register 13
 3502              		@ sp needed
 3503 008e 80BD     		pop	{r7, pc}
 3504              	.L215:
 3505              		.align	2
 3506              	.L214:
 3507 0090 FEEEFFFF 		.word	-4354
 3508              		.cfi_endproc
 3509              	.LFE341:
 3511              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 3512              		.align	1
 3513              		.global	HAL_ADCEx_MultiModeStart_DMA
 3514              		.syntax unified
 3515              		.thumb
 3516              		.thumb_func
 3517              		.fpu fpv5-d16
 3519              	HAL_ADCEx_MultiModeStart_DMA:
 3520              	.LFB342:
 996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start MultiMode conversion and transfer regular results through DMA.
 999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode must have been previously configured using
1000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
1001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
1002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          overrun, DMA half transfer, DMA transfer complete.
1003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
1004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   State field of Slave ADC handle is not updated in this configuration:
1005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          user should not rely on it for information related to Slave regular
1006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversions.
1007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param pData Destination Buffer address.
1009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
1010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t L
1013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 3521              		.loc 2 1013 1
ARM GAS  /tmp/cc6jq3Wn.s 			page 204


 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 128
 3524              		@ frame_needed = 1, uses_anonymous_args = 0
 3525 0000 80B5     		push	{r7, lr}
 3526              	.LCFI211:
 3527              		.cfi_def_cfa_offset 8
 3528              		.cfi_offset 7, -8
 3529              		.cfi_offset 14, -4
 3530 0002 A0B0     		sub	sp, sp, #128
 3531              	.LCFI212:
 3532              		.cfi_def_cfa_offset 136
 3533 0004 00AF     		add	r7, sp, #0
 3534              	.LCFI213:
 3535              		.cfi_def_cfa_register 7
 3536 0006 F860     		str	r0, [r7, #12]
 3537 0008 B960     		str	r1, [r7, #8]
 3538 000a 7A60     		str	r2, [r7, #4]
1014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
1017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
1022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 3539              		.loc 2 1023 7
 3540 000c FB68     		ldr	r3, [r7, #12]
 3541 000e 1B68     		ldr	r3, [r3]
 3542 0010 1846     		mov	r0, r3
 3543 0012 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3544 0016 0346     		mov	r3, r0
 3545              		.loc 2 1023 6
 3546 0018 002B     		cmp	r3, #0
 3547 001a 01D0     		beq	.L217
1024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
 3548              		.loc 2 1025 12
 3549 001c 0223     		movs	r3, #2
 3550 001e 8AE0     		b	.L229
 3551              	.L217:
1026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
1030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 3552              		.loc 2 1030 5
 3553 0020 FB68     		ldr	r3, [r7, #12]
 3554 0022 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3555 0026 012B     		cmp	r3, #1
 3556 0028 01D1     		bne	.L219
 3557              		.loc 2 1030 5 is_stmt 0 discriminator 1
 3558 002a 0223     		movs	r3, #2
 3559 002c 83E0     		b	.L229
 3560              	.L219:
 3561              		.loc 2 1030 5 discriminator 2
ARM GAS  /tmp/cc6jq3Wn.s 			page 205


 3562 002e FB68     		ldr	r3, [r7, #12]
 3563 0030 0122     		movs	r2, #1
 3564 0032 83F85020 		strb	r2, [r3, #80]
1031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.State = HAL_ADC_STATE_RESET;
 3565              		.loc 2 1032 24 is_stmt 1 discriminator 2
 3566 0036 0023     		movs	r3, #0
 3567 0038 BB66     		str	r3, [r7, #104]
1033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 3568              		.loc 2 1033 28 discriminator 2
 3569 003a 0023     		movs	r3, #0
 3570 003c FB66     		str	r3, [r7, #108]
1034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3571              		.loc 2 1035 5 discriminator 2
 3572 003e FB68     		ldr	r3, [r7, #12]
 3573 0040 1B68     		ldr	r3, [r3]
 3574 0042 3F4A     		ldr	r2, .L230
 3575 0044 9342     		cmp	r3, r2
 3576 0046 02D1     		bne	.L220
 3577              		.loc 2 1035 5 is_stmt 0 discriminator 1
 3578 0048 3E4B     		ldr	r3, .L230+4
 3579 004a 7B61     		str	r3, [r7, #20]
 3580 004c 01E0     		b	.L221
 3581              	.L220:
 3582              		.loc 2 1035 5 discriminator 2
 3583 004e 0023     		movs	r3, #0
 3584 0050 7B61     		str	r3, [r7, #20]
 3585              	.L221:
1036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 3586              		.loc 2 1037 21 is_stmt 1
 3587 0052 7B69     		ldr	r3, [r7, #20]
 3588              		.loc 2 1037 8
 3589 0054 002B     		cmp	r3, #0
 3590 0056 0BD1     		bne	.L222
1038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
1040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3591              		.loc 2 1040 7
 3592 0058 FB68     		ldr	r3, [r7, #12]
 3593 005a 5B6D     		ldr	r3, [r3, #84]
 3594 005c 43F02002 		orr	r2, r3, #32
 3595 0060 FB68     		ldr	r3, [r7, #12]
 3596 0062 5A65     		str	r2, [r3, #84]
1041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3597              		.loc 2 1043 7
 3598 0064 FB68     		ldr	r3, [r7, #12]
 3599 0066 0022     		movs	r2, #0
 3600 0068 83F85020 		strb	r2, [r3, #80]
1044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 3601              		.loc 2 1045 14
 3602 006c 0123     		movs	r3, #1
 3603 006e 62E0     		b	.L229
ARM GAS  /tmp/cc6jq3Wn.s 			page 206


 3604              	.L222:
1046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripherals: master and slave (in case if not already   */
1049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* enabled previously)                                                    */
1050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 3605              		.loc 2 1050 22
 3606 0070 F868     		ldr	r0, [r7, #12]
 3607 0072 FFF7FEFF 		bl	ADC_Enable
 3608 0076 0346     		mov	r3, r0
 3609 0078 87F87F30 		strb	r3, [r7, #127]
1051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3610              		.loc 2 1051 8
 3611 007c 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3612 0080 002B     		cmp	r3, #0
 3613 0082 07D1     		bne	.L223
1052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(&tmphadcSlave);
 3614              		.loc 2 1053 24
 3615 0084 07F11403 		add	r3, r7, #20
 3616 0088 1846     		mov	r0, r3
 3617 008a FFF7FEFF 		bl	ADC_Enable
 3618 008e 0346     		mov	r3, r0
 3619 0090 87F87F30 		strb	r3, [r7, #127]
 3620              	.L223:
1054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start multimode conversion of ADCs pair */
1057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3621              		.loc 2 1057 8
 3622 0094 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3623 0098 002B     		cmp	r3, #0
 3624 009a 46D1     		bne	.L224
1058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
1060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 3625              		.loc 2 1060 7
 3626 009c FB68     		ldr	r3, [r7, #12]
 3627 009e 5A6D     		ldr	r2, [r3, #84]
 3628 00a0 294B     		ldr	r3, .L230+8
 3629 00a2 1340     		ands	r3, r3, r2
 3630 00a4 43F48072 		orr	r2, r3, #256
 3631 00a8 FB68     		ldr	r3, [r7, #12]
 3632 00aa 5A65     		str	r2, [r3, #84]
1061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_
1062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
1063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC error code to none */
1065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 3633              		.loc 2 1065 7
 3634 00ac FB68     		ldr	r3, [r7, #12]
 3635 00ae 0022     		movs	r2, #0
 3636 00b0 9A65     		str	r2, [r3, #88]
1066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA transfer complete callback */
1068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 3637              		.loc 2 1068 11
ARM GAS  /tmp/cc6jq3Wn.s 			page 207


 3638 00b2 FB68     		ldr	r3, [r7, #12]
 3639 00b4 DB6C     		ldr	r3, [r3, #76]
 3640              		.loc 2 1068 42
 3641 00b6 254A     		ldr	r2, .L230+12
 3642 00b8 DA63     		str	r2, [r3, #60]
1069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA half transfer complete callback */
1071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 3643              		.loc 2 1071 11
 3644 00ba FB68     		ldr	r3, [r7, #12]
 3645 00bc DB6C     		ldr	r3, [r3, #76]
 3646              		.loc 2 1071 46
 3647 00be 244A     		ldr	r2, .L230+16
 3648 00c0 1A64     		str	r2, [r3, #64]
1072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA error callback */
1074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 3649              		.loc 2 1074 11
 3650 00c2 FB68     		ldr	r3, [r7, #12]
 3651 00c4 DB6C     		ldr	r3, [r3, #76]
 3652              		.loc 2 1074 43
 3653 00c6 234A     		ldr	r2, .L230+20
 3654 00c8 DA64     		str	r2, [r3, #76]
1075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Pointer to the common control register  */
1077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 3655              		.loc 2 1077 23
 3656 00ca FB68     		ldr	r3, [r7, #12]
 3657 00cc 1B68     		ldr	r3, [r3]
 3658 00ce 1C4A     		ldr	r2, .L230
 3659 00d0 9342     		cmp	r3, r2
 3660 00d2 04D0     		beq	.L225
 3661              		.loc 2 1077 23 is_stmt 0 discriminator 2
 3662 00d4 FB68     		ldr	r3, [r7, #12]
 3663 00d6 1B68     		ldr	r3, [r3]
 3664 00d8 1A4A     		ldr	r2, .L230+4
 3665 00da 9342     		cmp	r3, r2
 3666 00dc 01D1     		bne	.L226
 3667              	.L225:
 3668              		.loc 2 1077 23 discriminator 3
 3669 00de 1E4B     		ldr	r3, .L230+24
 3670 00e0 00E0     		b	.L227
 3671              	.L226:
 3672              		.loc 2 1077 23 discriminator 4
 3673 00e2 1E4B     		ldr	r3, .L230+28
 3674              	.L227:
 3675              		.loc 2 1077 21 is_stmt 1 discriminator 6
 3676 00e4 BB67     		str	r3, [r7, #120]
1078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* start (in case of SW start):                                           */
1081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
1083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 3677              		.loc 2 1084 7 discriminator 6
 3678 00e6 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc6jq3Wn.s 			page 208


 3679 00e8 1B68     		ldr	r3, [r3]
 3680 00ea 1C22     		movs	r2, #28
 3681 00ec 1A60     		str	r2, [r3]
1085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3682              		.loc 2 1089 7 discriminator 6
 3683 00ee FB68     		ldr	r3, [r7, #12]
 3684 00f0 0022     		movs	r2, #0
 3685 00f2 83F85020 		strb	r2, [r3, #80]
1090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC overrun interrupt */
1092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 3686              		.loc 2 1092 7 discriminator 6
 3687 00f6 FB68     		ldr	r3, [r7, #12]
 3688 00f8 1B68     		ldr	r3, [r3]
 3689 00fa 5A68     		ldr	r2, [r3, #4]
 3690 00fc FB68     		ldr	r3, [r7, #12]
 3691 00fe 1B68     		ldr	r3, [r3]
 3692 0100 42F01002 		orr	r2, r2, #16
 3693 0104 5A60     		str	r2, [r3, #4]
1093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Start the DMA channel */
1095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)
 3694              		.loc 2 1095 24 discriminator 6
 3695 0106 FB68     		ldr	r3, [r7, #12]
 3696 0108 D86C     		ldr	r0, [r3, #76]
 3697              		.loc 2 1095 69 discriminator 6
 3698 010a BB6F     		ldr	r3, [r7, #120]
 3699 010c 0C33     		adds	r3, r3, #12
 3700              		.loc 2 1095 24 discriminator 6
 3701 010e 1946     		mov	r1, r3
 3702 0110 BA68     		ldr	r2, [r7, #8]
 3703 0112 7B68     		ldr	r3, [r7, #4]
 3704 0114 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3705 0118 0346     		mov	r3, r0
 3706 011a 87F87F30 		strb	r3, [r7, #127]
1096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                    */
1098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
1099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
1100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
1101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Start ADC group regular conversion */
1102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 3707              		.loc 2 1102 7 discriminator 6
 3708 011e FB68     		ldr	r3, [r7, #12]
 3709 0120 1B68     		ldr	r3, [r3]
 3710 0122 1846     		mov	r0, r3
 3711 0124 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 3712 0128 03E0     		b	.L228
 3713              	.L224:
1103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
ARM GAS  /tmp/cc6jq3Wn.s 			page 209


1107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3714              		.loc 2 1107 7
 3715 012a FB68     		ldr	r3, [r7, #12]
 3716 012c 0022     		movs	r2, #0
 3717 012e 83F85020 		strb	r2, [r3, #80]
 3718              	.L228:
1108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
1111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
 3719              		.loc 2 1111 12
 3720 0132 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3721              	.L229:
1112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3722              		.loc 2 1113 1 discriminator 1
 3723 0136 1846     		mov	r0, r3
 3724 0138 8037     		adds	r7, r7, #128
 3725              	.LCFI214:
 3726              		.cfi_def_cfa_offset 8
 3727 013a BD46     		mov	sp, r7
 3728              	.LCFI215:
 3729              		.cfi_def_cfa_register 13
 3730              		@ sp needed
 3731 013c 80BD     		pop	{r7, pc}
 3732              	.L231:
 3733 013e 00BF     		.align	2
 3734              	.L230:
 3735 0140 00200240 		.word	1073881088
 3736 0144 00210240 		.word	1073881344
 3737 0148 FEF0FFFF 		.word	-3842
 3738 014c 00000000 		.word	ADC_DMAConvCplt
 3739 0150 00000000 		.word	ADC_DMAHalfConvCplt
 3740 0154 00000000 		.word	ADC_DMAError
 3741 0158 00230240 		.word	1073881856
 3742 015c 00630258 		.word	1476551424
 3743              		.cfi_endproc
 3744              	.LFE342:
 3746              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 3747              		.align	1
 3748              		.global	HAL_ADCEx_MultiModeStop_DMA
 3749              		.syntax unified
 3750              		.thumb
 3751              		.thumb_func
 3752              		.fpu fpv5-d16
 3754              	HAL_ADCEx_MultiModeStop_DMA:
 3755              	.LFB343:
1114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop multimode ADC conversion, disable ADC DMA transfer, disable ADC peripheral.
1117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. MultiMode DMA bits
1118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
1119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
1120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
1121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
1122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
1123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA() must be called after this function with handle of
ARM GAS  /tmp/cc6jq3Wn.s 			page 210


1124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
1125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
1129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 3756              		.loc 2 1129 1
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 128
 3759              		@ frame_needed = 1, uses_anonymous_args = 0
 3760 0000 80B5     		push	{r7, lr}
 3761              	.LCFI216:
 3762              		.cfi_def_cfa_offset 8
 3763              		.cfi_offset 7, -8
 3764              		.cfi_offset 14, -4
 3765 0002 A0B0     		sub	sp, sp, #128
 3766              	.LCFI217:
 3767              		.cfi_def_cfa_offset 136
 3768 0004 00AF     		add	r7, sp, #0
 3769              	.LCFI218:
 3770              		.cfi_def_cfa_register 7
 3771 0006 7860     		str	r0, [r7, #4]
1130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
1132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
1134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmphadcSlave_disable_status;
1135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3772              		.loc 2 1140 3
 3773 0008 7B68     		ldr	r3, [r7, #4]
 3774 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3775 000e 012B     		cmp	r3, #1
 3776 0010 01D1     		bne	.L233
 3777              		.loc 2 1140 3 is_stmt 0 discriminator 1
 3778 0012 0223     		movs	r3, #2
 3779 0014 B2E0     		b	.L246
 3780              	.L233:
 3781              		.loc 2 1140 3 discriminator 2
 3782 0016 7B68     		ldr	r3, [r7, #4]
 3783 0018 0122     		movs	r2, #1
 3784 001a 83F85020 		strb	r2, [r3, #80]
1141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular and injected groups */
1144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 3785              		.loc 2 1144 20 is_stmt 1 discriminator 2
 3786 001e 0321     		movs	r1, #3
 3787 0020 7868     		ldr	r0, [r7, #4]
 3788 0022 FFF7FEFF 		bl	ADC_ConversionStop
 3789 0026 0346     		mov	r3, r0
 3790 0028 87F87F30 		strb	r3, [r7, #127]
1145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 211


1146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 3791              		.loc 2 1147 6 discriminator 2
 3792 002c 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3793 0030 002B     		cmp	r3, #0
 3794 0032 40F09D80 		bne	.L235
1148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.State = HAL_ADC_STATE_RESET;
 3795              		.loc 2 1149 24
 3796 0036 0023     		movs	r3, #0
 3797 0038 3B66     		str	r3, [r7, #96]
1150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 3798              		.loc 2 1150 28
 3799 003a 0023     		movs	r3, #0
 3800 003c 7B66     		str	r3, [r7, #100]
1151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3801              		.loc 2 1153 5
 3802 003e 7B68     		ldr	r3, [r7, #4]
 3803 0040 1B68     		ldr	r3, [r3]
 3804 0042 504A     		ldr	r2, .L247
 3805 0044 9342     		cmp	r3, r2
 3806 0046 02D1     		bne	.L236
 3807              		.loc 2 1153 5 is_stmt 0 discriminator 1
 3808 0048 4F4B     		ldr	r3, .L247+4
 3809 004a FB60     		str	r3, [r7, #12]
 3810 004c 01E0     		b	.L237
 3811              	.L236:
 3812              		.loc 2 1153 5 discriminator 2
 3813 004e 0023     		movs	r3, #0
 3814 0050 FB60     		str	r3, [r7, #12]
 3815              	.L237:
1154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 3816              		.loc 2 1155 21 is_stmt 1
 3817 0052 FB68     		ldr	r3, [r7, #12]
 3818              		.loc 2 1155 8
 3819 0054 002B     		cmp	r3, #0
 3820 0056 0BD1     		bne	.L238
1156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3821              		.loc 2 1158 7
 3822 0058 7B68     		ldr	r3, [r7, #4]
 3823 005a 5B6D     		ldr	r3, [r3, #84]
 3824 005c 43F02002 		orr	r2, r3, #32
 3825 0060 7B68     		ldr	r3, [r7, #4]
 3826 0062 5A65     		str	r2, [r3, #84]
1159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 3827              		.loc 2 1161 7
 3828 0064 7B68     		ldr	r3, [r7, #4]
 3829 0066 0022     		movs	r2, #0
 3830 0068 83F85020 		strb	r2, [r3, #80]
1162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 212


1163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 3831              		.loc 2 1163 14
 3832 006c 0123     		movs	r3, #1
 3833 006e 85E0     		b	.L246
 3834              	.L238:
1164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
 3835              		.loc 2 1170 17
 3836 0070 FFF7FEFF 		bl	HAL_GetTick
 3837 0074 7867     		str	r0, [r7, #116]
1171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 3838              		.loc 2 1172 40
 3839 0076 FB68     		ldr	r3, [r7, #12]
 3840 0078 1846     		mov	r0, r3
 3841 007a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3842 007e B867     		str	r0, [r7, #120]
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 3843              		.loc 2 1173 11
 3844 0080 27E0     		b	.L239
 3845              	.L242:
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 3846              		.loc 2 1177 12
 3847 0082 FFF7FEFF 		bl	HAL_GetTick
 3848 0086 0246     		mov	r2, r0
 3849              		.loc 2 1177 26
 3850 0088 7B6F     		ldr	r3, [r7, #116]
 3851 008a D31A     		subs	r3, r2, r3
 3852              		.loc 2 1177 10
 3853 008c 052B     		cmp	r3, #5
 3854 008e 1BD9     		bls	.L240
1178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* New check to avoid false timeout detection in case of preemption */
1180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance
 3855              		.loc 2 1180 44
 3856 0090 FB68     		ldr	r3, [r7, #12]
 3857 0092 1846     		mov	r0, r3
 3858 0094 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3859 0098 B867     		str	r0, [r7, #120]
1181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 3860              		.loc 2 1182 13
 3861 009a 7B68     		ldr	r3, [r7, #4]
 3862 009c 1B68     		ldr	r3, [r3]
 3863 009e 1846     		mov	r0, r3
 3864 00a0 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3865 00a4 0346     		mov	r3, r0
 3866              		.loc 2 1182 11
 3867 00a6 012B     		cmp	r3, #1
ARM GAS  /tmp/cc6jq3Wn.s 			page 213


 3868 00a8 02D0     		beq	.L241
1183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 3869              		.loc 2 1183 12
 3870 00aa BB6F     		ldr	r3, [r7, #120]
 3871 00ac 012B     		cmp	r3, #1
 3872 00ae 0BD1     		bne	.L240
 3873              	.L241:
1184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
1186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Update ADC state machine to error */
1187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3874              		.loc 2 1187 11
 3875 00b0 7B68     		ldr	r3, [r7, #4]
 3876 00b2 5B6D     		ldr	r3, [r3, #84]
 3877 00b4 43F01002 		orr	r2, r3, #16
 3878 00b8 7B68     		ldr	r3, [r7, #4]
 3879 00ba 5A65     		str	r2, [r3, #84]
1188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Process unlocked */
1190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 3880              		.loc 2 1190 11
 3881 00bc 7B68     		ldr	r3, [r7, #4]
 3882 00be 0022     		movs	r2, #0
 3883 00c0 83F85020 		strb	r2, [r3, #80]
1191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           return HAL_ERROR;
 3884              		.loc 2 1192 18
 3885 00c4 0123     		movs	r3, #1
 3886 00c6 59E0     		b	.L246
 3887              	.L240:
1193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
1194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 3888              		.loc 2 1196 42
 3889 00c8 FB68     		ldr	r3, [r7, #12]
 3890 00ca 1846     		mov	r0, r3
 3891 00cc FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3892 00d0 B867     		str	r0, [r7, #120]
 3893              	.L239:
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 3894              		.loc 2 1173 13
 3895 00d2 7B68     		ldr	r3, [r7, #4]
 3896 00d4 1B68     		ldr	r3, [r3]
 3897 00d6 1846     		mov	r0, r3
 3898 00d8 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3899 00dc 0346     		mov	r3, r0
1173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 3900              		.loc 2 1173 11
 3901 00de 012B     		cmp	r3, #1
 3902 00e0 CFD0     		beq	.L242
1174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
 3903              		.loc 2 1174 12
 3904 00e2 BB6F     		ldr	r3, [r7, #120]
 3905 00e4 012B     		cmp	r3, #1
 3906 00e6 CCD0     		beq	.L242
1197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/cc6jq3Wn.s 			page 214


1198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       with HAL_ADC_Stop_DMA() API.                                     */
1203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 3907              		.loc 2 1203 22
 3908 00e8 7B68     		ldr	r3, [r7, #4]
 3909 00ea DB6C     		ldr	r3, [r3, #76]
 3910 00ec 1846     		mov	r0, r3
 3911 00ee FFF7FEFF 		bl	HAL_DMA_Abort
 3912 00f2 0346     		mov	r3, r0
 3913 00f4 87F87F30 		strb	r3, [r7, #127]
1204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_ERROR)
 3914              		.loc 2 1206 8
 3915 00f8 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3916 00fc 012B     		cmp	r3, #1
 3917 00fe 05D1     		bne	.L243
1207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3918              		.loc 2 1209 7
 3919 0100 7B68     		ldr	r3, [r7, #4]
 3920 0102 5B6D     		ldr	r3, [r3, #84]
 3921 0104 43F04002 		orr	r2, r3, #64
 3922 0108 7B68     		ldr	r3, [r7, #4]
 3923 010a 5A65     		str	r2, [r3, #84]
 3924              	.L243:
1210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 3925              		.loc 2 1213 5
 3926 010c 7B68     		ldr	r3, [r7, #4]
 3927 010e 1B68     		ldr	r3, [r3]
 3928 0110 5A68     		ldr	r2, [r3, #4]
 3929 0112 7B68     		ldr	r3, [r7, #4]
 3930 0114 1B68     		ldr	r3, [r3]
 3931 0116 22F01002 		bic	r2, r2, #16
 3932 011a 5A60     		str	r2, [r3, #4]
1214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave */
1216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3933              		.loc 2 1218 8
 3934 011c 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3935 0120 002B     		cmp	r3, #0
 3936 0122 15D1     		bne	.L244
1219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 3937              		.loc 2 1220 37
 3938 0124 07F10C03 		add	r3, r7, #12
 3939 0128 1846     		mov	r0, r3
 3940 012a FFF7FEFF 		bl	ADC_Disable
ARM GAS  /tmp/cc6jq3Wn.s 			page 215


 3941 012e 0346     		mov	r3, r0
 3942 0130 87F87330 		strb	r3, [r7, #115]
1221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
 3943              		.loc 2 1221 12
 3944 0134 7868     		ldr	r0, [r7, #4]
 3945 0136 FFF7FEFF 		bl	ADC_Disable
 3946 013a 0346     		mov	r3, r0
 3947              		.loc 2 1221 10
 3948 013c 002B     		cmp	r3, #0
 3949 013e 0FD1     		bne	.L245
 3950              		.loc 2 1221 51 discriminator 1
 3951 0140 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 3952 0144 002B     		cmp	r3, #0
 3953 0146 0BD1     		bne	.L245
1222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           (tmphadcSlave_disable_status == HAL_OK))
1223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_OK;
 3954              		.loc 2 1224 24
 3955 0148 0023     		movs	r3, #0
 3956 014a 87F87F30 		strb	r3, [r7, #127]
 3957 014e 07E0     		b	.L245
 3958              	.L244:
1225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* In case of error, attempt to disable ADC master and slave without status assert */
1230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void) ADC_Disable(hadc);
 3959              		.loc 2 1230 14
 3960 0150 7868     		ldr	r0, [r7, #4]
 3961 0152 FFF7FEFF 		bl	ADC_Disable
1231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
 3962              		.loc 2 1231 14
 3963 0156 07F10C03 		add	r3, r7, #12
 3964 015a 1846     		mov	r0, r3
 3965 015c FFF7FEFF 		bl	ADC_Disable
 3966              	.L245:
1232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state (ADC master) */
1235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 3967              		.loc 2 1235 5
 3968 0160 7B68     		ldr	r3, [r7, #4]
 3969 0162 5A6D     		ldr	r2, [r3, #84]
 3970 0164 094B     		ldr	r3, .L247+8
 3971 0166 1340     		ands	r3, r3, r2
 3972 0168 43F00102 		orr	r2, r3, #1
 3973 016c 7B68     		ldr	r3, [r7, #4]
 3974 016e 5A65     		str	r2, [r3, #84]
 3975              	.L235:
1236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
1238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3976              		.loc 2 1241 3
ARM GAS  /tmp/cc6jq3Wn.s 			page 216


 3977 0170 7B68     		ldr	r3, [r7, #4]
 3978 0172 0022     		movs	r2, #0
 3979 0174 83F85020 		strb	r2, [r3, #80]
1242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 3980              		.loc 2 1244 10
 3981 0178 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3982              	.L246:
1245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3983              		.loc 2 1245 1 discriminator 1
 3984 017c 1846     		mov	r0, r3
 3985 017e 8037     		adds	r7, r7, #128
 3986              	.LCFI219:
 3987              		.cfi_def_cfa_offset 8
 3988 0180 BD46     		mov	sp, r7
 3989              	.LCFI220:
 3990              		.cfi_def_cfa_register 13
 3991              		@ sp needed
 3992 0182 80BD     		pop	{r7, pc}
 3993              	.L248:
 3994              		.align	2
 3995              	.L247:
 3996 0184 00200240 		.word	1073881088
 3997 0188 00210240 		.word	1073881344
 3998 018c FEEEFFFF 		.word	-4354
 3999              		.cfi_endproc
 4000              	.LFE343:
 4002              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 4003              		.align	1
 4004              		.global	HAL_ADCEx_MultiModeGetValue
 4005              		.syntax unified
 4006              		.thumb
 4007              		.thumb_func
 4008              		.fpu fpv5-d16
 4010              	HAL_ADCEx_MultiModeGetValue:
 4011              	.LFB344:
1246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Return the last ADC Master and Slave regular conversions results when in multimode conf
1249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
1250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval The converted data values.
1251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
1253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4012              		.loc 2 1253 1
 4013              		.cfi_startproc
 4014              		@ args = 0, pretend = 0, frame = 16
 4015              		@ frame_needed = 1, uses_anonymous_args = 0
 4016              		@ link register save eliminated.
 4017 0000 80B4     		push	{r7}
 4018              	.LCFI221:
 4019              		.cfi_def_cfa_offset 4
 4020              		.cfi_offset 7, -4
 4021 0002 85B0     		sub	sp, sp, #20
 4022              	.LCFI222:
 4023              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc6jq3Wn.s 			page 217


 4024 0004 00AF     		add	r7, sp, #0
 4025              	.LCFI223:
 4026              		.cfi_def_cfa_register 7
 4027 0006 7860     		str	r0, [r7, #4]
1254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   const ADC_Common_TypeDef *tmpADC_Common;
1255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning if no assert_param check */
1260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
1261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Pointer to the common control register  */
1264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 4028              		.loc 2 1264 19
 4029 0008 7B68     		ldr	r3, [r7, #4]
 4030 000a 1B68     		ldr	r3, [r3]
 4031 000c 094A     		ldr	r2, .L254
 4032 000e 9342     		cmp	r3, r2
 4033 0010 04D0     		beq	.L250
 4034              		.loc 2 1264 19 is_stmt 0 discriminator 2
 4035 0012 7B68     		ldr	r3, [r7, #4]
 4036 0014 1B68     		ldr	r3, [r3]
 4037 0016 084A     		ldr	r2, .L254+4
 4038 0018 9342     		cmp	r3, r2
 4039 001a 01D1     		bne	.L251
 4040              	.L250:
 4041              		.loc 2 1264 19 discriminator 3
 4042 001c 074B     		ldr	r3, .L254+8
 4043 001e 00E0     		b	.L252
 4044              	.L251:
 4045              		.loc 2 1264 19 discriminator 4
 4046 0020 074B     		ldr	r3, .L254+12
 4047              	.L252:
 4048              		.loc 2 1264 17 is_stmt 1 discriminator 6
 4049 0022 FB60     		str	r3, [r7, #12]
1265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return the multi mode conversion value */
1267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmpADC_Common->CDR;
 4050              		.loc 2 1267 23 discriminator 6
 4051 0024 FB68     		ldr	r3, [r7, #12]
 4052 0026 DB68     		ldr	r3, [r3, #12]
1268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4053              		.loc 2 1268 1 discriminator 6
 4054 0028 1846     		mov	r0, r3
 4055 002a 1437     		adds	r7, r7, #20
 4056              	.LCFI224:
 4057              		.cfi_def_cfa_offset 4
 4058 002c BD46     		mov	sp, r7
 4059              	.LCFI225:
 4060              		.cfi_def_cfa_register 13
 4061              		@ sp needed
 4062 002e 5DF8047B 		ldr	r7, [sp], #4
 4063              	.LCFI226:
 4064              		.cfi_restore 7
 4065              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc6jq3Wn.s 			page 218


 4066 0032 7047     		bx	lr
 4067              	.L255:
 4068              		.align	2
 4069              	.L254:
 4070 0034 00200240 		.word	1073881088
 4071 0038 00210240 		.word	1073881344
 4072 003c 00230240 		.word	1073881856
 4073 0040 00630258 		.word	1476551424
 4074              		.cfi_endproc
 4075              	.LFE344:
 4077              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 4078              		.align	1
 4079              		.global	HAL_ADCEx_InjectedGetValue
 4080              		.syntax unified
 4081              		.thumb
 4082              		.thumb_func
 4083              		.fpu fpv5-d16
 4085              	HAL_ADCEx_InjectedGetValue:
 4086              	.LFB345:
1269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
1272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
1273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
1274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS
1275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
1276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
1277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
1278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            to flag JEOC.
1279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
1280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
1281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
1282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
1283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
1284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
1285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         To clear this flag, either use function:
1286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion()
1288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
1289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param InjectedRank the converted ADC injected rank.
1291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
1292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_1 ADC group injected rank 1
1293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_2 ADC group injected rank 2
1294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
1295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
1296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
1297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
1299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4087              		.loc 2 1299 1
 4088              		.cfi_startproc
 4089              		@ args = 0, pretend = 0, frame = 16
 4090              		@ frame_needed = 1, uses_anonymous_args = 0
 4091              		@ link register save eliminated.
 4092 0000 80B4     		push	{r7}
 4093              	.LCFI227:
ARM GAS  /tmp/cc6jq3Wn.s 			page 219


 4094              		.cfi_def_cfa_offset 4
 4095              		.cfi_offset 7, -4
 4096 0002 85B0     		sub	sp, sp, #20
 4097              	.LCFI228:
 4098              		.cfi_def_cfa_offset 24
 4099 0004 00AF     		add	r7, sp, #0
 4100              	.LCFI229:
 4101              		.cfi_def_cfa_register 7
 4102 0006 7860     		str	r0, [r7, #4]
 4103 0008 3960     		str	r1, [r7]
1300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_jdr;
1301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
1305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get ADC converted value */
1307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   switch (InjectedRank)
 4104              		.loc 2 1307 3
 4105 000a 3B68     		ldr	r3, [r7]
 4106 000c 40F21B32 		movw	r2, #795
 4107 0010 9342     		cmp	r3, r2
 4108 0012 0ED0     		beq	.L257
 4109 0014 3B68     		ldr	r3, [r7]
 4110 0016 B3F5477F 		cmp	r3, #796
 4111 001a 1CD2     		bcs	.L258
 4112 001c 3B68     		ldr	r3, [r7]
 4113 001e 40F20F12 		movw	r2, #271
 4114 0022 9342     		cmp	r3, r2
 4115 0024 11D0     		beq	.L259
 4116 0026 3B68     		ldr	r3, [r7]
 4117 0028 40F21522 		movw	r2, #533
 4118 002c 9342     		cmp	r3, r2
 4119 002e 06D0     		beq	.L260
 4120 0030 11E0     		b	.L258
 4121              	.L257:
1308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4:
1310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 4122              		.loc 2 1310 21
 4123 0032 7B68     		ldr	r3, [r7, #4]
 4124 0034 1B68     		ldr	r3, [r3]
 4125              		.loc 2 1310 15
 4126 0036 D3F88C30 		ldr	r3, [r3, #140]
 4127 003a FB60     		str	r3, [r7, #12]
1311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 4128              		.loc 2 1311 7
 4129 003c 11E0     		b	.L261
 4130              	.L260:
1312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3:
1313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 4131              		.loc 2 1313 21
 4132 003e 7B68     		ldr	r3, [r7, #4]
 4133 0040 1B68     		ldr	r3, [r3]
 4134              		.loc 2 1313 15
 4135 0042 D3F88830 		ldr	r3, [r3, #136]
 4136 0046 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc6jq3Wn.s 			page 220


1314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 4137              		.loc 2 1314 7
 4138 0048 0BE0     		b	.L261
 4139              	.L259:
1315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2:
1316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 4140              		.loc 2 1316 21
 4141 004a 7B68     		ldr	r3, [r7, #4]
 4142 004c 1B68     		ldr	r3, [r3]
 4143              		.loc 2 1316 15
 4144 004e D3F88430 		ldr	r3, [r3, #132]
 4145 0052 FB60     		str	r3, [r7, #12]
1317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 4146              		.loc 2 1317 7
 4147 0054 05E0     		b	.L261
 4148              	.L258:
1318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
1319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     default:
1320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 4149              		.loc 2 1320 21
 4150 0056 7B68     		ldr	r3, [r7, #4]
 4151 0058 1B68     		ldr	r3, [r3]
 4152              		.loc 2 1320 15
 4153 005a D3F88030 		ldr	r3, [r3, #128]
 4154 005e FB60     		str	r3, [r7, #12]
1321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 4155              		.loc 2 1321 7
 4156 0060 00BF     		nop
 4157              	.L261:
1322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return ADC converted value */
1325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_jdr;
 4158              		.loc 2 1325 10
 4159 0062 FB68     		ldr	r3, [r7, #12]
1326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4160              		.loc 2 1326 1
 4161 0064 1846     		mov	r0, r3
 4162 0066 1437     		adds	r7, r7, #20
 4163              	.LCFI230:
 4164              		.cfi_def_cfa_offset 4
 4165 0068 BD46     		mov	sp, r7
 4166              	.LCFI231:
 4167              		.cfi_def_cfa_register 13
 4168              		@ sp needed
 4169 006a 5DF8047B 		ldr	r7, [sp], #4
 4170              	.LCFI232:
 4171              		.cfi_restore 7
 4172              		.cfi_def_cfa_offset 0
 4173 006e 7047     		bx	lr
 4174              		.cfi_endproc
 4175              	.LFE345:
 4177              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 4178              		.align	1
 4179              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 4180              		.syntax unified
 4181              		.thumb
ARM GAS  /tmp/cc6jq3Wn.s 			page 221


 4182              		.thumb_func
 4183              		.fpu fpv5-d16
 4185              	HAL_ADCEx_InjectedConvCpltCallback:
 4186              	.LFB346:
1327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non-blocking mode.
1330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
1334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4187              		.loc 2 1334 1
 4188              		.cfi_startproc
 4189              		@ args = 0, pretend = 0, frame = 8
 4190              		@ frame_needed = 1, uses_anonymous_args = 0
 4191              		@ link register save eliminated.
 4192 0000 80B4     		push	{r7}
 4193              	.LCFI233:
 4194              		.cfi_def_cfa_offset 4
 4195              		.cfi_offset 7, -4
 4196 0002 83B0     		sub	sp, sp, #12
 4197              	.LCFI234:
 4198              		.cfi_def_cfa_offset 16
 4199 0004 00AF     		add	r7, sp, #0
 4200              	.LCFI235:
 4201              		.cfi_def_cfa_register 7
 4202 0006 7860     		str	r0, [r7, #4]
1335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
1340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4203              		.loc 2 1341 1
 4204 0008 00BF     		nop
 4205 000a 0C37     		adds	r7, r7, #12
 4206              	.LCFI236:
 4207              		.cfi_def_cfa_offset 4
 4208 000c BD46     		mov	sp, r7
 4209              	.LCFI237:
 4210              		.cfi_def_cfa_register 13
 4211              		@ sp needed
 4212 000e 5DF8047B 		ldr	r7, [sp], #4
 4213              	.LCFI238:
 4214              		.cfi_restore 7
 4215              		.cfi_def_cfa_offset 0
 4216 0012 7047     		bx	lr
 4217              		.cfi_endproc
 4218              	.LFE346:
 4220              		.section	.text.HAL_ADCEx_InjectedQueueOverflowCallback,"ax",%progbits
 4221              		.align	1
 4222              		.weak	HAL_ADCEx_InjectedQueueOverflowCallback
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
ARM GAS  /tmp/cc6jq3Wn.s 			page 222


 4226              		.fpu fpv5-d16
 4228              	HAL_ADCEx_InjectedQueueOverflowCallback:
 4229              	.LFB347:
1342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Injected context queue overflow callback.
1345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This callback is called if injected context queue is enabled
1346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             (parameter "QueueInjectedContext" in injected channel configuration)
1347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             and if a new injected context is set when queue is full (maximum 2
1348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             contexts).
1349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
1353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4230              		.loc 2 1353 1
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 8
 4233              		@ frame_needed = 1, uses_anonymous_args = 0
 4234              		@ link register save eliminated.
 4235 0000 80B4     		push	{r7}
 4236              	.LCFI239:
 4237              		.cfi_def_cfa_offset 4
 4238              		.cfi_offset 7, -4
 4239 0002 83B0     		sub	sp, sp, #12
 4240              	.LCFI240:
 4241              		.cfi_def_cfa_offset 16
 4242 0004 00AF     		add	r7, sp, #0
 4243              	.LCFI241:
 4244              		.cfi_def_cfa_register 7
 4245 0006 7860     		str	r0, [r7, #4]
1354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
1359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4246              		.loc 2 1360 1
 4247 0008 00BF     		nop
 4248 000a 0C37     		adds	r7, r7, #12
 4249              	.LCFI242:
 4250              		.cfi_def_cfa_offset 4
 4251 000c BD46     		mov	sp, r7
 4252              	.LCFI243:
 4253              		.cfi_def_cfa_register 13
 4254              		@ sp needed
 4255 000e 5DF8047B 		ldr	r7, [sp], #4
 4256              	.LCFI244:
 4257              		.cfi_restore 7
 4258              		.cfi_def_cfa_offset 0
 4259 0012 7047     		bx	lr
 4260              		.cfi_endproc
 4261              	.LFE347:
 4263              		.section	.text.HAL_ADCEx_LevelOutOfWindow2Callback,"ax",%progbits
 4264              		.align	1
 4265              		.weak	HAL_ADCEx_LevelOutOfWindow2Callback
ARM GAS  /tmp/cc6jq3Wn.s 			page 223


 4266              		.syntax unified
 4267              		.thumb
 4268              		.thumb_func
 4269              		.fpu fpv5-d16
 4271              	HAL_ADCEx_LevelOutOfWindow2Callback:
 4272              	.LFB348:
1361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Analog watchdog 2 callback in non-blocking mode.
1364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
1368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4273              		.loc 2 1368 1
 4274              		.cfi_startproc
 4275              		@ args = 0, pretend = 0, frame = 8
 4276              		@ frame_needed = 1, uses_anonymous_args = 0
 4277              		@ link register save eliminated.
 4278 0000 80B4     		push	{r7}
 4279              	.LCFI245:
 4280              		.cfi_def_cfa_offset 4
 4281              		.cfi_offset 7, -4
 4282 0002 83B0     		sub	sp, sp, #12
 4283              	.LCFI246:
 4284              		.cfi_def_cfa_offset 16
 4285 0004 00AF     		add	r7, sp, #0
 4286              	.LCFI247:
 4287              		.cfi_def_cfa_register 7
 4288 0006 7860     		str	r0, [r7, #4]
1369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
1374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4289              		.loc 2 1375 1
 4290 0008 00BF     		nop
 4291 000a 0C37     		adds	r7, r7, #12
 4292              	.LCFI248:
 4293              		.cfi_def_cfa_offset 4
 4294 000c BD46     		mov	sp, r7
 4295              	.LCFI249:
 4296              		.cfi_def_cfa_register 13
 4297              		@ sp needed
 4298 000e 5DF8047B 		ldr	r7, [sp], #4
 4299              	.LCFI250:
 4300              		.cfi_restore 7
 4301              		.cfi_def_cfa_offset 0
 4302 0012 7047     		bx	lr
 4303              		.cfi_endproc
 4304              	.LFE348:
 4306              		.section	.text.HAL_ADCEx_LevelOutOfWindow3Callback,"ax",%progbits
 4307              		.align	1
 4308              		.weak	HAL_ADCEx_LevelOutOfWindow3Callback
 4309              		.syntax unified
ARM GAS  /tmp/cc6jq3Wn.s 			page 224


 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu fpv5-d16
 4314              	HAL_ADCEx_LevelOutOfWindow3Callback:
 4315              	.LFB349:
1376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Analog watchdog 3 callback in non-blocking mode.
1379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
1383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4316              		.loc 2 1383 1
 4317              		.cfi_startproc
 4318              		@ args = 0, pretend = 0, frame = 8
 4319              		@ frame_needed = 1, uses_anonymous_args = 0
 4320              		@ link register save eliminated.
 4321 0000 80B4     		push	{r7}
 4322              	.LCFI251:
 4323              		.cfi_def_cfa_offset 4
 4324              		.cfi_offset 7, -4
 4325 0002 83B0     		sub	sp, sp, #12
 4326              	.LCFI252:
 4327              		.cfi_def_cfa_offset 16
 4328 0004 00AF     		add	r7, sp, #0
 4329              	.LCFI253:
 4330              		.cfi_def_cfa_register 7
 4331 0006 7860     		str	r0, [r7, #4]
1384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
1389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4332              		.loc 2 1390 1
 4333 0008 00BF     		nop
 4334 000a 0C37     		adds	r7, r7, #12
 4335              	.LCFI254:
 4336              		.cfi_def_cfa_offset 4
 4337 000c BD46     		mov	sp, r7
 4338              	.LCFI255:
 4339              		.cfi_def_cfa_register 13
 4340              		@ sp needed
 4341 000e 5DF8047B 		ldr	r7, [sp], #4
 4342              	.LCFI256:
 4343              		.cfi_restore 7
 4344              		.cfi_def_cfa_offset 0
 4345 0012 7047     		bx	lr
 4346              		.cfi_endproc
 4347              	.LFE349:
 4349              		.section	.text.HAL_ADCEx_EndOfSamplingCallback,"ax",%progbits
 4350              		.align	1
 4351              		.weak	HAL_ADCEx_EndOfSamplingCallback
 4352              		.syntax unified
 4353              		.thumb
ARM GAS  /tmp/cc6jq3Wn.s 			page 225


 4354              		.thumb_func
 4355              		.fpu fpv5-d16
 4357              	HAL_ADCEx_EndOfSamplingCallback:
 4358              	.LFB350:
1391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  End Of Sampling callback in non-blocking mode.
1395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
1399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4359              		.loc 2 1399 1
 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 8
 4362              		@ frame_needed = 1, uses_anonymous_args = 0
 4363              		@ link register save eliminated.
 4364 0000 80B4     		push	{r7}
 4365              	.LCFI257:
 4366              		.cfi_def_cfa_offset 4
 4367              		.cfi_offset 7, -4
 4368 0002 83B0     		sub	sp, sp, #12
 4369              	.LCFI258:
 4370              		.cfi_def_cfa_offset 16
 4371 0004 00AF     		add	r7, sp, #0
 4372              	.LCFI259:
 4373              		.cfi_def_cfa_register 7
 4374 0006 7860     		str	r0, [r7, #4]
1400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
1405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4375              		.loc 2 1406 1
 4376 0008 00BF     		nop
 4377 000a 0C37     		adds	r7, r7, #12
 4378              	.LCFI260:
 4379              		.cfi_def_cfa_offset 4
 4380 000c BD46     		mov	sp, r7
 4381              	.LCFI261:
 4382              		.cfi_def_cfa_register 13
 4383              		@ sp needed
 4384 000e 5DF8047B 		ldr	r7, [sp], #4
 4385              	.LCFI262:
 4386              		.cfi_restore 7
 4387              		.cfi_def_cfa_offset 0
 4388 0012 7047     		bx	lr
 4389              		.cfi_endproc
 4390              	.LFE350:
 4392              		.section	.text.HAL_ADCEx_RegularStop,"ax",%progbits
 4393              		.align	1
 4394              		.global	HAL_ADCEx_RegularStop
 4395              		.syntax unified
 4396              		.thumb
ARM GAS  /tmp/cc6jq3Wn.s 			page 226


 4397              		.thumb_func
 4398              		.fpu fpv5-d16
 4400              	HAL_ADCEx_RegularStop:
 4401              	.LFB351:
1407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC peripheral if no
1411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is on going on injected group.
1412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef *hadc)
1416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4402              		.loc 2 1416 1
 4403              		.cfi_startproc
 4404              		@ args = 0, pretend = 0, frame = 16
 4405              		@ frame_needed = 1, uses_anonymous_args = 0
 4406 0000 80B5     		push	{r7, lr}
 4407              	.LCFI263:
 4408              		.cfi_def_cfa_offset 8
 4409              		.cfi_offset 7, -8
 4410              		.cfi_offset 14, -4
 4411 0002 84B0     		sub	sp, sp, #16
 4412              	.LCFI264:
 4413              		.cfi_def_cfa_offset 24
 4414 0004 00AF     		add	r7, sp, #0
 4415              	.LCFI265:
 4416              		.cfi_def_cfa_register 7
 4417 0006 7860     		str	r0, [r7, #4]
1417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4418              		.loc 2 1423 3
 4419 0008 7B68     		ldr	r3, [r7, #4]
 4420 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4421 000e 012B     		cmp	r3, #1
 4422 0010 01D1     		bne	.L269
 4423              		.loc 2 1423 3 is_stmt 0 discriminator 1
 4424 0012 0223     		movs	r3, #2
 4425 0014 36E0     		b	.L270
 4426              	.L269:
 4427              		.loc 2 1423 3 discriminator 2
 4428 0016 7B68     		ldr	r3, [r7, #4]
 4429 0018 0122     		movs	r2, #1
 4430 001a 83F85020 		strb	r2, [r3, #80]
1424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 4431              		.loc 2 1426 20 is_stmt 1 discriminator 2
 4432 001e 0121     		movs	r1, #1
 4433 0020 7868     		ldr	r0, [r7, #4]
 4434 0022 FFF7FEFF 		bl	ADC_ConversionStop
ARM GAS  /tmp/cc6jq3Wn.s 			page 227


 4435 0026 0346     		mov	r3, r0
 4436 0028 FB73     		strb	r3, [r7, #15]
1427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if regular conversions are effectively stopped
1429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      and if no injected conversions are on-going */
1430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 4437              		.loc 2 1430 6 discriminator 2
 4438 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4439 002c 002B     		cmp	r3, #0
 4440 002e 24D1     		bne	.L271
1431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4441              		.loc 2 1433 5
 4442 0030 7B68     		ldr	r3, [r7, #4]
 4443 0032 5B6D     		ldr	r3, [r3, #84]
 4444 0034 23F48072 		bic	r2, r3, #256
 4445 0038 7B68     		ldr	r3, [r7, #4]
 4446 003a 5A65     		str	r2, [r3, #84]
1434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 4447              		.loc 2 1435 9
 4448 003c 7B68     		ldr	r3, [r7, #4]
 4449 003e 1B68     		ldr	r3, [r3]
 4450 0040 1846     		mov	r0, r3
 4451 0042 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4452 0046 0346     		mov	r3, r0
 4453              		.loc 2 1435 8
 4454 0048 002B     		cmp	r3, #0
 4455 004a 10D1     		bne	.L272
1436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
1438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 4456              		.loc 2 1438 24
 4457 004c 7868     		ldr	r0, [r7, #4]
 4458 004e FFF7FEFF 		bl	ADC_Disable
 4459 0052 0346     		mov	r3, r0
 4460 0054 FB73     		strb	r3, [r7, #15]
1439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 4461              		.loc 2 1441 10
 4462 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4463 0058 002B     		cmp	r3, #0
 4464 005a 0ED1     		bne	.L271
1442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
1444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 4465              		.loc 2 1444 9
 4466 005c 7B68     		ldr	r3, [r7, #4]
 4467 005e 5A6D     		ldr	r2, [r3, #84]
 4468 0060 0A4B     		ldr	r3, .L273
 4469 0062 1340     		ands	r3, r3, r2
 4470 0064 43F00102 		orr	r2, r3, #1
 4471 0068 7B68     		ldr	r3, [r7, #4]
 4472 006a 5A65     		str	r2, [r3, #84]
 4473 006c 05E0     		b	.L271
ARM GAS  /tmp/cc6jq3Wn.s 			page 228


 4474              	.L272:
1445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
1450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
1451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 4475              		.loc 2 1453 7
 4476 006e 7B68     		ldr	r3, [r7, #4]
 4477 0070 5B6D     		ldr	r3, [r3, #84]
 4478 0072 43F48052 		orr	r2, r3, #4096
 4479 0076 7B68     		ldr	r3, [r7, #4]
 4480 0078 5A65     		str	r2, [r3, #84]
 4481              	.L271:
1454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4482              		.loc 2 1458 3
 4483 007a 7B68     		ldr	r3, [r7, #4]
 4484 007c 0022     		movs	r2, #0
 4485 007e 83F85020 		strb	r2, [r3, #80]
1459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 4486              		.loc 2 1461 10
 4487 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4488              	.L270:
1462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4489              		.loc 2 1462 1
 4490 0084 1846     		mov	r0, r3
 4491 0086 1037     		adds	r7, r7, #16
 4492              	.LCFI266:
 4493              		.cfi_def_cfa_offset 8
 4494 0088 BD46     		mov	sp, r7
 4495              	.LCFI267:
 4496              		.cfi_def_cfa_register 13
 4497              		@ sp needed
 4498 008a 80BD     		pop	{r7, pc}
 4499              	.L274:
 4500              		.align	2
 4501              	.L273:
 4502 008c FEEFFFFF 		.word	-4098
 4503              		.cfi_endproc
 4504              	.LFE351:
 4506              		.section	.text.HAL_ADCEx_RegularStop_IT,"ax",%progbits
 4507              		.align	1
 4508              		.global	HAL_ADCEx_RegularStop_IT
 4509              		.syntax unified
 4510              		.thumb
 4511              		.thumb_func
 4512              		.fpu fpv5-d16
 4514              	HAL_ADCEx_RegularStop_IT:
ARM GAS  /tmp/cc6jq3Wn.s 			page 229


 4515              	.LFB352:
1463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of ADC groups regular and injected,
1467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         disable interrution of end-of-conversion,
1468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         disable ADC peripheral if no conversion is on going
1469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         on injected group.
1470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef *hadc)
1474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4516              		.loc 2 1474 1
 4517              		.cfi_startproc
 4518              		@ args = 0, pretend = 0, frame = 16
 4519              		@ frame_needed = 1, uses_anonymous_args = 0
 4520 0000 80B5     		push	{r7, lr}
 4521              	.LCFI268:
 4522              		.cfi_def_cfa_offset 8
 4523              		.cfi_offset 7, -8
 4524              		.cfi_offset 14, -4
 4525 0002 84B0     		sub	sp, sp, #16
 4526              	.LCFI269:
 4527              		.cfi_def_cfa_offset 24
 4528 0004 00AF     		add	r7, sp, #0
 4529              	.LCFI270:
 4530              		.cfi_def_cfa_register 7
 4531 0006 7860     		str	r0, [r7, #4]
1475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4532              		.loc 2 1481 3
 4533 0008 7B68     		ldr	r3, [r7, #4]
 4534 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4535 000e 012B     		cmp	r3, #1
 4536 0010 01D1     		bne	.L276
 4537              		.loc 2 1481 3 is_stmt 0 discriminator 1
 4538 0012 0223     		movs	r3, #2
 4539 0014 3EE0     		b	.L277
 4540              	.L276:
 4541              		.loc 2 1481 3 discriminator 2
 4542 0016 7B68     		ldr	r3, [r7, #4]
 4543 0018 0122     		movs	r2, #1
 4544 001a 83F85020 		strb	r2, [r3, #80]
1482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 4545              		.loc 2 1484 20 is_stmt 1 discriminator 2
 4546 001e 0121     		movs	r1, #1
 4547 0020 7868     		ldr	r0, [r7, #4]
 4548 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4549 0026 0346     		mov	r3, r0
ARM GAS  /tmp/cc6jq3Wn.s 			page 230


 4550 0028 FB73     		strb	r3, [r7, #15]
1485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     and if no injected conversion is on-going */
1488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 4551              		.loc 2 1488 6 discriminator 2
 4552 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4553 002c 002B     		cmp	r3, #0
 4554 002e 2CD1     		bne	.L278
1489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4555              		.loc 2 1491 5
 4556 0030 7B68     		ldr	r3, [r7, #4]
 4557 0032 5B6D     		ldr	r3, [r3, #84]
 4558 0034 23F48072 		bic	r2, r3, #256
 4559 0038 7B68     		ldr	r3, [r7, #4]
 4560 003a 5A65     		str	r2, [r3, #84]
1492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable all regular-related interrupts */
1494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4561              		.loc 2 1494 5
 4562 003c 7B68     		ldr	r3, [r7, #4]
 4563 003e 1B68     		ldr	r3, [r3]
 4564 0040 5A68     		ldr	r2, [r3, #4]
 4565 0042 7B68     		ldr	r3, [r7, #4]
 4566 0044 1B68     		ldr	r3, [r3]
 4567 0046 22F01C02 		bic	r2, r2, #28
 4568 004a 5A60     		str	r2, [r3, #4]
1495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable ADC peripheral if no injected conversions are on-going */
1497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 4569              		.loc 2 1497 9
 4570 004c 7B68     		ldr	r3, [r7, #4]
 4571 004e 1B68     		ldr	r3, [r3]
 4572 0050 1846     		mov	r0, r3
 4573 0052 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4574 0056 0346     		mov	r3, r0
 4575              		.loc 2 1497 8
 4576 0058 002B     		cmp	r3, #0
 4577 005a 10D1     		bne	.L279
1498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 4578              		.loc 2 1499 24
 4579 005c 7868     		ldr	r0, [r7, #4]
 4580 005e FFF7FEFF 		bl	ADC_Disable
 4581 0062 0346     		mov	r3, r0
 4582 0064 FB73     		strb	r3, [r7, #15]
1500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if no issue reported */
1501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 4583              		.loc 2 1501 10
 4584 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4585 0068 002B     		cmp	r3, #0
 4586 006a 0ED1     		bne	.L278
1502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
1504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cc6jq3Wn.s 			page 231


 4587              		.loc 2 1504 9
 4588 006c 7B68     		ldr	r3, [r7, #4]
 4589 006e 5A6D     		ldr	r2, [r3, #84]
 4590 0070 0A4B     		ldr	r3, .L280
 4591 0072 1340     		ands	r3, r3, r2
 4592 0074 43F00102 		orr	r2, r3, #1
 4593 0078 7B68     		ldr	r3, [r7, #4]
 4594 007a 5A65     		str	r2, [r3, #84]
 4595 007c 05E0     		b	.L278
 4596              	.L279:
1505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 4597              		.loc 2 1511 7
 4598 007e 7B68     		ldr	r3, [r7, #4]
 4599 0080 5B6D     		ldr	r3, [r3, #84]
 4600 0082 43F48052 		orr	r2, r3, #4096
 4601 0086 7B68     		ldr	r3, [r7, #4]
 4602 0088 5A65     		str	r2, [r3, #84]
 4603              	.L278:
1512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4604              		.loc 2 1516 3
 4605 008a 7B68     		ldr	r3, [r7, #4]
 4606 008c 0022     		movs	r2, #0
 4607 008e 83F85020 		strb	r2, [r3, #80]
1517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 4608              		.loc 2 1519 10
 4609 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4610              	.L277:
1520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4611              		.loc 2 1520 1
 4612 0094 1846     		mov	r0, r3
 4613 0096 1037     		adds	r7, r7, #16
 4614              	.LCFI271:
 4615              		.cfi_def_cfa_offset 8
 4616 0098 BD46     		mov	sp, r7
 4617              	.LCFI272:
 4618              		.cfi_def_cfa_register 13
 4619              		@ sp needed
 4620 009a 80BD     		pop	{r7, pc}
 4621              	.L281:
 4622              		.align	2
 4623              	.L280:
 4624 009c FEEFFFFF 		.word	-4098
 4625              		.cfi_endproc
 4626              	.LFE352:
 4628              		.section	.text.HAL_ADCEx_RegularStop_DMA,"ax",%progbits
ARM GAS  /tmp/cc6jq3Wn.s 			page 232


 4629              		.align	1
 4630              		.global	HAL_ADCEx_RegularStop_DMA
 4631              		.syntax unified
 4632              		.thumb
 4633              		.thumb_func
 4634              		.fpu fpv5-d16
 4636              	HAL_ADCEx_RegularStop_DMA:
 4637              	.LFB353:
1521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
1525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC peripheral if no conversion is on going
1526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         on injected group.
1527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   HAL_ADCEx_RegularStop_DMA() function is dedicated to single-ADC mode only.
1528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For multimode (when multimode feature is available),
1529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularMultiModeStop_DMA() API must be used.
1530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc)
1534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4638              		.loc 2 1534 1
 4639              		.cfi_startproc
 4640              		@ args = 0, pretend = 0, frame = 16
 4641              		@ frame_needed = 1, uses_anonymous_args = 0
 4642 0000 80B5     		push	{r7, lr}
 4643              	.LCFI273:
 4644              		.cfi_def_cfa_offset 8
 4645              		.cfi_offset 7, -8
 4646              		.cfi_offset 14, -4
 4647 0002 84B0     		sub	sp, sp, #16
 4648              	.LCFI274:
 4649              		.cfi_def_cfa_offset 24
 4650 0004 00AF     		add	r7, sp, #0
 4651              	.LCFI275:
 4652              		.cfi_def_cfa_register 7
 4653 0006 7860     		str	r0, [r7, #4]
1535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4654              		.loc 2 1541 3
 4655 0008 7B68     		ldr	r3, [r7, #4]
 4656 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4657 000e 012B     		cmp	r3, #1
 4658 0010 01D1     		bne	.L283
 4659              		.loc 2 1541 3 is_stmt 0 discriminator 1
 4660 0012 0223     		movs	r3, #2
 4661 0014 5DE0     		b	.L284
 4662              	.L283:
 4663              		.loc 2 1541 3 discriminator 2
 4664 0016 7B68     		ldr	r3, [r7, #4]
 4665 0018 0122     		movs	r2, #1
ARM GAS  /tmp/cc6jq3Wn.s 			page 233


 4666 001a 83F85020 		strb	r2, [r3, #80]
1542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 4667              		.loc 2 1544 20 is_stmt 1 discriminator 2
 4668 001e 0121     		movs	r1, #1
 4669 0020 7868     		ldr	r0, [r7, #4]
 4670 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4671 0026 0346     		mov	r3, r0
 4672 0028 FB73     		strb	r3, [r7, #15]
1545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      and if no injected conversion is on-going */
1548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 4673              		.loc 2 1548 6 discriminator 2
 4674 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4675 002c 002B     		cmp	r3, #0
 4676 002e 4BD1     		bne	.L285
1549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4677              		.loc 2 1551 5
 4678 0030 7B68     		ldr	r3, [r7, #4]
 4679 0032 5B6D     		ldr	r3, [r3, #84]
 4680 0034 23F48072 		bic	r2, r3, #256
 4681 0038 7B68     		ldr	r3, [r7, #4]
 4682 003a 5A65     		str	r2, [r3, #84]
1552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 4683              		.loc 2 1554 5
 4684 003c 7B68     		ldr	r3, [r7, #4]
 4685 003e 1B68     		ldr	r3, [r3]
 4686 0040 DA68     		ldr	r2, [r3, #12]
 4687 0042 7B68     		ldr	r3, [r7, #4]
 4688 0044 1B68     		ldr	r3, [r3]
 4689 0046 22F00302 		bic	r2, r2, #3
 4690 004a DA60     		str	r2, [r3, #12]
1555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 4691              		.loc 2 1558 22
 4692 004c 7B68     		ldr	r3, [r7, #4]
 4693 004e DB6C     		ldr	r3, [r3, #76]
 4694 0050 1846     		mov	r0, r3
 4695 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 4696 0056 0346     		mov	r3, r0
 4697 0058 FB73     		strb	r3, [r7, #15]
1559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 4698              		.loc 2 1561 8
 4699 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4700 005c 002B     		cmp	r3, #0
 4701 005e 05D0     		beq	.L286
1562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/cc6jq3Wn.s 			page 234


1563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4702              		.loc 2 1564 7
 4703 0060 7B68     		ldr	r3, [r7, #4]
 4704 0062 5B6D     		ldr	r3, [r3, #84]
 4705 0064 43F04002 		orr	r2, r3, #64
 4706 0068 7B68     		ldr	r3, [r7, #4]
 4707 006a 5A65     		str	r2, [r3, #84]
 4708              	.L286:
1565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4709              		.loc 2 1568 5
 4710 006c 7B68     		ldr	r3, [r7, #4]
 4711 006e 1B68     		ldr	r3, [r3]
 4712 0070 5A68     		ldr	r2, [r3, #4]
 4713 0072 7B68     		ldr	r3, [r7, #4]
 4714 0074 1B68     		ldr	r3, [r3]
 4715 0076 22F01002 		bic	r2, r2, #16
 4716 007a 5A60     		str	r2, [r3, #4]
1569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
1571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
1572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* to keep in memory a potential failing status.                          */
1573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 4717              		.loc 2 1573 9
 4718 007c 7B68     		ldr	r3, [r7, #4]
 4719 007e 1B68     		ldr	r3, [r3]
 4720 0080 1846     		mov	r0, r3
 4721 0082 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4722 0086 0346     		mov	r3, r0
 4723              		.loc 2 1573 8
 4724 0088 002B     		cmp	r3, #0
 4725 008a 17D1     		bne	.L287
1574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1575:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 4726              		.loc 2 1575 10
 4727 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4728 008e 002B     		cmp	r3, #0
 4729 0090 05D1     		bne	.L288
1576:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1577:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 4730              		.loc 2 1577 26
 4731 0092 7868     		ldr	r0, [r7, #4]
 4732 0094 FFF7FEFF 		bl	ADC_Disable
 4733 0098 0346     		mov	r3, r0
 4734 009a FB73     		strb	r3, [r7, #15]
 4735 009c 02E0     		b	.L289
 4736              	.L288:
1578:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1579:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1580:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1581:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         (void)ADC_Disable(hadc);
 4737              		.loc 2 1581 15
 4738 009e 7868     		ldr	r0, [r7, #4]
 4739 00a0 FFF7FEFF 		bl	ADC_Disable
ARM GAS  /tmp/cc6jq3Wn.s 			page 235


 4740              	.L289:
1582:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1583:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1584:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1585:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 4741              		.loc 2 1585 10
 4742 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4743 00a6 002B     		cmp	r3, #0
 4744 00a8 0ED1     		bne	.L285
1586:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1587:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
1588:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 4745              		.loc 2 1588 9
 4746 00aa 7B68     		ldr	r3, [r7, #4]
 4747 00ac 5A6D     		ldr	r2, [r3, #84]
 4748 00ae 0B4B     		ldr	r3, .L290
 4749 00b0 1340     		ands	r3, r3, r2
 4750 00b2 43F00102 		orr	r2, r3, #1
 4751 00b6 7B68     		ldr	r3, [r7, #4]
 4752 00b8 5A65     		str	r2, [r3, #84]
 4753 00ba 05E0     		b	.L285
 4754              	.L287:
1589:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1590:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1591:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1592:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1593:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1594:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1595:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 4755              		.loc 2 1595 7
 4756 00bc 7B68     		ldr	r3, [r7, #4]
 4757 00be 5B6D     		ldr	r3, [r3, #84]
 4758 00c0 43F48052 		orr	r2, r3, #4096
 4759 00c4 7B68     		ldr	r3, [r7, #4]
 4760 00c6 5A65     		str	r2, [r3, #84]
 4761              	.L285:
1596:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1597:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1598:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1599:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1600:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4762              		.loc 2 1600 3
 4763 00c8 7B68     		ldr	r3, [r7, #4]
 4764 00ca 0022     		movs	r2, #0
 4765 00cc 83F85020 		strb	r2, [r3, #80]
1601:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1602:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1603:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 4766              		.loc 2 1603 10
 4767 00d0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4768              	.L284:
1604:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4769              		.loc 2 1604 1
 4770 00d2 1846     		mov	r0, r3
 4771 00d4 1037     		adds	r7, r7, #16
 4772              	.LCFI276:
 4773              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6jq3Wn.s 			page 236


 4774 00d6 BD46     		mov	sp, r7
 4775              	.LCFI277:
 4776              		.cfi_def_cfa_register 13
 4777              		@ sp needed
 4778 00d8 80BD     		pop	{r7, pc}
 4779              	.L291:
 4780 00da 00BF     		.align	2
 4781              	.L290:
 4782 00dc FEEFFFFF 		.word	-4098
 4783              		.cfi_endproc
 4784              	.LFE353:
 4786              		.section	.text.HAL_ADCEx_RegularMultiModeStop_DMA,"ax",%progbits
 4787              		.align	1
 4788              		.global	HAL_ADCEx_RegularMultiModeStop_DMA
 4789              		.syntax unified
 4790              		.thumb
 4791              		.thumb_func
 4792              		.fpu fpv5-d16
 4794              	HAL_ADCEx_RegularMultiModeStop_DMA:
 4795              	.LFB354:
1605:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1606:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1607:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop DMA-based multimode ADC conversion, disable ADC DMA transfer, disable ADC peripher
1608:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. Multimode DMA bits
1609:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
1610:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
1611:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
1612:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
1613:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
1614:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularStop_DMA() must be called after this function with handle of
1615:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
1616:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1617:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1618:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1619:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(ADC_HandleTypeDef *hadc)
1620:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4796              		.loc 2 1620 1
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 120
 4799              		@ frame_needed = 1, uses_anonymous_args = 0
 4800 0000 80B5     		push	{r7, lr}
 4801              	.LCFI278:
 4802              		.cfi_def_cfa_offset 8
 4803              		.cfi_offset 7, -8
 4804              		.cfi_offset 14, -4
 4805 0002 9EB0     		sub	sp, sp, #120
 4806              	.LCFI279:
 4807              		.cfi_def_cfa_offset 128
 4808 0004 00AF     		add	r7, sp, #0
 4809              	.LCFI280:
 4810              		.cfi_def_cfa_register 7
 4811 0006 7860     		str	r0, [r7, #4]
1621:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1622:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
1623:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1624:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
1625:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 237


1626:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1627:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1628:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1629:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1630:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4812              		.loc 2 1630 3
 4813 0008 7B68     		ldr	r3, [r7, #4]
 4814 000a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4815 000e 012B     		cmp	r3, #1
 4816 0010 01D1     		bne	.L293
 4817              		.loc 2 1630 3 is_stmt 0 discriminator 1
 4818 0012 0223     		movs	r3, #2
 4819 0014 BFE0     		b	.L305
 4820              	.L293:
 4821              		.loc 2 1630 3 discriminator 2
 4822 0016 7B68     		ldr	r3, [r7, #4]
 4823 0018 0122     		movs	r2, #1
 4824 001a 83F85020 		strb	r2, [r3, #80]
1631:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1632:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1633:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular groups */
1634:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 4825              		.loc 2 1634 20 is_stmt 1 discriminator 2
 4826 001e 0121     		movs	r1, #1
 4827 0020 7868     		ldr	r0, [r7, #4]
 4828 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4829 0026 0346     		mov	r3, r0
 4830 0028 87F87730 		strb	r3, [r7, #119]
1635:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1636:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1637:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 4831              		.loc 2 1637 6 discriminator 2
 4832 002c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 4833 0030 002B     		cmp	r3, #0
 4834 0032 40F0AA80 		bne	.L295
1638:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1639:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1640:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 4835              		.loc 2 1640 5
 4836 0036 7B68     		ldr	r3, [r7, #4]
 4837 0038 5B6D     		ldr	r3, [r3, #84]
 4838 003a 23F48072 		bic	r2, r3, #256
 4839 003e 7B68     		ldr	r3, [r7, #4]
 4840 0040 5A65     		str	r2, [r3, #84]
1641:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1642:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.State = HAL_ADC_STATE_RESET;
 4841              		.loc 2 1642 24
 4842 0042 0023     		movs	r3, #0
 4843 0044 FB65     		str	r3, [r7, #92]
1643:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 4844              		.loc 2 1643 28
 4845 0046 0023     		movs	r3, #0
 4846 0048 3B66     		str	r3, [r7, #96]
1644:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1645:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1646:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 4847              		.loc 2 1646 5
ARM GAS  /tmp/cc6jq3Wn.s 			page 238


 4848 004a 7B68     		ldr	r3, [r7, #4]
 4849 004c 1B68     		ldr	r3, [r3]
 4850 004e 544A     		ldr	r2, .L306
 4851 0050 9342     		cmp	r3, r2
 4852 0052 02D1     		bne	.L296
 4853              		.loc 2 1646 5 is_stmt 0 discriminator 1
 4854 0054 534B     		ldr	r3, .L306+4
 4855 0056 BB60     		str	r3, [r7, #8]
 4856 0058 01E0     		b	.L297
 4857              	.L296:
 4858              		.loc 2 1646 5 discriminator 2
 4859 005a 0023     		movs	r3, #0
 4860 005c BB60     		str	r3, [r7, #8]
 4861              	.L297:
1647:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1648:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 4862              		.loc 2 1648 21 is_stmt 1
 4863 005e BB68     		ldr	r3, [r7, #8]
 4864              		.loc 2 1648 8
 4865 0060 002B     		cmp	r3, #0
 4866 0062 0BD1     		bne	.L298
1649:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1650:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1651:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 4867              		.loc 2 1651 7
 4868 0064 7B68     		ldr	r3, [r7, #4]
 4869 0066 5B6D     		ldr	r3, [r3, #84]
 4870 0068 43F02002 		orr	r2, r3, #32
 4871 006c 7B68     		ldr	r3, [r7, #4]
 4872 006e 5A65     		str	r2, [r3, #84]
1652:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1653:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1654:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 4873              		.loc 2 1654 7
 4874 0070 7B68     		ldr	r3, [r7, #4]
 4875 0072 0022     		movs	r2, #0
 4876 0074 83F85020 		strb	r2, [r3, #80]
1655:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1656:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 4877              		.loc 2 1656 14
 4878 0078 0123     		movs	r3, #1
 4879 007a 8CE0     		b	.L305
 4880              	.L298:
1657:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1658:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1659:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1660:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1661:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1662:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1663:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
 4881              		.loc 2 1663 17
 4882 007c FFF7FEFF 		bl	HAL_GetTick
 4883 0080 F866     		str	r0, [r7, #108]
1664:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1665:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 4884              		.loc 2 1665 40
 4885 0082 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/cc6jq3Wn.s 			page 239


 4886 0084 1846     		mov	r0, r3
 4887 0086 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4888 008a 3867     		str	r0, [r7, #112]
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 4889              		.loc 2 1666 11
 4890 008c 27E0     		b	.L299
 4891              	.L302:
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1668:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1669:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1670:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 4892              		.loc 2 1670 12
 4893 008e FFF7FEFF 		bl	HAL_GetTick
 4894 0092 0246     		mov	r2, r0
 4895              		.loc 2 1670 26
 4896 0094 FB6E     		ldr	r3, [r7, #108]
 4897 0096 D31A     		subs	r3, r2, r3
 4898              		.loc 2 1670 10
 4899 0098 052B     		cmp	r3, #5
 4900 009a 1BD9     		bls	.L300
1671:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1672:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* New check to avoid false timeout detection in case of preemption */
1673:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance
 4901              		.loc 2 1673 44
 4902 009c BB68     		ldr	r3, [r7, #8]
 4903 009e 1846     		mov	r0, r3
 4904 00a0 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4905 00a4 3867     		str	r0, [r7, #112]
1674:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1675:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 4906              		.loc 2 1675 13
 4907 00a6 7B68     		ldr	r3, [r7, #4]
 4908 00a8 1B68     		ldr	r3, [r3]
 4909 00aa 1846     		mov	r0, r3
 4910 00ac FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4911 00b0 0346     		mov	r3, r0
 4912              		.loc 2 1675 11
 4913 00b2 012B     		cmp	r3, #1
 4914 00b4 02D0     		beq	.L301
1676:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 4915              		.loc 2 1676 12
 4916 00b6 3B6F     		ldr	r3, [r7, #112]
 4917 00b8 012B     		cmp	r3, #1
 4918 00ba 0BD1     		bne	.L300
 4919              	.L301:
1677:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1678:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
1679:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Update ADC state machine to error */
1680:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 4920              		.loc 2 1680 11
 4921 00bc 7B68     		ldr	r3, [r7, #4]
 4922 00be 5B6D     		ldr	r3, [r3, #84]
 4923 00c0 43F01002 		orr	r2, r3, #16
 4924 00c4 7B68     		ldr	r3, [r7, #4]
 4925 00c6 5A65     		str	r2, [r3, #84]
1681:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1682:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* Process unlocked */
ARM GAS  /tmp/cc6jq3Wn.s 			page 240


1683:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 4926              		.loc 2 1683 11
 4927 00c8 7B68     		ldr	r3, [r7, #4]
 4928 00ca 0022     		movs	r2, #0
 4929 00cc 83F85020 		strb	r2, [r3, #80]
1684:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1685:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           return HAL_ERROR;
 4930              		.loc 2 1685 18
 4931 00d0 0123     		movs	r3, #1
 4932 00d2 60E0     		b	.L305
 4933              	.L300:
1686:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
1687:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1688:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1689:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 4934              		.loc 2 1689 42
 4935 00d4 BB68     		ldr	r3, [r7, #8]
 4936 00d6 1846     		mov	r0, r3
 4937 00d8 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4938 00dc 3867     		str	r0, [r7, #112]
 4939              	.L299:
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 4940              		.loc 2 1666 13
 4941 00de 7B68     		ldr	r3, [r7, #4]
 4942 00e0 1B68     		ldr	r3, [r3]
 4943 00e2 1846     		mov	r0, r3
 4944 00e4 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4945 00e8 0346     		mov	r3, r0
1666:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 4946              		.loc 2 1666 11
 4947 00ea 012B     		cmp	r3, #1
 4948 00ec CFD0     		beq	.L302
1667:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
 4949              		.loc 2 1667 12
 4950 00ee 3B6F     		ldr	r3, [r7, #112]
 4951 00f0 012B     		cmp	r3, #1
 4952 00f2 CCD0     		beq	.L302
1690:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1691:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1692:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1693:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1694:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1695:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* with HAL_ADCEx_RegularStop_DMA() API.                                  */
1696:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 4953              		.loc 2 1696 22
 4954 00f4 7B68     		ldr	r3, [r7, #4]
 4955 00f6 DB6C     		ldr	r3, [r3, #76]
 4956 00f8 1846     		mov	r0, r3
 4957 00fa FFF7FEFF 		bl	HAL_DMA_Abort
 4958 00fe 0346     		mov	r3, r0
 4959 0100 87F87730 		strb	r3, [r7, #119]
1697:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1698:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1699:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 4960              		.loc 2 1699 8
 4961 0104 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 4962 0108 002B     		cmp	r3, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 241


 4963 010a 05D0     		beq	.L303
1700:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1701:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1702:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 4964              		.loc 2 1702 7
 4965 010c 7B68     		ldr	r3, [r7, #4]
 4966 010e 5B6D     		ldr	r3, [r3, #84]
 4967 0110 43F04002 		orr	r2, r3, #64
 4968 0114 7B68     		ldr	r3, [r7, #4]
 4969 0116 5A65     		str	r2, [r3, #84]
 4970              	.L303:
1703:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1704:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1705:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1706:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 4971              		.loc 2 1706 5
 4972 0118 7B68     		ldr	r3, [r7, #4]
 4973 011a 1B68     		ldr	r3, [r3]
 4974 011c 5A68     		ldr	r2, [r3, #4]
 4975 011e 7B68     		ldr	r3, [r7, #4]
 4976 0120 1B68     		ldr	r3, [r3]
 4977 0122 22F01002 		bic	r2, r2, #16
 4978 0126 5A60     		str	r2, [r3, #4]
1707:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1708:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave if no injected        */
1709:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*   conversion is on-going.                                              */
1710:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1711:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1712:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 4979              		.loc 2 1712 8
 4980 0128 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 4981 012c 002B     		cmp	r3, #0
 4982 012e 2CD1     		bne	.L295
1713:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1714:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 4983              		.loc 2 1714 11
 4984 0130 7B68     		ldr	r3, [r7, #4]
 4985 0132 1B68     		ldr	r3, [r3]
 4986 0134 1846     		mov	r0, r3
 4987 0136 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4988 013a 0346     		mov	r3, r0
 4989              		.loc 2 1714 10
 4990 013c 002B     		cmp	r3, #0
 4991 013e 18D1     		bne	.L304
1715:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1716:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status =  ADC_Disable(hadc);
 4992              		.loc 2 1716 27
 4993 0140 7868     		ldr	r0, [r7, #4]
 4994 0142 FFF7FEFF 		bl	ADC_Disable
 4995 0146 0346     		mov	r3, r0
 4996 0148 87F87730 		strb	r3, [r7, #119]
1717:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 4997              		.loc 2 1717 12
 4998 014c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 4999 0150 002B     		cmp	r3, #0
 5000 0152 0ED1     		bne	.L304
1718:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/cc6jq3Wn.s 			page 242


1719:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (LL_ADC_INJ_IsConversionOngoing((&tmphadcSlave)->Instance) == 0UL)
 5001              		.loc 2 1719 15
 5002 0154 BB68     		ldr	r3, [r7, #8]
 5003 0156 1846     		mov	r0, r3
 5004 0158 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5005 015c 0346     		mov	r3, r0
 5006              		.loc 2 1719 14
 5007 015e 002B     		cmp	r3, #0
 5008 0160 07D1     		bne	.L304
1720:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
1721:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             tmp_hal_status =  ADC_Disable(&tmphadcSlave);
 5009              		.loc 2 1721 31
 5010 0162 07F10803 		add	r3, r7, #8
 5011 0166 1846     		mov	r0, r3
 5012 0168 FFF7FEFF 		bl	ADC_Disable
 5013 016c 0346     		mov	r3, r0
 5014 016e 87F87730 		strb	r3, [r7, #119]
 5015              	.L304:
1722:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
1723:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
1724:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1725:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1726:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 5016              		.loc 2 1726 10
 5017 0172 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 5018 0176 002B     		cmp	r3, #0
 5019 0178 07D1     		bne	.L295
1727:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1728:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Both Master and Slave ADC's could be disabled. Update Master State */
1729:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Clear HAL_ADC_STATE_INJ_BUSY bit, set HAL_ADC_STATE_READY bit */
1730:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_READY);
 5020              		.loc 2 1730 9
 5021 017a 7B68     		ldr	r3, [r7, #4]
 5022 017c 5A6D     		ldr	r2, [r3, #84]
 5023 017e 0A4B     		ldr	r3, .L306+8
 5024 0180 1340     		ands	r3, r3, r2
 5025 0182 43F00102 		orr	r2, r3, #1
 5026 0186 7B68     		ldr	r3, [r7, #4]
 5027 0188 5A65     		str	r2, [r3, #84]
 5028              	.L295:
1731:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1732:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1733:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1734:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* injected (Master or Slave) conversions are still on-going,
1735:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            no Master State change */
1736:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1737:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1738:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1739:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1740:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1741:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 5029              		.loc 2 1741 3
 5030 018a 7B68     		ldr	r3, [r7, #4]
 5031 018c 0022     		movs	r2, #0
 5032 018e 83F85020 		strb	r2, [r3, #80]
1742:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1743:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
ARM GAS  /tmp/cc6jq3Wn.s 			page 243


1744:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 5033              		.loc 2 1744 10
 5034 0192 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 5035              	.L305:
1745:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 5036              		.loc 2 1745 1 discriminator 1
 5037 0196 1846     		mov	r0, r3
 5038 0198 7837     		adds	r7, r7, #120
 5039              	.LCFI281:
 5040              		.cfi_def_cfa_offset 8
 5041 019a BD46     		mov	sp, r7
 5042              	.LCFI282:
 5043              		.cfi_def_cfa_register 13
 5044              		@ sp needed
 5045 019c 80BD     		pop	{r7, pc}
 5046              	.L307:
 5047 019e 00BF     		.align	2
 5048              	.L306:
 5049 01a0 00200240 		.word	1073881088
 5050 01a4 00210240 		.word	1073881344
 5051 01a8 FEEFFFFF 		.word	-4098
 5052              		.cfi_endproc
 5053              	.LFE354:
 5055              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 5056              		.align	1
 5057              		.global	HAL_ADCEx_InjectedConfigChannel
 5058              		.syntax unified
 5059              		.thumb
 5060              		.thumb_func
 5061              		.fpu fpv5-d16
 5063              	HAL_ADCEx_InjectedConfigChannel:
 5064              	.LFB355:
1746:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1747:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1748:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @}
1749:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1750:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1751:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 ADC Extended Peripheral Control functions
1752:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief    ADC Extended Peripheral Control functions
1753:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
1754:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @verbatim
1755:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
1756:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1757:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
1758:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1759:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1760:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Configure multimode when multimode feature is available
1761:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Enable or Disable Injected Queue
1762:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Disable ADC voltage regulator
1763:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Enter ADC deep-power-down mode
1764:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1765:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @endverbatim
1766:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
1767:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1768:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1769:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1770:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Configure a channel to be assigned to ADC group injected.
ARM GAS  /tmp/cc6jq3Wn.s 			page 244


1771:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1772:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this
1773:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1774:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without resetting the ADC.
1775:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state:
1776:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Refer to comments of structure "ADC_InjectionConfTypeDef".
1777:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
1778:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
1779:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         These internal paths can be disabled using function
1780:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
1781:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Caution: For Injected Context Queue use, a context must be fully
1782:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         defined before start of injected conversion. All channels are configured
1783:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         consecutively for the same ADC instance. Therefore, the number of calls to
1784:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedConfigChannel() must be equal to the value of parameter
1785:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         InjectedNbrOfConversion for each context.
1786:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *  - Example 1: If 1 context is intended to be used (or if there is no use of the
1787:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    Injected Queue Context feature) and if the context contains 3 injected ranks
1788:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    (InjectedNbrOfConversion = 3), HAL_ADCEx_InjectedConfigChannel() must be
1789:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    called once for each channel (i.e. 3 times) before starting a conversion.
1790:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    This function must not be called to configure a 4th injected channel:
1791:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    it would start a new context into context queue.
1792:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *  - Example 2: If 2 contexts are intended to be used and each of them contains
1793:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    3 injected ranks (InjectedNbrOfConversion = 3),
1794:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() must be called once for each channel and
1795:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    for each context (3 channels x 2 contexts = 6 calls). Conversion can
1796:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    start once the 1st context is set, that is after the first three
1797:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() calls. The 2nd context can be set on the fly.
1798:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1799:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param sConfigInjected Structure of ADC injected group and ADC channel for
1800:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected group.
1801:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1802:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1803:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef
1804:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 5065              		.loc 2 1804 1
 5066              		.cfi_startproc
 5067              		@ args = 0, pretend = 0, frame = 232
 5068              		@ frame_needed = 1, uses_anonymous_args = 0
 5069 0000 90B5     		push	{r4, r7, lr}
 5070              	.LCFI283:
 5071              		.cfi_def_cfa_offset 12
 5072              		.cfi_offset 4, -12
 5073              		.cfi_offset 7, -8
 5074              		.cfi_offset 14, -4
 5075 0002 BBB0     		sub	sp, sp, #236
 5076              	.LCFI284:
 5077              		.cfi_def_cfa_offset 248
 5078 0004 00AF     		add	r7, sp, #0
 5079              	.LCFI285:
 5080              		.cfi_def_cfa_register 7
 5081 0006 7860     		str	r0, [r7, #4]
 5082 0008 3960     		str	r1, [r7]
1805:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5083              		.loc 2 1805 21
 5084 000a 0023     		movs	r3, #0
 5085 000c 87F8E730 		strb	r3, [r7, #231]
1806:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
ARM GAS  /tmp/cc6jq3Wn.s 			page 245


1807:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_internal_channel;
1808:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
1809:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
1810:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 5086              		.loc 2 1810 17
 5087 0010 0023     		movs	r3, #0
 5088 0012 FB60     		str	r3, [r7, #12]
1811:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1812:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 5089              		.loc 2 1812 12
 5090 0014 0023     		movs	r3, #0
 5091 0016 C7F8E030 		str	r3, [r7, #224]
1813:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1814:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1815:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1817:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
1818:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1819:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
1820:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
1821:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1822:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
1823:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));
1824:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
1825:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
1826:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC3)
1827:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1828:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC3_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
1829:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1830:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1831:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1832:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
1833:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1834:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1835:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1836:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1837:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1838:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1839:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1840:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1841:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1842:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1843:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1844:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check offset range according to oversampling setting */
1845:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.OversamplingMode == ENABLE)
1846:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1847:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset / (hadc->In
1848:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1849:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1850:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1851:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1852:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1853:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
1854:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* if JOVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
1855:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      ignored (considered as reset) */
1856:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC3)
1857:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
ARM GAS  /tmp/cc6jq3Wn.s 			page 246


1858:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(!((sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE) && (sConfigInjected->
1859:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1860:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif  /* ADC_VER_V5_V90 */
1861:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* JDISCEN and JAUTO bits can't be set at the same time  */
1862:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(!((sConfigInjected->InjectedDiscontinuousConvMode == ENABLE) && (sConfigInjected->Au
1863:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1864:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  DISCEN and JAUTO bits can't be set at the same time */
1865:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv
1866:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1867:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification of channel number */
1868:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 5092              		.loc 2 1868 22
 5093 001a 3B68     		ldr	r3, [r7]
 5094 001c DB68     		ldr	r3, [r3, #12]
 5095              		.loc 2 1868 6
 5096 001e 9D4A     		ldr	r2, .L448
 5097 0020 9342     		cmp	r3, r2
1869:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1870:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1871:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1872:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1873:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1874:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
1875:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1876:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC1_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1877:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1878:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC2)
1879:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1880:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC2_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1881:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1882:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined (ADC3)
1883:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC3)
1884:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1885:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC3_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1886:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1887:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif
1888:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1889:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1890:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1891:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 5098              		.loc 2 1891 3
 5099 0022 7B68     		ldr	r3, [r7, #4]
 5100 0024 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 5101 0028 012B     		cmp	r3, #1
 5102 002a 02D1     		bne	.L310
 5103              		.loc 2 1891 3 is_stmt 0 discriminator 1
 5104 002c 0223     		movs	r3, #2
 5105 002e 00F057BD 		b	.L311
 5106              	.L310:
 5107              		.loc 2 1891 3 discriminator 2
 5108 0032 7B68     		ldr	r3, [r7, #4]
 5109 0034 0122     		movs	r2, #1
 5110 0036 83F85020 		strb	r2, [r3, #80]
1892:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1893:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1894:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Hardware constraint: Must fully define injected context register JSQR    */
1895:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* before make it entering into injected sequencer queue.                   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 247


1896:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*                                                                          */
1897:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - if scan mode is disabled:                                              */
1898:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to 0x00: 1 channel         */
1899:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      converted (channel on injected rank 1)                              */
1900:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      Parameter "InjectedNbrOfConversion" is discarded.                   */
1901:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting is simple: register is fully */
1902:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      defined on one call of this function (for injected rank 1) and can  */
1903:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      be entered into queue directly.                                     */
1904:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - if scan mode is enabled:                                               */
1905:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to parameter               */
1906:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      "InjectedNbrOfConversion".                                          */
1907:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting more complex: register is    */
1908:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      fully defined over successive calls of this function, for each      */
1909:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      injected channel rank. It is entered into queue only when all       */
1910:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      injected ranks have been set.                                       */
1911:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*   Note: Scan mode is not present by hardware on this device, but used    */
1912:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*   by software for alignment over all STM32 devices.                      */
1913:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 5111              		.loc 2 1914 18 is_stmt 1 discriminator 2
 5112 003a 7B68     		ldr	r3, [r7, #4]
 5113 003c DB68     		ldr	r3, [r3, #12]
 5114              		.loc 2 1914 6 discriminator 2
 5115 003e 002B     		cmp	r3, #0
 5116 0040 03D0     		beq	.L312
1915:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 5117              		.loc 2 1915 23 discriminator 1
 5118 0042 3B68     		ldr	r3, [r7]
 5119 0044 1B6A     		ldr	r3, [r3, #32]
1914:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 5120              		.loc 2 1914 54 discriminator 1
 5121 0046 012B     		cmp	r3, #1
 5122 0048 30D1     		bne	.L313
 5123              	.L312:
1916:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1917:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configuration of context register JSQR:                                */
1918:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - number of ranks in injected group sequencer: fixed to 1st rank      */
1919:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    (scan mode disabled, only rank 1 used)                              */
1920:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
1921:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - external trigger polarity                                           */
1922:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
1923:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 5124              		.loc 2 1924 24
 5125 004a 3B68     		ldr	r3, [r7]
 5126 004c 5B68     		ldr	r3, [r3, #4]
 5127              		.loc 2 1924 8
 5128 004e 092B     		cmp	r3, #9
 5129 0050 79D1     		bne	.L317
1925:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1926:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1927:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* software start.                                                      */
1928:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1929:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1930:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       software start.                                                */
1931:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 5130              		.loc 2 1931 26
ARM GAS  /tmp/cc6jq3Wn.s 			page 248


 5131 0052 3B68     		ldr	r3, [r7]
 5132 0054 9B6A     		ldr	r3, [r3, #40]
 5133              		.loc 2 1931 10
 5134 0056 002B     		cmp	r3, #0
 5135 0058 10D0     		beq	.L315
1932:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
 5136              		.loc 2 1933 44
 5137 005a 3B68     		ldr	r3, [r7]
 5138 005c 1B68     		ldr	r3, [r3]
 5139 005e 9B0E     		lsrs	r3, r3, #26
 5140 0060 5B02     		lsls	r3, r3, #9
 5141 0062 03F47852 		and	r2, r3, #15872
1934:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 5142              		.loc 2 1934 62
 5143 0066 3B68     		ldr	r3, [r7]
 5144 0068 9B6A     		ldr	r3, [r3, #40]
 5145              		.loc 2 1934 86
 5146 006a 03F07C03 		and	r3, r3, #124
 5147              		.loc 2 1934 44
 5148 006e 1A43     		orrs	r2, r2, r3
1935:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
 5149              		.loc 2 1935 61
 5150 0070 3B68     		ldr	r3, [r7]
 5151 0072 DB6A     		ldr	r3, [r3, #44]
1933:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 5152              		.loc 2 1933 41
 5153 0074 1343     		orrs	r3, r3, r2
 5154 0076 C7F8E030 		str	r3, [r7, #224]
 5155 007a 07E0     		b	.L316
 5156              	.L315:
1936:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                           );
1937:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1938:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1939:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1940:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
 5157              		.loc 2 1940 44
 5158 007c 3B68     		ldr	r3, [r7]
 5159 007e 1B68     		ldr	r3, [r3]
 5160 0080 9B0E     		lsrs	r3, r3, #26
 5161 0082 5B02     		lsls	r3, r3, #9
 5162              		.loc 2 1940 41
 5163 0084 03F47853 		and	r3, r3, #15872
 5164 0088 C7F8E030 		str	r3, [r7, #224]
 5165              	.L316:
1941:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1942:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1943:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 5166              		.loc 2 1943 7
 5167 008c 7B68     		ldr	r3, [r7, #4]
 5168 008e 1B68     		ldr	r3, [r3]
 5169 0090 DA6C     		ldr	r2, [r3, #76]
 5170 0092 814B     		ldr	r3, .L448+4
 5171 0094 1340     		ands	r3, r3, r2
 5172 0096 7A68     		ldr	r2, [r7, #4]
 5173 0098 1268     		ldr	r2, [r2]
 5174 009a D7F8E010 		ldr	r1, [r7, #224]
ARM GAS  /tmp/cc6jq3Wn.s 			page 249


 5175 009e 0B43     		orrs	r3, r3, r1
 5176 00a0 D364     		str	r3, [r2, #76]
1944:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* For debug and informative reasons, hadc handle saves JSQR setting */
1945:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 5177              		.loc 2 1945 42
 5178 00a2 7B68     		ldr	r3, [r7, #4]
 5179 00a4 D7F8E020 		ldr	r2, [r7, #224]
 5180 00a8 DA65     		str	r2, [r3, #92]
1924:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 5181              		.loc 2 1924 8
 5182 00aa 4CE0     		b	.L317
 5183              	.L313:
1946:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1947:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1948:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1949:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1950:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1951:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Case of scan mode enabled, several channels to set into injected group */
1952:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* sequencer.                                                             */
1953:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*                                                                        */
1954:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to define injected context register JSQR over successive     */
1955:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* calls of this function, for each injected channel rank:                */
1956:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Start new context and set parameters related to all injected        */
1957:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    channels: injected sequence length and trigger.                     */
1958:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1959:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
1960:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*   call of the context under setting                                    */
1961:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
 5184              		.loc 2 1961 30
 5185 00ac 7B68     		ldr	r3, [r7, #4]
 5186 00ae 1B6E     		ldr	r3, [r3, #96]
 5187              		.loc 2 1961 8
 5188 00b0 002B     		cmp	r3, #0
 5189 00b2 1DD1     		bne	.L318
1962:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1963:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Initialize number of channels that will be configured on the context */
1964:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  being built                                                         */
1965:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 5190              		.loc 2 1965 59
 5191 00b4 3B68     		ldr	r3, [r7]
 5192 00b6 1A6A     		ldr	r2, [r3, #32]
 5193              		.loc 2 1965 42
 5194 00b8 7B68     		ldr	r3, [r7, #4]
 5195 00ba 1A66     		str	r2, [r3, #96]
1966:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
1967:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          call, this context will be written in JSQR register at the last call.
1968:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          At this point, the context is merely reset  */
1969:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 5196              		.loc 2 1969 42
 5197 00bc 7B68     		ldr	r3, [r7, #4]
 5198 00be 0022     		movs	r2, #0
 5199 00c0 DA65     		str	r2, [r3, #92]
1970:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1971:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of context register JSQR:                              */
1972:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - number of ranks in injected group sequencer                       */
1973:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - external trigger to start conversion                              */
1974:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - external trigger polarity                                         */
ARM GAS  /tmp/cc6jq3Wn.s 			page 250


1975:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1976:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1977:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* software start.                                                      */
1978:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1979:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1980:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       software start.                                                */
1981:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 5200              		.loc 2 1981 26
 5201 00c2 3B68     		ldr	r3, [r7]
 5202 00c4 9B6A     		ldr	r3, [r3, #40]
 5203              		.loc 2 1981 10
 5204 00c6 002B     		cmp	r3, #0
 5205 00c8 0DD0     		beq	.L319
1982:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 5206              		.loc 2 1983 60
 5207 00ca 3B68     		ldr	r3, [r7]
 5208 00cc 1B6A     		ldr	r3, [r3, #32]
 5209              		.loc 2 1983 86
 5210 00ce 5A1E     		subs	r2, r3, #1
1984:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 5211              		.loc 2 1984 62
 5212 00d0 3B68     		ldr	r3, [r7]
 5213 00d2 9B6A     		ldr	r3, [r3, #40]
 5214              		.loc 2 1984 86
 5215 00d4 03F07C03 		and	r3, r3, #124
 5216              		.loc 2 1984 44
 5217 00d8 1A43     		orrs	r2, r2, r3
1985:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
 5218              		.loc 2 1985 61
 5219 00da 3B68     		ldr	r3, [r7]
 5220 00dc DB6A     		ldr	r3, [r3, #44]
1983:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 5221              		.loc 2 1983 41
 5222 00de 1343     		orrs	r3, r3, r2
 5223 00e0 C7F8E030 		str	r3, [r7, #224]
 5224 00e4 04E0     		b	.L318
 5225              	.L319:
1986:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                           );
1987:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1988:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1989:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1990:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 5226              		.loc 2 1990 60
 5227 00e6 3B68     		ldr	r3, [r7]
 5228 00e8 1B6A     		ldr	r3, [r3, #32]
 5229              		.loc 2 1990 41
 5230 00ea 013B     		subs	r3, r3, #1
 5231 00ec C7F8E030 		str	r3, [r7, #224]
 5232              	.L318:
1991:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1992:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1993:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1994:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1995:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Continue setting of context under definition with parameter       */
1996:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    related to each channel: channel rank sequence                    */
1997:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear the old JSQx bits for the selected rank */
ARM GAS  /tmp/cc6jq3Wn.s 			page 251


1998:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
1999:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2000:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set the JSQx bits for the selected rank */
2001:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjecte
 5233              		.loc 2 2001 40
 5234 00f0 3B68     		ldr	r3, [r7]
 5235 00f2 1B68     		ldr	r3, [r3]
 5236 00f4 9B0E     		lsrs	r3, r3, #26
 5237 00f6 03F01F02 		and	r2, r3, #31
 5238 00fa 3B68     		ldr	r3, [r7]
 5239 00fc 5B68     		ldr	r3, [r3, #4]
 5240 00fe 03F01F03 		and	r3, r3, #31
 5241 0102 02FA03F3 		lsl	r3, r2, r3
 5242              		.loc 2 2001 37
 5243 0106 D7F8E020 		ldr	r2, [r7, #224]
 5244 010a 1343     		orrs	r3, r3, r2
 5245 010c C7F8E030 		str	r3, [r7, #224]
2002:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2003:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Decrease channel count  */
2004:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->InjectionConfig.ChannelCount--;
 5246              		.loc 2 2004 26
 5247 0110 7B68     		ldr	r3, [r7, #4]
 5248 0112 1B6E     		ldr	r3, [r3, #96]
 5249              		.loc 2 2004 39
 5250 0114 5A1E     		subs	r2, r3, #1
 5251 0116 7B68     		ldr	r3, [r7, #4]
 5252 0118 1A66     		str	r2, [r3, #96]
2005:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2006:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
2007:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           call, aggregate the setting to those already built during the previous
2008:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
2009:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 5253              		.loc 2 2009 40
 5254 011a 7B68     		ldr	r3, [r7, #4]
 5255 011c DA6D     		ldr	r2, [r3, #92]
 5256 011e D7F8E030 		ldr	r3, [r7, #224]
 5257 0122 1A43     		orrs	r2, r2, r3
 5258 0124 7B68     		ldr	r3, [r7, #4]
 5259 0126 DA65     		str	r2, [r3, #92]
2010:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2011:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 4. End of context setting: if this is the last channel set, then write context
2012:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         into register JSQR and make it enter into queue                   */
2013:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
 5260              		.loc 2 2013 30
 5261 0128 7B68     		ldr	r3, [r7, #4]
 5262 012a 1B6E     		ldr	r3, [r3, #96]
 5263              		.loc 2 2013 8
 5264 012c 002B     		cmp	r3, #0
 5265 012e 0AD1     		bne	.L317
2014:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2015:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 5266              		.loc 2 2015 7
 5267 0130 7B68     		ldr	r3, [r7, #4]
 5268 0132 1B68     		ldr	r3, [r3]
 5269 0134 DA6C     		ldr	r2, [r3, #76]
 5270 0136 584B     		ldr	r3, .L448+4
 5271 0138 1340     		ands	r3, r3, r2
ARM GAS  /tmp/cc6jq3Wn.s 			page 252


 5272 013a 7A68     		ldr	r2, [r7, #4]
 5273 013c D16D     		ldr	r1, [r2, #92]
 5274 013e 7A68     		ldr	r2, [r7, #4]
 5275 0140 1268     		ldr	r2, [r2]
 5276 0142 0B43     		orrs	r3, r3, r1
 5277 0144 D364     		str	r3, [r2, #76]
 5278              	.L317:
2016:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2017:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2018:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2019:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2020:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2021:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on injected group:                                   */
2022:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Injected context queue: Queue disable (active context is kept) or     */
2023:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    enable (context decremented, up to 2 contexts queued)                 */
2024:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
2025:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    mode is disabled.                                                     */
2026:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 5279              		.loc 2 2026 7
 5280 0146 7B68     		ldr	r3, [r7, #4]
 5281 0148 1B68     		ldr	r3, [r3]
 5282 014a 1846     		mov	r0, r3
 5283 014c FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5284 0150 0346     		mov	r3, r0
 5285              		.loc 2 2026 6
 5286 0152 002B     		cmp	r3, #0
 5287 0154 58D1     		bne	.L320
2027:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2028:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2029:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance != ADC3)
2030:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2031:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* ADC channels preselection */
2032:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->Inject
2033:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2034:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #else
2035:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* ADC channels preselection */
2036:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChann
 5288              		.loc 2 2036 39
 5289 0156 3B68     		ldr	r3, [r7]
 5290 0158 1B68     		ldr	r3, [r3]
 5291 015a C3F31303 		ubfx	r3, r3, #0, #20
 5292              		.loc 2 2036 35
 5293 015e 002B     		cmp	r3, #0
 5294 0160 08D1     		bne	.L321
 5295              		.loc 2 2036 39 discriminator 1
 5296 0162 3B68     		ldr	r3, [r7]
 5297 0164 1B68     		ldr	r3, [r3]
 5298 0166 9B0E     		lsrs	r3, r3, #26
 5299 0168 03F01F03 		and	r3, r3, #31
 5300              		.loc 2 2036 35 discriminator 1
 5301 016c 0122     		movs	r2, #1
 5302 016e 02FA03F3 		lsl	r3, r2, r3
 5303 0172 1DE0     		b	.L322
 5304              	.L321:
 5305              		.loc 2 2036 39 discriminator 2
 5306 0174 3B68     		ldr	r3, [r7]
 5307 0176 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6jq3Wn.s 			page 253


 5308 0178 C7F8C830 		str	r3, [r7, #200]
 5309              	.LBB67:
 5310              	.LBB68:
 5311              		.file 3 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  /tmp/cc6jq3Wn.s 			page 254


  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  /tmp/cc6jq3Wn.s 			page 255


 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc6jq3Wn.s 			page 256


 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6jq3Wn.s 			page 257


 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 258


 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 259


 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /tmp/cc6jq3Wn.s 			page 260


 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 261


 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6jq3Wn.s 			page 262


 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
ARM GAS  /tmp/cc6jq3Wn.s 			page 263


 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6jq3Wn.s 			page 264


 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6jq3Wn.s 			page 265


 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc6jq3Wn.s 			page 266


 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp/cc6jq3Wn.s 			page 267


 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6jq3Wn.s 			page 268


 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6jq3Wn.s 			page 269


 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/cc6jq3Wn.s 			page 270


 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc6jq3Wn.s 			page 271


1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 5312              		.loc 3 1055 4 discriminator 2
 5313 017c D7F8C830 		ldr	r3, [r7, #200]
 5314              		.syntax unified
 5315              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5316 0180 93FAA3F3 		rbit r3, r3
 5317              	@ 0 "" 2
 5318              		.thumb
 5319              		.syntax unified
 5320 0184 C7F8C430 		str	r3, [r7, #196]
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 5321              		.loc 3 1068 10 discriminator 2
 5322 0188 D7F8C430 		ldr	r3, [r7, #196]
ARM GAS  /tmp/cc6jq3Wn.s 			page 272


 5323 018c C7F8CC30 		str	r3, [r7, #204]
 5324              	.LBE68:
 5325              	.LBE67:
 5326              	.LBB69:
 5327              	.LBB70:
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
 5328              		.loc 3 1089 6 discriminator 2
 5329 0190 D7F8CC30 		ldr	r3, [r7, #204]
 5330 0194 002B     		cmp	r3, #0
 5331 0196 01D1     		bne	.L324
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
 5332              		.loc 3 1091 12
 5333 0198 2023     		movs	r3, #32
 5334 019a 04E0     		b	.L325
 5335              	.L324:
1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 5336              		.loc 3 1093 10
 5337 019c D7F8CC30 		ldr	r3, [r7, #204]
 5338 01a0 B3FA83F3 		clz	r3, r3
 5339 01a4 DBB2     		uxtb	r3, r3
 5340              	.L325:
 5341              	.LBE70:
 5342              	.LBE69:
 5343              		.loc 2 2036 104
 5344 01a6 03F01F03 		and	r3, r3, #31
 5345              		.loc 2 2036 35
 5346 01aa 0122     		movs	r2, #1
 5347 01ac 02FA03F3 		lsl	r3, r2, r3
 5348              	.L322:
 5349              		.loc 2 2036 9 discriminator 4
 5350 01b0 7A68     		ldr	r2, [r7, #4]
 5351 01b2 1268     		ldr	r2, [r2]
 5352              		.loc 2 2036 27 discriminator 4
 5353 01b4 D169     		ldr	r1, [r2, #28]
 5354              		.loc 2 2036 9 discriminator 4
ARM GAS  /tmp/cc6jq3Wn.s 			page 273


 5355 01b6 7A68     		ldr	r2, [r7, #4]
 5356 01b8 1268     		ldr	r2, [r2]
 5357              		.loc 2 2036 27 discriminator 4
 5358 01ba 0B43     		orrs	r3, r3, r1
 5359 01bc D361     		str	r3, [r2, #28]
2037:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2038:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2039:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If auto-injected mode is disabled: no constraint                       */
2040:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == DISABLE)
 5360              		.loc 2 2040 24 discriminator 4
 5361 01be 3B68     		ldr	r3, [r7]
 5362 01c0 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 5363              		.loc 2 2040 8 discriminator 4
 5364 01c4 002B     		cmp	r3, #0
 5365 01c6 12D1     		bne	.L326
2041:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2042:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
 5366              		.loc 2 2042 7
 5367 01c8 7B68     		ldr	r3, [r7, #4]
 5368 01ca 1B68     		ldr	r3, [r3]
 5369 01cc DB68     		ldr	r3, [r3, #12]
 5370 01ce 23F44011 		bic	r1, r3, #3145728
 5371 01d2 3B68     		ldr	r3, [r7]
 5372 01d4 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 5373 01d8 5A05     		lsls	r2, r3, #21
 5374 01da 3B68     		ldr	r3, [r7]
 5375 01dc 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 5376 01e0 1B05     		lsls	r3, r3, #20
 5377 01e2 1A43     		orrs	r2, r2, r3
 5378 01e4 7B68     		ldr	r3, [r7, #4]
 5379 01e6 1B68     		ldr	r3, [r3]
 5380 01e8 0A43     		orrs	r2, r2, r1
 5381 01ea DA60     		str	r2, [r3, #12]
 5382 01ec 0CE0     		b	.L320
 5383              	.L326:
2043:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
2044:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext)    
2045:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_DISCCONTINUOUS((uint32_t)sConfigInjected->InjectedDiscontinuousCon
2046:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2047:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If auto-injected mode is enabled: Injected discontinuous setting is    */
2048:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* discarded.                                                             */
2049:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2050:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2051:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
 5384              		.loc 2 2051 7
 5385 01ee 7B68     		ldr	r3, [r7, #4]
 5386 01f0 1B68     		ldr	r3, [r3]
 5387 01f2 DB68     		ldr	r3, [r3, #12]
 5388 01f4 23F44011 		bic	r1, r3, #3145728
 5389 01f8 3B68     		ldr	r3, [r7]
 5390 01fa 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 5391 01fe 5A05     		lsls	r2, r3, #21
 5392 0200 7B68     		ldr	r3, [r7, #4]
 5393 0202 1B68     		ldr	r3, [r3]
 5394 0204 0A43     		orrs	r2, r2, r1
 5395 0206 DA60     		str	r2, [r3, #12]
 5396              	.L320:
ARM GAS  /tmp/cc6jq3Wn.s 			page 274


2052:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
2053:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext));
2054:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2055:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2056:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2057:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2058:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2059:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2060:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on regular and injected groups:                      */
2061:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Automatic injected conversion: can be enabled if injected group       */
2062:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    external triggers are disabled.                                       */
2063:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Channel sampling time                                                 */
2064:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Channel offset                                                        */
2065:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 5397              		.loc 2 2065 44
 5398 0208 7B68     		ldr	r3, [r7, #4]
 5399 020a 1B68     		ldr	r3, [r3]
 5400 020c 1846     		mov	r0, r3
 5401 020e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 5402 0212 C7F8DC00 		str	r0, [r7, #220]
2066:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 5403              		.loc 2 2066 45
 5404 0216 7B68     		ldr	r3, [r7, #4]
 5405 0218 1B68     		ldr	r3, [r3]
 5406 021a 1846     		mov	r0, r3
 5407 021c FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5408 0220 C7F8D800 		str	r0, [r7, #216]
2067:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2068:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 5409              		.loc 2 2068 6
 5410 0224 D7F8DC30 		ldr	r3, [r7, #220]
 5411 0228 002B     		cmp	r3, #0
 5412 022a 40F03E82 		bne	.L327
2069:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 5413              		.loc 2 2069 7
 5414 022e D7F8D830 		ldr	r3, [r7, #216]
 5415 0232 002B     		cmp	r3, #0
 5416 0234 40F03982 		bne	.L327
2070:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2071:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2072:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If injected group external triggers are disabled (set to injected      */
2073:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* software start): no constraint                                         */
2074:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 5417              		.loc 2 2074 25
 5418 0238 3B68     		ldr	r3, [r7]
 5419 023a 9B6A     		ldr	r3, [r3, #40]
 5420              		.loc 2 2074 8
 5421 023c 002B     		cmp	r3, #0
 5422 023e 03D0     		beq	.L328
2075:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 5423              		.loc 2 2075 28
 5424 0240 3B68     		ldr	r3, [r7]
 5425 0242 DB6A     		ldr	r3, [r3, #44]
 5426              		.loc 2 2075 9
 5427 0244 002B     		cmp	r3, #0
 5428 0246 16D1     		bne	.L329
 5429              	.L328:
ARM GAS  /tmp/cc6jq3Wn.s 			page 275


2076:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
 5430              		.loc 2 2077 26
 5431 0248 3B68     		ldr	r3, [r7]
 5432 024a 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 5433              		.loc 2 2077 10
 5434 024e 012B     		cmp	r3, #1
 5435 0250 08D1     		bne	.L330
2078:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2079:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 5436              		.loc 2 2079 9
 5437 0252 7B68     		ldr	r3, [r7, #4]
 5438 0254 1B68     		ldr	r3, [r3]
 5439 0256 DA68     		ldr	r2, [r3, #12]
 5440 0258 7B68     		ldr	r3, [r7, #4]
 5441 025a 1B68     		ldr	r3, [r3]
 5442 025c 42F00072 		orr	r2, r2, #33554432
 5443 0260 DA60     		str	r2, [r3, #12]
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 5444              		.loc 2 2077 10
 5445 0262 23E0     		b	.L332
 5446              	.L330:
2080:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2081:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2082:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2083:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 5447              		.loc 2 2083 9
 5448 0264 7B68     		ldr	r3, [r7, #4]
 5449 0266 1B68     		ldr	r3, [r3]
 5450 0268 DA68     		ldr	r2, [r3, #12]
 5451 026a 7B68     		ldr	r3, [r7, #4]
 5452 026c 1B68     		ldr	r3, [r3]
 5453 026e 22F00072 		bic	r2, r2, #33554432
 5454 0272 DA60     		str	r2, [r3, #12]
2077:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 5455              		.loc 2 2077 10
 5456 0274 1AE0     		b	.L332
 5457              	.L329:
2084:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2085:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2086:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If Automatic injected conversion was intended to be set and could not  */
2087:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* due to injected group external triggers enabled, error is reported.    */
2088:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2089:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2090:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
 5458              		.loc 2 2090 26
 5459 0276 3B68     		ldr	r3, [r7]
 5460 0278 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 5461              		.loc 2 2090 10
 5462 027c 012B     		cmp	r3, #1
 5463 027e 0DD1     		bne	.L333
2091:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2092:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
2093:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5464              		.loc 2 2093 9
 5465 0280 7B68     		ldr	r3, [r7, #4]
 5466 0282 5B6D     		ldr	r3, [r3, #84]
ARM GAS  /tmp/cc6jq3Wn.s 			page 276


 5467 0284 43F02002 		orr	r2, r3, #32
 5468 0288 7B68     		ldr	r3, [r7, #4]
 5469 028a 5A65     		str	r2, [r3, #84]
2094:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2095:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 5470              		.loc 2 2095 24
 5471 028c 0123     		movs	r3, #1
 5472 028e 87F8E730 		strb	r3, [r7, #231]
 5473 0292 0BE0     		b	.L332
 5474              	.L449:
 5475              		.align	2
 5476              	.L448:
 5477 0294 0000FF47 		.word	1207894016
 5478 0298 00401004 		.word	68173824
 5479              	.L333:
2096:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2097:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2098:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2099:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 5480              		.loc 2 2099 9
 5481 029c 7B68     		ldr	r3, [r7, #4]
 5482 029e 1B68     		ldr	r3, [r3]
 5483 02a0 DA68     		ldr	r2, [r3, #12]
 5484 02a2 7B68     		ldr	r3, [r7, #4]
 5485 02a4 1B68     		ldr	r3, [r3]
 5486 02a6 22F00072 		bic	r2, r2, #33554432
 5487 02aa DA60     		str	r2, [r3, #12]
 5488              	.L332:
2100:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2101:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2102:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2103:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjecOversamplingMode == ENABLE)
 5489              		.loc 2 2103 24
 5490 02ac 3B68     		ldr	r3, [r7]
 5491 02ae 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 5492              		.loc 2 2103 8
 5493 02b2 012B     		cmp	r3, #1
 5494 02b4 12D1     		bne	.L334
2104:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2105:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC_OVERSAMPLING_RATIO(sConfigInjected->InjecOversampling.Ratio));
2106:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC_RIGHT_BIT_SHIFT(sConfigInjected->InjecOversampling.RightBitShift));
2107:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2108:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  JOVSE must be reset in case of triggered regular mode  */
2109:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(!(READ_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_TROVS) == (ADC_CFG
2110:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2111:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of Injected Oversampler:                                 */
2112:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Oversampling Ratio                                                  */
2113:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Right bit shift                                                     */
2114:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2115:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable OverSampling mode */
2116:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR2,
 5495              		.loc 2 2116 7
 5496 02b6 7B68     		ldr	r3, [r7, #4]
 5497 02b8 1B68     		ldr	r3, [r3]
 5498 02ba 1A69     		ldr	r2, [r3, #16]
 5499 02bc B44B     		ldr	r3, .L450
 5500 02be 1340     		ands	r3, r3, r2
ARM GAS  /tmp/cc6jq3Wn.s 			page 277


 5501 02c0 3A68     		ldr	r2, [r7]
 5502 02c2 526B     		ldr	r2, [r2, #52]
 5503 02c4 013A     		subs	r2, r2, #1
 5504 02c6 1104     		lsls	r1, r2, #16
 5505 02c8 3A68     		ldr	r2, [r7]
 5506 02ca 926B     		ldr	r2, [r2, #56]
 5507 02cc 0A43     		orrs	r2, r2, r1
 5508 02ce 1A43     		orrs	r2, r2, r3
 5509 02d0 7B68     		ldr	r3, [r7, #4]
 5510 02d2 1B68     		ldr	r3, [r3]
 5511 02d4 42F00202 		orr	r2, r2, #2
 5512 02d8 1A61     		str	r2, [r3, #16]
 5513 02da 07E0     		b	.L335
 5514              	.L334:
2117:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE |
2118:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSR  |
2119:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSS,
2120:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE                                  |
2121:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                 ((sConfigInjected->InjecOversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) |
2122:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  sConfigInjected->InjecOversampling.RightBitShift
2123:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                 );
2124:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2125:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2126:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2127:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Disable Regular OverSampling */
2128:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 5515              		.loc 2 2128 7
 5516 02dc 7B68     		ldr	r3, [r7, #4]
 5517 02de 1B68     		ldr	r3, [r3]
 5518 02e0 1A69     		ldr	r2, [r3, #16]
 5519 02e2 7B68     		ldr	r3, [r7, #4]
 5520 02e4 1B68     		ldr	r3, [r3]
 5521 02e6 22F00202 		bic	r2, r2, #2
 5522 02ea 1A61     		str	r2, [r3, #16]
 5523              	.L335:
2129:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2130:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2131:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set sampling time of the selected ADC channel */
2132:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected
 5524              		.loc 2 2132 5
 5525 02ec 7B68     		ldr	r3, [r7, #4]
 5526 02ee 1868     		ldr	r0, [r3]
 5527 02f0 3B68     		ldr	r3, [r7]
 5528 02f2 1968     		ldr	r1, [r3]
 5529 02f4 3B68     		ldr	r3, [r7]
 5530 02f6 9B68     		ldr	r3, [r3, #8]
 5531 02f8 1A46     		mov	r2, r3
 5532 02fa FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
2133:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2134:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configure the offset: offset enable/disable, channel, offset value */
2135:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2136:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Shift the offset with respect to the selected ADC resolution. */
2137:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2138:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2139:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC3)
2140:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2141:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
ARM GAS  /tmp/cc6jq3Wn.s 			page 278


2142:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2143:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2144:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2145:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2146:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 5533              		.loc 2 2146 26
 5534 02fe A54B     		ldr	r3, .L450+4
 5535 0300 1B68     		ldr	r3, [r3]
 5536 0302 03F07043 		and	r3, r3, #-268435456
 5537 0306 B3F1805F 		cmp	r3, #268435456
 5538 030a 0BD1     		bne	.L336
 5539              		.loc 2 2146 26 is_stmt 0 discriminator 1
 5540 030c 3B68     		ldr	r3, [r7]
 5541 030e 5A69     		ldr	r2, [r3, #20]
 5542 0310 7B68     		ldr	r3, [r7, #4]
 5543 0312 1B68     		ldr	r3, [r3]
 5544 0314 DB68     		ldr	r3, [r3, #12]
 5545 0316 9B08     		lsrs	r3, r3, #2
 5546 0318 03F00703 		and	r3, r3, #7
 5547 031c 5B00     		lsls	r3, r3, #1
 5548 031e 02FA03F3 		lsl	r3, r2, r3
 5549 0322 1DE0     		b	.L337
 5550              	.L336:
 5551              		.loc 2 2146 26 discriminator 2
 5552 0324 7B68     		ldr	r3, [r7, #4]
 5553 0326 1B68     		ldr	r3, [r3]
 5554 0328 DB68     		ldr	r3, [r3, #12]
 5555 032a 03F01003 		and	r3, r3, #16
 5556 032e 002B     		cmp	r3, #0
 5557 0330 0BD1     		bne	.L338
 5558              		.loc 2 2146 26 discriminator 4
 5559 0332 3B68     		ldr	r3, [r7]
 5560 0334 5A69     		ldr	r2, [r3, #20]
 5561 0336 7B68     		ldr	r3, [r7, #4]
 5562 0338 1B68     		ldr	r3, [r3]
 5563 033a DB68     		ldr	r3, [r3, #12]
 5564 033c 9B08     		lsrs	r3, r3, #2
 5565 033e 03F00703 		and	r3, r3, #7
 5566 0342 5B00     		lsls	r3, r3, #1
 5567 0344 02FA03F3 		lsl	r3, r2, r3
 5568 0348 0AE0     		b	.L337
 5569              	.L338:
 5570              		.loc 2 2146 26 discriminator 5
 5571 034a 3B68     		ldr	r3, [r7]
 5572 034c 5A69     		ldr	r2, [r3, #20]
 5573 034e 7B68     		ldr	r3, [r7, #4]
 5574 0350 1B68     		ldr	r3, [r3]
 5575 0352 DB68     		ldr	r3, [r3, #12]
 5576 0354 9B08     		lsrs	r3, r3, #2
 5577 0356 03F00403 		and	r3, r3, #4
 5578 035a 5B00     		lsls	r3, r3, #1
 5579 035c 02FA03F3 		lsl	r3, r2, r3
 5580              	.L337:
 5581              		.loc 2 2146 24 is_stmt 1 discriminator 8
 5582 0360 C7F8D430 		str	r3, [r7, #212]
2147:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2148:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     
ARM GAS  /tmp/cc6jq3Wn.s 			page 279


2149:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 5583              		.loc 2 2149 24 discriminator 8
 5584 0364 3B68     		ldr	r3, [r7]
 5585 0366 1B69     		ldr	r3, [r3, #16]
 5586              		.loc 2 2149 8 discriminator 8
 5587 0368 042B     		cmp	r3, #4
 5588 036a 19D0     		beq	.L340
2150:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2151:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC selected offset number */
2152:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->Inje
 5589              		.loc 2 2152 7
 5590 036c 7B68     		ldr	r3, [r7, #4]
 5591 036e 1868     		ldr	r0, [r3]
 5592 0370 3B68     		ldr	r3, [r7]
 5593 0372 1969     		ldr	r1, [r3, #16]
 5594 0374 3B68     		ldr	r3, [r7]
 5595 0376 1A68     		ldr	r2, [r3]
 5596 0378 D7F8D430 		ldr	r3, [r7, #212]
 5597 037c FFF7FEFF 		bl	LL_ADC_SetOffset
2153:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2154:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2155:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (hadc->Instance == ADC3)
2156:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2157:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC selected offset sign & saturation */
2158:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected
2159:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigI
2160:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2161:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2162:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2163:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2164:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC selected offset signed saturation */
2165:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sC
 5598              		.loc 2 2165 9
 5599 0380 7B68     		ldr	r3, [r7, #4]
 5600 0382 1868     		ldr	r0, [r3]
 5601 0384 3B68     		ldr	r3, [r7]
 5602 0386 1969     		ldr	r1, [r3, #16]
 5603              		.loc 2 2165 113
 5604 0388 3B68     		ldr	r3, [r7]
 5605 038a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 5606              		.loc 2 2165 9
 5607 038c 012B     		cmp	r3, #1
 5608 038e 02D1     		bne	.L341
 5609              		.loc 2 2165 9 is_stmt 0 discriminator 1
 5610 0390 4FF00043 		mov	r3, #-2147483648
 5611 0394 00E0     		b	.L342
 5612              	.L341:
 5613              		.loc 2 2165 9 discriminator 2
 5614 0396 0023     		movs	r3, #0
 5615              	.L342:
 5616              		.loc 2 2165 9 discriminator 4
 5617 0398 1A46     		mov	r2, r3
 5618 039a FFF7FEFF 		bl	LL_ADC_SetOffsetSignedSaturation
 5619 039e 84E1     		b	.L327
 5620              	.L340:
2166:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2167:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 280


2168:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2169:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2170:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2171:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2172:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (hadc->Instance == ADC3)
2173:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2174:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2175:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2176:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)
2177:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2178:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2179:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2180:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)
2181:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2182:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2183:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2184:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)
2185:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2186:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2187:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2188:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)
2189:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2190:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2191:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2192:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2193:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2194:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2195:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2196:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2197:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2198:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)
 5621              		.loc 2 2198 13 is_stmt 1
 5622 03a0 7B68     		ldr	r3, [r7, #4]
 5623 03a2 1B68     		ldr	r3, [r3]
 5624 03a4 0021     		movs	r1, #0
 5625 03a6 1846     		mov	r0, r3
 5626 03a8 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5627 03ac 0346     		mov	r3, r0
 5628 03ae C3F31303 		ubfx	r3, r3, #0, #20
 5629 03b2 002B     		cmp	r3, #0
 5630 03b4 0AD1     		bne	.L343
 5631              		.loc 2 2198 13 is_stmt 0 discriminator 1
 5632 03b6 7B68     		ldr	r3, [r7, #4]
 5633 03b8 1B68     		ldr	r3, [r3]
 5634 03ba 0021     		movs	r1, #0
 5635 03bc 1846     		mov	r0, r3
 5636 03be FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5637 03c2 0346     		mov	r3, r0
 5638 03c4 9B0E     		lsrs	r3, r3, #26
 5639 03c6 03F01F02 		and	r2, r3, #31
 5640 03ca 1EE0     		b	.L344
 5641              	.L343:
 5642              		.loc 2 2198 13 discriminator 2
 5643 03cc 7B68     		ldr	r3, [r7, #4]
 5644 03ce 1B68     		ldr	r3, [r3]
 5645 03d0 0021     		movs	r1, #0
 5646 03d2 1846     		mov	r0, r3
ARM GAS  /tmp/cc6jq3Wn.s 			page 281


 5647 03d4 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5648 03d8 0346     		mov	r3, r0
 5649 03da C7F8BC30 		str	r3, [r7, #188]
 5650              	.LBB71:
 5651              	.LBB72:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5652              		.loc 3 1055 4 is_stmt 1 discriminator 2
 5653 03de D7F8BC30 		ldr	r3, [r7, #188]
 5654              		.syntax unified
 5655              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5656 03e2 93FAA3F3 		rbit r3, r3
 5657              	@ 0 "" 2
 5658              		.thumb
 5659              		.syntax unified
 5660 03e6 C7F8B830 		str	r3, [r7, #184]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5661              		.loc 3 1068 10 discriminator 2
 5662 03ea D7F8B830 		ldr	r3, [r7, #184]
 5663 03ee C7F8C030 		str	r3, [r7, #192]
 5664              	.LBE72:
 5665              	.LBE71:
 5666              	.LBB73:
 5667              	.LBB74:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5668              		.loc 3 1089 6 discriminator 2
 5669 03f2 D7F8C030 		ldr	r3, [r7, #192]
 5670 03f6 002B     		cmp	r3, #0
 5671 03f8 01D1     		bne	.L346
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5672              		.loc 3 1091 12
 5673 03fa 2023     		movs	r3, #32
 5674 03fc 04E0     		b	.L347
 5675              	.L346:
 5676              		.loc 3 1093 10
 5677 03fe D7F8C030 		ldr	r3, [r7, #192]
 5678 0402 B3FA83F3 		clz	r3, r3
 5679 0406 DBB2     		uxtb	r3, r3
 5680              	.L347:
 5681              	.LBE74:
 5682              	.LBE73:
 5683              		.loc 2 2198 13
 5684 0408 1A46     		mov	r2, r3
 5685              	.L344:
 5686              		.loc 2 2198 105 discriminator 4
 5687 040a 3B68     		ldr	r3, [r7]
 5688 040c 1B68     		ldr	r3, [r3]
 5689 040e C3F31303 		ubfx	r3, r3, #0, #20
 5690 0412 002B     		cmp	r3, #0
 5691 0414 05D1     		bne	.L348
 5692              		.loc 2 2198 105 is_stmt 0 discriminator 5
 5693 0416 3B68     		ldr	r3, [r7]
 5694 0418 1B68     		ldr	r3, [r3]
 5695 041a 9B0E     		lsrs	r3, r3, #26
 5696 041c 03F01F03 		and	r3, r3, #31
 5697 0420 18E0     		b	.L349
 5698              	.L348:
 5699              		.loc 2 2198 105 discriminator 6
ARM GAS  /tmp/cc6jq3Wn.s 			page 282


 5700 0422 3B68     		ldr	r3, [r7]
 5701 0424 1B68     		ldr	r3, [r3]
 5702 0426 C7F8B030 		str	r3, [r7, #176]
 5703              	.LBB75:
 5704              	.LBB76:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5705              		.loc 3 1055 4 is_stmt 1 discriminator 6
 5706 042a D7F8B030 		ldr	r3, [r7, #176]
 5707              		.syntax unified
 5708              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5709 042e 93FAA3F3 		rbit r3, r3
 5710              	@ 0 "" 2
 5711              		.thumb
 5712              		.syntax unified
 5713 0432 C7F8AC30 		str	r3, [r7, #172]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5714              		.loc 3 1068 10 discriminator 6
 5715 0436 D7F8AC30 		ldr	r3, [r7, #172]
 5716 043a C7F8B430 		str	r3, [r7, #180]
 5717              	.LBE76:
 5718              	.LBE75:
 5719              	.LBB77:
 5720              	.LBB78:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5721              		.loc 3 1089 6 discriminator 6
 5722 043e D7F8B430 		ldr	r3, [r7, #180]
 5723 0442 002B     		cmp	r3, #0
 5724 0444 01D1     		bne	.L351
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5725              		.loc 3 1091 12
 5726 0446 2023     		movs	r3, #32
 5727 0448 04E0     		b	.L349
 5728              	.L351:
 5729              		.loc 3 1093 10
 5730 044a D7F8B430 		ldr	r3, [r7, #180]
 5731 044e B3FA83F3 		clz	r3, r3
 5732 0452 DBB2     		uxtb	r3, r3
 5733              	.L349:
 5734              	.LBE78:
 5735              	.LBE77:
 5736              		.loc 2 2198 12 discriminator 8
 5737 0454 9A42     		cmp	r2, r3
 5738 0456 07D1     		bne	.L353
2199:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2200:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_AD
 5739              		.loc 2 2200 11
 5740 0458 7B68     		ldr	r3, [r7, #4]
 5741 045a 1868     		ldr	r0, [r3]
 5742 045c 3B68     		ldr	r3, [r7]
 5743 045e 1A68     		ldr	r2, [r3]
 5744 0460 0023     		movs	r3, #0
 5745 0462 0021     		movs	r1, #0
 5746 0464 FFF7FEFF 		bl	LL_ADC_SetOffset
 5747              	.L353:
2201:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2202:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)
 5748              		.loc 2 2202 13
ARM GAS  /tmp/cc6jq3Wn.s 			page 283


 5749 0468 7B68     		ldr	r3, [r7, #4]
 5750 046a 1B68     		ldr	r3, [r3]
 5751 046c 0121     		movs	r1, #1
 5752 046e 1846     		mov	r0, r3
 5753 0470 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5754 0474 0346     		mov	r3, r0
 5755 0476 C3F31303 		ubfx	r3, r3, #0, #20
 5756 047a 002B     		cmp	r3, #0
 5757 047c 0AD1     		bne	.L354
 5758              		.loc 2 2202 13 is_stmt 0 discriminator 1
 5759 047e 7B68     		ldr	r3, [r7, #4]
 5760 0480 1B68     		ldr	r3, [r3]
 5761 0482 0121     		movs	r1, #1
 5762 0484 1846     		mov	r0, r3
 5763 0486 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5764 048a 0346     		mov	r3, r0
 5765 048c 9B0E     		lsrs	r3, r3, #26
 5766 048e 03F01F02 		and	r2, r3, #31
 5767 0492 1EE0     		b	.L355
 5768              	.L354:
 5769              		.loc 2 2202 13 discriminator 2
 5770 0494 7B68     		ldr	r3, [r7, #4]
 5771 0496 1B68     		ldr	r3, [r3]
 5772 0498 0121     		movs	r1, #1
 5773 049a 1846     		mov	r0, r3
 5774 049c FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5775 04a0 0346     		mov	r3, r0
 5776 04a2 C7F8A430 		str	r3, [r7, #164]
 5777              	.LBB79:
 5778              	.LBB80:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5779              		.loc 3 1055 4 is_stmt 1 discriminator 2
 5780 04a6 D7F8A430 		ldr	r3, [r7, #164]
 5781              		.syntax unified
 5782              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5783 04aa 93FAA3F3 		rbit r3, r3
 5784              	@ 0 "" 2
 5785              		.thumb
 5786              		.syntax unified
 5787 04ae C7F8A030 		str	r3, [r7, #160]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5788              		.loc 3 1068 10 discriminator 2
 5789 04b2 D7F8A030 		ldr	r3, [r7, #160]
 5790 04b6 C7F8A830 		str	r3, [r7, #168]
 5791              	.LBE80:
 5792              	.LBE79:
 5793              	.LBB81:
 5794              	.LBB82:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5795              		.loc 3 1089 6 discriminator 2
 5796 04ba D7F8A830 		ldr	r3, [r7, #168]
 5797 04be 002B     		cmp	r3, #0
 5798 04c0 01D1     		bne	.L357
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5799              		.loc 3 1091 12
 5800 04c2 2023     		movs	r3, #32
 5801 04c4 04E0     		b	.L358
ARM GAS  /tmp/cc6jq3Wn.s 			page 284


 5802              	.L357:
 5803              		.loc 3 1093 10
 5804 04c6 D7F8A830 		ldr	r3, [r7, #168]
 5805 04ca B3FA83F3 		clz	r3, r3
 5806 04ce DBB2     		uxtb	r3, r3
 5807              	.L358:
 5808              	.LBE82:
 5809              	.LBE81:
 5810              		.loc 2 2202 13
 5811 04d0 1A46     		mov	r2, r3
 5812              	.L355:
 5813              		.loc 2 2202 105 discriminator 4
 5814 04d2 3B68     		ldr	r3, [r7]
 5815 04d4 1B68     		ldr	r3, [r3]
 5816 04d6 C3F31303 		ubfx	r3, r3, #0, #20
 5817 04da 002B     		cmp	r3, #0
 5818 04dc 05D1     		bne	.L359
 5819              		.loc 2 2202 105 is_stmt 0 discriminator 5
 5820 04de 3B68     		ldr	r3, [r7]
 5821 04e0 1B68     		ldr	r3, [r3]
 5822 04e2 9B0E     		lsrs	r3, r3, #26
 5823 04e4 03F01F03 		and	r3, r3, #31
 5824 04e8 18E0     		b	.L360
 5825              	.L359:
 5826              		.loc 2 2202 105 discriminator 6
 5827 04ea 3B68     		ldr	r3, [r7]
 5828 04ec 1B68     		ldr	r3, [r3]
 5829 04ee C7F89830 		str	r3, [r7, #152]
 5830              	.LBB83:
 5831              	.LBB84:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5832              		.loc 3 1055 4 is_stmt 1 discriminator 6
 5833 04f2 D7F89830 		ldr	r3, [r7, #152]
 5834              		.syntax unified
 5835              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5836 04f6 93FAA3F3 		rbit r3, r3
 5837              	@ 0 "" 2
 5838              		.thumb
 5839              		.syntax unified
 5840 04fa C7F89430 		str	r3, [r7, #148]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5841              		.loc 3 1068 10 discriminator 6
 5842 04fe D7F89430 		ldr	r3, [r7, #148]
 5843 0502 C7F89C30 		str	r3, [r7, #156]
 5844              	.LBE84:
 5845              	.LBE83:
 5846              	.LBB85:
 5847              	.LBB86:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5848              		.loc 3 1089 6 discriminator 6
 5849 0506 D7F89C30 		ldr	r3, [r7, #156]
 5850 050a 002B     		cmp	r3, #0
 5851 050c 01D1     		bne	.L362
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5852              		.loc 3 1091 12
 5853 050e 2023     		movs	r3, #32
 5854 0510 04E0     		b	.L360
ARM GAS  /tmp/cc6jq3Wn.s 			page 285


 5855              	.L362:
 5856              		.loc 3 1093 10
 5857 0512 D7F89C30 		ldr	r3, [r7, #156]
 5858 0516 B3FA83F3 		clz	r3, r3
 5859 051a DBB2     		uxtb	r3, r3
 5860              	.L360:
 5861              	.LBE86:
 5862              	.LBE85:
 5863              		.loc 2 2202 12 discriminator 8
 5864 051c 9A42     		cmp	r2, r3
 5865 051e 07D1     		bne	.L364
2203:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2204:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_AD
 5866              		.loc 2 2204 11
 5867 0520 7B68     		ldr	r3, [r7, #4]
 5868 0522 1868     		ldr	r0, [r3]
 5869 0524 3B68     		ldr	r3, [r7]
 5870 0526 1A68     		ldr	r2, [r3]
 5871 0528 0023     		movs	r3, #0
 5872 052a 0121     		movs	r1, #1
 5873 052c FFF7FEFF 		bl	LL_ADC_SetOffset
 5874              	.L364:
2205:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2206:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)
 5875              		.loc 2 2206 13
 5876 0530 7B68     		ldr	r3, [r7, #4]
 5877 0532 1B68     		ldr	r3, [r3]
 5878 0534 0221     		movs	r1, #2
 5879 0536 1846     		mov	r0, r3
 5880 0538 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5881 053c 0346     		mov	r3, r0
 5882 053e C3F31303 		ubfx	r3, r3, #0, #20
 5883 0542 002B     		cmp	r3, #0
 5884 0544 0AD1     		bne	.L365
 5885              		.loc 2 2206 13 is_stmt 0 discriminator 1
 5886 0546 7B68     		ldr	r3, [r7, #4]
 5887 0548 1B68     		ldr	r3, [r3]
 5888 054a 0221     		movs	r1, #2
 5889 054c 1846     		mov	r0, r3
 5890 054e FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5891 0552 0346     		mov	r3, r0
 5892 0554 9B0E     		lsrs	r3, r3, #26
 5893 0556 03F01F02 		and	r2, r3, #31
 5894 055a 23E0     		b	.L366
 5895              	.L365:
 5896              		.loc 2 2206 13 discriminator 2
 5897 055c 7B68     		ldr	r3, [r7, #4]
 5898 055e 1B68     		ldr	r3, [r3]
 5899 0560 0221     		movs	r1, #2
 5900 0562 1846     		mov	r0, r3
 5901 0564 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 5902 0568 0346     		mov	r3, r0
 5903 056a C7F88C30 		str	r3, [r7, #140]
 5904              	.LBB87:
 5905              	.LBB88:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5906              		.loc 3 1055 4 is_stmt 1 discriminator 2
ARM GAS  /tmp/cc6jq3Wn.s 			page 286


 5907 056e D7F88C30 		ldr	r3, [r7, #140]
 5908              		.syntax unified
 5909              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5910 0572 93FAA3F3 		rbit r3, r3
 5911              	@ 0 "" 2
 5912              		.thumb
 5913              		.syntax unified
 5914 0576 C7F88830 		str	r3, [r7, #136]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5915              		.loc 3 1068 10 discriminator 2
 5916 057a D7F88830 		ldr	r3, [r7, #136]
 5917 057e C7F89030 		str	r3, [r7, #144]
 5918              	.LBE88:
 5919              	.LBE87:
 5920              	.LBB89:
 5921              	.LBB90:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5922              		.loc 3 1089 6 discriminator 2
 5923 0582 D7F89030 		ldr	r3, [r7, #144]
 5924 0586 002B     		cmp	r3, #0
 5925 0588 06D1     		bne	.L368
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5926              		.loc 3 1091 12
 5927 058a 2023     		movs	r3, #32
 5928 058c 09E0     		b	.L369
 5929              	.L451:
 5930 058e 00BF     		.align	2
 5931              	.L450:
 5932 0590 1DFE00FC 		.word	-67043811
 5933 0594 0010005C 		.word	1543507968
 5934              	.L368:
 5935              		.loc 3 1093 10
 5936 0598 D7F89030 		ldr	r3, [r7, #144]
 5937 059c B3FA83F3 		clz	r3, r3
 5938 05a0 DBB2     		uxtb	r3, r3
 5939              	.L369:
 5940              	.LBE90:
 5941              	.LBE89:
 5942              		.loc 2 2206 13
 5943 05a2 1A46     		mov	r2, r3
 5944              	.L366:
 5945              		.loc 2 2206 105 discriminator 4
 5946 05a4 3B68     		ldr	r3, [r7]
 5947 05a6 1B68     		ldr	r3, [r3]
 5948 05a8 C3F31303 		ubfx	r3, r3, #0, #20
 5949 05ac 002B     		cmp	r3, #0
 5950 05ae 05D1     		bne	.L370
 5951              		.loc 2 2206 105 is_stmt 0 discriminator 5
 5952 05b0 3B68     		ldr	r3, [r7]
 5953 05b2 1B68     		ldr	r3, [r3]
 5954 05b4 9B0E     		lsrs	r3, r3, #26
 5955 05b6 03F01F03 		and	r3, r3, #31
 5956 05ba 16E0     		b	.L371
 5957              	.L370:
 5958              		.loc 2 2206 105 discriminator 6
 5959 05bc 3B68     		ldr	r3, [r7]
 5960 05be 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6jq3Wn.s 			page 287


 5961 05c0 C7F88030 		str	r3, [r7, #128]
 5962              	.LBB91:
 5963              	.LBB92:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 5964              		.loc 3 1055 4 is_stmt 1 discriminator 6
 5965 05c4 D7F88030 		ldr	r3, [r7, #128]
 5966              		.syntax unified
 5967              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 5968 05c8 93FAA3F3 		rbit r3, r3
 5969              	@ 0 "" 2
 5970              		.thumb
 5971              		.syntax unified
 5972 05cc FB67     		str	r3, [r7, #124]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 5973              		.loc 3 1068 10 discriminator 6
 5974 05ce FB6F     		ldr	r3, [r7, #124]
 5975 05d0 C7F88430 		str	r3, [r7, #132]
 5976              	.LBE92:
 5977              	.LBE91:
 5978              	.LBB93:
 5979              	.LBB94:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 5980              		.loc 3 1089 6 discriminator 6
 5981 05d4 D7F88430 		ldr	r3, [r7, #132]
 5982 05d8 002B     		cmp	r3, #0
 5983 05da 01D1     		bne	.L373
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 5984              		.loc 3 1091 12
 5985 05dc 2023     		movs	r3, #32
 5986 05de 04E0     		b	.L371
 5987              	.L373:
 5988              		.loc 3 1093 10
 5989 05e0 D7F88430 		ldr	r3, [r7, #132]
 5990 05e4 B3FA83F3 		clz	r3, r3
 5991 05e8 DBB2     		uxtb	r3, r3
 5992              	.L371:
 5993              	.LBE94:
 5994              	.LBE93:
 5995              		.loc 2 2206 12 discriminator 8
 5996 05ea 9A42     		cmp	r2, r3
 5997 05ec 07D1     		bne	.L375
2207:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2208:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_AD
 5998              		.loc 2 2208 11
 5999 05ee 7B68     		ldr	r3, [r7, #4]
 6000 05f0 1868     		ldr	r0, [r3]
 6001 05f2 3B68     		ldr	r3, [r7]
 6002 05f4 1A68     		ldr	r2, [r3]
 6003 05f6 0023     		movs	r3, #0
 6004 05f8 0321     		movs	r1, #3
 6005 05fa FFF7FEFF 		bl	LL_ADC_SetOffset
 6006              	.L375:
2209:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2210:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)
 6007              		.loc 2 2210 13
 6008 05fe 7B68     		ldr	r3, [r7, #4]
 6009 0600 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6jq3Wn.s 			page 288


 6010 0602 0321     		movs	r1, #3
 6011 0604 1846     		mov	r0, r3
 6012 0606 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6013 060a 0346     		mov	r3, r0
 6014 060c C3F31303 		ubfx	r3, r3, #0, #20
 6015 0610 002B     		cmp	r3, #0
 6016 0612 0AD1     		bne	.L376
 6017              		.loc 2 2210 13 is_stmt 0 discriminator 1
 6018 0614 7B68     		ldr	r3, [r7, #4]
 6019 0616 1B68     		ldr	r3, [r3]
 6020 0618 0321     		movs	r1, #3
 6021 061a 1846     		mov	r0, r3
 6022 061c FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6023 0620 0346     		mov	r3, r0
 6024 0622 9B0E     		lsrs	r3, r3, #26
 6025 0624 03F01F02 		and	r2, r3, #31
 6026 0628 17E0     		b	.L377
 6027              	.L376:
 6028              		.loc 2 2210 13 discriminator 2
 6029 062a 7B68     		ldr	r3, [r7, #4]
 6030 062c 1B68     		ldr	r3, [r3]
 6031 062e 0321     		movs	r1, #3
 6032 0630 1846     		mov	r0, r3
 6033 0632 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6034 0636 0346     		mov	r3, r0
 6035 0638 7B67     		str	r3, [r7, #116]
 6036              	.LBB95:
 6037              	.LBB96:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6038              		.loc 3 1055 4 is_stmt 1 discriminator 2
 6039 063a 7B6F     		ldr	r3, [r7, #116]
 6040              		.syntax unified
 6041              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6042 063c 93FAA3F3 		rbit r3, r3
 6043              	@ 0 "" 2
 6044              		.thumb
 6045              		.syntax unified
 6046 0640 3B67     		str	r3, [r7, #112]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6047              		.loc 3 1068 10 discriminator 2
 6048 0642 3B6F     		ldr	r3, [r7, #112]
 6049 0644 BB67     		str	r3, [r7, #120]
 6050              	.LBE96:
 6051              	.LBE95:
 6052              	.LBB97:
 6053              	.LBB98:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6054              		.loc 3 1089 6 discriminator 2
 6055 0646 BB6F     		ldr	r3, [r7, #120]
 6056 0648 002B     		cmp	r3, #0
 6057 064a 01D1     		bne	.L379
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6058              		.loc 3 1091 12
 6059 064c 2023     		movs	r3, #32
 6060 064e 03E0     		b	.L380
 6061              	.L379:
 6062              		.loc 3 1093 10
ARM GAS  /tmp/cc6jq3Wn.s 			page 289


 6063 0650 BB6F     		ldr	r3, [r7, #120]
 6064 0652 B3FA83F3 		clz	r3, r3
 6065 0656 DBB2     		uxtb	r3, r3
 6066              	.L380:
 6067              	.LBE98:
 6068              	.LBE97:
 6069              		.loc 2 2210 13
 6070 0658 1A46     		mov	r2, r3
 6071              	.L377:
 6072              		.loc 2 2210 105 discriminator 4
 6073 065a 3B68     		ldr	r3, [r7]
 6074 065c 1B68     		ldr	r3, [r3]
 6075 065e C3F31303 		ubfx	r3, r3, #0, #20
 6076 0662 002B     		cmp	r3, #0
 6077 0664 05D1     		bne	.L381
 6078              		.loc 2 2210 105 is_stmt 0 discriminator 5
 6079 0666 3B68     		ldr	r3, [r7]
 6080 0668 1B68     		ldr	r3, [r3]
 6081 066a 9B0E     		lsrs	r3, r3, #26
 6082 066c 03F01F03 		and	r3, r3, #31
 6083 0670 11E0     		b	.L382
 6084              	.L381:
 6085              		.loc 2 2210 105 discriminator 6
 6086 0672 3B68     		ldr	r3, [r7]
 6087 0674 1B68     		ldr	r3, [r3]
 6088 0676 BB66     		str	r3, [r7, #104]
 6089              	.LBB99:
 6090              	.LBB100:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6091              		.loc 3 1055 4 is_stmt 1 discriminator 6
 6092 0678 BB6E     		ldr	r3, [r7, #104]
 6093              		.syntax unified
 6094              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6095 067a 93FAA3F3 		rbit r3, r3
 6096              	@ 0 "" 2
 6097              		.thumb
 6098              		.syntax unified
 6099 067e 7B66     		str	r3, [r7, #100]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6100              		.loc 3 1068 10 discriminator 6
 6101 0680 7B6E     		ldr	r3, [r7, #100]
 6102 0682 FB66     		str	r3, [r7, #108]
 6103              	.LBE100:
 6104              	.LBE99:
 6105              	.LBB101:
 6106              	.LBB102:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6107              		.loc 3 1089 6 discriminator 6
 6108 0684 FB6E     		ldr	r3, [r7, #108]
 6109 0686 002B     		cmp	r3, #0
 6110 0688 01D1     		bne	.L384
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6111              		.loc 3 1091 12
 6112 068a 2023     		movs	r3, #32
 6113 068c 03E0     		b	.L382
 6114              	.L384:
 6115              		.loc 3 1093 10
ARM GAS  /tmp/cc6jq3Wn.s 			page 290


 6116 068e FB6E     		ldr	r3, [r7, #108]
 6117 0690 B3FA83F3 		clz	r3, r3
 6118 0694 DBB2     		uxtb	r3, r3
 6119              	.L382:
 6120              	.LBE102:
 6121              	.LBE101:
 6122              		.loc 2 2210 12 discriminator 8
 6123 0696 9A42     		cmp	r2, r3
 6124 0698 07D1     		bne	.L327
2211:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2212:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_AD
 6125              		.loc 2 2212 11
 6126 069a 7B68     		ldr	r3, [r7, #4]
 6127 069c 1868     		ldr	r0, [r3]
 6128 069e 3B68     		ldr	r3, [r7]
 6129 06a0 1A68     		ldr	r2, [r3]
 6130 06a2 0023     		movs	r3, #0
 6131 06a4 0321     		movs	r1, #3
 6132 06a6 FFF7FEFF 		bl	LL_ADC_SetOffset
 6133              	.L327:
2213:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2214:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2215:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2216:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2217:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2218:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2219:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2220:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
2221:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Single or differential mode                                           */
2222:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
2223:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 6134              		.loc 2 2223 7
 6135 06aa 7B68     		ldr	r3, [r7, #4]
 6136 06ac 1B68     		ldr	r3, [r3]
 6137 06ae 1846     		mov	r0, r3
 6138 06b0 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6139 06b4 0346     		mov	r3, r0
 6140              		.loc 2 2223 6
 6141 06b6 002B     		cmp	r3, #0
 6142 06b8 40F00C82 		bne	.L386
2224:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2225:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set mode single-ended or differential input of the selected ADC channel */
2226:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->
 6143              		.loc 2 2226 5
 6144 06bc 7B68     		ldr	r3, [r7, #4]
 6145 06be 1868     		ldr	r0, [r3]
 6146 06c0 3B68     		ldr	r3, [r7]
 6147 06c2 1968     		ldr	r1, [r3]
 6148 06c4 3B68     		ldr	r3, [r7]
 6149 06c6 DB68     		ldr	r3, [r3, #12]
 6150 06c8 1A46     		mov	r2, r3
 6151 06ca FFF7FEFF 		bl	LL_ADC_SetChannelSingleDiff
2227:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2228:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configuration of differential mode */
2229:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range
2230:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 6152              		.loc 2 2230 24
ARM GAS  /tmp/cc6jq3Wn.s 			page 291


 6153 06ce 3B68     		ldr	r3, [r7]
 6154 06d0 DB68     		ldr	r3, [r3, #12]
 6155              		.loc 2 2230 8
 6156 06d2 A84A     		ldr	r2, .L452
 6157 06d4 9342     		cmp	r3, r2
 6158 06d6 40F02E81 		bne	.L387
2231:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2232:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set sampling time of the selected ADC channel */
2233:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL
 6159              		.loc 2 2233 7
 6160 06da 7B68     		ldr	r3, [r7, #4]
 6161 06dc 1868     		ldr	r0, [r3]
 6162              		.loc 2 2233 64
 6163 06de 3B68     		ldr	r3, [r7]
 6164 06e0 1B68     		ldr	r3, [r3]
 6165 06e2 C3F31303 		ubfx	r3, r3, #0, #20
 6166 06e6 002B     		cmp	r3, #0
 6167 06e8 0BD1     		bne	.L388
 6168              		.loc 2 2233 64 is_stmt 0 discriminator 1
 6169 06ea 3B68     		ldr	r3, [r7]
 6170 06ec 1B68     		ldr	r3, [r3]
 6171 06ee 9B0E     		lsrs	r3, r3, #26
 6172 06f0 0133     		adds	r3, r3, #1
 6173 06f2 03F01F03 		and	r3, r3, #31
 6174 06f6 092B     		cmp	r3, #9
 6175 06f8 94BF     		ite	ls
 6176 06fa 0123     		movls	r3, #1
 6177 06fc 0023     		movhi	r3, #0
 6178 06fe DBB2     		uxtb	r3, r3
 6179 0700 19E0     		b	.L389
 6180              	.L388:
 6181              		.loc 2 2233 64 discriminator 2
 6182 0702 3B68     		ldr	r3, [r7]
 6183 0704 1B68     		ldr	r3, [r3]
 6184 0706 FB65     		str	r3, [r7, #92]
 6185              	.LBB103:
 6186              	.LBB104:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6187              		.loc 3 1055 4 is_stmt 1 discriminator 2
 6188 0708 FB6D     		ldr	r3, [r7, #92]
 6189              		.syntax unified
 6190              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6191 070a 93FAA3F3 		rbit r3, r3
 6192              	@ 0 "" 2
 6193              		.thumb
 6194              		.syntax unified
 6195 070e BB65     		str	r3, [r7, #88]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6196              		.loc 3 1068 10 discriminator 2
 6197 0710 BB6D     		ldr	r3, [r7, #88]
 6198 0712 3B66     		str	r3, [r7, #96]
 6199              	.LBE104:
 6200              	.LBE103:
 6201              	.LBB105:
 6202              	.LBB106:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6203              		.loc 3 1089 6 discriminator 2
ARM GAS  /tmp/cc6jq3Wn.s 			page 292


 6204 0714 3B6E     		ldr	r3, [r7, #96]
 6205 0716 002B     		cmp	r3, #0
 6206 0718 01D1     		bne	.L391
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6207              		.loc 3 1091 12
 6208 071a 2023     		movs	r3, #32
 6209 071c 03E0     		b	.L392
 6210              	.L391:
 6211              		.loc 3 1093 10
 6212 071e 3B6E     		ldr	r3, [r7, #96]
 6213 0720 B3FA83F3 		clz	r3, r3
 6214 0724 DBB2     		uxtb	r3, r3
 6215              	.L392:
 6216              	.LBE106:
 6217              	.LBE105:
 6218              		.loc 2 2233 64
 6219 0726 0133     		adds	r3, r3, #1
 6220 0728 03F01F03 		and	r3, r3, #31
 6221 072c 092B     		cmp	r3, #9
 6222 072e 94BF     		ite	ls
 6223 0730 0123     		movls	r3, #1
 6224 0732 0023     		movhi	r3, #0
 6225 0734 DBB2     		uxtb	r3, r3
 6226              	.L389:
 6227              		.loc 2 2233 7 discriminator 4
 6228 0736 002B     		cmp	r3, #0
 6229 0738 79D0     		beq	.L393
 6230              		.loc 2 2233 64 discriminator 5
 6231 073a 3B68     		ldr	r3, [r7]
 6232 073c 1B68     		ldr	r3, [r3]
 6233 073e C3F31303 		ubfx	r3, r3, #0, #20
 6234 0742 002B     		cmp	r3, #0
 6235 0744 07D1     		bne	.L394
 6236              		.loc 2 2233 64 is_stmt 0 discriminator 7
 6237 0746 3B68     		ldr	r3, [r7]
 6238 0748 1B68     		ldr	r3, [r3]
 6239 074a 9B0E     		lsrs	r3, r3, #26
 6240 074c 0133     		adds	r3, r3, #1
 6241 074e 9B06     		lsls	r3, r3, #26
 6242 0750 03F0F842 		and	r2, r3, #2080374784
 6243 0754 15E0     		b	.L395
 6244              	.L394:
 6245              		.loc 2 2233 64 discriminator 8
 6246 0756 3B68     		ldr	r3, [r7]
 6247 0758 1B68     		ldr	r3, [r3]
 6248 075a 3B65     		str	r3, [r7, #80]
 6249              	.LBB107:
 6250              	.LBB108:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6251              		.loc 3 1055 4 is_stmt 1 discriminator 8
 6252 075c 3B6D     		ldr	r3, [r7, #80]
 6253              		.syntax unified
 6254              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6255 075e 93FAA3F3 		rbit r3, r3
 6256              	@ 0 "" 2
 6257              		.thumb
 6258              		.syntax unified
ARM GAS  /tmp/cc6jq3Wn.s 			page 293


 6259 0762 FB64     		str	r3, [r7, #76]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6260              		.loc 3 1068 10 discriminator 8
 6261 0764 FB6C     		ldr	r3, [r7, #76]
 6262 0766 7B65     		str	r3, [r7, #84]
 6263              	.LBE108:
 6264              	.LBE107:
 6265              	.LBB109:
 6266              	.LBB110:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6267              		.loc 3 1089 6 discriminator 8
 6268 0768 7B6D     		ldr	r3, [r7, #84]
 6269 076a 002B     		cmp	r3, #0
 6270 076c 01D1     		bne	.L397
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6271              		.loc 3 1091 12
 6272 076e 2023     		movs	r3, #32
 6273 0770 03E0     		b	.L398
 6274              	.L397:
 6275              		.loc 3 1093 10
 6276 0772 7B6D     		ldr	r3, [r7, #84]
 6277 0774 B3FA83F3 		clz	r3, r3
 6278 0778 DBB2     		uxtb	r3, r3
 6279              	.L398:
 6280              	.LBE110:
 6281              	.LBE109:
 6282              		.loc 2 2233 64
 6283 077a 0133     		adds	r3, r3, #1
 6284 077c 9B06     		lsls	r3, r3, #26
 6285 077e 03F0F842 		and	r2, r3, #2080374784
 6286              	.L395:
 6287              		.loc 2 2233 64 is_stmt 0 discriminator 10
 6288 0782 3B68     		ldr	r3, [r7]
 6289 0784 1B68     		ldr	r3, [r3]
 6290 0786 C3F31303 		ubfx	r3, r3, #0, #20
 6291 078a 002B     		cmp	r3, #0
 6292 078c 09D1     		bne	.L399
 6293              		.loc 2 2233 64 discriminator 11
 6294 078e 3B68     		ldr	r3, [r7]
 6295 0790 1B68     		ldr	r3, [r3]
 6296 0792 9B0E     		lsrs	r3, r3, #26
 6297 0794 0133     		adds	r3, r3, #1
 6298 0796 03F01F03 		and	r3, r3, #31
 6299 079a 0121     		movs	r1, #1
 6300 079c 01FA03F3 		lsl	r3, r1, r3
 6301 07a0 17E0     		b	.L400
 6302              	.L399:
 6303              		.loc 2 2233 64 discriminator 12
 6304 07a2 3B68     		ldr	r3, [r7]
 6305 07a4 1B68     		ldr	r3, [r3]
 6306 07a6 7B64     		str	r3, [r7, #68]
 6307              	.LBB111:
 6308              	.LBB112:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6309              		.loc 3 1055 4 is_stmt 1 discriminator 12
 6310 07a8 7B6C     		ldr	r3, [r7, #68]
 6311              		.syntax unified
ARM GAS  /tmp/cc6jq3Wn.s 			page 294


 6312              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6313 07aa 93FAA3F3 		rbit r3, r3
 6314              	@ 0 "" 2
 6315              		.thumb
 6316              		.syntax unified
 6317 07ae 3B64     		str	r3, [r7, #64]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6318              		.loc 3 1068 10 discriminator 12
 6319 07b0 3B6C     		ldr	r3, [r7, #64]
 6320 07b2 BB64     		str	r3, [r7, #72]
 6321              	.LBE112:
 6322              	.LBE111:
 6323              	.LBB113:
 6324              	.LBB114:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6325              		.loc 3 1089 6 discriminator 12
 6326 07b4 BB6C     		ldr	r3, [r7, #72]
 6327 07b6 002B     		cmp	r3, #0
 6328 07b8 01D1     		bne	.L402
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6329              		.loc 3 1091 12
 6330 07ba 2023     		movs	r3, #32
 6331 07bc 03E0     		b	.L403
 6332              	.L402:
 6333              		.loc 3 1093 10
 6334 07be BB6C     		ldr	r3, [r7, #72]
 6335 07c0 B3FA83F3 		clz	r3, r3
 6336 07c4 DBB2     		uxtb	r3, r3
 6337              	.L403:
 6338              	.LBE114:
 6339              	.LBE113:
 6340              		.loc 2 2233 64
 6341 07c6 0133     		adds	r3, r3, #1
 6342 07c8 03F01F03 		and	r3, r3, #31
 6343 07cc 0121     		movs	r1, #1
 6344 07ce 01FA03F3 		lsl	r3, r1, r3
 6345              	.L400:
 6346              		.loc 2 2233 64 is_stmt 0 discriminator 14
 6347 07d2 42EA0301 		orr	r1, r2, r3
 6348 07d6 3B68     		ldr	r3, [r7]
 6349 07d8 1B68     		ldr	r3, [r3]
 6350 07da C3F31303 		ubfx	r3, r3, #0, #20
 6351 07de 002B     		cmp	r3, #0
 6352 07e0 0AD1     		bne	.L404
 6353              		.loc 2 2233 64 discriminator 15
 6354 07e2 3B68     		ldr	r3, [r7]
 6355 07e4 1B68     		ldr	r3, [r3]
 6356 07e6 9B0E     		lsrs	r3, r3, #26
 6357 07e8 0133     		adds	r3, r3, #1
 6358 07ea 03F01F02 		and	r2, r3, #31
 6359 07ee 1346     		mov	r3, r2
 6360 07f0 5B00     		lsls	r3, r3, #1
 6361 07f2 1344     		add	r3, r3, r2
 6362 07f4 1B05     		lsls	r3, r3, #20
 6363 07f6 18E0     		b	.L405
 6364              	.L404:
 6365              		.loc 2 2233 64 discriminator 16
ARM GAS  /tmp/cc6jq3Wn.s 			page 295


 6366 07f8 3B68     		ldr	r3, [r7]
 6367 07fa 1B68     		ldr	r3, [r3]
 6368 07fc BB63     		str	r3, [r7, #56]
 6369              	.LBB115:
 6370              	.LBB116:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6371              		.loc 3 1055 4 is_stmt 1 discriminator 16
 6372 07fe BB6B     		ldr	r3, [r7, #56]
 6373              		.syntax unified
 6374              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6375 0800 93FAA3F3 		rbit r3, r3
 6376              	@ 0 "" 2
 6377              		.thumb
 6378              		.syntax unified
 6379 0804 7B63     		str	r3, [r7, #52]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6380              		.loc 3 1068 10 discriminator 16
 6381 0806 7B6B     		ldr	r3, [r7, #52]
 6382 0808 FB63     		str	r3, [r7, #60]
 6383              	.LBE116:
 6384              	.LBE115:
 6385              	.LBB117:
 6386              	.LBB118:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6387              		.loc 3 1089 6 discriminator 16
 6388 080a FB6B     		ldr	r3, [r7, #60]
 6389 080c 002B     		cmp	r3, #0
 6390 080e 01D1     		bne	.L407
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6391              		.loc 3 1091 12
 6392 0810 2023     		movs	r3, #32
 6393 0812 03E0     		b	.L408
 6394              	.L407:
 6395              		.loc 3 1093 10
 6396 0814 FB6B     		ldr	r3, [r7, #60]
 6397 0816 B3FA83F3 		clz	r3, r3
 6398 081a DBB2     		uxtb	r3, r3
 6399              	.L408:
 6400              	.LBE118:
 6401              	.LBE117:
 6402              		.loc 2 2233 64
 6403 081c 0133     		adds	r3, r3, #1
 6404 081e 03F01F02 		and	r2, r3, #31
 6405 0822 1346     		mov	r3, r2
 6406 0824 5B00     		lsls	r3, r3, #1
 6407 0826 1344     		add	r3, r3, r2
 6408 0828 1B05     		lsls	r3, r3, #20
 6409              	.L405:
 6410              		.loc 2 2233 7 discriminator 18
 6411 082a 0B43     		orrs	r3, r3, r1
 6412 082c 7EE0     		b	.L409
 6413              	.L393:
 6414              		.loc 2 2233 64 discriminator 6
 6415 082e 3B68     		ldr	r3, [r7]
 6416 0830 1B68     		ldr	r3, [r3]
 6417 0832 C3F31303 		ubfx	r3, r3, #0, #20
 6418 0836 002B     		cmp	r3, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 296


 6419 0838 07D1     		bne	.L410
 6420              		.loc 2 2233 64 is_stmt 0 discriminator 20
 6421 083a 3B68     		ldr	r3, [r7]
 6422 083c 1B68     		ldr	r3, [r3]
 6423 083e 9B0E     		lsrs	r3, r3, #26
 6424 0840 0133     		adds	r3, r3, #1
 6425 0842 9B06     		lsls	r3, r3, #26
 6426 0844 03F0F842 		and	r2, r3, #2080374784
 6427 0848 15E0     		b	.L411
 6428              	.L410:
 6429              		.loc 2 2233 64 discriminator 21
 6430 084a 3B68     		ldr	r3, [r7]
 6431 084c 1B68     		ldr	r3, [r3]
 6432 084e FB62     		str	r3, [r7, #44]
 6433              	.LBB119:
 6434              	.LBB120:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6435              		.loc 3 1055 4 is_stmt 1 discriminator 21
 6436 0850 FB6A     		ldr	r3, [r7, #44]
 6437              		.syntax unified
 6438              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6439 0852 93FAA3F3 		rbit r3, r3
 6440              	@ 0 "" 2
 6441              		.thumb
 6442              		.syntax unified
 6443 0856 BB62     		str	r3, [r7, #40]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6444              		.loc 3 1068 10 discriminator 21
 6445 0858 BB6A     		ldr	r3, [r7, #40]
 6446 085a 3B63     		str	r3, [r7, #48]
 6447              	.LBE120:
 6448              	.LBE119:
 6449              	.LBB121:
 6450              	.LBB122:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6451              		.loc 3 1089 6 discriminator 21
 6452 085c 3B6B     		ldr	r3, [r7, #48]
 6453 085e 002B     		cmp	r3, #0
 6454 0860 01D1     		bne	.L413
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6455              		.loc 3 1091 12
 6456 0862 2023     		movs	r3, #32
 6457 0864 03E0     		b	.L414
 6458              	.L413:
 6459              		.loc 3 1093 10
 6460 0866 3B6B     		ldr	r3, [r7, #48]
 6461 0868 B3FA83F3 		clz	r3, r3
 6462 086c DBB2     		uxtb	r3, r3
 6463              	.L414:
 6464              	.LBE122:
 6465              	.LBE121:
 6466              		.loc 2 2233 64
 6467 086e 0133     		adds	r3, r3, #1
 6468 0870 9B06     		lsls	r3, r3, #26
 6469 0872 03F0F842 		and	r2, r3, #2080374784
 6470              	.L411:
 6471              		.loc 2 2233 64 is_stmt 0 discriminator 23
ARM GAS  /tmp/cc6jq3Wn.s 			page 297


 6472 0876 3B68     		ldr	r3, [r7]
 6473 0878 1B68     		ldr	r3, [r3]
 6474 087a C3F31303 		ubfx	r3, r3, #0, #20
 6475 087e 002B     		cmp	r3, #0
 6476 0880 09D1     		bne	.L415
 6477              		.loc 2 2233 64 discriminator 24
 6478 0882 3B68     		ldr	r3, [r7]
 6479 0884 1B68     		ldr	r3, [r3]
 6480 0886 9B0E     		lsrs	r3, r3, #26
 6481 0888 0133     		adds	r3, r3, #1
 6482 088a 03F01F03 		and	r3, r3, #31
 6483 088e 0121     		movs	r1, #1
 6484 0890 01FA03F3 		lsl	r3, r1, r3
 6485 0894 17E0     		b	.L416
 6486              	.L415:
 6487              		.loc 2 2233 64 discriminator 25
 6488 0896 3B68     		ldr	r3, [r7]
 6489 0898 1B68     		ldr	r3, [r3]
 6490 089a 3B62     		str	r3, [r7, #32]
 6491              	.LBB123:
 6492              	.LBB124:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6493              		.loc 3 1055 4 is_stmt 1 discriminator 25
 6494 089c 3B6A     		ldr	r3, [r7, #32]
 6495              		.syntax unified
 6496              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6497 089e 93FAA3F3 		rbit r3, r3
 6498              	@ 0 "" 2
 6499              		.thumb
 6500              		.syntax unified
 6501 08a2 FB61     		str	r3, [r7, #28]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6502              		.loc 3 1068 10 discriminator 25
 6503 08a4 FB69     		ldr	r3, [r7, #28]
 6504 08a6 7B62     		str	r3, [r7, #36]
 6505              	.LBE124:
 6506              	.LBE123:
 6507              	.LBB125:
 6508              	.LBB126:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6509              		.loc 3 1089 6 discriminator 25
 6510 08a8 7B6A     		ldr	r3, [r7, #36]
 6511 08aa 002B     		cmp	r3, #0
 6512 08ac 01D1     		bne	.L418
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6513              		.loc 3 1091 12
 6514 08ae 2023     		movs	r3, #32
 6515 08b0 03E0     		b	.L419
 6516              	.L418:
 6517              		.loc 3 1093 10
 6518 08b2 7B6A     		ldr	r3, [r7, #36]
 6519 08b4 B3FA83F3 		clz	r3, r3
 6520 08b8 DBB2     		uxtb	r3, r3
 6521              	.L419:
 6522              	.LBE126:
 6523              	.LBE125:
 6524              		.loc 2 2233 64
ARM GAS  /tmp/cc6jq3Wn.s 			page 298


 6525 08ba 0133     		adds	r3, r3, #1
 6526 08bc 03F01F03 		and	r3, r3, #31
 6527 08c0 0121     		movs	r1, #1
 6528 08c2 01FA03F3 		lsl	r3, r1, r3
 6529              	.L416:
 6530              		.loc 2 2233 64 is_stmt 0 discriminator 27
 6531 08c6 42EA0301 		orr	r1, r2, r3
 6532 08ca 3B68     		ldr	r3, [r7]
 6533 08cc 1B68     		ldr	r3, [r3]
 6534 08ce C3F31303 		ubfx	r3, r3, #0, #20
 6535 08d2 002B     		cmp	r3, #0
 6536 08d4 0DD1     		bne	.L420
 6537              		.loc 2 2233 64 discriminator 28
 6538 08d6 3B68     		ldr	r3, [r7]
 6539 08d8 1B68     		ldr	r3, [r3]
 6540 08da 9B0E     		lsrs	r3, r3, #26
 6541 08dc 0133     		adds	r3, r3, #1
 6542 08de 03F01F02 		and	r2, r3, #31
 6543 08e2 1346     		mov	r3, r2
 6544 08e4 5B00     		lsls	r3, r3, #1
 6545 08e6 1344     		add	r3, r3, r2
 6546 08e8 1E3B     		subs	r3, r3, #30
 6547 08ea 1B05     		lsls	r3, r3, #20
 6548 08ec 43F00073 		orr	r3, r3, #33554432
 6549 08f0 1BE0     		b	.L421
 6550              	.L420:
 6551              		.loc 2 2233 64 discriminator 29
 6552 08f2 3B68     		ldr	r3, [r7]
 6553 08f4 1B68     		ldr	r3, [r3]
 6554 08f6 7B61     		str	r3, [r7, #20]
 6555              	.LBB127:
 6556              	.LBB128:
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 6557              		.loc 3 1055 4 is_stmt 1 discriminator 29
 6558 08f8 7B69     		ldr	r3, [r7, #20]
 6559              		.syntax unified
 6560              	@ 1055 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 6561 08fa 93FAA3F3 		rbit r3, r3
 6562              	@ 0 "" 2
 6563              		.thumb
 6564              		.syntax unified
 6565 08fe 3B61     		str	r3, [r7, #16]
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 6566              		.loc 3 1068 10 discriminator 29
 6567 0900 3B69     		ldr	r3, [r7, #16]
 6568 0902 BB61     		str	r3, [r7, #24]
 6569              	.LBE128:
 6570              	.LBE127:
 6571              	.LBB129:
 6572              	.LBB130:
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
 6573              		.loc 3 1089 6 discriminator 29
 6574 0904 BB69     		ldr	r3, [r7, #24]
 6575 0906 002B     		cmp	r3, #0
 6576 0908 01D1     		bne	.L423
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 6577              		.loc 3 1091 12
ARM GAS  /tmp/cc6jq3Wn.s 			page 299


 6578 090a 2023     		movs	r3, #32
 6579 090c 03E0     		b	.L424
 6580              	.L423:
 6581              		.loc 3 1093 10
 6582 090e BB69     		ldr	r3, [r7, #24]
 6583 0910 B3FA83F3 		clz	r3, r3
 6584 0914 DBB2     		uxtb	r3, r3
 6585              	.L424:
 6586              	.LBE130:
 6587              	.LBE129:
 6588              		.loc 2 2233 64
 6589 0916 0133     		adds	r3, r3, #1
 6590 0918 03F01F02 		and	r2, r3, #31
 6591 091c 1346     		mov	r3, r2
 6592 091e 5B00     		lsls	r3, r3, #1
 6593 0920 1344     		add	r3, r3, r2
 6594 0922 1E3B     		subs	r3, r3, #30
 6595 0924 1B05     		lsls	r3, r3, #20
 6596 0926 43F00073 		orr	r3, r3, #33554432
 6597              	.L421:
 6598              		.loc 2 2233 7 discriminator 31
 6599 092a 0B43     		orrs	r3, r3, r1
 6600              	.L409:
 6601              		.loc 2 2233 7 is_stmt 0 discriminator 32
 6602 092c 3A68     		ldr	r2, [r7]
 6603 092e 9268     		ldr	r2, [r2, #8]
 6604 0930 1946     		mov	r1, r3
 6605 0932 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 6606              	.L387:
2234:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2235:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2236:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Management of internal measurement channels: Vbat/VrefInt/TempSensor   */
2237:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* internal measurement paths enable: If internal channel selected,       */
2238:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* enable dedicated internal buffers and path.                            */
2239:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: these internal measurement paths can be disabled using           */
2240:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* HAL_ADC_DeInit().                                                      */
2241:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2242:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 6607              		.loc 2 2242 9 is_stmt 1
 6608 0936 3B68     		ldr	r3, [r7]
 6609 0938 1B68     		ldr	r3, [r3]
 6610              		.loc 2 2242 8
 6611 093a 002B     		cmp	r3, #0
 6612 093c 80F2CA80 		bge	.L386
2243:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2244:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of common ADC parameters (continuation)                */
2245:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Software is allowed to change common parameters only when all ADCs   */
2246:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* of the common group are disabled.                                    */
2247:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 6613              		.loc 2 2247 11
 6614 0940 7B68     		ldr	r3, [r7, #4]
 6615 0942 1B68     		ldr	r3, [r3]
 6616              		.loc 2 2247 93
 6617 0944 0C4A     		ldr	r2, .L452+4
 6618 0946 9342     		cmp	r3, r2
 6619 0948 04D0     		beq	.L425
 6620              		.loc 2 2247 11 discriminator 2
ARM GAS  /tmp/cc6jq3Wn.s 			page 300


 6621 094a 7B68     		ldr	r3, [r7, #4]
 6622 094c 1B68     		ldr	r3, [r3]
 6623 094e 0B4A     		ldr	r2, .L452+8
 6624 0950 9342     		cmp	r3, r2
 6625 0952 15D1     		bne	.L426
 6626              	.L425:
 6627              		.loc 2 2247 11 is_stmt 0 discriminator 3
 6628 0954 0848     		ldr	r0, .L452+4
 6629 0956 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6630 095a 0446     		mov	r4, r0
 6631 095c 0748     		ldr	r0, .L452+8
 6632 095e FFF7FEFF 		bl	LL_ADC_IsEnabled
 6633 0962 0346     		mov	r3, r0
 6634 0964 2343     		orrs	r3, r3, r4
 6635              		.loc 2 2247 93 is_stmt 1 discriminator 3
 6636 0966 002B     		cmp	r3, #0
 6637 0968 0CBF     		ite	eq
 6638 096a 0123     		moveq	r3, #1
 6639 096c 0023     		movne	r3, #0
 6640 096e DBB2     		uxtb	r3, r3
 6641 0970 0FE0     		b	.L427
 6642              	.L453:
 6643 0972 00BF     		.align	2
 6644              	.L452:
 6645 0974 0000FF47 		.word	1207894016
 6646 0978 00200240 		.word	1073881088
 6647 097c 00210240 		.word	1073881344
 6648              	.L426:
 6649              		.loc 2 2247 11 discriminator 4
 6650 0980 5948     		ldr	r0, .L454
 6651 0982 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6652 0986 0346     		mov	r3, r0
 6653              		.loc 2 2247 93 discriminator 4
 6654 0988 002B     		cmp	r3, #0
 6655 098a 0CBF     		ite	eq
 6656 098c 0123     		moveq	r3, #1
 6657 098e 0023     		movne	r3, #0
 6658 0990 DBB2     		uxtb	r3, r3
 6659              	.L427:
 6660              		.loc 2 2247 10 discriminator 6
 6661 0992 002B     		cmp	r3, #0
 6662 0994 00F09580 		beq	.L428
2248:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2249:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
 6663              		.loc 2 2249 70
 6664 0998 7B68     		ldr	r3, [r7, #4]
 6665 099a 1B68     		ldr	r3, [r3]
 6666              		.loc 2 2249 39
 6667 099c 534A     		ldr	r2, .L454+4
 6668 099e 9342     		cmp	r3, r2
 6669 09a0 04D0     		beq	.L429
 6670              		.loc 2 2249 70 discriminator 2
 6671 09a2 7B68     		ldr	r3, [r7, #4]
 6672 09a4 1B68     		ldr	r3, [r3]
 6673 09a6 524A     		ldr	r2, .L454+8
 6674 09a8 9342     		cmp	r3, r2
 6675 09aa 01D1     		bne	.L430
ARM GAS  /tmp/cc6jq3Wn.s 			page 301


 6676              	.L429:
 6677              		.loc 2 2249 39 discriminator 3
 6678 09ac 514B     		ldr	r3, .L454+12
 6679 09ae 00E0     		b	.L431
 6680              	.L430:
 6681              		.loc 2 2249 39 is_stmt 0 discriminator 4
 6682 09b0 514B     		ldr	r3, .L454+16
 6683              	.L431:
 6684              		.loc 2 2249 39 discriminator 6
 6685 09b2 1846     		mov	r0, r3
 6686 09b4 FFF7FEFF 		bl	LL_ADC_GetCommonPathInternalCh
 6687 09b8 C7F8D000 		str	r0, [r7, #208]
2250:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2251:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If the requested internal measurement path has already been enabled, */
2252:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* bypass the configuration processing.                                 */
2253:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_c
 6688              		.loc 2 2253 29 is_stmt 1 discriminator 6
 6689 09bc 3B68     		ldr	r3, [r7]
 6690 09be 1B68     		ldr	r3, [r3]
 6691              		.loc 2 2253 12 discriminator 6
 6692 09c0 4E4A     		ldr	r2, .L454+20
 6693 09c2 9342     		cmp	r3, r2
 6694 09c4 31D1     		bne	.L432
 6695              		.loc 2 2253 107 discriminator 1
 6696 09c6 D7F8D030 		ldr	r3, [r7, #208]
 6697 09ca 03F40003 		and	r3, r3, #8388608
 6698              		.loc 2 2253 74 discriminator 1
 6699 09ce 002B     		cmp	r3, #0
 6700 09d0 2BD1     		bne	.L432
2254:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 6701              		.loc 2 2255 15
 6702 09d2 7B68     		ldr	r3, [r7, #4]
 6703 09d4 1B68     		ldr	r3, [r3]
 6704              		.loc 2 2255 14
 6705 09d6 444A     		ldr	r2, .L454
 6706 09d8 9342     		cmp	r3, r2
 6707 09da 7BD1     		bne	.L386
2256:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2257:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
 6708              		.loc 2 2257 44
 6709 09dc 7B68     		ldr	r3, [r7, #4]
 6710 09de 1B68     		ldr	r3, [r3]
 6711              		.loc 2 2257 13
 6712 09e0 424A     		ldr	r2, .L454+4
 6713 09e2 9342     		cmp	r3, r2
 6714 09e4 04D0     		beq	.L434
 6715              		.loc 2 2257 44 discriminator 2
 6716 09e6 7B68     		ldr	r3, [r7, #4]
 6717 09e8 1B68     		ldr	r3, [r3]
 6718 09ea 414A     		ldr	r2, .L454+8
 6719 09ec 9342     		cmp	r3, r2
 6720 09ee 01D1     		bne	.L435
 6721              	.L434:
 6722              		.loc 2 2257 13 discriminator 3
 6723 09f0 404A     		ldr	r2, .L454+12
 6724 09f2 00E0     		b	.L436
ARM GAS  /tmp/cc6jq3Wn.s 			page 302


 6725              	.L435:
 6726              		.loc 2 2257 13 is_stmt 0 discriminator 4
 6727 09f4 404A     		ldr	r2, .L454+16
 6728              	.L436:
 6729              		.loc 2 2257 13 discriminator 6
 6730 09f6 D7F8D030 		ldr	r3, [r7, #208]
 6731 09fa 43F40003 		orr	r3, r3, #8388608
 6732 09fe 1946     		mov	r1, r3
 6733 0a00 1046     		mov	r0, r2
 6734 0a02 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
2258:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2259:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Delay for temperature sensor stabilization time */
2260:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Wait loop initialization and execution */
2261:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Note: Variable divided by 2 to compensate partially              */
2262:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /*       CPU processing cycles, scaling in us split to not          */
2263:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /*       exceed 32 bits register capacity and handle low frequency. */
2264:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (1000
 6735              		.loc 2 2264 93 is_stmt 1 discriminator 6
 6736 0a06 3E4B     		ldr	r3, .L454+24
 6737 0a08 1B68     		ldr	r3, [r3]
 6738 0a0a 9B09     		lsrs	r3, r3, #6
 6739 0a0c 3D4A     		ldr	r2, .L454+28
 6740 0a0e A2FB0323 		umull	r2, r3, r2, r3
 6741 0a12 9B09     		lsrs	r3, r3, #6
 6742              		.loc 2 2264 113 discriminator 6
 6743 0a14 0133     		adds	r3, r3, #1
 6744              		.loc 2 2264 73 discriminator 6
 6745 0a16 5B00     		lsls	r3, r3, #1
 6746              		.loc 2 2264 29 discriminator 6
 6747 0a18 FB60     		str	r3, [r7, #12]
2265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             while (wait_loop_index != 0UL)
 6748              		.loc 2 2265 19 discriminator 6
 6749 0a1a 02E0     		b	.L437
 6750              	.L438:
2266:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             {
2267:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****               wait_loop_index--;
 6751              		.loc 2 2267 30
 6752 0a1c FB68     		ldr	r3, [r7, #12]
 6753 0a1e 013B     		subs	r3, r3, #1
 6754 0a20 FB60     		str	r3, [r7, #12]
 6755              	.L437:
2265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             while (wait_loop_index != 0UL)
 6756              		.loc 2 2265 36
 6757 0a22 FB68     		ldr	r3, [r7, #12]
2265:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             while (wait_loop_index != 0UL)
 6758              		.loc 2 2265 19
 6759 0a24 002B     		cmp	r3, #0
 6760 0a26 F9D1     		bne	.L438
2255:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 6761              		.loc 2 2255 14
 6762 0a28 54E0     		b	.L386
 6763              	.L432:
2268:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             }
2269:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2270:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2271:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_ch
 6764              		.loc 2 2271 34
ARM GAS  /tmp/cc6jq3Wn.s 			page 303


 6765 0a2a 3B68     		ldr	r3, [r7]
 6766 0a2c 1B68     		ldr	r3, [r3]
 6767              		.loc 2 2271 17
 6768 0a2e 364A     		ldr	r2, .L454+32
 6769 0a30 9342     		cmp	r3, r2
 6770 0a32 20D1     		bne	.L440
 6771              		.loc 2 2271 106 discriminator 1
 6772 0a34 D7F8D030 		ldr	r3, [r7, #208]
 6773 0a38 03F08073 		and	r3, r3, #16777216
 6774              		.loc 2 2271 73 discriminator 1
 6775 0a3c 002B     		cmp	r3, #0
 6776 0a3e 1AD1     		bne	.L440
2272:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 6777              		.loc 2 2273 15
 6778 0a40 7B68     		ldr	r3, [r7, #4]
 6779 0a42 1B68     		ldr	r3, [r3]
 6780              		.loc 2 2273 14
 6781 0a44 284A     		ldr	r2, .L454
 6782 0a46 9342     		cmp	r3, r2
 6783 0a48 44D1     		bne	.L386
2274:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2275:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
 6784              		.loc 2 2275 44
 6785 0a4a 7B68     		ldr	r3, [r7, #4]
 6786 0a4c 1B68     		ldr	r3, [r3]
 6787              		.loc 2 2275 13
 6788 0a4e 274A     		ldr	r2, .L454+4
 6789 0a50 9342     		cmp	r3, r2
 6790 0a52 04D0     		beq	.L442
 6791              		.loc 2 2275 44 discriminator 2
 6792 0a54 7B68     		ldr	r3, [r7, #4]
 6793 0a56 1B68     		ldr	r3, [r3]
 6794 0a58 254A     		ldr	r2, .L454+8
 6795 0a5a 9342     		cmp	r3, r2
 6796 0a5c 01D1     		bne	.L443
 6797              	.L442:
 6798              		.loc 2 2275 13 discriminator 3
 6799 0a5e 254A     		ldr	r2, .L454+12
 6800 0a60 00E0     		b	.L444
 6801              	.L443:
 6802              		.loc 2 2275 13 is_stmt 0 discriminator 4
 6803 0a62 254A     		ldr	r2, .L454+16
 6804              	.L444:
 6805              		.loc 2 2275 13 discriminator 6
 6806 0a64 D7F8D030 		ldr	r3, [r7, #208]
 6807 0a68 43F08073 		orr	r3, r3, #16777216
 6808 0a6c 1946     		mov	r1, r3
 6809 0a6e 1046     		mov	r0, r2
 6810 0a70 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
2273:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 6811              		.loc 2 2273 14 is_stmt 1 discriminator 6
 6812 0a74 2EE0     		b	.L386
 6813              	.L440:
2276:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2277:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2278:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal
ARM GAS  /tmp/cc6jq3Wn.s 			page 304


 6814              		.loc 2 2278 34
 6815 0a76 3B68     		ldr	r3, [r7]
 6816 0a78 1B68     		ldr	r3, [r3]
 6817              		.loc 2 2278 17
 6818 0a7a 244A     		ldr	r2, .L454+36
 6819 0a7c 9342     		cmp	r3, r2
 6820 0a7e 29D1     		bne	.L386
 6821              		.loc 2 2278 109 discriminator 1
 6822 0a80 D7F8D030 		ldr	r3, [r7, #208]
 6823 0a84 03F48003 		and	r3, r3, #4194304
 6824              		.loc 2 2278 76 discriminator 1
 6825 0a88 002B     		cmp	r3, #0
 6826 0a8a 23D1     		bne	.L386
2279:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2280:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_VREFINT_INSTANCE(hadc))
 6827              		.loc 2 2280 15
 6828 0a8c 7B68     		ldr	r3, [r7, #4]
 6829 0a8e 1B68     		ldr	r3, [r3]
 6830              		.loc 2 2280 14
 6831 0a90 154A     		ldr	r2, .L454
 6832 0a92 9342     		cmp	r3, r2
 6833 0a94 1ED1     		bne	.L386
2281:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2282:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
 6834              		.loc 2 2282 44
 6835 0a96 7B68     		ldr	r3, [r7, #4]
 6836 0a98 1B68     		ldr	r3, [r3]
 6837              		.loc 2 2282 13
 6838 0a9a 144A     		ldr	r2, .L454+4
 6839 0a9c 9342     		cmp	r3, r2
 6840 0a9e 04D0     		beq	.L445
 6841              		.loc 2 2282 44 discriminator 2
 6842 0aa0 7B68     		ldr	r3, [r7, #4]
 6843 0aa2 1B68     		ldr	r3, [r3]
 6844 0aa4 124A     		ldr	r2, .L454+8
 6845 0aa6 9342     		cmp	r3, r2
 6846 0aa8 01D1     		bne	.L446
 6847              	.L445:
 6848              		.loc 2 2282 13 discriminator 3
 6849 0aaa 124A     		ldr	r2, .L454+12
 6850 0aac 00E0     		b	.L447
 6851              	.L446:
 6852              		.loc 2 2282 13 is_stmt 0 discriminator 4
 6853 0aae 124A     		ldr	r2, .L454+16
 6854              	.L447:
 6855              		.loc 2 2282 13 discriminator 6
 6856 0ab0 D7F8D030 		ldr	r3, [r7, #208]
 6857 0ab4 43F48003 		orr	r3, r3, #4194304
 6858 0ab8 1946     		mov	r1, r3
 6859 0aba 1046     		mov	r0, r2
 6860 0abc FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
 6861 0ac0 08E0     		b	.L386
 6862              	.L428:
2283:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2284:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2285:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else
2286:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/cc6jq3Wn.s 			page 305


2287:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* nothing to do */
2288:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2289:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2290:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If the requested internal measurement path has already been enabled  */
2291:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* and other ADC of the common group are enabled, internal              */
2292:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* measurement paths cannot be enabled.                                 */
2293:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2294:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2295:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
2296:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 6863              		.loc 2 2296 9 is_stmt 1
 6864 0ac2 7B68     		ldr	r3, [r7, #4]
 6865 0ac4 5B6D     		ldr	r3, [r3, #84]
 6866 0ac6 43F02002 		orr	r2, r3, #32
 6867 0aca 7B68     		ldr	r3, [r7, #4]
 6868 0acc 5A65     		str	r2, [r3, #84]
2297:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2298:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 6869              		.loc 2 2298 24
 6870 0ace 0123     		movs	r3, #1
 6871 0ad0 87F8E730 		strb	r3, [r7, #231]
 6872              	.L386:
2299:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2300:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2301:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2302:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2303:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2304:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
2305:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 6873              		.loc 2 2305 3
 6874 0ad4 7B68     		ldr	r3, [r7, #4]
 6875 0ad6 0022     		movs	r2, #0
 6876 0ad8 83F85020 		strb	r2, [r3, #80]
2306:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2307:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
2308:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 6877              		.loc 2 2308 10
 6878 0adc 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 6879              	.L311:
2309:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 6880              		.loc 2 2309 1
 6881 0ae0 1846     		mov	r0, r3
 6882 0ae2 EC37     		adds	r7, r7, #236
 6883              	.LCFI286:
 6884              		.cfi_def_cfa_offset 12
 6885 0ae4 BD46     		mov	sp, r7
 6886              	.LCFI287:
 6887              		.cfi_def_cfa_register 13
 6888              		@ sp needed
 6889 0ae6 90BD     		pop	{r4, r7, pc}
 6890              	.L455:
 6891              		.align	2
 6892              	.L454:
 6893 0ae8 00600258 		.word	1476550656
 6894 0aec 00200240 		.word	1073881088
 6895 0af0 00210240 		.word	1073881344
 6896 0af4 00230240 		.word	1073881856
ARM GAS  /tmp/cc6jq3Wn.s 			page 306


 6897 0af8 00630258 		.word	1476551424
 6898 0afc 000084CB 		.word	-880541696
 6899 0b00 00000000 		.word	SystemCoreClock
 6900 0b04 632D3E05 		.word	87960931
 6901 0b08 000052C7 		.word	-950927360
 6902 0b0c 0000B8CF 		.word	-810024960
 6903              		.cfi_endproc
 6904              	.LFE355:
 6906              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 6907              		.align	1
 6908              		.global	HAL_ADCEx_MultiModeConfigChannel
 6909              		.syntax unified
 6910              		.thumb
 6911              		.thumb_func
 6912              		.fpu fpv5-d16
 6914              	HAL_ADCEx_MultiModeConfigChannel:
 6915              	.LFB356:
2310:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2311:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2312:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
2313:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
2314:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following
2315:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters
2316:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without resetting
2317:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         the ADCs.
2318:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
2319:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure
2320:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
2321:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To move back configuration from multimode to single mode, ADC must
2322:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
2323:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc Master ADC handle
2324:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param multimode Structure of ADC multimode configuration
2325:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2326:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2327:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *m
2328:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 6916              		.loc 2 2328 1
 6917              		.cfi_startproc
 6918              		@ args = 0, pretend = 0, frame = 120
 6919              		@ frame_needed = 1, uses_anonymous_args = 0
 6920 0000 90B5     		push	{r4, r7, lr}
 6921              	.LCFI288:
 6922              		.cfi_def_cfa_offset 12
 6923              		.cfi_offset 4, -12
 6924              		.cfi_offset 7, -8
 6925              		.cfi_offset 14, -4
 6926 0002 9FB0     		sub	sp, sp, #124
 6927              	.LCFI289:
 6928              		.cfi_def_cfa_offset 136
 6929 0004 00AF     		add	r7, sp, #0
 6930              	.LCFI290:
 6931              		.cfi_def_cfa_register 7
 6932 0006 7860     		str	r0, [r7, #4]
 6933 0008 3960     		str	r1, [r7]
2329:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6934              		.loc 2 2329 21
 6935 000a 0023     		movs	r3, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 307


 6936 000c 87F87730 		strb	r3, [r7, #119]
2330:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
2331:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef  tmphadcSlave;
2332:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
2333:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2334:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2335:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
2336:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE(multimode->Mode));
2337:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (multimode->Mode != ADC_MODE_INDEPENDENT)
2338:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2339:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
2340:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
2341:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2342:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2343:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
2344:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 6937              		.loc 2 2344 3
 6938 0010 7B68     		ldr	r3, [r7, #4]
 6939 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 6940 0016 012B     		cmp	r3, #1
 6941 0018 01D1     		bne	.L457
 6942              		.loc 2 2344 3 is_stmt 0 discriminator 1
 6943 001a 0223     		movs	r3, #2
 6944 001c BEE0     		b	.L475
 6945              	.L457:
 6946              		.loc 2 2344 3 discriminator 2
 6947 001e 7B68     		ldr	r3, [r7, #4]
 6948 0020 0122     		movs	r2, #1
 6949 0022 83F85020 		strb	r2, [r3, #80]
2345:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2346:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmphadcSlave.State = HAL_ADC_STATE_RESET;
 6950              		.loc 2 2346 22 is_stmt 1 discriminator 2
 6951 0026 0023     		movs	r3, #0
 6952 0028 FB65     		str	r3, [r7, #92]
2347:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 6953              		.loc 2 2347 26 discriminator 2
 6954 002a 0023     		movs	r3, #0
 6955 002c 3B66     		str	r3, [r7, #96]
2348:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2349:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 6956              		.loc 2 2349 3 discriminator 2
 6957 002e 7B68     		ldr	r3, [r7, #4]
 6958 0030 1B68     		ldr	r3, [r3]
 6959 0032 5C4A     		ldr	r2, .L477
 6960 0034 9342     		cmp	r3, r2
 6961 0036 02D1     		bne	.L459
 6962              		.loc 2 2349 3 is_stmt 0 discriminator 1
 6963 0038 5B4B     		ldr	r3, .L477+4
 6964 003a BB60     		str	r3, [r7, #8]
 6965 003c 01E0     		b	.L460
 6966              	.L459:
 6967              		.loc 2 2349 3 discriminator 2
 6968 003e 0023     		movs	r3, #0
 6969 0040 BB60     		str	r3, [r7, #8]
 6970              	.L460:
2350:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2351:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmphadcSlave.Instance == NULL)
ARM GAS  /tmp/cc6jq3Wn.s 			page 308


 6971              		.loc 2 2351 19 is_stmt 1
 6972 0042 BB68     		ldr	r3, [r7, #8]
 6973              		.loc 2 2351 6
 6974 0044 002B     		cmp	r3, #0
 6975 0046 0BD1     		bne	.L461
2352:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2353:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2354:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 6976              		.loc 2 2354 5
 6977 0048 7B68     		ldr	r3, [r7, #4]
 6978 004a 5B6D     		ldr	r3, [r3, #84]
 6979 004c 43F02002 		orr	r2, r3, #32
 6980 0050 7B68     		ldr	r3, [r7, #4]
 6981 0052 5A65     		str	r2, [r3, #84]
2355:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2356:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process unlocked */
2357:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 6982              		.loc 2 2357 5
 6983 0054 7B68     		ldr	r3, [r7, #4]
 6984 0056 0022     		movs	r2, #0
 6985 0058 83F85020 		strb	r2, [r3, #80]
2358:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2359:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_ERROR;
 6986              		.loc 2 2359 12
 6987 005c 0123     		movs	r3, #1
 6988 005e 9DE0     		b	.L475
 6989              	.L461:
2360:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2361:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2362:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2363:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2364:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
2365:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Multimode DATA Format configuration                                   */
2366:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 6990              		.loc 2 2366 38
 6991 0060 BB68     		ldr	r3, [r7, #8]
 6992 0062 1846     		mov	r0, r3
 6993 0064 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6994 0068 3867     		str	r0, [r7, #112]
2367:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 6995              		.loc 2 2367 8
 6996 006a 7B68     		ldr	r3, [r7, #4]
 6997 006c 1B68     		ldr	r3, [r3]
 6998 006e 1846     		mov	r0, r3
 6999 0070 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7000 0074 0346     		mov	r3, r0
 7001              		.loc 2 2367 6
 7002 0076 002B     		cmp	r3, #0
 7003 0078 7FD1     		bne	.L462
2368:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 7004              		.loc 2 2368 7
 7005 007a 3B6F     		ldr	r3, [r7, #112]
 7006 007c 002B     		cmp	r3, #0
 7007 007e 7CD1     		bne	.L462
2369:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2370:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Pointer to the common control register */
2371:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
ARM GAS  /tmp/cc6jq3Wn.s 			page 309


 7008              		.loc 2 2371 21
 7009 0080 7B68     		ldr	r3, [r7, #4]
 7010 0082 1B68     		ldr	r3, [r3]
 7011 0084 474A     		ldr	r2, .L477
 7012 0086 9342     		cmp	r3, r2
 7013 0088 04D0     		beq	.L463
 7014              		.loc 2 2371 21 is_stmt 0 discriminator 2
 7015 008a 7B68     		ldr	r3, [r7, #4]
 7016 008c 1B68     		ldr	r3, [r3]
 7017 008e 464A     		ldr	r2, .L477+4
 7018 0090 9342     		cmp	r3, r2
 7019 0092 01D1     		bne	.L464
 7020              	.L463:
 7021              		.loc 2 2371 21 discriminator 3
 7022 0094 454B     		ldr	r3, .L477+8
 7023 0096 00E0     		b	.L465
 7024              	.L464:
 7025              		.loc 2 2371 21 discriminator 4
 7026 0098 454B     		ldr	r3, .L477+12
 7027              	.L465:
 7028              		.loc 2 2371 19 is_stmt 1 discriminator 6
 7029 009a FB66     		str	r3, [r7, #108]
2372:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2373:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If multimode is selected, configure all multimode parameters.          */
2374:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Otherwise, reset multimode parameters (can be used in case of          */
2375:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* transition from multimode to independent mode).                        */
2376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (multimode->Mode != ADC_MODE_INDEPENDENT)
 7030              		.loc 2 2376 18 discriminator 6
 7031 009c 3B68     		ldr	r3, [r7]
 7032 009e 1B68     		ldr	r3, [r3]
 7033              		.loc 2 2376 8 discriminator 6
 7034 00a0 002B     		cmp	r3, #0
 7035 00a2 39D0     		beq	.L466
2377:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2378:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 7036              		.loc 2 2378 7
 7037 00a4 FB6E     		ldr	r3, [r7, #108]
 7038 00a6 9B68     		ldr	r3, [r3, #8]
 7039 00a8 23F44042 		bic	r2, r3, #49152
 7040 00ac 3B68     		ldr	r3, [r7]
 7041 00ae 5B68     		ldr	r3, [r3, #4]
 7042 00b0 1A43     		orrs	r2, r2, r3
 7043 00b2 FB6E     		ldr	r3, [r7, #108]
 7044 00b4 9A60     		str	r2, [r3, #8]
2379:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2380:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:              */
2381:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                            */
2382:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode delay                                                     */
2383:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    Note: Delay range depends on selected resolution:                   */
2384:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 9 clock cycles for 16 bits                              */
2385:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 9 clock cycles for 14 bits,                             */
2386:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 8 clock cycles for 12 bits                              */
2387:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
2388:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    If a higher delay is selected, it will be clipped to maximum delay  */
2389:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    range                                                               */
2390:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2391:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
ARM GAS  /tmp/cc6jq3Wn.s 			page 310


 7045              		.loc 2 2391 11
 7046 00b6 7B68     		ldr	r3, [r7, #4]
 7047 00b8 1B68     		ldr	r3, [r3]
 7048              		.loc 2 2391 93
 7049 00ba 3A4A     		ldr	r2, .L477
 7050 00bc 9342     		cmp	r3, r2
 7051 00be 04D0     		beq	.L467
 7052              		.loc 2 2391 11 discriminator 2
 7053 00c0 7B68     		ldr	r3, [r7, #4]
 7054 00c2 1B68     		ldr	r3, [r3]
 7055 00c4 384A     		ldr	r2, .L477+4
 7056 00c6 9342     		cmp	r3, r2
 7057 00c8 0ED1     		bne	.L468
 7058              	.L467:
 7059              		.loc 2 2391 11 is_stmt 0 discriminator 3
 7060 00ca 3648     		ldr	r0, .L477
 7061 00cc FFF7FEFF 		bl	LL_ADC_IsEnabled
 7062 00d0 0446     		mov	r4, r0
 7063 00d2 3548     		ldr	r0, .L477+4
 7064 00d4 FFF7FEFF 		bl	LL_ADC_IsEnabled
 7065 00d8 0346     		mov	r3, r0
 7066 00da 2343     		orrs	r3, r3, r4
 7067              		.loc 2 2391 93 is_stmt 1 discriminator 3
 7068 00dc 002B     		cmp	r3, #0
 7069 00de 0CBF     		ite	eq
 7070 00e0 0123     		moveq	r3, #1
 7071 00e2 0023     		movne	r3, #0
 7072 00e4 DBB2     		uxtb	r3, r3
 7073 00e6 08E0     		b	.L469
 7074              	.L468:
 7075              		.loc 2 2391 11 discriminator 4
 7076 00e8 3248     		ldr	r0, .L477+16
 7077 00ea FFF7FEFF 		bl	LL_ADC_IsEnabled
 7078 00ee 0346     		mov	r3, r0
 7079              		.loc 2 2391 93 discriminator 4
 7080 00f0 002B     		cmp	r3, #0
 7081 00f2 0CBF     		ite	eq
 7082 00f4 0123     		moveq	r3, #1
 7083 00f6 0023     		movne	r3, #0
 7084 00f8 DBB2     		uxtb	r3, r3
 7085              	.L469:
 7086              		.loc 2 2391 10 discriminator 6
 7087 00fa 002B     		cmp	r3, #0
 7088 00fc 47D0     		beq	.L476
2392:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2393:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         MODIFY_REG(tmpADC_Common->CCR,
 7089              		.loc 2 2393 9
 7090 00fe FB6E     		ldr	r3, [r7, #108]
 7091 0100 9A68     		ldr	r2, [r3, #8]
 7092 0102 2D4B     		ldr	r3, .L477+20
 7093 0104 1340     		ands	r3, r3, r2
 7094 0106 3A68     		ldr	r2, [r7]
 7095 0108 1168     		ldr	r1, [r2]
 7096 010a 3A68     		ldr	r2, [r7]
 7097 010c 9268     		ldr	r2, [r2, #8]
 7098 010e 0A43     		orrs	r2, r2, r1
 7099 0110 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cc6jq3Wn.s 			page 311


 7100 0112 FB6E     		ldr	r3, [r7, #108]
 7101 0114 9A60     		str	r2, [r3, #8]
2376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 7102              		.loc 2 2376 8
 7103 0116 3AE0     		b	.L476
 7104              	.L466:
2394:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    ADC_CCR_DUAL |
2395:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    ADC_CCR_DELAY,
2396:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    multimode->Mode |
2397:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    multimode->TwoSamplingDelay
2398:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                   );
2399:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2400:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2401:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else /* ADC_MODE_INDEPENDENT */
2402:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2403:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 7105              		.loc 2 2403 7
 7106 0118 FB6E     		ldr	r3, [r7, #108]
 7107 011a 9B68     		ldr	r3, [r3, #8]
 7108 011c 23F44042 		bic	r2, r3, #49152
 7109 0120 FB6E     		ldr	r3, [r7, #108]
 7110 0122 9A60     		str	r2, [r3, #8]
2404:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2405:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:                */
2406:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                              */
2407:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode delay                                                       */
2408:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 7111              		.loc 2 2408 11
 7112 0124 7B68     		ldr	r3, [r7, #4]
 7113 0126 1B68     		ldr	r3, [r3]
 7114              		.loc 2 2408 93
 7115 0128 1E4A     		ldr	r2, .L477
 7116 012a 9342     		cmp	r3, r2
 7117 012c 04D0     		beq	.L471
 7118              		.loc 2 2408 11 discriminator 2
 7119 012e 7B68     		ldr	r3, [r7, #4]
 7120 0130 1B68     		ldr	r3, [r3]
 7121 0132 1D4A     		ldr	r2, .L477+4
 7122 0134 9342     		cmp	r3, r2
 7123 0136 0ED1     		bne	.L472
 7124              	.L471:
 7125              		.loc 2 2408 11 is_stmt 0 discriminator 3
 7126 0138 1A48     		ldr	r0, .L477
 7127 013a FFF7FEFF 		bl	LL_ADC_IsEnabled
 7128 013e 0446     		mov	r4, r0
 7129 0140 1948     		ldr	r0, .L477+4
 7130 0142 FFF7FEFF 		bl	LL_ADC_IsEnabled
 7131 0146 0346     		mov	r3, r0
 7132 0148 2343     		orrs	r3, r3, r4
 7133              		.loc 2 2408 93 is_stmt 1 discriminator 3
 7134 014a 002B     		cmp	r3, #0
 7135 014c 0CBF     		ite	eq
 7136 014e 0123     		moveq	r3, #1
 7137 0150 0023     		movne	r3, #0
 7138 0152 DBB2     		uxtb	r3, r3
 7139 0154 08E0     		b	.L473
 7140              	.L472:
ARM GAS  /tmp/cc6jq3Wn.s 			page 312


 7141              		.loc 2 2408 11 discriminator 4
 7142 0156 1748     		ldr	r0, .L477+16
 7143 0158 FFF7FEFF 		bl	LL_ADC_IsEnabled
 7144 015c 0346     		mov	r3, r0
 7145              		.loc 2 2408 93 discriminator 4
 7146 015e 002B     		cmp	r3, #0
 7147 0160 0CBF     		ite	eq
 7148 0162 0123     		moveq	r3, #1
 7149 0164 0023     		movne	r3, #0
 7150 0166 DBB2     		uxtb	r3, r3
 7151              	.L473:
 7152              		.loc 2 2408 10 discriminator 6
 7153 0168 002B     		cmp	r3, #0
 7154 016a 10D0     		beq	.L476
2409:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2410:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 7155              		.loc 2 2410 9
 7156 016c FB6E     		ldr	r3, [r7, #108]
 7157 016e 9A68     		ldr	r2, [r3, #8]
 7158 0170 114B     		ldr	r3, .L477+20
 7159 0172 1340     		ands	r3, r3, r2
 7160 0174 FA6E     		ldr	r2, [r7, #108]
 7161 0176 9360     		str	r3, [r2, #8]
2376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 7162              		.loc 2 2376 8
 7163 0178 09E0     		b	.L476
 7164              	.L462:
2411:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2412:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2413:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2414:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
2415:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
2416:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2417:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2418:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2419:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7165              		.loc 2 2419 5
 7166 017a 7B68     		ldr	r3, [r7, #4]
 7167 017c 5B6D     		ldr	r3, [r3, #84]
 7168 017e 43F02002 		orr	r2, r3, #32
 7169 0182 7B68     		ldr	r3, [r7, #4]
 7170 0184 5A65     		str	r2, [r3, #84]
2420:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2421:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 7171              		.loc 2 2421 20
 7172 0186 0123     		movs	r3, #1
 7173 0188 87F87730 		strb	r3, [r7, #119]
 7174 018c 00E0     		b	.L474
 7175              	.L476:
2376:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 7176              		.loc 2 2376 8
 7177 018e 00BF     		nop
 7178              	.L474:
2422:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2423:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2424:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
2425:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
ARM GAS  /tmp/cc6jq3Wn.s 			page 313


 7179              		.loc 2 2425 3
 7180 0190 7B68     		ldr	r3, [r7, #4]
 7181 0192 0022     		movs	r2, #0
 7182 0194 83F85020 		strb	r2, [r3, #80]
2426:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2427:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
2428:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 7183              		.loc 2 2428 10
 7184 0198 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 7185              	.L475:
2429:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 7186              		.loc 2 2429 1 discriminator 2
 7187 019c 1846     		mov	r0, r3
 7188 019e 7C37     		adds	r7, r7, #124
 7189              	.LCFI291:
 7190              		.cfi_def_cfa_offset 12
 7191 01a0 BD46     		mov	sp, r7
 7192              	.LCFI292:
 7193              		.cfi_def_cfa_register 13
 7194              		@ sp needed
 7195 01a2 90BD     		pop	{r4, r7, pc}
 7196              	.L478:
 7197              		.align	2
 7198              	.L477:
 7199 01a4 00200240 		.word	1073881088
 7200 01a8 00210240 		.word	1073881344
 7201 01ac 00230240 		.word	1073881856
 7202 01b0 00630258 		.word	1476551424
 7203 01b4 00600258 		.word	1476550656
 7204 01b8 E0F0FFFF 		.word	-3872
 7205              		.cfi_endproc
 7206              	.LFE356:
 7208              		.section	.text.HAL_ADCEx_EnableInjectedQueue,"ax",%progbits
 7209              		.align	1
 7210              		.global	HAL_ADCEx_EnableInjectedQueue
 7211              		.syntax unified
 7212              		.thumb
 7213              		.thumb_func
 7214              		.fpu fpv5-d16
 7216              	HAL_ADCEx_EnableInjectedQueue:
 7217              	.LFB357:
2430:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2431:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2432:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable Injected Queue
2433:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function resets CFGR register JQDIS bit in order to enable the
2434:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2435:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2436:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is ongoing.
2437:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2438:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2439:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2440:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
2441:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 7218              		.loc 2 2441 1
 7219              		.cfi_startproc
 7220              		@ args = 0, pretend = 0, frame = 24
 7221              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc6jq3Wn.s 			page 314


 7222 0000 80B5     		push	{r7, lr}
 7223              	.LCFI293:
 7224              		.cfi_def_cfa_offset 8
 7225              		.cfi_offset 7, -8
 7226              		.cfi_offset 14, -4
 7227 0002 86B0     		sub	sp, sp, #24
 7228              	.LCFI294:
 7229              		.cfi_def_cfa_offset 32
 7230 0004 00AF     		add	r7, sp, #0
 7231              	.LCFI295:
 7232              		.cfi_def_cfa_register 7
 7233 0006 7860     		str	r0, [r7, #4]
2442:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2443:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2444:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2445:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2446:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2447:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2448:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2449:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 7234              		.loc 2 2449 44
 7235 0008 7B68     		ldr	r3, [r7, #4]
 7236 000a 1B68     		ldr	r3, [r3]
 7237 000c 1846     		mov	r0, r3
 7238 000e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7239 0012 3861     		str	r0, [r7, #16]
2450:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 7240              		.loc 2 2450 45
 7241 0014 7B68     		ldr	r3, [r7, #4]
 7242 0016 1B68     		ldr	r3, [r3]
 7243 0018 1846     		mov	r0, r3
 7244 001a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 7245 001e F860     		str	r0, [r7, #12]
2451:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2452:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2453:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 7246              		.loc 2 2453 6
 7247 0020 3B69     		ldr	r3, [r7, #16]
 7248 0022 002B     		cmp	r3, #0
 7249 0024 13D1     		bne	.L480
2454:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 7250              		.loc 2 2454 7
 7251 0026 FB68     		ldr	r3, [r7, #12]
 7252 0028 002B     		cmp	r3, #0
 7253 002a 10D1     		bne	.L480
2455:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2456:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2457:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 7254              		.loc 2 2457 5
 7255 002c 7B68     		ldr	r3, [r7, #4]
 7256 002e 1B68     		ldr	r3, [r3]
 7257 0030 DA68     		ldr	r2, [r3, #12]
 7258 0032 7B68     		ldr	r3, [r7, #4]
 7259 0034 1B68     		ldr	r3, [r3]
 7260 0036 22F00042 		bic	r2, r2, #-2147483648
 7261 003a DA60     		str	r2, [r3, #12]
2458:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 315


2459:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update state, clear previous result related to injected queue overflow */
2460:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 7262              		.loc 2 2460 5
 7263 003c 7B68     		ldr	r3, [r7, #4]
 7264 003e 5B6D     		ldr	r3, [r3, #84]
 7265 0040 23F48042 		bic	r2, r3, #16384
 7266 0044 7B68     		ldr	r3, [r7, #4]
 7267 0046 5A65     		str	r2, [r3, #84]
2461:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2462:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 7268              		.loc 2 2462 20
 7269 0048 0023     		movs	r3, #0
 7270 004a FB75     		strb	r3, [r7, #23]
 7271 004c 01E0     		b	.L481
 7272              	.L480:
2463:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2464:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2465:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2466:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 7273              		.loc 2 2466 20
 7274 004e 0123     		movs	r3, #1
 7275 0050 FB75     		strb	r3, [r7, #23]
 7276              	.L481:
2467:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2468:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2469:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 7277              		.loc 2 2469 10
 7278 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2470:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 7279              		.loc 2 2470 1
 7280 0054 1846     		mov	r0, r3
 7281 0056 1837     		adds	r7, r7, #24
 7282              	.LCFI296:
 7283              		.cfi_def_cfa_offset 8
 7284 0058 BD46     		mov	sp, r7
 7285              	.LCFI297:
 7286              		.cfi_def_cfa_register 13
 7287              		@ sp needed
 7288 005a 80BD     		pop	{r7, pc}
 7289              		.cfi_endproc
 7290              	.LFE357:
 7292              		.section	.text.HAL_ADCEx_DisableInjectedQueue,"ax",%progbits
 7293              		.align	1
 7294              		.global	HAL_ADCEx_DisableInjectedQueue
 7295              		.syntax unified
 7296              		.thumb
 7297              		.thumb_func
 7298              		.fpu fpv5-d16
 7300              	HAL_ADCEx_DisableInjectedQueue:
 7301              	.LFB358:
2471:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2472:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2473:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Disable Injected Queue
2474:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function sets CFGR register JQDIS bit in order to disable the
2475:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2476:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2477:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is ongoing.
ARM GAS  /tmp/cc6jq3Wn.s 			page 316


2478:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2479:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2480:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2481:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
2482:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 7302              		.loc 2 2482 1
 7303              		.cfi_startproc
 7304              		@ args = 0, pretend = 0, frame = 24
 7305              		@ frame_needed = 1, uses_anonymous_args = 0
 7306 0000 80B5     		push	{r7, lr}
 7307              	.LCFI298:
 7308              		.cfi_def_cfa_offset 8
 7309              		.cfi_offset 7, -8
 7310              		.cfi_offset 14, -4
 7311 0002 86B0     		sub	sp, sp, #24
 7312              	.LCFI299:
 7313              		.cfi_def_cfa_offset 32
 7314 0004 00AF     		add	r7, sp, #0
 7315              	.LCFI300:
 7316              		.cfi_def_cfa_register 7
 7317 0006 7860     		str	r0, [r7, #4]
2483:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2484:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2485:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2486:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2487:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2488:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2489:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2490:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 7318              		.loc 2 2490 44
 7319 0008 7B68     		ldr	r3, [r7, #4]
 7320 000a 1B68     		ldr	r3, [r3]
 7321 000c 1846     		mov	r0, r3
 7322 000e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7323 0012 3861     		str	r0, [r7, #16]
2491:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 7324              		.loc 2 2491 45
 7325 0014 7B68     		ldr	r3, [r7, #4]
 7326 0016 1B68     		ldr	r3, [r3]
 7327 0018 1846     		mov	r0, r3
 7328 001a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 7329 001e F860     		str	r0, [r7, #12]
2492:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2493:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2494:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 7330              		.loc 2 2494 6
 7331 0020 3B69     		ldr	r3, [r7, #16]
 7332 0022 002B     		cmp	r3, #0
 7333 0024 0CD1     		bne	.L484
2495:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 7334              		.loc 2 2495 7
 7335 0026 FB68     		ldr	r3, [r7, #12]
 7336 0028 002B     		cmp	r3, #0
 7337 002a 09D1     		bne	.L484
2496:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2497:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2498:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
ARM GAS  /tmp/cc6jq3Wn.s 			page 317


 7338              		.loc 2 2498 5
 7339 002c 7B68     		ldr	r3, [r7, #4]
 7340 002e 1B68     		ldr	r3, [r3]
 7341 0030 4FF00041 		mov	r1, #-2147483648
 7342 0034 1846     		mov	r0, r3
 7343 0036 FFF7FEFF 		bl	LL_ADC_INJ_SetQueueMode
2499:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 7344              		.loc 2 2499 20
 7345 003a 0023     		movs	r3, #0
 7346 003c FB75     		strb	r3, [r7, #23]
 7347 003e 01E0     		b	.L485
 7348              	.L484:
2500:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2501:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2502:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2503:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 7349              		.loc 2 2503 20
 7350 0040 0123     		movs	r3, #1
 7351 0042 FB75     		strb	r3, [r7, #23]
 7352              	.L485:
2504:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2505:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2506:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 7353              		.loc 2 2506 10
 7354 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2507:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 7355              		.loc 2 2507 1
 7356 0046 1846     		mov	r0, r3
 7357 0048 1837     		adds	r7, r7, #24
 7358              	.LCFI301:
 7359              		.cfi_def_cfa_offset 8
 7360 004a BD46     		mov	sp, r7
 7361              	.LCFI302:
 7362              		.cfi_def_cfa_register 13
 7363              		@ sp needed
 7364 004c 80BD     		pop	{r7, pc}
 7365              		.cfi_endproc
 7366              	.LFE358:
 7368              		.section	.text.HAL_ADCEx_DisableVoltageRegulator,"ax",%progbits
 7369              		.align	1
 7370              		.global	HAL_ADCEx_DisableVoltageRegulator
 7371              		.syntax unified
 7372              		.thumb
 7373              		.thumb_func
 7374              		.fpu fpv5-d16
 7376              	HAL_ADCEx_DisableVoltageRegulator:
 7377              	.LFB359:
2508:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2509:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2510:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Disable ADC voltage regulator.
2511:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Disabling voltage regulator allows to save power. This operation can
2512:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         be carried out only when ADC is disabled.
2513:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To enable again the voltage regulator, the user is expected to
2514:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API.
2515:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2516:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2517:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
ARM GAS  /tmp/cc6jq3Wn.s 			page 318


2518:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableVoltageRegulator(ADC_HandleTypeDef *hadc)
2519:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 7378              		.loc 2 2519 1
 7379              		.cfi_startproc
 7380              		@ args = 0, pretend = 0, frame = 16
 7381              		@ frame_needed = 1, uses_anonymous_args = 0
 7382 0000 80B5     		push	{r7, lr}
 7383              	.LCFI303:
 7384              		.cfi_def_cfa_offset 8
 7385              		.cfi_offset 7, -8
 7386              		.cfi_offset 14, -4
 7387 0002 84B0     		sub	sp, sp, #16
 7388              	.LCFI304:
 7389              		.cfi_def_cfa_offset 24
 7390 0004 00AF     		add	r7, sp, #0
 7391              	.LCFI305:
 7392              		.cfi_def_cfa_register 7
 7393 0006 7860     		str	r0, [r7, #4]
2520:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2521:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2522:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2523:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2524:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2525:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2526:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 7394              		.loc 2 2526 7
 7395 0008 7B68     		ldr	r3, [r7, #4]
 7396 000a 1B68     		ldr	r3, [r3]
 7397 000c 1846     		mov	r0, r3
 7398 000e FFF7FEFF 		bl	LL_ADC_IsEnabled
 7399 0012 0346     		mov	r3, r0
 7400              		.loc 2 2526 6
 7401 0014 002B     		cmp	r3, #0
 7402 0016 07D1     		bne	.L488
2527:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2528:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_DisableInternalRegulator(hadc->Instance);
 7403              		.loc 2 2528 5
 7404 0018 7B68     		ldr	r3, [r7, #4]
 7405 001a 1B68     		ldr	r3, [r3]
 7406 001c 1846     		mov	r0, r3
 7407 001e FFF7FEFF 		bl	LL_ADC_DisableInternalRegulator
2529:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 7408              		.loc 2 2529 20
 7409 0022 0023     		movs	r3, #0
 7410 0024 FB73     		strb	r3, [r7, #15]
 7411 0026 01E0     		b	.L489
 7412              	.L488:
2530:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2531:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2532:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2533:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 7413              		.loc 2 2533 20
 7414 0028 0123     		movs	r3, #1
 7415 002a FB73     		strb	r3, [r7, #15]
 7416              	.L489:
2534:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2535:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/cc6jq3Wn.s 			page 319


2536:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 7417              		.loc 2 2536 10
 7418 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2537:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 7419              		.loc 2 2537 1
 7420 002e 1846     		mov	r0, r3
 7421 0030 1037     		adds	r7, r7, #16
 7422              	.LCFI306:
 7423              		.cfi_def_cfa_offset 8
 7424 0032 BD46     		mov	sp, r7
 7425              	.LCFI307:
 7426              		.cfi_def_cfa_register 13
 7427              		@ sp needed
 7428 0034 80BD     		pop	{r7, pc}
 7429              		.cfi_endproc
 7430              	.LFE359:
 7432              		.section	.text.HAL_ADCEx_EnterADCDeepPowerDownMode,"ax",%progbits
 7433              		.align	1
 7434              		.global	HAL_ADCEx_EnterADCDeepPowerDownMode
 7435              		.syntax unified
 7436              		.thumb
 7437              		.thumb_func
 7438              		.fpu fpv5-d16
 7440              	HAL_ADCEx_EnterADCDeepPowerDownMode:
 7441              	.LFB360:
2538:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2539:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2540:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enter ADC deep-power-down mode
2541:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This mode is achieved in setting DEEPPWD bit and allows to save power
2542:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         in reducing leakage currents. It is particularly interesting before
2543:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         entering stop modes.
2544:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Setting DEEPPWD automatically clears ADVREGEN bit and disables the
2545:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC voltage regulator. This means that this API encompasses
2546:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_DisableVoltageRegulator(). Additionally, the internal
2547:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         calibration is lost.
2548:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To exit the ADC deep-power-down mode, the user is expected to
2549:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API as well as to relaunch a calibration
2550:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         with HAL_ADCEx_Calibration_Start() API or to re-apply a previously
2551:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         saved calibration factor.
2552:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2553:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2554:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2555:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnterADCDeepPowerDownMode(ADC_HandleTypeDef *hadc)
2556:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 7442              		.loc 2 2556 1
 7443              		.cfi_startproc
 7444              		@ args = 0, pretend = 0, frame = 16
 7445              		@ frame_needed = 1, uses_anonymous_args = 0
 7446 0000 80B5     		push	{r7, lr}
 7447              	.LCFI308:
 7448              		.cfi_def_cfa_offset 8
 7449              		.cfi_offset 7, -8
 7450              		.cfi_offset 14, -4
 7451 0002 84B0     		sub	sp, sp, #16
 7452              	.LCFI309:
 7453              		.cfi_def_cfa_offset 24
 7454 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc6jq3Wn.s 			page 320


 7455              	.LCFI310:
 7456              		.cfi_def_cfa_register 7
 7457 0006 7860     		str	r0, [r7, #4]
2557:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2558:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2559:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2560:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2561:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2562:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2563:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 7458              		.loc 2 2563 7
 7459 0008 7B68     		ldr	r3, [r7, #4]
 7460 000a 1B68     		ldr	r3, [r3]
 7461 000c 1846     		mov	r0, r3
 7462 000e FFF7FEFF 		bl	LL_ADC_IsEnabled
 7463 0012 0346     		mov	r3, r0
 7464              		.loc 2 2563 6
 7465 0014 002B     		cmp	r3, #0
 7466 0016 07D1     		bne	.L492
2564:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2565:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_EnableDeepPowerDown(hadc->Instance);
 7467              		.loc 2 2565 5
 7468 0018 7B68     		ldr	r3, [r7, #4]
 7469 001a 1B68     		ldr	r3, [r3]
 7470 001c 1846     		mov	r0, r3
 7471 001e FFF7FEFF 		bl	LL_ADC_EnableDeepPowerDown
2566:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 7472              		.loc 2 2566 20
 7473 0022 0023     		movs	r3, #0
 7474 0024 FB73     		strb	r3, [r7, #15]
 7475 0026 01E0     		b	.L493
 7476              	.L492:
2567:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2568:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2569:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2570:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 7477              		.loc 2 2570 20
 7478 0028 0123     		movs	r3, #1
 7479 002a FB73     		strb	r3, [r7, #15]
 7480              	.L493:
2571:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2572:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2573:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 7481              		.loc 2 2573 10
 7482 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2574:./Libraries/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 7483              		.loc 2 2574 1
 7484 002e 1846     		mov	r0, r3
 7485 0030 1037     		adds	r7, r7, #16
 7486              	.LCFI311:
 7487              		.cfi_def_cfa_offset 8
 7488 0032 BD46     		mov	sp, r7
 7489              	.LCFI312:
 7490              		.cfi_def_cfa_register 13
 7491              		@ sp needed
 7492 0034 80BD     		pop	{r7, pc}
 7493              		.cfi_endproc
ARM GAS  /tmp/cc6jq3Wn.s 			page 321


 7494              	.LFE360:
 7496              		.text
 7497              	.Letext0:
 7498              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 7499              		.file 5 "./Libraries/CMSIS/Core/Include/core_cm7.h"
 7500              		.file 6 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 7501              		.file 7 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h747xx.h"
 7502              		.file 8 "./Libraries/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 7503              		.file 9 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7504              		.file 10 "/usr/include/newlib/sys/_types.h"
 7505              		.file 11 "/usr/include/newlib/sys/reent.h"
 7506              		.file 12 "/usr/include/newlib/sys/lock.h"
 7507              		.file 13 "/usr/include/newlib/math.h"
 7508              		.file 14 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 7509              		.file 15 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 7510              		.file 16 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 7511              		.file 17 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
 7512              		.file 18 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 7513              		.file 19 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 7514              		.file 20 "./Libraries/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cc6jq3Wn.s 			page 322


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_adc_ex.c
     /tmp/cc6jq3Wn.s:17     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 $t
     /tmp/cc6jq3Wn.s:24     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 LL_ADC_SetCommonPathInternalCh
     /tmp/cc6jq3Wn.s:70     .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 $t
     /tmp/cc6jq3Wn.s:76     .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 LL_ADC_GetCommonPathInternalCh
     /tmp/cc6jq3Wn.s:117    .text.LL_ADC_SetCalibrationOffsetFactor:0000000000000000 $t
     /tmp/cc6jq3Wn.s:123    .text.LL_ADC_SetCalibrationOffsetFactor:0000000000000000 LL_ADC_SetCalibrationOffsetFactor
     /tmp/cc6jq3Wn.s:180    .text.LL_ADC_GetCalibrationOffsetFactor:0000000000000000 $t
     /tmp/cc6jq3Wn.s:186    .text.LL_ADC_GetCalibrationOffsetFactor:0000000000000000 LL_ADC_GetCalibrationOffsetFactor
     /tmp/cc6jq3Wn.s:235    .text.LL_ADC_SetCalibrationLinearFactor:0000000000000000 $t
     /tmp/cc6jq3Wn.s:241    .text.LL_ADC_SetCalibrationLinearFactor:0000000000000000 LL_ADC_SetCalibrationLinearFactor
     /tmp/cc6jq3Wn.s:318    .text.LL_ADC_SetCalibrationLinearFactor:000000000000005c $d
     /tmp/cc6jq3Wn.s:323    .text.LL_ADC_GetCalibrationLinearFactor:0000000000000000 $t
     /tmp/cc6jq3Wn.s:329    .text.LL_ADC_GetCalibrationLinearFactor:0000000000000000 LL_ADC_GetCalibrationLinearFactor
     /tmp/cc6jq3Wn.s:402    .text.LL_ADC_GetCalibrationLinearFactor:000000000000004c $d
     /tmp/cc6jq3Wn.s:407    .text.LL_ADC_SetOffset:0000000000000000 $t
     /tmp/cc6jq3Wn.s:413    .text.LL_ADC_SetOffset:0000000000000000 LL_ADC_SetOffset
     /tmp/cc6jq3Wn.s:472    .text.LL_ADC_GetOffsetChannel:0000000000000000 $t
     /tmp/cc6jq3Wn.s:478    .text.LL_ADC_GetOffsetChannel:0000000000000000 LL_ADC_GetOffsetChannel
     /tmp/cc6jq3Wn.s:528    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 $t
     /tmp/cc6jq3Wn.s:534    .text.LL_ADC_SetOffsetSignedSaturation:0000000000000000 LL_ADC_SetOffsetSignedSaturation
     /tmp/cc6jq3Wn.s:591    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/cc6jq3Wn.s:597    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 LL_ADC_REG_IsTriggerSourceSWStart
     /tmp/cc6jq3Wn.s:647    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/cc6jq3Wn.s:653    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 LL_ADC_INJ_IsTriggerSourceSWStart
     /tmp/cc6jq3Wn.s:703    .text.LL_ADC_INJ_GetTrigAuto:0000000000000000 $t
     /tmp/cc6jq3Wn.s:709    .text.LL_ADC_INJ_GetTrigAuto:0000000000000000 LL_ADC_INJ_GetTrigAuto
     /tmp/cc6jq3Wn.s:750    .text.LL_ADC_INJ_SetQueueMode:0000000000000000 $t
     /tmp/cc6jq3Wn.s:756    .text.LL_ADC_INJ_SetQueueMode:0000000000000000 LL_ADC_INJ_SetQueueMode
     /tmp/cc6jq3Wn.s:801    .text.LL_ADC_INJ_SetQueueMode:0000000000000028 $d
     /tmp/cc6jq3Wn.s:806    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 $t
     /tmp/cc6jq3Wn.s:812    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 LL_ADC_SetChannelSamplingTime
     /tmp/cc6jq3Wn.s:879    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 $t
     /tmp/cc6jq3Wn.s:885    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 LL_ADC_SetChannelSingleDiff
     /tmp/cc6jq3Wn.s:939    .text.LL_ADC_SetChannelSingleDiff:0000000000000044 $d
     /tmp/cc6jq3Wn.s:944    .text.LL_ADC_GetMultimode:0000000000000000 $t
     /tmp/cc6jq3Wn.s:950    .text.LL_ADC_GetMultimode:0000000000000000 LL_ADC_GetMultimode
     /tmp/cc6jq3Wn.s:991    .text.LL_ADC_EnableDeepPowerDown:0000000000000000 $t
     /tmp/cc6jq3Wn.s:997    .text.LL_ADC_EnableDeepPowerDown:0000000000000000 LL_ADC_EnableDeepPowerDown
     /tmp/cc6jq3Wn.s:1040   .text.LL_ADC_EnableDeepPowerDown:0000000000000024 $d
     /tmp/cc6jq3Wn.s:1045   .text.LL_ADC_DisableInternalRegulator:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1051   .text.LL_ADC_DisableInternalRegulator:0000000000000000 LL_ADC_DisableInternalRegulator
     /tmp/cc6jq3Wn.s:1093   .text.LL_ADC_DisableInternalRegulator:0000000000000020 $d
     /tmp/cc6jq3Wn.s:1098   .text.LL_ADC_IsEnabled:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1104   .text.LL_ADC_IsEnabled:0000000000000000 LL_ADC_IsEnabled
     /tmp/cc6jq3Wn.s:1154   .text.LL_ADC_StartCalibration:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1160   .text.LL_ADC_StartCalibration:0000000000000000 LL_ADC_StartCalibration
     /tmp/cc6jq3Wn.s:1211   .text.LL_ADC_StartCalibration:0000000000000038 $d
     /tmp/cc6jq3Wn.s:1216   .text.LL_ADC_IsCalibrationOnGoing:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1222   .text.LL_ADC_IsCalibrationOnGoing:0000000000000000 LL_ADC_IsCalibrationOnGoing
     /tmp/cc6jq3Wn.s:1272   .text.LL_ADC_REG_StartConversion:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1278   .text.LL_ADC_REG_StartConversion:0000000000000000 LL_ADC_REG_StartConversion
     /tmp/cc6jq3Wn.s:1321   .text.LL_ADC_REG_StartConversion:0000000000000024 $d
     /tmp/cc6jq3Wn.s:1326   .text.LL_ADC_REG_StopConversion:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1332   .text.LL_ADC_REG_StopConversion:0000000000000000 LL_ADC_REG_StopConversion
     /tmp/cc6jq3Wn.s:1375   .text.LL_ADC_REG_StopConversion:0000000000000024 $d
ARM GAS  /tmp/cc6jq3Wn.s 			page 323


     /tmp/cc6jq3Wn.s:1380   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1386   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 LL_ADC_REG_IsConversionOngoing
     /tmp/cc6jq3Wn.s:1436   .text.LL_ADC_INJ_StartConversion:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1442   .text.LL_ADC_INJ_StartConversion:0000000000000000 LL_ADC_INJ_StartConversion
     /tmp/cc6jq3Wn.s:1485   .text.LL_ADC_INJ_StartConversion:0000000000000024 $d
     /tmp/cc6jq3Wn.s:1490   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1496   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 LL_ADC_INJ_IsConversionOngoing
     /tmp/cc6jq3Wn.s:1546   .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1553   .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
     /tmp/cc6jq3Wn.s:1687   .text.HAL_ADCEx_Calibration_Start:00000000000000c0 $d
     /tmp/cc6jq3Wn.s:1693   .text.HAL_ADCEx_Calibration_GetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1700   .text.HAL_ADCEx_Calibration_GetValue:0000000000000000 HAL_ADCEx_Calibration_GetValue
     /tmp/cc6jq3Wn.s:1740   .text.HAL_ADCEx_LinearCalibration_GetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1747   .text.HAL_ADCEx_LinearCalibration_GetValue:0000000000000000 HAL_ADCEx_LinearCalibration_GetValue
     /tmp/cc6jq3Wn.s:1872   .text.HAL_ADCEx_Calibration_SetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1879   .text.HAL_ADCEx_Calibration_SetValue:0000000000000000 HAL_ADCEx_Calibration_SetValue
     /tmp/cc6jq3Wn.s:1990   .text.HAL_ADCEx_LinearCalibration_SetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:1997   .text.HAL_ADCEx_LinearCalibration_SetValue:0000000000000000 HAL_ADCEx_LinearCalibration_SetValue
     /tmp/cc6jq3Wn.s:2243   .text.HAL_ADCEx_LinearCalibration_SetValue:0000000000000170 $d
     /tmp/cc6jq3Wn.s:2249   .text.HAL_ADCEx_LinearCalibration_FactorLoad:0000000000000000 $t
     /tmp/cc6jq3Wn.s:2256   .text.HAL_ADCEx_LinearCalibration_FactorLoad:0000000000000000 HAL_ADCEx_LinearCalibration_FactorLoad
     /tmp/cc6jq3Wn.s:2364   .text.HAL_ADCEx_LinearCalibration_FactorLoad:0000000000000084 $d
     /tmp/cc6jq3Wn.s:2371   .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
     /tmp/cc6jq3Wn.s:2378   .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
     /tmp/cc6jq3Wn.s:2634   .text.HAL_ADCEx_InjectedStart:0000000000000168 $d
     /tmp/cc6jq3Wn.s:2643   .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
     /tmp/cc6jq3Wn.s:2650   .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
     /tmp/cc6jq3Wn.s:2746   .text.HAL_ADCEx_InjectedStop:0000000000000080 $d
     /tmp/cc6jq3Wn.s:2751   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
     /tmp/cc6jq3Wn.s:2758   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
     /tmp/cc6jq3Wn.s:3053   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000194 $d
     /tmp/cc6jq3Wn.s:3061   .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
     /tmp/cc6jq3Wn.s:3068   .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
     /tmp/cc6jq3Wn.s:3387   .text.HAL_ADCEx_InjectedStart_IT:00000000000001d4 $d
     /tmp/cc6jq3Wn.s:3396   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
     /tmp/cc6jq3Wn.s:3403   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
     /tmp/cc6jq3Wn.s:3507   .text.HAL_ADCEx_InjectedStop_IT:0000000000000090 $d
     /tmp/cc6jq3Wn.s:3512   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
     /tmp/cc6jq3Wn.s:3519   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
     /tmp/cc6jq3Wn.s:3735   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000140 $d
     /tmp/cc6jq3Wn.s:3747   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
     /tmp/cc6jq3Wn.s:3754   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
     /tmp/cc6jq3Wn.s:3996   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000184 $d
     /tmp/cc6jq3Wn.s:4003   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4010   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
     /tmp/cc6jq3Wn.s:4070   .text.HAL_ADCEx_MultiModeGetValue:0000000000000034 $d
     /tmp/cc6jq3Wn.s:4078   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4085   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
     /tmp/cc6jq3Wn.s:4178   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4185   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/cc6jq3Wn.s:4221   .text.HAL_ADCEx_InjectedQueueOverflowCallback:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4228   .text.HAL_ADCEx_InjectedQueueOverflowCallback:0000000000000000 HAL_ADCEx_InjectedQueueOverflowCallback
     /tmp/cc6jq3Wn.s:4264   .text.HAL_ADCEx_LevelOutOfWindow2Callback:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4271   .text.HAL_ADCEx_LevelOutOfWindow2Callback:0000000000000000 HAL_ADCEx_LevelOutOfWindow2Callback
     /tmp/cc6jq3Wn.s:4307   .text.HAL_ADCEx_LevelOutOfWindow3Callback:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4314   .text.HAL_ADCEx_LevelOutOfWindow3Callback:0000000000000000 HAL_ADCEx_LevelOutOfWindow3Callback
     /tmp/cc6jq3Wn.s:4350   .text.HAL_ADCEx_EndOfSamplingCallback:0000000000000000 $t
ARM GAS  /tmp/cc6jq3Wn.s 			page 324


     /tmp/cc6jq3Wn.s:4357   .text.HAL_ADCEx_EndOfSamplingCallback:0000000000000000 HAL_ADCEx_EndOfSamplingCallback
     /tmp/cc6jq3Wn.s:4393   .text.HAL_ADCEx_RegularStop:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4400   .text.HAL_ADCEx_RegularStop:0000000000000000 HAL_ADCEx_RegularStop
     /tmp/cc6jq3Wn.s:4502   .text.HAL_ADCEx_RegularStop:000000000000008c $d
     /tmp/cc6jq3Wn.s:4507   .text.HAL_ADCEx_RegularStop_IT:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4514   .text.HAL_ADCEx_RegularStop_IT:0000000000000000 HAL_ADCEx_RegularStop_IT
     /tmp/cc6jq3Wn.s:4624   .text.HAL_ADCEx_RegularStop_IT:000000000000009c $d
     /tmp/cc6jq3Wn.s:4629   .text.HAL_ADCEx_RegularStop_DMA:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4636   .text.HAL_ADCEx_RegularStop_DMA:0000000000000000 HAL_ADCEx_RegularStop_DMA
     /tmp/cc6jq3Wn.s:4782   .text.HAL_ADCEx_RegularStop_DMA:00000000000000dc $d
     /tmp/cc6jq3Wn.s:4787   .text.HAL_ADCEx_RegularMultiModeStop_DMA:0000000000000000 $t
     /tmp/cc6jq3Wn.s:4794   .text.HAL_ADCEx_RegularMultiModeStop_DMA:0000000000000000 HAL_ADCEx_RegularMultiModeStop_DMA
     /tmp/cc6jq3Wn.s:5049   .text.HAL_ADCEx_RegularMultiModeStop_DMA:00000000000001a0 $d
     /tmp/cc6jq3Wn.s:5056   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
     /tmp/cc6jq3Wn.s:5063   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/cc6jq3Wn.s:5477   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000294 $d
     /tmp/cc6jq3Wn.s:5481   .text.HAL_ADCEx_InjectedConfigChannel:000000000000029c $t
     /tmp/cc6jq3Wn.s:5932   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000590 $d
     /tmp/cc6jq3Wn.s:5936   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000598 $t
     /tmp/cc6jq3Wn.s:6645   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000974 $d
     /tmp/cc6jq3Wn.s:6650   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000980 $t
     /tmp/cc6jq3Wn.s:6893   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000ae8 $d
     /tmp/cc6jq3Wn.s:6907   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
     /tmp/cc6jq3Wn.s:6914   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
     /tmp/cc6jq3Wn.s:7199   .text.HAL_ADCEx_MultiModeConfigChannel:00000000000001a4 $d
     /tmp/cc6jq3Wn.s:7209   .text.HAL_ADCEx_EnableInjectedQueue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:7216   .text.HAL_ADCEx_EnableInjectedQueue:0000000000000000 HAL_ADCEx_EnableInjectedQueue
     /tmp/cc6jq3Wn.s:7293   .text.HAL_ADCEx_DisableInjectedQueue:0000000000000000 $t
     /tmp/cc6jq3Wn.s:7300   .text.HAL_ADCEx_DisableInjectedQueue:0000000000000000 HAL_ADCEx_DisableInjectedQueue
     /tmp/cc6jq3Wn.s:7369   .text.HAL_ADCEx_DisableVoltageRegulator:0000000000000000 $t
     /tmp/cc6jq3Wn.s:7376   .text.HAL_ADCEx_DisableVoltageRegulator:0000000000000000 HAL_ADCEx_DisableVoltageRegulator
     /tmp/cc6jq3Wn.s:7433   .text.HAL_ADCEx_EnterADCDeepPowerDownMode:0000000000000000 $t
     /tmp/cc6jq3Wn.s:7440   .text.HAL_ADCEx_EnterADCDeepPowerDownMode:0000000000000000 HAL_ADCEx_EnterADCDeepPowerDownMode

UNDEFINED SYMBOLS
ADC_Disable
ADC_Enable
SystemCoreClock
ADC_ConversionStop
HAL_GetTick
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
