ARM GAS  /tmp/ccVBkeMF.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"arm_mat_mult_fast_q15.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.arm_mat_mult_fast_q15,"ax",%progbits
  17              		.align	1
  18              		.global	arm_mat_mult_fast_q15
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	arm_mat_mult_fast_q15:
  26              	.LFB145:
  27              		.file 1 "./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c"
   1:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** /* ----------------------------------------------------------------------
   2:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Title:        arm_mat_mult_fast_q15.c
   4:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Description:  Q15 matrix multiplication (fast variant)
   5:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
   6:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * $Date:        18. March 2019
   7:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * $Revision:    V1.6.0
   8:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
   9:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Target Processor: Cortex-M cores
  10:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** /*
  12:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Copyright (C) 2010-2019 ARM Limited or its affiliates. All rights reserved.
  13:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  14:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  16:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * not use this file except in compliance with the License.
  18:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * You may obtain a copy of the License at
  19:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  20:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  22:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  * limitations under the License.
  27:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  28:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  29:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #include "arm_math.h"
  30:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  31:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
ARM GAS  /tmp/ccVBkeMF.s 			page 2


  32:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @ingroup groupMatrix
  33:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  34:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  35:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
  36:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @addtogroup MatrixMult
  37:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @{
  38:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  39:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  40:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
  41:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @brief         Q15 matrix multiplication (fast variant).
  42:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @param[in]     pSrcA      points to the first input matrix structure
  43:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @param[in]     pSrcB      points to the second input matrix structure
  44:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @param[out]    pDst       points to output matrix structure
  45:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @param[in]     pState     points to the array for storing intermediate results
  46:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @return        execution status
  47:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    - \ref ARM_MATH_SUCCESS       : Operation successful
  48:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    - \ref ARM_MATH_SIZE_MISMATCH : Matrix size check failed
  49:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  50:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @par           Scaling and Overflow Behavior
  51:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    The difference between the function \ref arm_mat_mult_q15() and this fast varian
  52:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    the fast variant use a 32-bit rather than a 64-bit accumulator.
  53:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    The result of each 1.15 x 1.15 multiplication is truncated to
  54:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    2.30 format. These intermediate results are accumulated in a 32-bit register in 
  55:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    format. Finally, the accumulator is saturated and converted to a 1.15 result.
  56:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @par
  57:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    The fast version has the same overflow behavior as the standard version but prov
  58:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    less precision since it discards the low 16 bits of each multiplication result.
  59:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    In order to avoid overflows completely the input signals must be scaled down.
  60:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
  61:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    as a total of numColsA additions are computed internally for each output element
  62:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   @remark
  63:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    Refer to \ref arm_mat_mult_q15() for a slower implementation of this function
  64:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****                    which uses 64-bit accumulation to provide higher precision.
  65:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  66:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  67:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** arm_status arm_mat_mult_fast_q15(
  68:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   const arm_matrix_instance_q15 * pSrcA,
  69:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   const arm_matrix_instance_q15 * pSrcB,
  70:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         arm_matrix_instance_q15 * pDst,
  71:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t                   * pState)
  72:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** {
  28              		.loc 1 72 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 352
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 90B4     		push	{r4, r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 7, -4
  38 0002 D8B0     		sub	sp, sp, #352
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 360
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccVBkeMF.s 			page 3


  44 0006 07F10C04 		add	r4, r7, #12
  45 000a 2060     		str	r0, [r4]
  46 000c 07F10800 		add	r0, r7, #8
  47 0010 0160     		str	r1, [r0]
  48 0012 391D     		adds	r1, r7, #4
  49 0014 0A60     		str	r2, [r1]
  50 0016 3A46     		mov	r2, r7
  51 0018 1360     		str	r3, [r2]
  73:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q31_t sum;                                     /* Accumulator */
  74:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t *pSrcBT = pState;                        /* Input data matrix pointer for transpose *
  52              		.loc 1 74 16
  53 001a 3B46     		mov	r3, r7
  54 001c 1B68     		ldr	r3, [r3]
  55 001e C7F83031 		str	r3, [r7, #304]
  75:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t *pInA = pSrcA->pData;                    /* Input data matrix pointer A of Q15 type *
  56              		.loc 1 75 28
  57 0022 07F10C03 		add	r3, r7, #12
  58 0026 1B68     		ldr	r3, [r3]
  59 0028 5A68     		ldr	r2, [r3, #4]
  60              		.loc 1 75 16
  61 002a 07F15403 		add	r3, r7, #84
  62 002e 1A60     		str	r2, [r3]
  76:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t *pInB = pSrcB->pData;                    /* Input data matrix pointer B of Q15 type *
  63              		.loc 1 76 28
  64 0030 07F10803 		add	r3, r7, #8
  65 0034 1B68     		ldr	r3, [r3]
  66 0036 5A68     		ldr	r2, [r3, #4]
  67              		.loc 1 76 16
  68 0038 07F15003 		add	r3, r7, #80
  69 003c 1A60     		str	r2, [r3]
  77:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t *px;                                     /* Temporary output data matrix pointer */
  78:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  70              		.loc 1 78 18
  71 003e 07F10C03 		add	r3, r7, #12
  72 0042 1B68     		ldr	r3, [r3]
  73 0044 1B88     		ldrh	r3, [r3]	@ movhi
  74 0046 A7F82E31 		strh	r3, [r7, #302]	@ movhi
  79:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
  75              		.loc 1 79 18
  76 004a 07F10803 		add	r3, r7, #8
  77 004e 1B68     		ldr	r3, [r3]
  78 0050 5B88     		ldrh	r3, [r3, #2]	@ movhi
  79 0052 A7F82C31 		strh	r3, [r7, #300]	@ movhi
  80:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
  80              		.loc 1 80 18
  81 0056 07F10C03 		add	r3, r7, #12
  82 005a 1B68     		ldr	r3, [r3]
  83 005c 5B88     		ldrh	r3, [r3, #2]	@ movhi
  84 005e A7F82A31 		strh	r3, [r7, #298]	@ movhi
  81:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint16_t numRowsB = pSrcB->numRows;            /* Number of rows of input matrix A */
  85              		.loc 1 81 18
  86 0062 07F10803 		add	r3, r7, #8
  87 0066 1B68     		ldr	r3, [r3]
  88 0068 1B88     		ldrh	r3, [r3]	@ movhi
  89 006a A7F82831 		strh	r3, [r7, #296]	@ movhi
  82:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint32_t col, i = 0U, row = numRowsB, colCnt;  /* Loop counters */
  90              		.loc 1 82 23
ARM GAS  /tmp/ccVBkeMF.s 			page 4


  91 006e 0023     		movs	r3, #0
  92 0070 C7F85031 		str	r3, [r7, #336]
  93              		.loc 1 82 31
  94 0074 B7F82831 		ldrh	r3, [r7, #296]
  95 0078 C7F84C31 		str	r3, [r7, #332]
  83:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         arm_status status;                             /* Status of matrix multiplication */
  84:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  85:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
  86:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q31_t in;                                      /* Temporary variable to hold the input valu
  87:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q31_t inA1, inB1, inA2, inB2;
  88:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q31_t sum2, sum3, sum4;
  89:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t *pInA2, *pInB2, *px2;
  90:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         uint32_t j = 0;
  96              		.loc 1 90 18
  97 007c 0023     		movs	r3, #0
  98 007e C7F83431 		str	r3, [r7, #308]
  99              	.L8:
  91:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
  92:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t in;                                      /* Temporary variable to hold the input valu
  93:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         q15_t inA1, inB1, inA2, inB2;
  94:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
  95:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  96:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  97:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  98:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   /* Check for matrix mismatch condition */
  99:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 100:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       (pSrcA->numRows != pDst->numRows)  ||
 101:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       (pSrcB->numCols != pDst->numCols)    )
 102:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   {
 103:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 104:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
 105:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   }
 106:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   else
 107:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 108:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifdef ARM_MATH_MATRIX_CHECK */
 109:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 110:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   {
 111:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Matrix transpose */
 112:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     do
 113:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 114:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* The pointer px is set to starting address of column being processed */
 115:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pSrcBT + i;
 100              		.loc 1 115 19
 101 0082 D7F85031 		ldr	r3, [r7, #336]
 102 0086 5B00     		lsls	r3, r3, #1
 103              		.loc 1 115 10
 104 0088 D7F83021 		ldr	r2, [r7, #304]
 105 008c 1344     		add	r3, r3, r2
 106 008e C7F85831 		str	r3, [r7, #344]
 116:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 117:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Apply loop unrolling and exchange columns with row elements */
 118:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB >> 2U;
 107              		.loc 1 118 22
 108 0092 B7F82C31 		ldrh	r3, [r7, #300]
 109 0096 9B08     		lsrs	r3, r3, #2
 110 0098 9BB2     		uxth	r3, r3
 111              		.loc 1 118 11
ARM GAS  /tmp/ccVBkeMF.s 			page 5


 112 009a C7F85431 		str	r3, [r7, #340]
 119:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 120:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 121:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****        ** a second loop below computes the remaining 1 to 3 samples. */
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0U)
 113              		.loc 1 122 13
 114 009e 6EE0     		b	.L2
 115              	.L5:
 116 00a0 07F15003 		add	r3, r7, #80
 117 00a4 C7F80831 		str	r3, [r7, #264]
 118              	.LBB46:
 119              	.LBB47:
 120              		.file 2 "./Libraries/CMSIS/DSP/Include/arm_math.h"
   1:./Libraries/CMSIS/DSP/Include/arm_math.h **** /******************************************************************************
   2:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @file     arm_math.h
   3:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @brief    Public header file for CMSIS DSP Library
   4:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @version  V1.6.0
   5:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @date     18. March 2019
   6:./Libraries/CMSIS/DSP/Include/arm_math.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/DSP/Include/arm_math.h **** /*
   8:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved.
   9:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  10:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  12:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  16:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
  18:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * limitations under the License.
  23:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
  24:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
  25:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
  26:./Libraries/CMSIS/DSP/Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  27:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  28:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Introduction
  29:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  30:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  31:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  32:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  33:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  34:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  35:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Basic math functions
  36:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Fast math functions
  37:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Complex math functions
  38:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Filters
  39:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Matrix functions
  40:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Transform functions
  41:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Motor control functions
  42:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Statistical functions
  43:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Support functions
  44:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - Interpolation functions
ARM GAS  /tmp/ccVBkeMF.s 			page 6


  45:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  46:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  47:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  48:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  49:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Using the Library
  50:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  51:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  52:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  53:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  54:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  55:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  56:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  57:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  58:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  59:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  60:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  61:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  62:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  63:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  64:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  65:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  66:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  67:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (Armv8-M Baseline, Little endian)
  68:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (Armv8-M Mainline, Little endian)
  69:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (Armv8-M Mainline, Little endian, Single Precision Floating Point 
  70:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (Armv8-M Mainline, Little endian, DSP instructions)
  71:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (Armv8-M Mainline, Little endian, DSP instructions, Single Precis
  72:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  73:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  74:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  75:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  76:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  77:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  78:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Examples
  79:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * --------
  80:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  81:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  82:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  83:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Toolchain Support
  84:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  85:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  86:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library has been developed and tested with MDK version 5.14.0.0
  87:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  88:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  89:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Building the Library
  90:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
  91:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  92:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The library installer contains a project file to rebuild libraries on MDK toolchain in the <co
  93:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
  94:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  95:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  96:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
  97:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
  98:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Preprocessor Macros
  99:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 100:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 101:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Each library project have different preprocessor macros.
ARM GAS  /tmp/ccVBkeMF.s 			page 7


 102:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 103:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 104:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 105:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 106:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 107:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 108:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 109:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 110:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 111:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 112:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 113:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 114:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 115:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_LOOPUNROLL:
 116:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 117:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_LOOPUNROLL to enable manual loop unrolling in DSP functions
 118:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 119:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON:
 120:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 121:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON to enable Neon versions of the DSP functions.
 122:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * It is not enabled by default when Neon is available because performances are 
 123:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * dependent on the compiler and target architecture.
 124:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 125:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * - ARM_MATH_NEON_EXPERIMENTAL:
 126:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 127:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Define macro ARM_MATH_NEON_EXPERIMENTAL to enable experimental Neon versions of 
 128:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * of some DSP functions. Experimental Neon versions currently do not have better
 129:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * performances than the scalar versions.
 130:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 131:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 132:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 133:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * -----------------------------
 134:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 135:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 136:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |File/Folder                      |Content                                                    
 137:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |---------------------------------|-----------------------------------------------------------
 138:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP     | This documentation                                        
 139:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\DSP_Lib_TestSuite | DSP_Lib test suite                                        
 140:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Examples          | Example projects demonstrating the usage of the library fu
 141:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Include           | DSP_Lib include files                                     
 142:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Lib               | DSP_Lib binaries                                          
 143:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Projects          | Projects to rebuild DSP_Lib binaries                      
 144:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * |\b CMSIS\\DSP\\Source            | DSP_Lib source files                                      
 145:./Libraries/CMSIS/DSP/Include/arm_math.h ****    *
 146:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * <hr>
 147:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Revision History of CMSIS-DSP
 148:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * ------------
 149:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 150:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 151:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 152:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 153:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 154:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 155:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 156:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 157:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 158:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
ARM GAS  /tmp/ccVBkeMF.s 			page 8


 159:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 160:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 161:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * operate on individual values and not arrays.
 162:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 163:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 164:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 165:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 166:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 167:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 168:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 169:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 170:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * (real, imag, real, imag, ...).
 171:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 172:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 173:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * real values.
 174:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 175:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 176:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 177:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 178:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 179:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 180:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 181:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 182:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 183:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 184:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 185:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * the type
 186:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 187:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * below:
 188:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 189:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     typedef struct
 190:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     {
 191:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 192:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 193:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 194:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 195:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 196:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 197:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 198:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 199:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 200:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 201:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * matrix element (i, j) is stored at:
 202:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 203:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     pData[i*numCols + j]
 204:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 205:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 206:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Init Functions
 207:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 208:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data structure.
 209:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 210:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Refer to \ref arm_mat_init_f32(), \ref arm_mat_init_q31() and \ref arm_mat_init_q15()
 211:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * for floating-point, Q31 and Q15 types,  respectively.
 212:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 213:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par
 214:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 215:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
ARM GAS  /tmp/ccVBkeMF.s 			page 9


 216:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * To place the instance structure in a const data
 217:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 218:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 219:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 220:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 221:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 222:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 223:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 224:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 225:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * data array.
 226:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *
 227:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * \par Size Checking
 228:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 229:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * output matrices. For example, the matrix addition function verifies that the
 230:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 231:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * columns. If the size check fails the functions return:
 232:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 233:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 234:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 235:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Otherwise the functions return
 236:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 237:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 238:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 239:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 240:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 241:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * <pre>
 242:./Libraries/CMSIS/DSP/Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 243:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * </pre>
 244:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 245:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * and size checking is enabled. By changing the project settings and
 246:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 247:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * run a bit faster. With size checking disabled the functions always
 248:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 249:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 250:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 251:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 252:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 253:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 254:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 255:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 256:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupController Controller Functions
 257:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 258:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 259:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 260:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 261:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 262:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 263:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 264:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 265:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 266:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 267:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 268:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 269:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 270:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 271:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 272:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
ARM GAS  /tmp/ccVBkeMF.s 			page 10


 273:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 274:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 275:./Libraries/CMSIS/DSP/Include/arm_math.h ****  * @defgroup groupExamples Examples
 276:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 277:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 278:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 279:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef _ARM_MATH_H
 280:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _ARM_MATH_H
 281:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 282:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Compiler specific diagnostic adjustment */
 283:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 284:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 285:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 286:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 287:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 288:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic push
 289:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wsign-conversion"
 290:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wconversion"
 291:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #pragma GCC diagnostic ignored "-Wunused-parameter"
 292:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 293:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 294:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 295:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 296:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 297:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 298:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 299:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 300:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 301:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( _MSC_VER )
 302:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 303:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 304:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 305:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 306:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 307:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 308:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* Included for instrinsics definitions */
 309:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if !defined ( _MSC_VER )
 310:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "cmsis_compiler.h"
 311:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 312:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <stdint.h>
 313:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __STATIC_FORCEINLINE static __forceinline
 314:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __ALIGNED(x) __declspec(align(x))
 315:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_ENTER
 316:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define LOW_OPTIMIZATION_EXIT
 317:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_ENTER 
 318:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define IAR_ONLY_LOW_OPTIMIZATION_EXIT
 319:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 320:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 321:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "string.h"
 322:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "math.h"
 323:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include "float.h"
 324:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 325:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* evaluate ARM DSP feature */
 326:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
 327:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define ARM_MATH_DSP                   1
 328:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 329:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 11


 330:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if defined(__ARM_NEON)
 331:./Libraries/CMSIS/DSP/Include/arm_math.h **** #include <arm_neon.h>
 332:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 333:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 334:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 335:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifdef   __cplusplus
 336:./Libraries/CMSIS/DSP/Include/arm_math.h **** extern "C"
 337:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 338:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 339:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 340:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 341:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 342:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 344:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 345:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define DELTA_Q15          0x5
 347:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:./Libraries/CMSIS/DSP/Include/arm_math.h **** #ifndef PI
 349:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define PI               3.14159265358979f
 350:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 351:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 352:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 353:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 355:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 356:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 363:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 364:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 366:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 370:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 371:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 372:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 373:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 374:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 375:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef enum
 376:./Libraries/CMSIS/DSP/Include/arm_math.h ****   {
 377:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SUCCESS        =  0,        /**< No error */
 378:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 379:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR   = -2,        /**< Length of data buffer is incorrect */
 380:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH  = -3,        /**< Size of matrices is not compatible with the operation
 381:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_NANINF         = -4,        /**< Not-a-number (NaN) or infinity is generated */
 382:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_SINGULAR       = -5,        /**< Input matrix is singular and cannot be inverted */
 383:./Libraries/CMSIS/DSP/Include/arm_math.h ****     ARM_MATH_TEST_FAILURE   = -6         /**< Test Failed */
 384:./Libraries/CMSIS/DSP/Include/arm_math.h ****   } arm_status;
 385:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 386:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
ARM GAS  /tmp/ccVBkeMF.s 			page 12


 387:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 388:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 389:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int8_t q7_t;
 390:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 391:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 392:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 393:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 394:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int16_t q15_t;
 395:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 396:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 397:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 398:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 399:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int32_t q31_t;
 400:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 401:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 402:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 403:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 404:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef int64_t q63_t;
 405:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 406:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 407:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 408:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 409:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef float float32_t;
 410:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 411:./Libraries/CMSIS/DSP/Include/arm_math.h ****   /**
 412:./Libraries/CMSIS/DSP/Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 413:./Libraries/CMSIS/DSP/Include/arm_math.h ****    */
 414:./Libraries/CMSIS/DSP/Include/arm_math.h ****   typedef double float64_t;
 415:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 416:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 417:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 418:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief definition to read/write two 16 bit values.
 419:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @deprecated
 420:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 421:./Libraries/CMSIS/DSP/Include/arm_math.h **** #if   defined ( __CC_ARM )
 422:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 423:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 424:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 425:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __GNUC__ )
 426:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 427:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __ICCARM__ )
 428:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 429:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 430:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 431:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __CSMC__ )
 432:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 433:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined ( __TASKING__ )
 434:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE __un(aligned) int32_t
 435:./Libraries/CMSIS/DSP/Include/arm_math.h **** #elif defined(_MSC_VER )
 436:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 437:./Libraries/CMSIS/DSP/Include/arm_math.h **** #else
 438:./Libraries/CMSIS/DSP/Include/arm_math.h ****   #error Unknown compiler
 439:./Libraries/CMSIS/DSP/Include/arm_math.h **** #endif
 440:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 441:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 442:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD32_CONST(addr)  ( (__SIMD32_TYPE * )   (addr))
 443:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE * )   (addr))
ARM GAS  /tmp/ccVBkeMF.s 			page 13


 444:./Libraries/CMSIS/DSP/Include/arm_math.h **** #define __SIMD64(addr)        (*(      int64_t **) & (addr))
 445:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 446:./Libraries/CMSIS/DSP/Include/arm_math.h **** /* SIMD replacement */
 447:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 448:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 449:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 450:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer.
 451:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 452:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 453:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 454:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2 (
 455:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t * pQ15)
 456:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 457:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 458:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 459:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, pQ15, 4);
 460:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 461:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 462:./Libraries/CMSIS/DSP/Include/arm_math.h **** }
 463:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 464:./Libraries/CMSIS/DSP/Include/arm_math.h **** /**
 465:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @brief         Read 2 Q15 from Q15 pointer and increment pointer afterwards.
 466:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @param[in]     pQ15      points to input value
 467:./Libraries/CMSIS/DSP/Include/arm_math.h ****   @return        Q31 value
 468:./Libraries/CMSIS/DSP/Include/arm_math.h ****  */
 469:./Libraries/CMSIS/DSP/Include/arm_math.h **** __STATIC_FORCEINLINE q31_t read_q15x2_ia (
 470:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q15_t ** pQ15)
 471:./Libraries/CMSIS/DSP/Include/arm_math.h **** {
 472:./Libraries/CMSIS/DSP/Include/arm_math.h ****   q31_t val;
 473:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   memcpy (&val, *pQ15, 4);
 121              		.loc 2 474 3
 122 00a8 D7F80831 		ldr	r3, [r7, #264]
 123 00ac 1B68     		ldr	r3, [r3]
 124 00ae 1B68     		ldr	r3, [r3]	@ unaligned
 125 00b0 1A46     		mov	r2, r3
 126 00b2 07F11403 		add	r3, r7, #20
 127 00b6 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 128              		.loc 2 475 9
 129 00b8 D7F80831 		ldr	r3, [r7, #264]
 130 00bc 1B68     		ldr	r3, [r3]
 131 00be 1A1D     		adds	r2, r3, #4
 132 00c0 D7F80831 		ldr	r3, [r7, #264]
 133 00c4 1A60     		str	r2, [r3]
 476:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 477:./Libraries/CMSIS/DSP/Include/arm_math.h ****   return (val);
 134              		.loc 2 477 10
 135 00c6 07F11403 		add	r3, r7, #20
 136 00ca 1B68     		ldr	r3, [r3]
 137              	.LBE47:
 138              	.LBE46:
 123:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 124:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 125:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 126:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 127:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read two elements from row */
ARM GAS  /tmp/ccVBkeMF.s 			page 14


 128:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = read_q15x2_ia ((q15_t **) &pInB);
 139              		.loc 1 128 14
 140 00cc C7F81031 		str	r3, [r7, #272]
 129:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 130:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store one element in destination */
 131:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 132:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 141              		.loc 1 132 15
 142 00d0 D7F81031 		ldr	r3, [r7, #272]
 143 00d4 1AB2     		sxth	r2, r3
 144              		.loc 1 132 13
 145 00d6 D7F85831 		ldr	r3, [r7, #344]
 146 00da 1A80     		strh	r2, [r3]	@ movhi
 133:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 134:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 135:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 136:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 137:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update pointer px to point to next row of transposed matrix */
 138:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 147              		.loc 1 138 12
 148 00dc B7F82831 		ldrh	r3, [r7, #296]
 149 00e0 5B00     		lsls	r3, r3, #1
 150 00e2 D7F85821 		ldr	r2, [r7, #344]
 151 00e6 1344     		add	r3, r3, r2
 152 00e8 C7F85831 		str	r3, [r7, #344]
 139:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 140:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store second element in destination */
 141:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 142:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 153              		.loc 1 142 50
 154 00ec D7F81031 		ldr	r3, [r7, #272]
 155 00f0 1B14     		asrs	r3, r3, #16
 156              		.loc 1 142 15
 157 00f2 1AB2     		sxth	r2, r3
 158              		.loc 1 142 13
 159 00f4 D7F85831 		ldr	r3, [r7, #344]
 160 00f8 1A80     		strh	r2, [r3]	@ movhi
 143:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 144:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 145:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 146:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 147:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update pointer px to point to next row of transposed matrix */
 148:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 161              		.loc 1 148 12
 162 00fa B7F82831 		ldrh	r3, [r7, #296]
 163 00fe 5B00     		lsls	r3, r3, #1
 164 0100 D7F85821 		ldr	r2, [r7, #344]
 165 0104 1344     		add	r3, r3, r2
 166 0106 C7F85831 		str	r3, [r7, #344]
 167 010a 07F15003 		add	r3, r7, #80
 168 010e C7F80C31 		str	r3, [r7, #268]
 169              	.LBB48:
 170              	.LBB49:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 171              		.loc 2 474 3
 172 0112 D7F80C31 		ldr	r3, [r7, #268]
 173 0116 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccVBkeMF.s 			page 15


 174 0118 1B68     		ldr	r3, [r3]	@ unaligned
 175 011a 1A46     		mov	r2, r3
 176 011c 07F11003 		add	r3, r7, #16
 177 0120 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 178              		.loc 2 475 9
 179 0122 D7F80C31 		ldr	r3, [r7, #268]
 180 0126 1B68     		ldr	r3, [r3]
 181 0128 1A1D     		adds	r2, r3, #4
 182 012a D7F80C31 		ldr	r3, [r7, #268]
 183 012e 1A60     		str	r2, [r3]
 184              		.loc 2 477 10
 185 0130 07F11003 		add	r3, r7, #16
 186 0134 1B68     		ldr	r3, [r3]
 187              	.LBE49:
 188              	.LBE48:
 149:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 150:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = read_q15x2_ia ((q15_t **) &pInB);
 189              		.loc 1 150 14
 190 0136 C7F81031 		str	r3, [r7, #272]
 151:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 152:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 191              		.loc 1 152 15
 192 013a D7F81031 		ldr	r3, [r7, #272]
 193 013e 1AB2     		sxth	r2, r3
 194              		.loc 1 152 13
 195 0140 D7F85831 		ldr	r3, [r7, #344]
 196 0144 1A80     		strh	r2, [r3]	@ movhi
 153:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 154:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 155:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 156:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 197              		.loc 1 156 12
 198 0146 B7F82831 		ldrh	r3, [r7, #296]
 199 014a 5B00     		lsls	r3, r3, #1
 200 014c D7F85821 		ldr	r2, [r7, #344]
 201 0150 1344     		add	r3, r3, r2
 202 0152 C7F85831 		str	r3, [r7, #344]
 157:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 158:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 159:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 203              		.loc 1 159 50
 204 0156 D7F81031 		ldr	r3, [r7, #272]
 205 015a 1B14     		asrs	r3, r3, #16
 206              		.loc 1 159 15
 207 015c 1AB2     		sxth	r2, r3
 208              		.loc 1 159 13
 209 015e D7F85831 		ldr	r3, [r7, #344]
 210 0162 1A80     		strh	r2, [r3]	@ movhi
 160:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 161:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 162:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 163:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 211              		.loc 1 163 12
 212 0164 B7F82831 		ldrh	r3, [r7, #296]
 213 0168 5B00     		lsls	r3, r3, #1
 214 016a D7F85821 		ldr	r2, [r7, #344]
ARM GAS  /tmp/ccVBkeMF.s 			page 16


 215 016e 1344     		add	r3, r3, r2
 216 0170 C7F85831 		str	r3, [r7, #344]
 164:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 165:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else /* #if defined (ARM_MATH_DSP) */
 166:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 167:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read one element from row */
 168:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 169:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 170:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store one element in destination */
 171:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 172:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 173:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update pointer px to point to next row of transposed matrix */
 174:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 175:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 176:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 177:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 178:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 179:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 180:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 181:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 182:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 183:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 184:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 185:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 186:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 187:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 188:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 189:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 190:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement column loop counter */
 191:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 217              		.loc 1 191 12
 218 0174 D7F85431 		ldr	r3, [r7, #340]
 219 0178 013B     		subs	r3, r3, #1
 220 017a C7F85431 		str	r3, [r7, #340]
 221              	.L2:
 122:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 222              		.loc 1 122 13
 223 017e D7F85431 		ldr	r3, [r7, #340]
 224 0182 002B     		cmp	r3, #0
 225 0184 8CD1     		bne	.L5
 192:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 193:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 194:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* If the columns of pSrcB is not a multiple of 4, compute any remaining output samples here.
 195:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****        ** No loop unrolling is used. */
 196:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB % 0x4U;
 226              		.loc 1 196 22
 227 0186 B7F82C31 		ldrh	r3, [r7, #300]
 228              		.loc 1 196 11
 229 018a 03F00303 		and	r3, r3, #3
 230 018e C7F85431 		str	r3, [r7, #340]
 197:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0U)
 231              		.loc 1 198 13
 232 0192 18E0     		b	.L6
 233              	.L7:
 199:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 200:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read and store input element in destination */
ARM GAS  /tmp/ccVBkeMF.s 			page 17


 201:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = *pInB++;
 234              		.loc 1 201 20
 235 0194 07F15003 		add	r3, r7, #80
 236 0198 1B68     		ldr	r3, [r3]
 237 019a 991C     		adds	r1, r3, #2
 238 019c 07F15002 		add	r2, r7, #80
 239 01a0 1160     		str	r1, [r2]
 240              		.loc 1 201 15
 241 01a2 B3F90020 		ldrsh	r2, [r3]
 242              		.loc 1 201 13
 243 01a6 D7F85831 		ldr	r3, [r7, #344]
 244 01aa 1A80     		strh	r2, [r3]	@ movhi
 202:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 203:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update pointer px to point to next row of transposed matrix */
 204:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 245              		.loc 1 204 12
 246 01ac B7F82831 		ldrh	r3, [r7, #296]
 247 01b0 5B00     		lsls	r3, r3, #1
 248 01b2 D7F85821 		ldr	r2, [r7, #344]
 249 01b6 1344     		add	r3, r3, r2
 250 01b8 C7F85831 		str	r3, [r7, #344]
 205:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 206:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement column loop counter */
 207:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 251              		.loc 1 207 12
 252 01bc D7F85431 		ldr	r3, [r7, #340]
 253 01c0 013B     		subs	r3, r3, #1
 254 01c2 C7F85431 		str	r3, [r7, #340]
 255              	.L6:
 198:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 256              		.loc 1 198 13
 257 01c6 D7F85431 		ldr	r3, [r7, #340]
 258 01ca 002B     		cmp	r3, #0
 259 01cc E2D1     		bne	.L7
 208:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 209:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 210:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       i++;
 260              		.loc 1 210 8
 261 01ce D7F85031 		ldr	r3, [r7, #336]
 262 01d2 0133     		adds	r3, r3, #1
 263 01d4 C7F85031 		str	r3, [r7, #336]
 211:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 212:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Decrement row loop counter */
 213:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       row--;
 264              		.loc 1 213 10
 265 01d8 D7F84C31 		ldr	r3, [r7, #332]
 266 01dc 013B     		subs	r3, r3, #1
 267 01de C7F84C31 		str	r3, [r7, #332]
 214:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 215:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     } while (row > 0U);
 268              		.loc 1 215 5
 269 01e2 D7F84C31 		ldr	r3, [r7, #332]
 270 01e6 002B     		cmp	r3, #0
 271 01e8 7FF44BAF 		bne	.L8
 216:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 217:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Reset variables for usage in following multiplication process */
 218:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     row = numRowsA;
ARM GAS  /tmp/ccVBkeMF.s 			page 18


 272              		.loc 1 218 9
 273 01ec B7F82E31 		ldrh	r3, [r7, #302]
 274 01f0 C7F84C31 		str	r3, [r7, #332]
 219:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     i = 0U;
 275              		.loc 1 219 7
 276 01f4 0023     		movs	r3, #0
 277 01f6 C7F85031 		str	r3, [r7, #336]
 220:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     px = pDst->pData;
 278              		.loc 1 220 8
 279 01fa 3B1D     		adds	r3, r7, #4
 280 01fc 1B68     		ldr	r3, [r3]
 281 01fe 5B68     		ldr	r3, [r3, #4]
 282 0200 C7F85831 		str	r3, [r7, #344]
 221:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 222:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 223:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Process two rows from matrix A at a time and output two rows at a time */
 224:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     row = row >> 1U;
 283              		.loc 1 224 9
 284 0204 D7F84C31 		ldr	r3, [r7, #332]
 285 0208 5B08     		lsrs	r3, r3, #1
 286 020a C7F84C31 		str	r3, [r7, #332]
 225:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     px2 = px + numColsB;
 287              		.loc 1 225 14
 288 020e B7F82C31 		ldrh	r3, [r7, #300]
 289 0212 5B00     		lsls	r3, r3, #1
 290              		.loc 1 225 9
 291 0214 D7F85821 		ldr	r2, [r7, #344]
 292 0218 1344     		add	r3, r3, r2
 293 021a C7F83831 		str	r3, [r7, #312]
 226:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 227:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 228:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 229:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* row loop */
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     while (row > 0U)
 294              		.loc 1 230 11
 295 021e DCE1     		b	.L9
 296              	.L23:
 231:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 232:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* For every row wise process, column loop counter is to be initiated */
 233:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB;
 297              		.loc 1 233 11
 298 0220 B7F82C31 		ldrh	r3, [r7, #300]
 299 0224 C7F85431 		str	r3, [r7, #340]
 234:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 235:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* For every row wise process, pIn2 pointer is set to starting address of transposed pSrcB da
 236:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInB = pSrcBT;
 300              		.loc 1 236 12
 301 0228 07F15003 		add	r3, r7, #80
 302 022c D7F83021 		ldr	r2, [r7, #304]
 303 0230 1A60     		str	r2, [r3]
 237:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 238:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 239:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Process two (transposed) columns from matrix B at a time */
 240:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = col >> 1U;
 304              		.loc 1 240 11
 305 0232 D7F85431 		ldr	r3, [r7, #340]
 306 0236 5B08     		lsrs	r3, r3, #1
ARM GAS  /tmp/ccVBkeMF.s 			page 19


 307 0238 C7F85431 		str	r3, [r7, #340]
 241:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       j = 0;
 308              		.loc 1 241 9
 309 023c 0023     		movs	r3, #0
 310 023e C7F83431 		str	r3, [r7, #308]
 242:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 243:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 244:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* column loop */
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0U)
 311              		.loc 1 245 13
 312 0242 A0E1     		b	.L10
 313              	.L22:
 246:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 247:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set variable sum, that acts as accumulator, to zero */
 248:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum = 0;
 314              		.loc 1 248 13
 315 0244 0023     		movs	r3, #0
 316 0246 C7F85C31 		str	r3, [r7, #348]
 249:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 250:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Initiate pointer pInA to point to starting address of column being processed */
 251:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA = pSrcA->pData + i;
 317              		.loc 1 251 21
 318 024a 07F10C03 		add	r3, r7, #12
 319 024e 1B68     		ldr	r3, [r3]
 320 0250 5A68     		ldr	r2, [r3, #4]
 321              		.loc 1 251 29
 322 0252 D7F85031 		ldr	r3, [r7, #336]
 323 0256 5B00     		lsls	r3, r3, #1
 324 0258 1A44     		add	r2, r2, r3
 325              		.loc 1 251 14
 326 025a 07F15403 		add	r3, r7, #84
 327 025e 1A60     		str	r2, [r3]
 252:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 253:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 254:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum2 = 0;
 328              		.loc 1 254 14
 329 0260 0023     		movs	r3, #0
 330 0262 C7F84431 		str	r3, [r7, #324]
 255:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum3 = 0;
 331              		.loc 1 255 14
 332 0266 0023     		movs	r3, #0
 333 0268 C7F84031 		str	r3, [r7, #320]
 256:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum4 = 0;
 334              		.loc 1 256 14
 335 026c 0023     		movs	r3, #0
 336 026e C7F83C31 		str	r3, [r7, #316]
 257:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB  = pSrcBT + j;
 337              		.loc 1 257 24
 338 0272 D7F83431 		ldr	r3, [r7, #308]
 339 0276 5B00     		lsls	r3, r3, #1
 340 0278 D7F83021 		ldr	r2, [r7, #304]
 341 027c 1A44     		add	r2, r2, r3
 342              		.loc 1 257 15
 343 027e 07F15003 		add	r3, r7, #80
 344 0282 1A60     		str	r2, [r3]
 258:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA2 = pInA + numColsA;
 345              		.loc 1 258 22
ARM GAS  /tmp/ccVBkeMF.s 			page 20


 346 0284 07F15403 		add	r3, r7, #84
 347 0288 1A68     		ldr	r2, [r3]
 348 028a B7F82A31 		ldrh	r3, [r7, #298]
 349 028e 5B00     		lsls	r3, r3, #1
 350 0290 1A44     		add	r2, r2, r3
 351              		.loc 1 258 15
 352 0292 07F14C03 		add	r3, r7, #76
 353 0296 1A60     		str	r2, [r3]
 259:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB2 = pInB + numRowsB;
 354              		.loc 1 259 22
 355 0298 07F15003 		add	r3, r7, #80
 356 029c 1A68     		ldr	r2, [r3]
 357 029e B7F82831 		ldrh	r3, [r7, #296]
 358 02a2 5B00     		lsls	r3, r3, #1
 359 02a4 1A44     		add	r2, r2, r3
 360              		.loc 1 259 15
 361 02a6 07F14803 		add	r3, r7, #72
 362 02aa 1A60     		str	r2, [r3]
 260:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 261:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read in two elements at once - alows dual MAC instruction */
 262:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 1U;
 363              		.loc 1 262 27
 364 02ac B7F82A31 		ldrh	r3, [r7, #298]
 365 02b0 5B08     		lsrs	r3, r3, #1
 366 02b2 9BB2     		uxth	r3, r3
 367              		.loc 1 262 16
 368 02b4 C7F84831 		str	r3, [r7, #328]
 263:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 264:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2U;
 265:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 266:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 267:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U)
 369              		.loc 1 268 15
 370 02b8 CCE0     		b	.L11
 371              	.L20:
 372 02ba 07F15403 		add	r3, r7, #84
 373 02be C7F8B830 		str	r3, [r7, #184]
 374              	.LBB50:
 375              	.LBB51:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 376              		.loc 2 474 3
 377 02c2 D7F8B830 		ldr	r3, [r7, #184]
 378 02c6 1B68     		ldr	r3, [r3]
 379 02c8 1B68     		ldr	r3, [r3]	@ unaligned
 380 02ca 1A46     		mov	r2, r3
 381 02cc 07F12403 		add	r3, r7, #36
 382 02d0 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 383              		.loc 2 475 9
 384 02d2 D7F8B830 		ldr	r3, [r7, #184]
 385 02d6 1B68     		ldr	r3, [r3]
 386 02d8 1A1D     		adds	r2, r3, #4
 387 02da D7F8B830 		ldr	r3, [r7, #184]
 388 02de 1A60     		str	r2, [r3]
 389              		.loc 2 477 10
 390 02e0 07F12403 		add	r3, r7, #36
ARM GAS  /tmp/ccVBkeMF.s 			page 21


 391 02e4 1B68     		ldr	r3, [r3]
 392              	.LBE51:
 393              	.LBE50:
 269:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 270:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 271:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 272:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 273:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 274:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = read_q15x2_ia ((q15_t **) &pInA);
 394              		.loc 1 274 18
 395 02e6 C7F82431 		str	r3, [r7, #292]
 396 02ea 07F15003 		add	r3, r7, #80
 397 02ee C7F8BC30 		str	r3, [r7, #188]
 398              	.LBB52:
 399              	.LBB53:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 400              		.loc 2 474 3
 401 02f2 D7F8BC30 		ldr	r3, [r7, #188]
 402 02f6 1B68     		ldr	r3, [r3]
 403 02f8 1B68     		ldr	r3, [r3]	@ unaligned
 404 02fa 1A46     		mov	r2, r3
 405 02fc 07F12003 		add	r3, r7, #32
 406 0300 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 407              		.loc 2 475 9
 408 0302 D7F8BC30 		ldr	r3, [r7, #188]
 409 0306 1B68     		ldr	r3, [r3]
 410 0308 1A1D     		adds	r2, r3, #4
 411 030a D7F8BC30 		ldr	r3, [r7, #188]
 412 030e 1A60     		str	r2, [r3]
 413              		.loc 2 477 10
 414 0310 07F12003 		add	r3, r7, #32
 415 0314 1B68     		ldr	r3, [r3]
 416              	.LBE53:
 417              	.LBE52:
 275:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = read_q15x2_ia ((q15_t **) &pInB);
 418              		.loc 1 275 18
 419 0316 C7F81C31 		str	r3, [r7, #284]
 420 031a 07F14C03 		add	r3, r7, #76
 421 031e C7F8C030 		str	r3, [r7, #192]
 422              	.LBB54:
 423              	.LBB55:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 424              		.loc 2 474 3
 425 0322 D7F8C030 		ldr	r3, [r7, #192]
 426 0326 1B68     		ldr	r3, [r3]
 427 0328 1B68     		ldr	r3, [r3]	@ unaligned
 428 032a 1A46     		mov	r2, r3
 429 032c 07F11C03 		add	r3, r7, #28
 430 0330 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 431              		.loc 2 475 9
 432 0332 D7F8C030 		ldr	r3, [r7, #192]
 433 0336 1B68     		ldr	r3, [r3]
 434 0338 1A1D     		adds	r2, r3, #4
 435 033a D7F8C030 		ldr	r3, [r7, #192]
 436 033e 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccVBkeMF.s 			page 22


 437              		.loc 2 477 10
 438 0340 07F11C03 		add	r3, r7, #28
 439 0344 1B68     		ldr	r3, [r3]
 440              	.LBE55:
 441              	.LBE54:
 276:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 277:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = read_q15x2_ia ((q15_t **) &pInA2);
 442              		.loc 1 277 18
 443 0346 C7F82031 		str	r3, [r7, #288]
 444 034a 07F14803 		add	r3, r7, #72
 445 034e C7F8C430 		str	r3, [r7, #196]
 446              	.LBB56:
 447              	.LBB57:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 448              		.loc 2 474 3
 449 0352 D7F8C430 		ldr	r3, [r7, #196]
 450 0356 1B68     		ldr	r3, [r3]
 451 0358 1B68     		ldr	r3, [r3]	@ unaligned
 452 035a 1A46     		mov	r2, r3
 453 035c 07F11803 		add	r3, r7, #24
 454 0360 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 455              		.loc 2 475 9
 456 0362 D7F8C430 		ldr	r3, [r7, #196]
 457 0366 1B68     		ldr	r3, [r3]
 458 0368 1A1D     		adds	r2, r3, #4
 459 036a D7F8C430 		ldr	r3, [r7, #196]
 460 036e 1A60     		str	r2, [r3]
 461              		.loc 2 477 10
 462 0370 07F11803 		add	r3, r7, #24
 463 0374 1B68     		ldr	r3, [r3]
 464              	.LBE57:
 465              	.LBE56:
 278:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = read_q15x2_ia ((q15_t **) &pInB2);
 466              		.loc 1 278 18
 467 0376 C7F81831 		str	r3, [r7, #280]
 279:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 280:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Multiply and Accumlates */
 281:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 468              		.loc 1 281 18
 469 037a D7F82411 		ldr	r1, [r7, #292]
 470 037e D7F81C21 		ldr	r2, [r7, #284]
 471 0382 D7F85C31 		ldr	r3, [r7, #348]
 472 0386 C7F8D410 		str	r1, [r7, #212]
 473 038a C7F8D020 		str	r2, [r7, #208]
 474 038e C7F8CC30 		str	r3, [r7, #204]
 475              	.LBB58:
 476              	.LBB59:
 477              		.file 3 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
ARM GAS  /tmp/ccVBkeMF.s 			page 23


   9:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccVBkeMF.s 			page 24


  66:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
ARM GAS  /tmp/ccVBkeMF.s 			page 25


 123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            in the used linker script.
 129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   typedef struct {
 142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
 161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
 162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  
 163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   _start();
 164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccVBkeMF.s 			page 26


 180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 27


 237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 28


 294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccVBkeMF.s 			page 29


 351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
ARM GAS  /tmp/ccVBkeMF.s 			page 30


 408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
ARM GAS  /tmp/ccVBkeMF.s 			page 31


 465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 32


 522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
ARM GAS  /tmp/ccVBkeMF.s 			page 33


 579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccVBkeMF.s 			page 34


 636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccVBkeMF.s 			page 35


 693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   
 701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
ARM GAS  /tmp/ccVBkeMF.s 			page 36


 750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return 0U;
 774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   mode.
 788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
ARM GAS  /tmp/ccVBkeMF.s 			page 37


 807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(0U);
 850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
ARM GAS  /tmp/ccVBkeMF.s 			page 38


 864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   (void)fpscr;
 873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
 885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   No Operation
 901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccVBkeMF.s 			page 39


 921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Send Event
 922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
 972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccVBkeMF.s 			page 40


 978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
 985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
 986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
 988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
 992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
 993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
 995:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
 996:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1000:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1001:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1003:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1006:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int16_t result;
1007:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1008:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1010:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1011:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1012:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1013:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1014:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1015:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1020:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1021:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1023:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1026:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return op1;
1027:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1028:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1030:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1031:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1032:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1033:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
ARM GAS  /tmp/ccVBkeMF.s 			page 41


1035:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1039:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1041:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1042:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1043:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Reversed value
1047:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1048:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1050:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1051:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1052:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1057:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1059:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1062:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result <<= 1U;
1063:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     s--;
1065:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1066:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1068:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return result;
1069:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1070:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1071:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1072:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1073:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1078:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1080:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      is non-zero".
1086:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    */
1089:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (value == 0U)
1090:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1091:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     return 32U;
ARM GAS  /tmp/ccVBkeMF.s 			page 42


1092:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1093:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1095:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1096:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1097:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1102:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1107:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1109:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1110:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1111:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1114:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1117:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1119:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1121:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1122:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1123:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1124:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1129:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1131:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1132:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1133:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1136:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1138:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1139:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1141:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1143:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1144:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1145:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1146:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1147:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1148:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  /tmp/ccVBkeMF.s 			page 43


1149:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1151:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1152:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1153:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1154:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1155:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
1156:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1157:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1158:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1159:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1160:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1161:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1167:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1168:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1170:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1171:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1172:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1174:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1175:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1176:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1177:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1178:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1181:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1183:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1185:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1187:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1188:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1189:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1191:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1192:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1193:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1194:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1195:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1202:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1203:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1204:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1205:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 44


1206:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
1207:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1208:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1209:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1210:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1211:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1212:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
1213:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
1214:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1215:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
1216:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1217:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
1218:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1219:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1220:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1221:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1222:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1223:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
1224:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1225:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1226:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1227:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1228:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1229:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1230:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Signed Saturate
1231:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates a signed value.
1232:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
1233:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
1234:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1235:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1236:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SSAT(ARG1,ARG2) \
1237:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __extension__ \
1238:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1239:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
1240:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1241:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1242:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1243:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1244:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1245:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1246:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
1247:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
1248:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
1249:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
1250:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1251:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1252:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __USAT(ARG1,ARG2) \
1253:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  __extension__ \
1254:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1255:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
1256:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1257:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1258:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1259:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1260:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1261:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1262:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
ARM GAS  /tmp/ccVBkeMF.s 			page 45


1263:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
1264:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
1265:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
1266:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Rotated value
1267:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1268:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
1269:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1270:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1271:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1272:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1273:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1274:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1275:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1276:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1277:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1278:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
1279:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
1280:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1281:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1282:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1283:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
1284:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1285:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1286:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1287:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1288:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
1289:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1290:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1291:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1292:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1293:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
1294:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1295:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1296:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1297:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1298:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1299:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1300:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
1301:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
1302:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1303:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1304:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1305:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
1306:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1307:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1308:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1309:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1310:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
1311:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else
1312:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1313:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1314:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     */
1315:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
1316:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif
1317:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1318:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1319:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 46


1320:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1321:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1322:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
1323:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
1324:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1325:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1326:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1327:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
1328:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1329:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1330:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1331:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
1332:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1333:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1334:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1335:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1336:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1337:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
1338:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
1339:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1340:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1341:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1342:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
1343:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1344:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1345:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1346:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1347:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1348:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1349:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
1350:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
1351:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1352:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1353:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1354:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
1355:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1356:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1357:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1358:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1359:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1360:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1361:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
1362:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
1363:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1364:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1365:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1366:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
1367:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1368:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
1369:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1370:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1371:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1372:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1373:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
1374:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1375:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1376:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Signed Saturate
ARM GAS  /tmp/ccVBkeMF.s 			page 47


1377:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates a signed value.
1378:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
1379:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
1380:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1381:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1382:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
1383:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1384:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
1385:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1386:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
1387:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
1388:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     if (val > max)
1389:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1390:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return max;
1391:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1392:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     else if (val < min)
1393:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1394:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return min;
1395:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1396:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1397:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return val;
1398:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1399:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1400:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1401:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
1402:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
1403:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
1404:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
1405:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             Saturated value
1406:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1407:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
1408:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1409:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   if (sat <= 31U)
1410:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   {
1411:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
1412:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
1413:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1414:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return max;
1415:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1416:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     else if (val < 0)
1417:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     {
1418:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****       return 0U;
1419:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     }
1420:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   }
1421:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return (uint32_t)val;
1422:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1423:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1424:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1425:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1426:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
1427:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1428:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1429:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1430:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1431:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1432:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
1433:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
ARM GAS  /tmp/ccVBkeMF.s 			page 48


1434:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1435:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1436:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1437:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
1438:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1439:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1440:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1441:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) );
1442:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);
1443:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1444:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1445:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1446:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1447:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
1448:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
1449:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1450:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1451:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1452:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
1453:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1454:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1455:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1456:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) );
1457:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);
1458:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1459:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1460:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1461:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1462:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
1463:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
1464:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1465:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1466:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1467:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
1468:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1469:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1470:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1471:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) );
1472:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1473:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1474:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1475:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1476:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1477:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
1478:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
1479:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1480:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1481:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1482:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
1483:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1484:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1485:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1486:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1487:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1488:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1489:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
1490:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
ARM GAS  /tmp/ccVBkeMF.s 			page 49


1491:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1492:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1493:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1494:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
1495:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1496:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1497:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1498:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1499:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1500:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1501:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
1502:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
1503:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1504:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1505:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1506:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
1507:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1508:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
1509:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1510:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1511:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1512:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1513:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
1514:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
1515:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1516:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1517:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1518:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
1519:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1520:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1521:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1522:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) );
1523:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint8_t) result);
1524:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1525:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1526:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1527:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1528:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
1529:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
1530:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1531:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1532:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1533:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
1534:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1535:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1536:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1537:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) );
1538:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return ((uint16_t) result);
1539:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1540:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1541:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1542:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1543:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
1544:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
1545:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1546:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1547:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccVBkeMF.s 			page 50


1548:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
1549:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1550:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****     uint32_t result;
1551:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1552:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) );
1553:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1554:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1555:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1556:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1557:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1558:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
1559:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
1560:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1561:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1562:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1563:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1564:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1565:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
1566:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1567:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1568:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1569:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1570:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1571:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1572:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1573:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1574:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1575:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
1576:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
1577:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1578:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1579:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1580:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1581:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1582:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
1583:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1584:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1585:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1586:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1587:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
1588:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1589:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1590:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1591:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /**
1592:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
1593:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
1594:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1595:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1596:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1597:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   \return          1  Function failed
1598:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  */
1599:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
1600:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1601:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    uint32_t result;
1602:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1603:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) );
1604:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccVBkeMF.s 			page 51


1605:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1606:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1607:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1608:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
1609:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1610:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
1611:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1612:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1613:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /* ###################  Compiler specific Intrinsics  ########################### */
1614:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** /** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
1615:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   Access to dedicated SIMD instructions
1616:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   @{
1617:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** */
1618:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1619:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_DSP) && (__ARM_FEATURE_DSP == 1))
1620:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1621:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)
1622:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1623:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1624:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1625:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1626:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1627:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1628:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1629:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)
1630:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1631:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1632:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1633:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1634:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1635:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1636:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1637:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)
1638:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1639:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1640:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1641:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1642:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1643:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1644:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1645:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)
1646:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1647:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1648:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1649:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1650:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1651:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1652:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1653:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)
1654:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1655:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1656:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1657:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1658:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1659:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1660:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1661:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)
ARM GAS  /tmp/ccVBkeMF.s 			page 52


1662:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1663:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1664:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1665:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1666:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1667:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1668:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1669:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1670:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)
1671:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1672:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1673:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1674:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1675:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1676:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1677:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1678:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
1679:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1680:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1681:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1682:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1683:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1684:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1685:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1686:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
1687:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1688:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1689:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1690:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1691:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1692:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1693:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1694:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)
1695:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1696:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1697:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1698:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1699:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1700:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1701:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1702:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
1703:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1704:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1705:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1706:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1707:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1708:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1709:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1710:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
1711:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1712:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1713:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1714:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1715:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1716:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1717:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1718:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 53


1719:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
1720:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1721:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1722:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1723:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1724:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1725:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1726:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1727:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
1728:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1729:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1730:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1731:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1732:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1733:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1734:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1735:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
1736:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1737:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1738:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1739:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1740:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1741:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1742:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1743:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)
1744:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1745:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1746:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1747:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1748:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1749:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1750:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1751:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)
1752:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1753:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1754:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1755:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1756:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1757:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1758:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1759:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)
1760:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1761:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1762:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1763:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1764:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1765:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1766:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1767:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)
1768:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1769:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1770:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1771:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1772:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1773:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1774:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1775:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
ARM GAS  /tmp/ccVBkeMF.s 			page 54


1776:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1777:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1778:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1779:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1780:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1781:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1782:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1783:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
1784:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1785:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1786:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1787:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1788:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1789:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1790:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1791:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)
1792:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1793:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1794:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1795:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1796:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1797:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1798:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1799:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
1800:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1801:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1802:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1803:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1804:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1805:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1806:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1807:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
1808:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1809:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1810:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1811:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1812:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1813:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1814:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1815:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SASX(uint32_t op1, uint32_t op2)
1816:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1817:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1818:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1819:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1820:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1821:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1822:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1823:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QASX(uint32_t op1, uint32_t op2)
1824:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1825:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1826:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1827:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1828:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1829:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1830:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1831:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)
1832:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccVBkeMF.s 			page 55


1833:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1834:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1835:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1836:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1837:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1838:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1839:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UASX(uint32_t op1, uint32_t op2)
1840:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1841:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1842:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1843:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1844:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1845:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1846:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1847:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)
1848:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1849:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1850:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1851:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1852:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1853:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1854:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1855:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)
1856:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1857:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1858:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1859:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1860:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1861:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1862:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1863:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)
1864:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1865:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1866:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1867:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1868:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1869:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1870:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1871:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)
1872:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1873:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1874:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1875:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1876:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1877:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1878:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1879:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)
1880:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1881:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1882:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1883:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1884:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1885:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1886:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1887:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAX(uint32_t op1, uint32_t op2)
1888:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1889:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccVBkeMF.s 			page 56


1890:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1891:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1892:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1893:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1894:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1895:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)
1896:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1897:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1898:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1899:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1900:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1901:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1902:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1903:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)
1904:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1905:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1906:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1907:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1908:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1909:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1910:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1911:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)
1912:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1913:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1914:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1915:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1916:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1917:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1918:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1919:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
1920:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1921:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1922:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1923:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
1924:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1925:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1926:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1927:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __SSAT16(ARG1,ARG2) \
1928:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1929:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
1930:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1931:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1932:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1933:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1934:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** #define __USAT16(ARG1,ARG2) \
1935:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** ({                          \
1936:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
1937:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM ("usat16 %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
1938:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __RES; \
1939:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****  })
1940:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1941:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)
1942:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1943:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1944:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1945:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
1946:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccVBkeMF.s 			page 57


1947:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1948:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1949:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
1950:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1951:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1952:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1953:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1954:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1955:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1956:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1957:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
1958:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1959:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1960:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1961:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
1962:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1963:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1964:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1965:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
1966:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1967:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1968:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1969:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1970:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1971:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1972:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1973:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
1974:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1975:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1976:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1977:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1978:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1979:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1980:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1981:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)
1982:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1983:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1984:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1985:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
1986:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
1987:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** }
1988:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1989:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
1990:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** {
1991:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
1992:./Libraries/CMSIS/Core/Include/cmsis_gcc.h **** 
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 478              		.loc 3 1993 3
 479 0392 D7F8D430 		ldr	r3, [r7, #212]
 480 0396 D7F8D020 		ldr	r2, [r7, #208]
 481 039a D7F8CC10 		ldr	r1, [r7, #204]
 482              		.syntax unified
 483              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 484 039e 23FB0213 		smlad r3, r3, r2, r1
 485              	@ 0 "" 2
 486              		.thumb
 487              		.syntax unified
ARM GAS  /tmp/ccVBkeMF.s 			page 58


 488 03a2 C7F8C830 		str	r3, [r7, #200]
1994:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 489              		.loc 3 1994 9
 490 03a6 D7F8C830 		ldr	r3, [r7, #200]
 491              	.LBE59:
 492              	.LBE58:
 493              		.loc 1 281 16
 494 03aa C7F85C31 		str	r3, [r7, #348]
 282:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum2 = __SMLAD(inA1, inB2, sum2);
 495              		.loc 1 282 18
 496 03ae D7F82411 		ldr	r1, [r7, #292]
 497 03b2 D7F81821 		ldr	r2, [r7, #280]
 498 03b6 D7F84431 		ldr	r3, [r7, #324]
 499 03ba C7F8E410 		str	r1, [r7, #228]
 500 03be C7F8E020 		str	r2, [r7, #224]
 501 03c2 C7F8DC30 		str	r3, [r7, #220]
 502              	.LBB60:
 503              	.LBB61:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 504              		.loc 3 1993 3
 505 03c6 D7F8E430 		ldr	r3, [r7, #228]
 506 03ca D7F8E020 		ldr	r2, [r7, #224]
 507 03ce D7F8DC10 		ldr	r1, [r7, #220]
 508              		.syntax unified
 509              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 510 03d2 23FB0213 		smlad r3, r3, r2, r1
 511              	@ 0 "" 2
 512              		.thumb
 513              		.syntax unified
 514 03d6 C7F8D830 		str	r3, [r7, #216]
 515              		.loc 3 1994 9
 516 03da D7F8D830 		ldr	r3, [r7, #216]
 517              	.LBE61:
 518              	.LBE60:
 519              		.loc 1 282 16
 520 03de C7F84431 		str	r3, [r7, #324]
 283:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum3 = __SMLAD(inA2, inB1, sum3);
 521              		.loc 1 283 18
 522 03e2 D7F82011 		ldr	r1, [r7, #288]
 523 03e6 D7F81C21 		ldr	r2, [r7, #284]
 524 03ea D7F84031 		ldr	r3, [r7, #320]
 525 03ee C7F8F410 		str	r1, [r7, #244]
 526 03f2 C7F8F020 		str	r2, [r7, #240]
 527 03f6 C7F8EC30 		str	r3, [r7, #236]
 528              	.LBB62:
 529              	.LBB63:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 530              		.loc 3 1993 3
 531 03fa D7F8F430 		ldr	r3, [r7, #244]
 532 03fe D7F8F020 		ldr	r2, [r7, #240]
 533 0402 D7F8EC10 		ldr	r1, [r7, #236]
 534              		.syntax unified
 535              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 536 0406 23FB0213 		smlad r3, r3, r2, r1
 537              	@ 0 "" 2
 538              		.thumb
 539              		.syntax unified
ARM GAS  /tmp/ccVBkeMF.s 			page 59


 540 040a C7F8E830 		str	r3, [r7, #232]
 541              		.loc 3 1994 9
 542 040e D7F8E830 		ldr	r3, [r7, #232]
 543              	.LBE63:
 544              	.LBE62:
 545              		.loc 1 283 16
 546 0412 C7F84031 		str	r3, [r7, #320]
 284:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum4 = __SMLAD(inA2, inB2, sum4);
 547              		.loc 1 284 18
 548 0416 D7F82011 		ldr	r1, [r7, #288]
 549 041a D7F81821 		ldr	r2, [r7, #280]
 550 041e D7F83C31 		ldr	r3, [r7, #316]
 551 0422 C7F80411 		str	r1, [r7, #260]
 552 0426 C7F80021 		str	r2, [r7, #256]
 553 042a C7F8FC30 		str	r3, [r7, #252]
 554              	.LBB64:
 555              	.LBB65:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 556              		.loc 3 1993 3
 557 042e D7F80431 		ldr	r3, [r7, #260]
 558 0432 D7F80021 		ldr	r2, [r7, #256]
 559 0436 D7F8FC10 		ldr	r1, [r7, #252]
 560              		.syntax unified
 561              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 562 043a 23FB0213 		smlad r3, r3, r2, r1
 563              	@ 0 "" 2
 564              		.thumb
 565              		.syntax unified
 566 043e C7F8F830 		str	r3, [r7, #248]
 567              		.loc 3 1994 9
 568 0442 D7F8F830 		ldr	r3, [r7, #248]
 569              	.LBE65:
 570              	.LBE64:
 571              		.loc 1 284 16
 572 0446 C7F83C31 		str	r3, [r7, #316]
 285:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 286:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 287:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *pInA++;
 288:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *pInB++;
 289:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Multiply and Accumlates */
 290:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA1 * inB1;
 291:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 292:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *pInA++;
 293:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *pInB++;
 294:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA2 * inB2;
 295:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 296:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *pInA++;
 297:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *pInB++;
 298:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA1 * inB1;
 299:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 300:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *pInA++;
 301:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *pInB++;
 302:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA2 * inB2;
 303:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 304:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 305:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement loop counter */
 306:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
ARM GAS  /tmp/ccVBkeMF.s 			page 60


 573              		.loc 1 306 17
 574 044a D7F84831 		ldr	r3, [r7, #328]
 575 044e 013B     		subs	r3, r3, #1
 576 0450 C7F84831 		str	r3, [r7, #328]
 577              	.L11:
 268:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 578              		.loc 1 268 15
 579 0454 D7F84831 		ldr	r3, [r7, #328]
 580 0458 002B     		cmp	r3, #0
 581 045a 7FF42EAF 		bne	.L20
 307:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 308:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 309:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* process odd column samples */
 310:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 311:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         if (numColsA & 1U) {
 582              		.loc 1 311 22
 583 045e B7F82A31 		ldrh	r3, [r7, #298]
 584 0462 03F00103 		and	r3, r3, #1
 585              		.loc 1 311 12
 586 0466 002B     		cmp	r3, #0
 587 0468 57D0     		beq	.L21
 312:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *pInA++;
 588              		.loc 1 312 23
 589 046a 07F15403 		add	r3, r7, #84
 590 046e 1B68     		ldr	r3, [r3]
 591 0470 991C     		adds	r1, r3, #2
 592 0472 07F15402 		add	r2, r7, #84
 593 0476 1160     		str	r1, [r2]
 594              		.loc 1 312 18
 595 0478 B3F90030 		ldrsh	r3, [r3]
 596              		.loc 1 312 16
 597 047c C7F82431 		str	r3, [r7, #292]
 313:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *pInB++;
 598              		.loc 1 313 23
 599 0480 07F15003 		add	r3, r7, #80
 600 0484 1B68     		ldr	r3, [r3]
 601 0486 991C     		adds	r1, r3, #2
 602 0488 07F15002 		add	r2, r7, #80
 603 048c 1160     		str	r1, [r2]
 604              		.loc 1 313 18
 605 048e B3F90030 		ldrsh	r3, [r3]
 606              		.loc 1 313 16
 607 0492 C7F81C31 		str	r3, [r7, #284]
 314:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *pInA2++;
 608              		.loc 1 314 24
 609 0496 07F14C03 		add	r3, r7, #76
 610 049a 1B68     		ldr	r3, [r3]
 611 049c 991C     		adds	r1, r3, #2
 612 049e 07F14C02 		add	r2, r7, #76
 613 04a2 1160     		str	r1, [r2]
 614              		.loc 1 314 18
 615 04a4 B3F90030 		ldrsh	r3, [r3]
 616              		.loc 1 314 16
 617 04a8 C7F82031 		str	r3, [r7, #288]
 315:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *pInB2++;
 618              		.loc 1 315 24
 619 04ac 07F14803 		add	r3, r7, #72
ARM GAS  /tmp/ccVBkeMF.s 			page 61


 620 04b0 1B68     		ldr	r3, [r3]
 621 04b2 991C     		adds	r1, r3, #2
 622 04b4 07F14802 		add	r2, r7, #72
 623 04b8 1160     		str	r1, [r2]
 624              		.loc 1 315 18
 625 04ba B3F90030 		ldrsh	r3, [r3]
 626              		.loc 1 315 16
 627 04be C7F81831 		str	r3, [r7, #280]
 316:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  += inA1 * inB1;
 628              		.loc 1 316 24
 629 04c2 D7F82431 		ldr	r3, [r7, #292]
 630 04c6 D7F81C21 		ldr	r2, [r7, #284]
 631 04ca 02FB03F3 		mul	r3, r2, r3
 632              		.loc 1 316 16
 633 04ce D7F85C21 		ldr	r2, [r7, #348]
 634 04d2 1344     		add	r3, r3, r2
 635 04d4 C7F85C31 		str	r3, [r7, #348]
 317:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum2 += inA1 * inB2;
 636              		.loc 1 317 24
 637 04d8 D7F82431 		ldr	r3, [r7, #292]
 638 04dc D7F81821 		ldr	r2, [r7, #280]
 639 04e0 02FB03F3 		mul	r3, r2, r3
 640              		.loc 1 317 16
 641 04e4 D7F84421 		ldr	r2, [r7, #324]
 642 04e8 1344     		add	r3, r3, r2
 643 04ea C7F84431 		str	r3, [r7, #324]
 318:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum3 += inA2 * inB1;
 644              		.loc 1 318 24
 645 04ee D7F82031 		ldr	r3, [r7, #288]
 646 04f2 D7F81C21 		ldr	r2, [r7, #284]
 647 04f6 02FB03F3 		mul	r3, r2, r3
 648              		.loc 1 318 16
 649 04fa D7F84021 		ldr	r2, [r7, #320]
 650 04fe 1344     		add	r3, r3, r2
 651 0500 C7F84031 		str	r3, [r7, #320]
 319:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum4 += inA2 * inB2;
 652              		.loc 1 319 24
 653 0504 D7F82031 		ldr	r3, [r7, #288]
 654 0508 D7F81821 		ldr	r2, [r7, #280]
 655 050c 02FB03F3 		mul	r3, r2, r3
 656              		.loc 1 319 16
 657 0510 D7F83C21 		ldr	r2, [r7, #316]
 658 0514 1344     		add	r3, r3, r2
 659 0516 C7F83C31 		str	r3, [r7, #316]
 660              	.L21:
 320:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 321:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 322:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA % 0x4U;
 323:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 324:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U)
 325:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 326:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */
 327:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) *pInA++ * *pInB++;
 328:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 329:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement loop counter */
 330:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 331:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
ARM GAS  /tmp/ccVBkeMF.s 			page 62


 332:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 333:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 334:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Saturate and store result in destination buffer */
 335:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++  = (q15_t) (sum >> 15);
 661              		.loc 1 335 31
 662 051a D7F85C31 		ldr	r3, [r7, #348]
 663 051e D913     		asrs	r1, r3, #15
 664              		.loc 1 335 12
 665 0520 D7F85831 		ldr	r3, [r7, #344]
 666 0524 9A1C     		adds	r2, r3, #2
 667 0526 C7F85821 		str	r2, [r7, #344]
 668              		.loc 1 335 18
 669 052a 0AB2     		sxth	r2, r1
 670              		.loc 1 335 16
 671 052c 1A80     		strh	r2, [r3]	@ movhi
 336:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 337:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 338:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++  = (q15_t) (sum2 >> 15);
 672              		.loc 1 338 32
 673 052e D7F84431 		ldr	r3, [r7, #324]
 674 0532 D913     		asrs	r1, r3, #15
 675              		.loc 1 338 12
 676 0534 D7F85831 		ldr	r3, [r7, #344]
 677 0538 9A1C     		adds	r2, r3, #2
 678 053a C7F85821 		str	r2, [r7, #344]
 679              		.loc 1 338 18
 680 053e 0AB2     		sxth	r2, r1
 681              		.loc 1 338 16
 682 0540 1A80     		strh	r2, [r3]	@ movhi
 339:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px2++ = (q15_t) (sum3 >> 15);
 683              		.loc 1 339 32
 684 0542 D7F84031 		ldr	r3, [r7, #320]
 685 0546 D913     		asrs	r1, r3, #15
 686              		.loc 1 339 13
 687 0548 D7F83831 		ldr	r3, [r7, #312]
 688 054c 9A1C     		adds	r2, r3, #2
 689 054e C7F83821 		str	r2, [r7, #312]
 690              		.loc 1 339 18
 691 0552 0AB2     		sxth	r2, r1
 692              		.loc 1 339 16
 693 0554 1A80     		strh	r2, [r3]	@ movhi
 340:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px2++ = (q15_t) (sum4 >> 15);
 694              		.loc 1 340 32
 695 0556 D7F83C31 		ldr	r3, [r7, #316]
 696 055a D913     		asrs	r1, r3, #15
 697              		.loc 1 340 13
 698 055c D7F83831 		ldr	r3, [r7, #312]
 699 0560 9A1C     		adds	r2, r3, #2
 700 0562 C7F83821 		str	r2, [r7, #312]
 701              		.loc 1 340 18
 702 0566 0AB2     		sxth	r2, r1
 703              		.loc 1 340 16
 704 0568 1A80     		strh	r2, [r3]	@ movhi
 341:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         j += numRowsB * 2;
 705              		.loc 1 341 23
 706 056a B7F82831 		ldrh	r3, [r7, #296]
 707 056e 5B00     		lsls	r3, r3, #1
ARM GAS  /tmp/ccVBkeMF.s 			page 63


 708 0570 1A46     		mov	r2, r3
 709              		.loc 1 341 11
 710 0572 D7F83431 		ldr	r3, [r7, #308]
 711 0576 1344     		add	r3, r3, r2
 712 0578 C7F83431 		str	r3, [r7, #308]
 342:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 343:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 344:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement column loop counter */
 345:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 713              		.loc 1 345 12
 714 057c D7F85431 		ldr	r3, [r7, #340]
 715 0580 013B     		subs	r3, r3, #1
 716 0582 C7F85431 		str	r3, [r7, #340]
 717              	.L10:
 245:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 718              		.loc 1 245 13
 719 0586 D7F85431 		ldr	r3, [r7, #340]
 720 058a 002B     		cmp	r3, #0
 721 058c 7FF45AAE 		bne	.L22
 346:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 347:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 348:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 349:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = i + numColsA;
 722              		.loc 1 349 13
 723 0590 B7F82A31 		ldrh	r3, [r7, #298]
 724              		.loc 1 349 9
 725 0594 D7F85021 		ldr	r2, [r7, #336]
 726 0598 1344     		add	r3, r3, r2
 727 059a C7F85031 		str	r3, [r7, #336]
 350:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 351:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 352:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = i + numColsA;
 728              		.loc 1 352 13
 729 059e B7F82A31 		ldrh	r3, [r7, #298]
 730              		.loc 1 352 9
 731 05a2 D7F85021 		ldr	r2, [r7, #336]
 732 05a6 1344     		add	r3, r3, r2
 733 05a8 C7F85031 		str	r3, [r7, #336]
 353:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = px2 + (numColsB & 1U);
 734              		.loc 1 353 28
 735 05ac B7F82C31 		ldrh	r3, [r7, #300]
 736 05b0 03F00103 		and	r3, r3, #1
 737              		.loc 1 353 16
 738 05b4 5B00     		lsls	r3, r3, #1
 739              		.loc 1 353 10
 740 05b6 D7F83821 		ldr	r2, [r7, #312]
 741 05ba 1344     		add	r3, r3, r2
 742 05bc C7F85831 		str	r3, [r7, #344]
 354:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       px2 = px + numColsB;
 743              		.loc 1 354 16
 744 05c0 B7F82C31 		ldrh	r3, [r7, #300]
 745 05c4 5B00     		lsls	r3, r3, #1
 746              		.loc 1 354 11
 747 05c6 D7F85821 		ldr	r2, [r7, #344]
 748 05ca 1344     		add	r3, r3, r2
 749 05cc C7F83831 		str	r3, [r7, #312]
 355:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
ARM GAS  /tmp/ccVBkeMF.s 			page 64


 356:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 357:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Decrement row loop counter */
 358:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       row--;
 750              		.loc 1 358 10
 751 05d0 D7F84C31 		ldr	r3, [r7, #332]
 752 05d4 013B     		subs	r3, r3, #1
 753 05d6 C7F84C31 		str	r3, [r7, #332]
 754              	.L9:
 230:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 755              		.loc 1 230 11
 756 05da D7F84C31 		ldr	r3, [r7, #332]
 757 05de 002B     		cmp	r3, #0
 758 05e0 7FF41EAE 		bne	.L23
 359:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 360:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 361:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 362:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute any remaining odd row/column below */
 363:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 364:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #if defined (ARM_MATH_DSP)
 365:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 366:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute remaining output column */
 367:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     if (numColsB & 1U) {
 759              		.loc 1 367 18
 760 05e4 B7F82C31 		ldrh	r3, [r7, #300]
 761 05e8 03F00103 		and	r3, r3, #1
 762              		.loc 1 367 8
 763 05ec 002B     		cmp	r3, #0
 764 05ee 00F01381 		beq	.L24
 368:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 369:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Avoid redundant computation of last element */
 370:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       row = numRowsA & (~0x1);
 765              		.loc 1 370 22
 766 05f2 B7F82E31 		ldrh	r3, [r7, #302]
 767              		.loc 1 370 11
 768 05f6 23F00103 		bic	r3, r3, #1
 769 05fa C7F84C31 		str	r3, [r7, #332]
 371:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 372:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Point to remaining unfilled column in output matrix */
 373:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pDst->pData + numColsB-1;
 770              		.loc 1 373 16
 771 05fe 3B1D     		adds	r3, r7, #4
 772 0600 1B68     		ldr	r3, [r3]
 773 0602 5A68     		ldr	r2, [r3, #4]
 774              		.loc 1 373 34
 775 0604 B7F82C11 		ldrh	r1, [r7, #300]
 776 0608 6FF00043 		mvn	r3, #-2147483648
 777 060c 0B44     		add	r3, r3, r1
 778 060e 5B00     		lsls	r3, r3, #1
 779              		.loc 1 373 10
 780 0610 1344     		add	r3, r3, r2
 781 0612 C7F85831 		str	r3, [r7, #344]
 374:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInA = pSrcA->pData;
 782              		.loc 1 374 19
 783 0616 07F10C03 		add	r3, r7, #12
 784 061a 1B68     		ldr	r3, [r3]
 785 061c 5A68     		ldr	r2, [r3, #4]
 786              		.loc 1 374 12
ARM GAS  /tmp/ccVBkeMF.s 			page 65


 787 061e 07F15403 		add	r3, r7, #84
 788 0622 1A60     		str	r2, [r3]
 375:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 376:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* row loop */
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (row > 0)
 789              		.loc 1 377 13
 790 0624 F3E0     		b	.L25
 791              	.L36:
 378:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 379:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 380:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* point to last column in matrix B */
 381:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB  = pSrcBT + numRowsB * (numColsB-1);
 792              		.loc 1 381 35
 793 0626 B7F82831 		ldrh	r3, [r7, #296]
 794              		.loc 1 381 46
 795 062a B7F82C21 		ldrh	r2, [r7, #300]
 796 062e 013A     		subs	r2, r2, #1
 797              		.loc 1 381 35
 798 0630 02FB03F3 		mul	r3, r2, r3
 799              		.loc 1 381 24
 800 0634 5B00     		lsls	r3, r3, #1
 801 0636 D7F83021 		ldr	r2, [r7, #304]
 802 063a 1A44     		add	r2, r2, r3
 803              		.loc 1 381 15
 804 063c 07F15003 		add	r3, r7, #80
 805 0640 1A60     		str	r2, [r3]
 382:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 383:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set variable sum, that acts as accumulator, to zero */
 384:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum  = 0;
 806              		.loc 1 384 14
 807 0642 0023     		movs	r3, #0
 808 0644 C7F85C31 		str	r3, [r7, #348]
 385:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 386:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Compute 4 columns at once */
 387:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2U;
 809              		.loc 1 387 27
 810 0648 B7F82A31 		ldrh	r3, [r7, #298]
 811 064c 9B08     		lsrs	r3, r3, #2
 812 064e 9BB2     		uxth	r3, r3
 813              		.loc 1 387 16
 814 0650 C7F84831 		str	r3, [r7, #328]
 388:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 389:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U)
 815              		.loc 1 390 15
 816 0654 98E0     		b	.L26
 817              	.L33:
 818 0656 07F15403 		add	r3, r7, #84
 819 065a C7F88830 		str	r3, [r7, #136]
 820              	.LBB66:
 821              	.LBB67:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 822              		.loc 2 474 3
 823 065e D7F88830 		ldr	r3, [r7, #136]
 824 0662 1B68     		ldr	r3, [r3]
 825 0664 1B68     		ldr	r3, [r3]	@ unaligned
 826 0666 1A46     		mov	r2, r3
ARM GAS  /tmp/ccVBkeMF.s 			page 66


 827 0668 07F13403 		add	r3, r7, #52
 828 066c 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 829              		.loc 2 475 9
 830 066e D7F88830 		ldr	r3, [r7, #136]
 831 0672 1B68     		ldr	r3, [r3]
 832 0674 1A1D     		adds	r2, r3, #4
 833 0676 D7F88830 		ldr	r3, [r7, #136]
 834 067a 1A60     		str	r2, [r3]
 835              		.loc 2 477 10
 836 067c 07F13403 		add	r3, r7, #52
 837 0680 1B68     		ldr	r3, [r3]
 838              	.LBE67:
 839              	.LBE66:
 391:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 392:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = read_q15x2_ia ((q15_t **) &pInA);
 840              		.loc 1 392 18
 841 0682 C7F82431 		str	r3, [r7, #292]
 842 0686 07F15403 		add	r3, r7, #84
 843 068a C7F88C30 		str	r3, [r7, #140]
 844              	.LBB68:
 845              	.LBB69:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 846              		.loc 2 474 3
 847 068e D7F88C30 		ldr	r3, [r7, #140]
 848 0692 1B68     		ldr	r3, [r3]
 849 0694 1B68     		ldr	r3, [r3]	@ unaligned
 850 0696 1A46     		mov	r2, r3
 851 0698 07F13003 		add	r3, r7, #48
 852 069c 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 853              		.loc 2 475 9
 854 069e D7F88C30 		ldr	r3, [r7, #140]
 855 06a2 1B68     		ldr	r3, [r3]
 856 06a4 1A1D     		adds	r2, r3, #4
 857 06a6 D7F88C30 		ldr	r3, [r7, #140]
 858 06aa 1A60     		str	r2, [r3]
 859              		.loc 2 477 10
 860 06ac 07F13003 		add	r3, r7, #48
 861 06b0 1B68     		ldr	r3, [r3]
 862              	.LBE69:
 863              	.LBE68:
 393:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = read_q15x2_ia ((q15_t **) &pInA);
 864              		.loc 1 393 18
 865 06b2 C7F82031 		str	r3, [r7, #288]
 866 06b6 07F15003 		add	r3, r7, #80
 867 06ba C7F89030 		str	r3, [r7, #144]
 868              	.LBB70:
 869              	.LBB71:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 870              		.loc 2 474 3
 871 06be D7F89030 		ldr	r3, [r7, #144]
 872 06c2 1B68     		ldr	r3, [r3]
 873 06c4 1B68     		ldr	r3, [r3]	@ unaligned
 874 06c6 1A46     		mov	r2, r3
 875 06c8 07F12C03 		add	r3, r7, #44
 876 06cc 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccVBkeMF.s 			page 67


 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 877              		.loc 2 475 9
 878 06ce D7F89030 		ldr	r3, [r7, #144]
 879 06d2 1B68     		ldr	r3, [r3]
 880 06d4 1A1D     		adds	r2, r3, #4
 881 06d6 D7F89030 		ldr	r3, [r7, #144]
 882 06da 1A60     		str	r2, [r3]
 883              		.loc 2 477 10
 884 06dc 07F12C03 		add	r3, r7, #44
 885 06e0 1B68     		ldr	r3, [r3]
 886              	.LBE71:
 887              	.LBE70:
 394:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = read_q15x2_ia ((q15_t **) &pInB);
 888              		.loc 1 394 18
 889 06e2 C7F81C31 		str	r3, [r7, #284]
 890 06e6 07F15003 		add	r3, r7, #80
 891 06ea C7F89430 		str	r3, [r7, #148]
 892              	.LBB72:
 893              	.LBB73:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 894              		.loc 2 474 3
 895 06ee D7F89430 		ldr	r3, [r7, #148]
 896 06f2 1B68     		ldr	r3, [r3]
 897 06f4 1B68     		ldr	r3, [r3]	@ unaligned
 898 06f6 1A46     		mov	r2, r3
 899 06f8 07F12803 		add	r3, r7, #40
 900 06fc 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 901              		.loc 2 475 9
 902 06fe D7F89430 		ldr	r3, [r7, #148]
 903 0702 1B68     		ldr	r3, [r3]
 904 0704 1A1D     		adds	r2, r3, #4
 905 0706 D7F89430 		ldr	r3, [r7, #148]
 906 070a 1A60     		str	r2, [r3]
 907              		.loc 2 477 10
 908 070c 07F12803 		add	r3, r7, #40
 909 0710 1B68     		ldr	r3, [r3]
 910              	.LBE73:
 911              	.LBE72:
 395:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = read_q15x2_ia ((q15_t **) &pInB);
 912              		.loc 1 395 18
 913 0712 C7F81831 		str	r3, [r7, #280]
 396:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 397:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 914              		.loc 1 397 18
 915 0716 D7F82411 		ldr	r1, [r7, #292]
 916 071a D7F81C21 		ldr	r2, [r7, #284]
 917 071e D7F85C31 		ldr	r3, [r7, #348]
 918 0722 C7F8A410 		str	r1, [r7, #164]
 919 0726 C7F8A020 		str	r2, [r7, #160]
 920 072a C7F89C30 		str	r3, [r7, #156]
 921              	.LBB74:
 922              	.LBB75:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 923              		.loc 3 1993 3
 924 072e D7F8A430 		ldr	r3, [r7, #164]
 925 0732 D7F8A020 		ldr	r2, [r7, #160]
ARM GAS  /tmp/ccVBkeMF.s 			page 68


 926 0736 D7F89C10 		ldr	r1, [r7, #156]
 927              		.syntax unified
 928              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 929 073a 23FB0213 		smlad r3, r3, r2, r1
 930              	@ 0 "" 2
 931              		.thumb
 932              		.syntax unified
 933 073e C7F89830 		str	r3, [r7, #152]
 934              		.loc 3 1994 9
 935 0742 D7F89830 		ldr	r3, [r7, #152]
 936              	.LBE75:
 937              	.LBE74:
 938              		.loc 1 397 16
 939 0746 C7F85C31 		str	r3, [r7, #348]
 398:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA2, inB2, sum);
 940              		.loc 1 398 18
 941 074a D7F82011 		ldr	r1, [r7, #288]
 942 074e D7F81821 		ldr	r2, [r7, #280]
 943 0752 D7F85C31 		ldr	r3, [r7, #348]
 944 0756 C7F8B410 		str	r1, [r7, #180]
 945 075a C7F8B020 		str	r2, [r7, #176]
 946 075e C7F8AC30 		str	r3, [r7, #172]
 947              	.LBB76:
 948              	.LBB77:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 949              		.loc 3 1993 3
 950 0762 D7F8B430 		ldr	r3, [r7, #180]
 951 0766 D7F8B020 		ldr	r2, [r7, #176]
 952 076a D7F8AC10 		ldr	r1, [r7, #172]
 953              		.syntax unified
 954              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 955 076e 23FB0213 		smlad r3, r3, r2, r1
 956              	@ 0 "" 2
 957              		.thumb
 958              		.syntax unified
 959 0772 C7F8A830 		str	r3, [r7, #168]
 960              		.loc 3 1994 9
 961 0776 D7F8A830 		ldr	r3, [r7, #168]
 962              	.LBE77:
 963              	.LBE76:
 964              		.loc 1 398 16
 965 077a C7F85C31 		str	r3, [r7, #348]
 399:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 400:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement loop counter */
 401:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 966              		.loc 1 401 17
 967 077e D7F84831 		ldr	r3, [r7, #328]
 968 0782 013B     		subs	r3, r3, #1
 969 0784 C7F84831 		str	r3, [r7, #328]
 970              	.L26:
 390:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 971              		.loc 1 390 15
 972 0788 D7F84831 		ldr	r3, [r7, #328]
 973 078c 002B     		cmp	r3, #0
 974 078e 7FF462AF 		bne	.L33
 402:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 403:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
ARM GAS  /tmp/ccVBkeMF.s 			page 69


 404:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA & 3U;
 975              		.loc 1 404 27
 976 0792 B7F82A31 		ldrh	r3, [r7, #298]
 977              		.loc 1 404 16
 978 0796 03F00303 		and	r3, r3, #3
 979 079a C7F84831 		str	r3, [r7, #328]
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U) {
 980              		.loc 1 405 15
 981 079e 1EE0     		b	.L34
 982              	.L35:
 406:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 983              		.loc 1 406 32
 984 07a0 07F15403 		add	r3, r7, #84
 985 07a4 1B68     		ldr	r3, [r3]
 986 07a6 991C     		adds	r1, r3, #2
 987 07a8 07F15402 		add	r2, r7, #84
 988 07ac 1160     		str	r1, [r2]
 989              		.loc 1 406 27
 990 07ae B3F90030 		ldrsh	r3, [r3]
 991              		.loc 1 406 18
 992 07b2 1846     		mov	r0, r3
 993              		.loc 1 406 44
 994 07b4 07F15003 		add	r3, r7, #80
 995 07b8 1B68     		ldr	r3, [r3]
 996 07ba 991C     		adds	r1, r3, #2
 997 07bc 07F15002 		add	r2, r7, #80
 998 07c0 1160     		str	r1, [r2]
 999              		.loc 1 406 39
 1000 07c2 B3F90030 		ldrsh	r3, [r3]
 1001              		.loc 1 406 36
 1002 07c6 03FB00F3 		mul	r3, r3, r0
 1003              		.loc 1 406 15
 1004 07ca D7F85C21 		ldr	r2, [r7, #348]
 1005 07ce 1344     		add	r3, r3, r2
 1006 07d0 C7F85C31 		str	r3, [r7, #348]
 407:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1007              		.loc 1 407 17
 1008 07d4 D7F84831 		ldr	r3, [r7, #328]
 1009 07d8 013B     		subs	r3, r3, #1
 1010 07da C7F84831 		str	r3, [r7, #328]
 1011              	.L34:
 405:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U) {
 1012              		.loc 1 405 15
 1013 07de D7F84831 		ldr	r3, [r7, #328]
 1014 07e2 002B     		cmp	r3, #0
 1015 07e4 DCD1     		bne	.L35
 408:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 409:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 410:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store result in destination buffer */
 411:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) (sum  >> 15);
 1016              		.loc 1 411 29
 1017 07e6 D7F85C31 		ldr	r3, [r7, #348]
 1018 07ea DB13     		asrs	r3, r3, #15
 1019              		.loc 1 411 15
 1020 07ec 1AB2     		sxth	r2, r3
 1021              		.loc 1 411 13
 1022 07ee D7F85831 		ldr	r3, [r7, #344]
ARM GAS  /tmp/ccVBkeMF.s 			page 70


 1023 07f2 1A80     		strh	r2, [r3]	@ movhi
 412:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numColsB;
 1024              		.loc 1 412 12
 1025 07f4 B7F82C31 		ldrh	r3, [r7, #300]
 1026 07f8 5B00     		lsls	r3, r3, #1
 1027 07fa D7F85821 		ldr	r2, [r7, #344]
 1028 07fe 1344     		add	r3, r3, r2
 1029 0800 C7F85831 		str	r3, [r7, #344]
 413:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 414:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement row loop counter */
 415:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         row--;
 1030              		.loc 1 415 12
 1031 0804 D7F84C31 		ldr	r3, [r7, #332]
 1032 0808 013B     		subs	r3, r3, #1
 1033 080a C7F84C31 		str	r3, [r7, #332]
 1034              	.L25:
 377:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 1035              		.loc 1 377 13
 1036 080e D7F84C31 		ldr	r3, [r7, #332]
 1037 0812 002B     		cmp	r3, #0
 1038 0814 7FF407AF 		bne	.L36
 1039              	.L24:
 416:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 417:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 418:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 419:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute remaining output row */
 420:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     if (numRowsA & 1U) {
 1040              		.loc 1 420 18
 1041 0818 B7F82E31 		ldrh	r3, [r7, #302]
 1042 081c 03F00103 		and	r3, r3, #1
 1043              		.loc 1 420 8
 1044 0820 002B     		cmp	r3, #0
 1045 0822 00F00D81 		beq	.L37
 421:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 422:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* point to last row in output matrix */
 423:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pDst->pData + (numColsB) * (numRowsA-1);
 1046              		.loc 1 423 16
 1047 0826 3B1D     		adds	r3, r7, #4
 1048 0828 1B68     		ldr	r3, [r3]
 1049 082a 5A68     		ldr	r2, [r3, #4]
 1050              		.loc 1 423 37
 1051 082c B7F82C31 		ldrh	r3, [r7, #300]
 1052              		.loc 1 423 48
 1053 0830 B7F82E11 		ldrh	r1, [r7, #302]
 1054 0834 0139     		subs	r1, r1, #1
 1055              		.loc 1 423 37
 1056 0836 01FB03F3 		mul	r3, r1, r3
 1057              		.loc 1 423 24
 1058 083a 5B00     		lsls	r3, r3, #1
 1059              		.loc 1 423 10
 1060 083c 1344     		add	r3, r3, r2
 1061 083e C7F85831 		str	r3, [r7, #344]
 424:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 425:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInB  = pSrcBT;
 1062              		.loc 1 425 13
 1063 0842 07F15003 		add	r3, r7, #80
 1064 0846 D7F83021 		ldr	r2, [r7, #304]
ARM GAS  /tmp/ccVBkeMF.s 			page 71


 1065 084a 1A60     		str	r2, [r3]
 426:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB;
 1066              		.loc 1 426 11
 1067 084c B7F82C31 		ldrh	r3, [r7, #300]
 1068 0850 C7F85431 		str	r3, [r7, #340]
 427:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = 0U;
 1069              		.loc 1 427 9
 1070 0854 0023     		movs	r3, #0
 1071 0856 C7F85031 		str	r3, [r7, #336]
 428:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 429:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* col loop */
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0)
 1072              		.loc 1 430 13
 1073 085a ECE0     		b	.L38
 1074              	.L49:
 431:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 432:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* point to last row in matrix A */
 433:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA = pSrcA->pData + (numRowsA-1) * numColsA;
 1075              		.loc 1 433 21
 1076 085c 07F10C03 		add	r3, r7, #12
 1077 0860 1B68     		ldr	r3, [r3]
 1078 0862 5A68     		ldr	r2, [r3, #4]
 1079              		.loc 1 433 40
 1080 0864 B7F82E31 		ldrh	r3, [r7, #302]
 1081 0868 013B     		subs	r3, r3, #1
 1082              		.loc 1 433 44
 1083 086a B7F82A11 		ldrh	r1, [r7, #298]
 1084 086e 01FB03F3 		mul	r3, r1, r3
 1085              		.loc 1 433 29
 1086 0872 5B00     		lsls	r3, r3, #1
 1087 0874 1A44     		add	r2, r2, r3
 1088              		.loc 1 433 14
 1089 0876 07F15403 		add	r3, r7, #84
 1090 087a 1A60     		str	r2, [r3]
 434:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 435:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set variable sum, that acts as accumulator, to zero */
 436:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum  = 0;
 1091              		.loc 1 436 14
 1092 087c 0023     		movs	r3, #0
 1093 087e C7F85C31 		str	r3, [r7, #348]
 437:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 438:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Compute 4 columns at once */
 439:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2U;
 1094              		.loc 1 439 27
 1095 0882 B7F82A31 		ldrh	r3, [r7, #298]
 1096 0886 9B08     		lsrs	r3, r3, #2
 1097 0888 9BB2     		uxth	r3, r3
 1098              		.loc 1 439 16
 1099 088a C7F84831 		str	r3, [r7, #328]
 440:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 441:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U)
 1100              		.loc 1 442 15
 1101 088e 94E0     		b	.L39
 1102              	.L46:
 1103 0890 07F15803 		add	r3, r7, #88
 1104 0894 07F15402 		add	r2, r7, #84
ARM GAS  /tmp/ccVBkeMF.s 			page 72


 1105 0898 1A60     		str	r2, [r3]
 1106              	.LBB78:
 1107              	.LBB79:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 1108              		.loc 2 474 3
 1109 089a 07F15803 		add	r3, r7, #88
 1110 089e 1B68     		ldr	r3, [r3]
 1111 08a0 1B68     		ldr	r3, [r3]
 1112 08a2 1B68     		ldr	r3, [r3]	@ unaligned
 1113 08a4 1A46     		mov	r2, r3
 1114 08a6 07F14403 		add	r3, r7, #68
 1115 08aa 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 1116              		.loc 2 475 9
 1117 08ac 07F15803 		add	r3, r7, #88
 1118 08b0 1B68     		ldr	r3, [r3]
 1119 08b2 1B68     		ldr	r3, [r3]
 1120 08b4 1A1D     		adds	r2, r3, #4
 1121 08b6 07F15803 		add	r3, r7, #88
 1122 08ba 1B68     		ldr	r3, [r3]
 1123 08bc 1A60     		str	r2, [r3]
 1124              		.loc 2 477 10
 1125 08be 07F14403 		add	r3, r7, #68
 1126 08c2 1B68     		ldr	r3, [r3]
 1127              	.LBE79:
 1128              	.LBE78:
 443:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 444:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = read_q15x2_ia ((q15_t **) &pInA);
 1129              		.loc 1 444 18
 1130 08c4 C7F82431 		str	r3, [r7, #292]
 1131 08c8 07F15C03 		add	r3, r7, #92
 1132 08cc 07F15402 		add	r2, r7, #84
 1133 08d0 1A60     		str	r2, [r3]
 1134              	.LBB80:
 1135              	.LBB81:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 1136              		.loc 2 474 3
 1137 08d2 07F15C03 		add	r3, r7, #92
 1138 08d6 1B68     		ldr	r3, [r3]
 1139 08d8 1B68     		ldr	r3, [r3]
 1140 08da 1B68     		ldr	r3, [r3]	@ unaligned
 1141 08dc 1A46     		mov	r2, r3
 1142 08de 07F14003 		add	r3, r7, #64
 1143 08e2 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 1144              		.loc 2 475 9
 1145 08e4 07F15C03 		add	r3, r7, #92
 1146 08e8 1B68     		ldr	r3, [r3]
 1147 08ea 1B68     		ldr	r3, [r3]
 1148 08ec 1A1D     		adds	r2, r3, #4
 1149 08ee 07F15C03 		add	r3, r7, #92
 1150 08f2 1B68     		ldr	r3, [r3]
 1151 08f4 1A60     		str	r2, [r3]
 1152              		.loc 2 477 10
 1153 08f6 07F14003 		add	r3, r7, #64
 1154 08fa 1B68     		ldr	r3, [r3]
 1155              	.LBE81:
ARM GAS  /tmp/ccVBkeMF.s 			page 73


 1156              	.LBE80:
 445:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = read_q15x2_ia ((q15_t **) &pInA);
 1157              		.loc 1 445 18
 1158 08fc C7F82031 		str	r3, [r7, #288]
 1159 0900 07F16003 		add	r3, r7, #96
 1160 0904 07F15002 		add	r2, r7, #80
 1161 0908 1A60     		str	r2, [r3]
 1162              	.LBB82:
 1163              	.LBB83:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 1164              		.loc 2 474 3
 1165 090a 07F16003 		add	r3, r7, #96
 1166 090e 1B68     		ldr	r3, [r3]
 1167 0910 1B68     		ldr	r3, [r3]
 1168 0912 1B68     		ldr	r3, [r3]	@ unaligned
 1169 0914 1A46     		mov	r2, r3
 1170 0916 07F13C03 		add	r3, r7, #60
 1171 091a 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 1172              		.loc 2 475 9
 1173 091c 07F16003 		add	r3, r7, #96
 1174 0920 1B68     		ldr	r3, [r3]
 1175 0922 1B68     		ldr	r3, [r3]
 1176 0924 1A1D     		adds	r2, r3, #4
 1177 0926 07F16003 		add	r3, r7, #96
 1178 092a 1B68     		ldr	r3, [r3]
 1179 092c 1A60     		str	r2, [r3]
 1180              		.loc 2 477 10
 1181 092e 07F13C03 		add	r3, r7, #60
 1182 0932 1B68     		ldr	r3, [r3]
 1183              	.LBE83:
 1184              	.LBE82:
 446:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = read_q15x2_ia ((q15_t **) &pInB);
 1185              		.loc 1 446 18
 1186 0934 C7F81C31 		str	r3, [r7, #284]
 1187 0938 07F15003 		add	r3, r7, #80
 1188 093c 7B66     		str	r3, [r7, #100]
 1189              	.LBB84:
 1190              	.LBB85:
 474:./Libraries/CMSIS/DSP/Include/arm_math.h ****   *pQ15 += 2;
 1191              		.loc 2 474 3
 1192 093e 7B6E     		ldr	r3, [r7, #100]
 1193 0940 1B68     		ldr	r3, [r3]
 1194 0942 1B68     		ldr	r3, [r3]	@ unaligned
 1195 0944 1A46     		mov	r2, r3
 1196 0946 07F13803 		add	r3, r7, #56
 1197 094a 1A60     		str	r2, [r3]
 475:./Libraries/CMSIS/DSP/Include/arm_math.h **** 
 1198              		.loc 2 475 9
 1199 094c 7B6E     		ldr	r3, [r7, #100]
 1200 094e 1B68     		ldr	r3, [r3]
 1201 0950 1A1D     		adds	r2, r3, #4
 1202 0952 7B6E     		ldr	r3, [r7, #100]
 1203 0954 1A60     		str	r2, [r3]
 1204              		.loc 2 477 10
 1205 0956 07F13803 		add	r3, r7, #56
 1206 095a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccVBkeMF.s 			page 74


 1207              	.LBE85:
 1208              	.LBE84:
 447:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = read_q15x2_ia ((q15_t **) &pInB);
 1209              		.loc 1 447 18
 1210 095c C7F81831 		str	r3, [r7, #280]
 448:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 449:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 1211              		.loc 1 449 18
 1212 0960 D7F82411 		ldr	r1, [r7, #292]
 1213 0964 D7F81C21 		ldr	r2, [r7, #284]
 1214 0968 D7F85C31 		ldr	r3, [r7, #348]
 1215 096c 7967     		str	r1, [r7, #116]
 1216 096e 3A67     		str	r2, [r7, #112]
 1217 0970 FB66     		str	r3, [r7, #108]
 1218              	.LBB86:
 1219              	.LBB87:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1220              		.loc 3 1993 3
 1221 0972 7B6F     		ldr	r3, [r7, #116]
 1222 0974 3A6F     		ldr	r2, [r7, #112]
 1223 0976 F96E     		ldr	r1, [r7, #108]
 1224              		.syntax unified
 1225              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1226 0978 23FB0213 		smlad r3, r3, r2, r1
 1227              	@ 0 "" 2
 1228              		.thumb
 1229              		.syntax unified
 1230 097c BB66     		str	r3, [r7, #104]
 1231              		.loc 3 1994 9
 1232 097e BB6E     		ldr	r3, [r7, #104]
 1233              	.LBE87:
 1234              	.LBE86:
 1235              		.loc 1 449 16
 1236 0980 C7F85C31 		str	r3, [r7, #348]
 450:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA2, inB2, sum);
 1237              		.loc 1 450 18
 1238 0984 D7F82011 		ldr	r1, [r7, #288]
 1239 0988 D7F81821 		ldr	r2, [r7, #280]
 1240 098c D7F85C31 		ldr	r3, [r7, #348]
 1241 0990 C7F88410 		str	r1, [r7, #132]
 1242 0994 C7F88020 		str	r2, [r7, #128]
 1243 0998 FB67     		str	r3, [r7, #124]
 1244              	.LBB88:
 1245              	.LBB89:
1993:./Libraries/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 1246              		.loc 3 1993 3
 1247 099a D7F88430 		ldr	r3, [r7, #132]
 1248 099e D7F88020 		ldr	r2, [r7, #128]
 1249 09a2 F96F     		ldr	r1, [r7, #124]
 1250              		.syntax unified
 1251              	@ 1993 "./Libraries/CMSIS/Core/Include/cmsis_gcc.h" 1
 1252 09a4 23FB0213 		smlad r3, r3, r2, r1
 1253              	@ 0 "" 2
 1254              		.thumb
 1255              		.syntax unified
 1256 09a8 BB67     		str	r3, [r7, #120]
 1257              		.loc 3 1994 9
ARM GAS  /tmp/ccVBkeMF.s 			page 75


 1258 09aa BB6F     		ldr	r3, [r7, #120]
 1259              	.LBE89:
 1260              	.LBE88:
 1261              		.loc 1 450 16
 1262 09ac C7F85C31 		str	r3, [r7, #348]
 451:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 452:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement loop counter */
 453:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1263              		.loc 1 453 17
 1264 09b0 D7F84831 		ldr	r3, [r7, #328]
 1265 09b4 013B     		subs	r3, r3, #1
 1266 09b6 C7F84831 		str	r3, [r7, #328]
 1267              	.L39:
 442:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 1268              		.loc 1 442 15
 1269 09ba D7F84831 		ldr	r3, [r7, #328]
 1270 09be 002B     		cmp	r3, #0
 1271 09c0 7FF466AF 		bne	.L46
 454:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 455:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 456:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA % 4U;
 1272              		.loc 1 456 27
 1273 09c4 B7F82A31 		ldrh	r3, [r7, #298]
 1274              		.loc 1 456 16
 1275 09c8 03F00303 		and	r3, r3, #3
 1276 09cc C7F84831 		str	r3, [r7, #328]
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0U) {
 1277              		.loc 1 457 15
 1278 09d0 1EE0     		b	.L47
 1279              	.L48:
 458:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 1280              		.loc 1 458 32
 1281 09d2 07F15403 		add	r3, r7, #84
 1282 09d6 1B68     		ldr	r3, [r3]
 1283 09d8 991C     		adds	r1, r3, #2
 1284 09da 07F15402 		add	r2, r7, #84
 1285 09de 1160     		str	r1, [r2]
 1286              		.loc 1 458 27
 1287 09e0 B3F90030 		ldrsh	r3, [r3]
 1288              		.loc 1 458 18
 1289 09e4 1846     		mov	r0, r3
 1290              		.loc 1 458 44
 1291 09e6 07F15003 		add	r3, r7, #80
 1292 09ea 1B68     		ldr	r3, [r3]
 1293 09ec 991C     		adds	r1, r3, #2
 1294 09ee 07F15002 		add	r2, r7, #80
 1295 09f2 1160     		str	r1, [r2]
 1296              		.loc 1 458 39
 1297 09f4 B3F90030 		ldrsh	r3, [r3]
 1298              		.loc 1 458 36
 1299 09f8 03FB00F3 		mul	r3, r3, r0
 1300              		.loc 1 458 15
 1301 09fc D7F85C21 		ldr	r2, [r7, #348]
 1302 0a00 1344     		add	r3, r3, r2
 1303 0a02 C7F85C31 		str	r3, [r7, #348]
 459:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 460:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
ARM GAS  /tmp/ccVBkeMF.s 			page 76


 1304              		.loc 1 460 17
 1305 0a06 D7F84831 		ldr	r3, [r7, #328]
 1306 0a0a 013B     		subs	r3, r3, #1
 1307 0a0c C7F84831 		str	r3, [r7, #328]
 1308              	.L47:
 457:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 1309              		.loc 1 457 15
 1310 0a10 D7F84831 		ldr	r3, [r7, #328]
 1311 0a14 002B     		cmp	r3, #0
 1312 0a16 DCD1     		bne	.L48
 461:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 462:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 463:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store result in destination buffer */
 464:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++ = (q15_t) (sum  >> 15);
 1313              		.loc 1 464 31
 1314 0a18 D7F85C31 		ldr	r3, [r7, #348]
 1315 0a1c D913     		asrs	r1, r3, #15
 1316              		.loc 1 464 12
 1317 0a1e D7F85831 		ldr	r3, [r7, #344]
 1318 0a22 9A1C     		adds	r2, r3, #2
 1319 0a24 C7F85821 		str	r2, [r7, #344]
 1320              		.loc 1 464 17
 1321 0a28 0AB2     		sxth	r2, r1
 1322              		.loc 1 464 15
 1323 0a2a 1A80     		strh	r2, [r3]	@ movhi
 465:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 466:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement column loop counter */
 467:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 1324              		.loc 1 467 12
 1325 0a2c D7F85431 		ldr	r3, [r7, #340]
 1326 0a30 013B     		subs	r3, r3, #1
 1327 0a32 C7F85431 		str	r3, [r7, #340]
 1328              	.L38:
 430:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 1329              		.loc 1 430 13
 1330 0a36 D7F85431 		ldr	r3, [r7, #340]
 1331 0a3a 002B     		cmp	r3, #0
 1332 0a3c 7FF40EAF 		bne	.L49
 1333              	.L37:
 468:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 469:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 470:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 471:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 472:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 473:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Set status as ARM_MATH_SUCCESS */
 474:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****     status = ARM_MATH_SUCCESS;
 1334              		.loc 1 474 12
 1335 0a40 0023     		movs	r3, #0
 1336 0a42 87F81731 		strb	r3, [r7, #279]
 475:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   }
 476:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 477:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   /* Return to application */
 478:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c ****   return (status);
 1337              		.loc 1 478 10
 1338 0a46 97F91731 		ldrsb	r3, [r7, #279]
 479:./Libraries/CMSIS/DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c **** }
 1339              		.loc 1 479 1
ARM GAS  /tmp/ccVBkeMF.s 			page 77


 1340 0a4a 1846     		mov	r0, r3
 1341 0a4c 07F5B077 		add	r7, r7, #352
 1342              	.LCFI3:
 1343              		.cfi_def_cfa_offset 8
 1344 0a50 BD46     		mov	sp, r7
 1345              	.LCFI4:
 1346              		.cfi_def_cfa_register 13
 1347              		@ sp needed
 1348 0a52 90BC     		pop	{r4, r7}
 1349              	.LCFI5:
 1350              		.cfi_restore 7
 1351              		.cfi_restore 4
 1352              		.cfi_def_cfa_offset 0
 1353 0a54 7047     		bx	lr
 1354              		.cfi_endproc
 1355              	.LFE145:
 1357              		.text
 1358              	.Letext0:
 1359              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1360              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1361              		.file 6 "/usr/include/newlib/sys/_types.h"
 1362              		.file 7 "/usr/include/newlib/sys/reent.h"
 1363              		.file 8 "/usr/include/newlib/sys/lock.h"
 1364              		.file 9 "/usr/include/newlib/math.h"
ARM GAS  /tmp/ccVBkeMF.s 			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_mat_mult_fast_q15.c
     /tmp/ccVBkeMF.s:17     .text.arm_mat_mult_fast_q15:0000000000000000 $t
     /tmp/ccVBkeMF.s:25     .text.arm_mat_mult_fast_q15:0000000000000000 arm_mat_mult_fast_q15

NO UNDEFINED SYMBOLS
